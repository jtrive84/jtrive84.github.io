<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>The Pleasure of Finding Things Out: A blog by James Triveri</title>
<link>https://www.jtrive.com/</link>
<atom:link href="https://www.jtrive.com/index.xml" rel="self" type="application/rss+xml"/>
<description>A technical blog by James Triveri&quot;</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Mon, 14 Oct 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>Determining Distance to Coastline for Policy Locations Using GeoPandas</title>
  <link>https://www.jtrive.com/posts/distance-to-coastline/distance-to-coastline.html</link>
  <description><![CDATA[ 





<p>Knowing the distance to coastline for an exposure is crucial for insurance rating applications because it helps insurers assess the risk of hazards like hurricanes, storm surges, and flooding, which are much more prevalent in coastal areas. This information allows insurers to make informed decisions about pricing, underwriting and reinsurance. Properties closer to the coast are generally at higher risk, leading to higher premiums for these properties. Insurance rating plans may use distance to coastline directly as an explanatory variable, with factors inversely proportional to distance to coastline.</p>
<p>This article walks through how GeoPandas can be used to calculate distance to coastline for a collection of simulated latitude-longitude pairs in the Florida region, and how these exposure locations can be assigned to different risk levels based on the distance calculation.</p>
<p><br></p>
<section id="coastal-shapefiles" class="level3">
<h3 class="anchored" data-anchor-id="coastal-shapefiles">Coastal Shapefiles</h3>
<p>The United States Census Bureau provides shapefiles for state, county and ZCTA boundaries as well as roads, rails an coastlines (see full list <a href="https://www2.census.gov/geo/tiger/TIGER2024/2024_TL_Shapefiles_File_Name_Definitions.pdf">here</a>). Shapefiles are a widely-used geospatial vector data format that store the geometric location and attribute information of geographic features, which can be represented as points, lines, or polygons.</p>
<p>We being by downloading the COASTLINE zip archive available on the Census Bureau’s <a href="https://www2.census.gov/geo/tiger/TIGER2024/COASTLINE/">FTP site</a>. The COASTLINE shapefile is loaded into GeoPandas (the STATE shapefile is also loaded for later use). We limit our analysis to the continental United States and filter out the Great Lakes. Inspecting the first few records:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geopandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gpd</span>
<span id="cb1-5"></span>
<span id="cb1-6">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-7">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-8">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-9">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"></span>
<span id="cb1-12">coastline_shp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tl_2024_us_coastline.zip"</span></span>
<span id="cb1-13">us_shp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tl_2024_us_state.zip"</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bounding box of lower 48 states. Remove Great Lakes.</span></span>
<span id="cb1-17">xmin, ymin, xmax, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.6</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-18">coast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(coastline_shp)</span>
<span id="cb1-19">coast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coast.cx[xmin:xmax, ymin:ymax]</span>
<span id="cb1-20">coast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coast[coast.NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Great Lakes"</span>].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># State boundaries.</span></span>
<span id="cb1-23">states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(us_shp)[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NAME"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geometry"</span>]]</span>
<span id="cb1-24">states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> states.cx[xmin:xmax, ymin:ymax].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"coast.shape : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>coast<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"states.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>states<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-28"></span>
<span id="cb1-29">coast.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>coast.shape : (2916, 3)
states.shape: (49, 2)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">NAME</th>
<th data-quarto-table-cell-role="th">MTFCC</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-80.88368 32.03912, -80.88365 32.0...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-70.66800 41.51199, -70.65663 41.5...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-76.58108 38.09572, -76.58184 38.0...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-73.75518 40.58565, -73.75517 40.5...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-76.15615 38.63324, -76.15070 38.6...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-76.53289 39.20776, -76.53298 39.2...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-73.93653 40.56644, -73.93594 40.5...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-81.10208 29.42706, -81.10215 29.4...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-71.89236 41.32922, -71.89293 41.3...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-75.31239 38.94595, -75.31239 38.9...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>The coastline shapefile is comprised of ~3,000 LINESTRING objects. Let’s get a count of geometries by NAME:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">coast[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NAME"</span>].value_counts().sort_index()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>NAME
Atlantic     941
Gulf         647
Pacific     1328
Name: count, dtype: int64</code></pre>
</div>
</div>
<p><br></p>
<p><br></p>
<p>We can visualize the coastline by calling the <code>coast</code> GeoDataFrame’s <code>plot</code> method:</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-3"></span>
<span id="cb5-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-5">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lower 48 Coastline"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb5-6">coast.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span>
<span id="cb5-7">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb5-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/distance-to-coastline/distance-to-coastline_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>To overlay the coastline along with state boundaries, download the STATE shapefile from the Census Bureau’s FTP site and plot them together:</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-3">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lower 48 States with Coastline"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb6-4">coast.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.50</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb6-5">states.boundary.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span>)</span>
<span id="cb6-6">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb6-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/distance-to-coastline/distance-to-coastline_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Let’s next generate synthetic latitude-longitude pairs from within the Florida bounding envelope. The envelope bounds can be obtained from Florida’s geometry as follows:</p>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get bounding box for each state.</span></span>
<span id="cb7-4">states[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> states.geometry.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> gg: gg.envelope.bounds)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put coordinates in separate columns.</span></span>
<span id="cb7-7">states[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat1"</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(states.bbox.tolist(), index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>states.index)</span>
<span id="cb7-8"></span>
<span id="cb7-9">states.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">NAME</th>
<th data-quarto-table-cell-role="th">geometry</th>
<th data-quarto-table-cell-role="th">bbox</th>
<th data-quarto-table-cell-role="th">lon0</th>
<th data-quarto-table-cell-role="th">lat0</th>
<th data-quarto-table-cell-role="th">lon1</th>
<th data-quarto-table-cell-role="th">lat1</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>West Virginia</td>
<td>POLYGON ((-77.75438 39.33346, -77.75422 39.333...</td>
<td>(-82.644591, 37.20154, -77.719519, 40.638801)</td>
<td>-82.644591</td>
<td>37.201540</td>
<td>-77.719519</td>
<td>40.638801</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Florida</td>
<td>MULTIPOLYGON (((-83.10874 24.62949, -83.10711 ...</td>
<td>(-87.634896, 24.396308, -79.974306, 31.000968)</td>
<td>-87.634896</td>
<td>24.396308</td>
<td>-79.974306</td>
<td>31.000968</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Illinois</td>
<td>POLYGON ((-87.89243 38.28285, -87.89334 38.282...</td>
<td>(-91.513079, 36.970298, -87.019935, 42.508481)</td>
<td>-91.513079</td>
<td>36.970298</td>
<td>-87.019935</td>
<td>42.508481</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Minnesota</td>
<td>POLYGON ((-95.31991 48.99892, -95.31778 48.998...</td>
<td>(-97.239093, 43.499361, -89.483385, 49.384479)</td>
<td>-97.239093</td>
<td>43.499361</td>
<td>-89.483385</td>
<td>49.384479</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Maryland</td>
<td>POLYGON ((-75.75600 39.24607, -75.75579 39.243...</td>
<td>(-79.487651, 37.886605, -74.986282, 39.723037)</td>
<td>-79.487651</td>
<td>37.886605</td>
<td>-74.986282</td>
<td>39.723037</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Let’s draw the bounding region using folium:</p>
<div id="cell-13" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium </span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Florida bounding box. </span></span>
<span id="cb8-5">lon0, lat0, lon1, lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> states[states.NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Florida"</span>].bbox.item()</span>
<span id="cb8-6"></span>
<span id="cb8-7">mlat, mlon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, (lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lon1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-8"></span>
<span id="cb8-9">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(</span>
<span id="cb8-10">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mlat, mlon], </span>
<span id="cb8-11">    zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, </span>
<span id="cb8-12">    zoom_control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb8-13">    no_touch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb8-14">    tiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OpenStreetMap"</span></span>
<span id="cb8-15">    )</span>
<span id="cb8-16"></span>
<span id="cb8-17">folium.Rectangle(</span>
<span id="cb8-18">    [(lat0, lon0), (lat1, lon1)], </span>
<span id="cb8-19">    fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span></span>
<span id="cb8-20">    ).add_to(m)</span>
<span id="cb8-21"></span>
<span id="cb8-22">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = true;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_b085548776e6f6d8e2de11ed5f5411e3 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_b085548776e6f6d8e2de11ed5f5411e3&quot; ></div>
        
</body>
<script>
    
    
            var map_b085548776e6f6d8e2de11ed5f5411e3 = L.map(
                &quot;map_b085548776e6f6d8e2de11ed5f5411e3&quot;,
                {
                    center: [27.698638000000003, -83.80460099999999],
                    crs: L.CRS.EPSG3857,
                    zoom: 6,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_b29acd02bc54b8b41546f18283e121e3 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_b29acd02bc54b8b41546f18283e121e3.addTo(map_b085548776e6f6d8e2de11ed5f5411e3);
        
    
            var rectangle_f2e7711307b0494239b6457cdced4d14 = L.rectangle(
                [[24.396308, -87.634896], [31.000968, -79.974306]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.05, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_b085548776e6f6d8e2de11ed5f5411e3);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>Sampling from the bounding region highlighted above will result in many points in the Gulf. Let’s narrow the sampling space:</p>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2">lon0, lat0, lon1, lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">80.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">81.75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4">mlat, mlon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, (lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lon1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb9-5"></span>
<span id="cb9-6">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(</span>
<span id="cb9-7">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mlat, mlon], </span>
<span id="cb9-8">    zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, </span>
<span id="cb9-9">    zoom_control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb9-10">    no_touch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb9-11">    tiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OpenStreetMap"</span></span>
<span id="cb9-12">    )</span>
<span id="cb9-13"></span>
<span id="cb9-14">folium.Rectangle(</span>
<span id="cb9-15">    [(lat0, lon0), (lat1, lon1)], </span>
<span id="cb9-16">    fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span></span>
<span id="cb9-17">    ).add_to(m)</span>
<span id="cb9-18"></span>
<span id="cb9-19">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = true;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_41f22baf1f1ce21646580c8d02ec7364 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_41f22baf1f1ce21646580c8d02ec7364&quot; ></div>
        
</body>
<script>
    
    
            var map_41f22baf1f1ce21646580c8d02ec7364 = L.map(
                &quot;map_41f22baf1f1ce21646580c8d02ec7364&quot;,
                {
                    center: [27.0, -81.125],
                    crs: L.CRS.EPSG3857,
                    zoom: 7,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_06409f2d352ee489d7800ff4b79d16bf = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_06409f2d352ee489d7800ff4b79d16bf.addTo(map_41f22baf1f1ce21646580c8d02ec7364);
        
    
            var rectangle_5f9d2b26e48876434c42b65607e54397 = L.rectangle(
                [[26.0, -80.5], [28.0, -81.75]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.05, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_41f22baf1f1ce21646580c8d02ec7364);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample within bounds defined by lat0, lon0, lat1, lon1. </span></span>
<span id="cb10-3"></span>
<span id="cb10-4">nbr_locations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb10-5"></span>
<span id="cb10-6">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb10-7"></span>
<span id="cb10-8">rlats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lat0, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lat1, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nbr_locations)</span>
<span id="cb10-9">rlons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lon1, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lon0, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nbr_locations)</span>
<span id="cb10-10">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(rlats, rlons))</span></code></pre></div>
</div>
<p><br></p>
<p>Visualizing the synthetic locations:</p>
<div id="cell-18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mlat, mlon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> lat, lon <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> points:</span>
<span id="cb11-5"></span>
<span id="cb11-6">    folium.CircleMarker(</span>
<span id="cb11-7">        location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], </span>
<span id="cb11-8">        radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb11-9">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb11-10">        fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb11-11">        fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-12">        fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-13">        ).add_to(m)</span>
<span id="cb11-14"></span>
<span id="cb11-15">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_348f00edc8bd0d742423a0d4215598b1 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_348f00edc8bd0d742423a0d4215598b1&quot; ></div>
        
</body>
<script>
    
    
            var map_348f00edc8bd0d742423a0d4215598b1 = L.map(
                &quot;map_348f00edc8bd0d742423a0d4215598b1&quot;,
                {
                    center: [27.0, -81.125],
                    crs: L.CRS.EPSG3857,
                    zoom: 8,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_b1296c489438f70917d3cbc788e716f4 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_b1296c489438f70917d3cbc788e716f4.addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_0260d5053589dbacf609e47c9c818529 = L.circleMarker(
                [26.15842498103677, -81.6978452754149],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_608f932af225bc26c5bf162741515b31 = L.circleMarker(
                [27.308367243835498, -80.74351022614646],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_4d2dc31b9d14167f30e3646ea655f981 = L.circleMarker(
                [26.050159830178664, -81.22629395965097],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_c66b99a826e6267b14bc8417496cafdd = L.circleMarker(
                [26.896432196124945, -80.6823476427752],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_d071cade3a70d18434f755e0ba40736b = L.circleMarker(
                [27.40773608152318, -81.55620947759367],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_d337768dd6086723dc42232b83288082 = L.circleMarker(
                [26.55187691648845, -80.90280316359555],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_0f4d0f6d4c3acac774b8aab63ef0f80e = L.circleMarker(
                [26.301071098731754, -81.52100045189212],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_881e6cafc8c4f6b6e0f1f032543c2fd3 = L.circleMarker(
                [27.435718092142665, -81.49914451288832],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_769cd3939738e5787928e0de6d1da388 = L.circleMarker(
                [27.784378345442054, -80.59076499724968],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_3a8eb7ef5392d2589547116cb02432fa = L.circleMarker(
                [27.635398626773437, -81.3898362844697],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_cff09513b6eb3391a9cd378834517646 = L.circleMarker(
                [27.37937557184798, -81.4286044623964],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_0d432798bf9841502364cf20079e3973 = L.circleMarker(
                [26.862971977202136, -80.54717925180627],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_14a083fb249caa095dba49b5cc6b61d3 = L.circleMarker(
                [27.98142795111799, -81.09169770076494],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_cb40c1e78b02fac8bf7b43d8a72ffacc = L.circleMarker(
                [26.365577838913776, -80.8990291114624],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_6f5a1c6cdfc715e3ab21ca62e3018624 = L.circleMarker(
                [26.131355757954836, -81.16027753441861],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_2c216915cba8f2ee19dcba38ad6631d4 = L.circleMarker(
                [26.382999780154904, -81.70903306152387],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_e5cf40f0822d79ec40f736e44a12593d = L.circleMarker(
                [27.972984413059, -80.50657443311286],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_7d00f2c23dcf6465efd328a05b4395ba = L.circleMarker(
                [26.086354128867725, -81.48977717606184],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_b5c9ca48f3b40e6887971267f98897c9 = L.circleMarker(
                [26.943671120744057, -80.51934697293223],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_19fbb5b077f4c17ecfa4acaa3e1773cc = L.circleMarker(
                [26.24664396062321, -81.43299865566368],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_68b836acb93d31ef85c8901a0408afc8 = L.circleMarker(
                [27.243754691593953, -81.40006512830422],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_8b85744d81a2b98c74093d7edd0db848 = L.circleMarker(
                [26.78781864252158, -80.66418638533959],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_93b35ab23f371b2801505b17250d4aa9 = L.circleMarker(
                [26.605717123010912, -81.13339074943397],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_f2fe59cd77cc1af1630d81dd8bae1746 = L.circleMarker(
                [27.82472127183081, -81.03218135189428],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_caa0a377e63c2f919c05dc5f7ac810f5 = L.circleMarker(
                [26.307063400374936, -81.27626966439352],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_fd3b4d1129b3e65dfdb77b021bb1dae4 = L.circleMarker(
                [27.991454895701796, -81.17887100872782],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_ac4fa0394c3457cf5545522e86a6b8ae = L.circleMarker(
                [26.544773024554832, -81.60667452193859],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_d5b3cb9a0633a2f54e6bad3c4d975b1b = L.circleMarker(
                [26.886457616788025, -80.91721728171257],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_d251a1ac31512d167e3cece18bda1aca = L.circleMarker(
                [27.714852856581068, -81.64493695441304],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_bcd903be1aba3aab6f9a8b287bfc6f43 = L.circleMarker(
                [27.2850774684598, -81.43364197265868],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_d0fec00eafb18b21413bd8a00be9c077 = L.circleMarker(
                [27.473269702793658, -80.50510790437552],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_e41954dfe2b1a83bf83f08a439b25685 = L.circleMarker(
                [26.9126301314854, -81.02473504499652],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_3c9e23c39f8b2dda81dd8003b06409f7 = L.circleMarker(
                [26.19773048060356, -81.31384553050141],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_fffaa85f3ecdb7058f2fcd502f39ff3a = L.circleMarker(
                [26.713303385914497, -80.69627570716136],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_814b1be232a7be39c34fa16db7c9d8d0 = L.circleMarker(
                [27.413800924899405, -81.22869767203825],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_b027bf45a9e8b482835174bdf7465e31 = L.circleMarker(
                [26.319682526771178, -80.52723729475458],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_9093299bbaad743ea0dd8cf75f986e56 = L.circleMarker(
                [26.076820898509965, -81.02010416275705],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_5080ec996f668540395c0aa93d9b9786 = L.circleMarker(
                [26.366453559477833, -81.66293509555179],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_443407e1de3b587b3822418dfe78b323 = L.circleMarker(
                [27.565561426877956, -80.86111841233041],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_fe8a9f61abbf8f1b05c8f9c379410b80 = L.circleMarker(
                [26.694221446702628, -81.53376936951858],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_28c69a091e392341aa91053a02f291ab = L.circleMarker(
                [26.81413637848975, -81.32644612584131],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_a89971244312113648480dc93e81a3de = L.circleMarker(
                [26.61547413746954, -81.33572363043359],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_467ac3e9c90a06d8b94249f2e92a7f3b = L.circleMarker(
                [26.343132637377927, -81.35686888035839],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_80435f2a1954b66de76609b887f739c2 = L.circleMarker(
                [26.311171111000064, -80.8179971956485],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_2c3d61f4f60f9eb3a51f338682cdb61c = L.circleMarker(
                [27.226452898410354, -80.50847148940952],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_2e148d2724cbaa5b74b28badb3674287 = L.circleMarker(
                [26.189330375816013, -81.6619851577331],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_71bc8b63551c04b51baf794313dfaa0a = L.circleMarker(
                [26.248784399318982, -80.7821785668828],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_1a504d726cb00560bfdd49e4c94ec5df = L.circleMarker(
                [27.189284967955047, -81.01943246870752],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_14e5cb854d6a9e62b6ade8055d1e79ce = L.circleMarker(
                [27.16418198699115, -81.62240296924504],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_cd943d4aa878a7e98c46ba3de17c4118 = L.circleMarker(
                [27.016995167468394, -81.61079237146735],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>Next the <code>points</code> list needs to be represented as a GeoDataFrame, using the generated points as the geometry. We set <code>"crs=EPSG:4326"</code> representing longitude-latitude pairs. A policy_id is included as an identifier for each point.</p>
<div id="cell-20" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2">dfpoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb12-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"policy_id"</span>: [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(ii).zfill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(points))],</span>
<span id="cb12-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>: rlats, </span>
<span id="cb12-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>: rlons, </span>
<span id="cb12-6">})</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create GeoDataFrame.</span></span>
<span id="cb12-9">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.GeoDataFrame(</span>
<span id="cb12-10">    dfpoints,</span>
<span id="cb12-11">    geometry<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gpd.points_from_xy(dfpoints.lon, dfpoints.lat),</span>
<span id="cb12-12">    crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EPSG:4326"</span></span>
<span id="cb12-13">)</span>
<span id="cb12-14"></span>
<span id="cb12-15">points.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">policy_id</th>
<th data-quarto-table-cell-role="th">lat</th>
<th data-quarto-table-cell-role="th">lon</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0000000</td>
<td>26.158425</td>
<td>-81.697845</td>
<td>POINT (-81.69785 26.15842)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0000001</td>
<td>27.308367</td>
<td>-80.743510</td>
<td>POINT (-80.74351 27.30837)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0000002</td>
<td>26.050160</td>
<td>-81.226294</td>
<td>POINT (-81.22629 26.05016)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0000003</td>
<td>26.896432</td>
<td>-80.682348</td>
<td>POINT (-80.68235 26.89643)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0000004</td>
<td>27.407736</td>
<td>-81.556209</td>
<td>POINT (-81.55621 27.40774)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>0000005</td>
<td>26.551877</td>
<td>-80.902803</td>
<td>POINT (-80.90280 26.55188)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>0000006</td>
<td>26.301071</td>
<td>-81.521000</td>
<td>POINT (-81.52100 26.30107)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>0000007</td>
<td>27.435718</td>
<td>-81.499145</td>
<td>POINT (-81.49914 27.43572)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>0000008</td>
<td>27.784378</td>
<td>-80.590765</td>
<td>POINT (-80.59076 27.78438)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>0000009</td>
<td>27.635399</td>
<td>-81.389836</td>
<td>POINT (-81.38984 27.63540)</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>With both the coastline shapefile and point data represented as GeoDataFrames, we execute the <code>sjoin_nearest</code> spatial join to get the distance from each point to the nearest coastline. First we need to set the crs to a projected coordinate system so the distances are returned in units of meters instead of degrees. Projected coordinate systems use linear units like meters or feet, which makes it easier to perform precise spatial measurements. Here we opt for the Conus Albers equal area conic projection (EPSG:5069).</p>
<p>In the call to <code>sjoin_nearest</code>, we specify “meters” for the <code>distance_col</code> argument. This column will hold the distance to the coastline for each point in <code>points</code> in units of meters. A miles column is added after the join.</p>
<div id="cell-22" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert from GPS to  Conus Albers. </span></span>
<span id="cb13-3">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> points.to_crs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EPSG:5069"</span>)</span>
<span id="cb13-4">coast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coast.to_crs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EPSG:5069"</span>)</span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform spatial join. Covert meters to miles. </span></span>
<span id="cb13-7">gdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.sjoin_nearest(points, coast, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, distance_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meters"</span>)</span>
<span id="cb13-8">gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"miles"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meters"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.000621371</span></span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get min, max and average distance to coast line.</span></span>
<span id="cb13-11">min_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.miles.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()</span>
<span id="cb13-12">max_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.miles.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb13-13">avg_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.miles.mean()</span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"min. distance to coastline: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>min_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"max. distance to coastline: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"avg. distance to coastline: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>avg_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>min. distance to coastline: 0.20197535859716287
max. distance to coastline: 65.35183791451661
avg. distance to coastline: 35.26215239057489</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="rate-group-based-on-distance-to-coastline" class="level3">
<h3 class="anchored" data-anchor-id="rate-group-based-on-distance-to-coastline">Rate Group Based on Distance to Coastline</h3>
<p>Let’s imagine a hypothetical rating plan that uses the following distances from the coastline to determine rates:</p>
<ul>
<li>0 - 5 miles: very high risk</li>
<li>5 - 25 miles: high risk</li>
<li>25 - 50 miles: medium risk</li>
<li>greater than 50 miles: low risk</li>
</ul>
<p><br></p>
<p>A rolling join via <code>merge_asof</code> can be used to select the last row in the right DataFrame (group thresholds) whose <code>on</code> key is less than or equal to <code>gdf</code>’s key, which will be “miles” in both DataFrames.</p>
<div id="cell-24" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create dfgroups DataFrame. </span></span>
<span id="cb15-3">dfgroups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb15-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"risk"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"very high"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low"</span>],</span>
<span id="cb15-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"miles"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.</span>]</span>
<span id="cb15-6">})</span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign risk group to each policy location.</span></span>
<span id="cb15-9">gdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"miles"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb15-10">gdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge_asof(gdf, dfgroups, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"miles"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"backward"</span>)</span>
<span id="cb15-11"></span>
<span id="cb15-12">gdf.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">policy_id</th>
<th data-quarto-table-cell-role="th">lat</th>
<th data-quarto-table-cell-role="th">lon</th>
<th data-quarto-table-cell-role="th">geometry</th>
<th data-quarto-table-cell-role="th">index_right</th>
<th data-quarto-table-cell-role="th">NAME</th>
<th data-quarto-table-cell-role="th">MTFCC</th>
<th data-quarto-table-cell-role="th">meters</th>
<th data-quarto-table-cell-role="th">miles</th>
<th data-quarto-table-cell-role="th">risk</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0000016</td>
<td>27.972984</td>
<td>-80.506574</td>
<td>POINT (1523126.311 669355.565)</td>
<td>176</td>
<td>Atlantic</td>
<td>L4150</td>
<td>325.047932</td>
<td>0.201975</td>
<td>very high</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0000000</td>
<td>26.158425</td>
<td>-81.697845</td>
<td>POINT (1436901.833 453402.683)</td>
<td>2813</td>
<td>Gulf</td>
<td>L4150</td>
<td>11201.767881</td>
<td>6.960454</td>
<td>high</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0000015</td>
<td>26.383000</td>
<td>-81.709033</td>
<td>POINT (1432089.414 477631.030)</td>
<td>2817</td>
<td>Gulf</td>
<td>L4150</td>
<td>14922.894431</td>
<td>9.272654</td>
<td>high</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0000045</td>
<td>26.189330</td>
<td>-81.661985</td>
<td>POINT (1439966.962 457301.849)</td>
<td>2813</td>
<td>Gulf</td>
<td>L4150</td>
<td>15292.789125</td>
<td>9.502496</td>
<td>high</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0000008</td>
<td>27.784378</td>
<td>-80.590765</td>
<td>POINT (1518283.776 647462.840)</td>
<td>211</td>
<td>Atlantic</td>
<td>L4150</td>
<td>16412.307856</td>
<td>10.198132</td>
<td>high</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>0000037</td>
<td>26.366454</td>
<td>-81.662935</td>
<td>POINT (1436947.116 476528.844)</td>
<td>2813</td>
<td>Gulf</td>
<td>L4150</td>
<td>18665.871130</td>
<td>11.598431</td>
<td>high</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>0000030</td>
<td>27.473270</td>
<td>-80.505108</td>
<td>POINT (1532219.823 614970.878)</td>
<td>10</td>
<td>Atlantic</td>
<td>L4150</td>
<td>20055.344308</td>
<td>12.461809</td>
<td>high</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>0000017</td>
<td>26.086354</td>
<td>-81.489777</td>
<td>POINT (1458848.059 448748.018)</td>
<td>2813</td>
<td>Gulf</td>
<td>L4150</td>
<td>24280.862758</td>
<td>15.087424</td>
<td>high</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>0000044</td>
<td>27.226453</td>
<td>-80.508471</td>
<td>POINT (1536305.431 588071.282)</td>
<td>10</td>
<td>Atlantic</td>
<td>L4150</td>
<td>29966.032034</td>
<td>18.620023</td>
<td>high</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>0000006</td>
<td>26.301071</td>
<td>-81.521000</td>
<td>POINT (1452153.395 471583.300)</td>
<td>2813</td>
<td>Gulf</td>
<td>L4150</td>
<td>30913.531896</td>
<td>19.208772</td>
<td>high</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Counting the number of policies per risk group:</p>
<div id="cell-26" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">gdf.risk.value_counts().sort_index()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>risk
high         12
low          10
medium       27
very high     1
Name: count, dtype: int64</code></pre>
</div>
</div>
<p><br></p>
<p>Finally, we can assign each risk a different color and visualize the resulting risk groups with folium:</p>
<div id="cell-28" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Colors for each group.</span></span>
<span id="cb18-3">dcolors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb18-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"very high"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f40002"</span>,</span>
<span id="cb18-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff721f"</span>,</span>
<span id="cb18-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fafc15"</span>,</span>
<span id="cb18-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#268a6d"</span></span>
<span id="cb18-8">}</span>
<span id="cb18-9"></span>
<span id="cb18-10">gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"risk"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dcolors)</span>
<span id="cb18-11"></span>
<span id="cb18-12">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mlat, mlon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb18-13"></span>
<span id="cb18-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> gdf.itertuples():</span>
<span id="cb18-15">    lat, lon, color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tt.lat, tt.lon, tt.color</span>
<span id="cb18-16">    folium.CircleMarker(</span>
<span id="cb18-17">        location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon],</span>
<span id="cb18-18">        radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, </span>
<span id="cb18-19">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color, </span>
<span id="cb18-20">        fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color, </span>
<span id="cb18-21">        fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb18-22">        fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-23">        ).add_to(m)</span>
<span id="cb18-24"></span>
<span id="cb18-25">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_f1774b86214832d08db672d3b1789192 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_f1774b86214832d08db672d3b1789192&quot; ></div>
        
</body>
<script>
    
    
            var map_f1774b86214832d08db672d3b1789192 = L.map(
                &quot;map_f1774b86214832d08db672d3b1789192&quot;,
                {
                    center: [27.0, -81.125],
                    crs: L.CRS.EPSG3857,
                    zoom: 8,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_96681e1d2e28ab2185a27a69537d4b61 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_96681e1d2e28ab2185a27a69537d4b61.addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_bb15e42b8ff9c5585d6d3ec9c2ad6740 = L.circleMarker(
                [27.972984413059, -80.50657443311286],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#f40002&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#f40002&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_0f8d4ce570a063ade653d5d66a452073 = L.circleMarker(
                [26.15842498103677, -81.6978452754149],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_bfeda87b591d95a4767a54f2c4124a31 = L.circleMarker(
                [26.382999780154904, -81.70903306152387],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_2f9b6991d131aa1dc99f09177760963d = L.circleMarker(
                [26.189330375816013, -81.6619851577331],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_dbd140e47ea6973b3327877786176a8d = L.circleMarker(
                [27.784378345442054, -80.59076499724968],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_f760b649f4894829887f7badc64cad92 = L.circleMarker(
                [26.366453559477833, -81.66293509555179],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_7e2a75fefd686100bc3c396aade6932f = L.circleMarker(
                [27.473269702793658, -80.50510790437552],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_dd1d265aed035c68ce7859e957966ad3 = L.circleMarker(
                [26.086354128867725, -81.48977717606184],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_0a718674836588e8ce0955b37d78211d = L.circleMarker(
                [27.226452898410354, -80.50847148940952],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_6e4a86ee36584662543ae9e48d8952d3 = L.circleMarker(
                [26.301071098731754, -81.52100045189212],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_8a0b2b1aed1142bdfe8fb3fe84bcee47 = L.circleMarker(
                [26.544773024554832, -81.60667452193859],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_9515c21cbdba6923fb7b5e055e52fd7b = L.circleMarker(
                [26.050159830178664, -81.22629395965097],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_ffab92331857aab1c3aeba685aaa1fdb = L.circleMarker(
                [26.24664396062321, -81.43299865566368],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_aa42f42ec72abd4873855d5ad72b12f6 = L.circleMarker(
                [26.943671120744057, -80.51934697293223],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_a3491691a7e54433d7b1a8a1c504ae70 = L.circleMarker(
                [26.19773048060356, -81.31384553050141],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_e36f8e77d987490256a1a400f8fbcef1 = L.circleMarker(
                [26.131355757954836, -81.16027753441861],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_d5c52c80418b3a117c3ce4bac4b89b7b = L.circleMarker(
                [26.319682526771178, -80.52723729475458],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_1e8db8e6899f377fbffb094bdfaca3d1 = L.circleMarker(
                [26.694221446702628, -81.53376936951858],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_47d926dda0301208e945d027fe62378b = L.circleMarker(
                [26.343132637377927, -81.35686888035839],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_9f817c0ff9aec3f3c6051326c9b13459 = L.circleMarker(
                [26.862971977202136, -80.54717925180627],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_4bec9897573a2cc528e9ab05ed1b2fa8 = L.circleMarker(
                [27.308367243835498, -80.74351022614646],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_b0d5bb2c91641126400188f31f78ef77 = L.circleMarker(
                [26.076820898509965, -81.02010416275705],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_f1345014cc9714328006916b195e794f = L.circleMarker(
                [27.565561426877956, -80.86111841233041],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_27d5ec133b8544d3bf70ea3503396fba = L.circleMarker(
                [27.98142795111799, -81.09169770076494],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_743ae6a56572c7901cff050d024407ee = L.circleMarker(
                [27.82472127183081, -81.03218135189428],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_2317fc1efb349cce5a29a569628134c9 = L.circleMarker(
                [26.307063400374936, -81.27626966439352],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_6b4df10b41843b09fe920354884d2b03 = L.circleMarker(
                [26.896432196124945, -80.6823476427752],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_063e2cd2ba57a05429741c90ee204e0b = L.circleMarker(
                [26.61547413746954, -81.33572363043359],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_2e9d706c6578967ae412e054042978d6 = L.circleMarker(
                [27.991454895701796, -81.17887100872782],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_3f78952fc129e5cc86cfccf0676e10a0 = L.circleMarker(
                [26.78781864252158, -80.66418638533959],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_1bd4a24f4bbb23ec294c0aabe90477b9 = L.circleMarker(
                [26.713303385914497, -80.69627570716136],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_8066874a2d0f58971bbc1ea7837d3cb3 = L.circleMarker(
                [27.016995167468394, -81.61079237146735],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_da159919ce1b47e99d572986d0db1944 = L.circleMarker(
                [26.248784399318982, -80.7821785668828],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_63529d89abba8ef94c6bce836bfb921e = L.circleMarker(
                [26.81413637848975, -81.32644612584131],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_6126d7917d1615a4f467655d9ce00b77 = L.circleMarker(
                [26.311171111000064, -80.8179971956485],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_fb3adb6a86288cc6ff73ebf0a73f6210 = L.circleMarker(
                [27.714852856581068, -81.64493695441304],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_a32f5263787739d61cc98254a39da1ae = L.circleMarker(
                [27.16418198699115, -81.62240296924504],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_bab2d2ab56804b6c8b5dc92f06150f8f = L.circleMarker(
                [26.605717123010912, -81.13339074943397],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_c18094b6b293055b05db02f467d61b23 = L.circleMarker(
                [27.189284967955047, -81.01943246870752],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_237341a485fed0bdbd5c61046acb5c28 = L.circleMarker(
                [26.365577838913776, -80.8990291114624],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_21cb4eac7e931ad29391917a03bb76c1 = L.circleMarker(
                [26.886457616788025, -80.91721728171257],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_1ce2b0a1544253002ea479bb8d339828 = L.circleMarker(
                [26.55187691648845, -80.90280316359555],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_458f8fd585dcf8d3bf7407e8ab534f91 = L.circleMarker(
                [27.413800924899405, -81.22869767203825],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_e4e6c8f5e622f96e03ff381db1e55b5b = L.circleMarker(
                [26.9126301314854, -81.02473504499652],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_d445978a602991b097f0c30ef5482177 = L.circleMarker(
                [27.635398626773437, -81.3898362844697],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_63524a78bdf3c3f11a3958c52c8f7405 = L.circleMarker(
                [27.40773608152318, -81.55620947759367],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_86efcbf661e1eb7bd77815364963c990 = L.circleMarker(
                [27.435718092142665, -81.49914451288832],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_ad8ad98797e6b3bc5c81bd0cffec6d10 = L.circleMarker(
                [27.2850774684598, -81.43364197265868],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_39de105a9f3ffe8a7c6cd823de8ec11b = L.circleMarker(
                [27.243754691593953, -81.40006512830422],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_9cda64d4cbf6f124ac28d5ed7d8a992b = L.circleMarker(
                [27.37937557184798, -81.4286044623964],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Geospatial</category>
  <guid>https://www.jtrive.com/posts/distance-to-coastline/distance-to-coastline.html</guid>
  <pubDate>Mon, 14 Oct 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>A Data-Driven Approach to Ranking Teams in Uneven Paired Competition</title>
  <link>https://www.jtrive.com/posts/direct-method-eigenrankings/direct-method-eigenrankings.html</link>
  <description><![CDATA[ 





<p>I recently came across <a href="http://stat.wharton.upenn.edu/~steele/Courses/956/Ranking/RankingFootballSIAM93.pdf"><em>The Perron-Frobenius and the Ranking of Football Teams</em></a>, an interesting paper in which the author describes four different methods to rank teams in uneven paired competition. He goes on to show how each of these methods depends in some way on the Perron-Frobenius theorem. The Perron-Frobenius theorem provides key insights into the structure of non-negative matrices, especially in terms of their largest eigenvalue and associated eigenvector. For irreducible non-negative matrices, the theorem guarantees the existence of a dominant eigenvalue that is real, simple, and larger than all others in magnitude, with a corresponding non-negative eigenvector.</p>
<p>An uneven paired competition is one in which the outcome of competition between pairs of teams is known, but the pairings are not evenly matched, meaning the competition is not a round robin in which each team is paired with every other team an equal number of times. A good example is regular season football in-conference play for any of the major NCAA Division I conferences: For the 2023 season, the Big 12 had 14 teams, but each team had only 9 conference games.</p>
<p>Here we focus on the first ranking method, which the author refers to as the “direct method”. The direct method formulates the ranking approach as a linear eigenvalue problem which makes direct use of the Perron-Frobenius theorem. For each team under consideration, the goal is to assign a score to each team based on its interactions with other teams, with the goal that the assigned score reflect both the interactions as well as the strength of opponents. We will then compare our data-driven ranking approach with the final regular season standings and assess how they line up. A similar exercise will be performed focusing on the 2021 MLB regular season. <br></p>
<section id="creating-the-adjacency-matrix" class="level3">
<h3 class="anchored" data-anchor-id="creating-the-adjacency-matrix">Creating the Adjacency Matrix</h3>
<p>It is first necessary to construct the adjacency matrix in order to encode interactions between teams. Big 12 2023 regular season football results were obtained <a href="https://big12sports.com/standings.aspx?standings=193&amp;path=football">here</a>. Within the matrix, the value in cell <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D"> is set to 1 if team <img src="https://latex.codecogs.com/png.latex?i"> defeated team <img src="https://latex.codecogs.com/png.latex?j">, and 0 otherwise. For games that resulted in tie, <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D%20=%20%5Cfrac%7B1%7D%7B2%7D">, but there were no such cases in 2023 Big 12 regular season conference play.</p>
<p>The regular season rankings and adjacency matrix can be downloaded from GitHub (links available in the next cell):</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext watermark</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> eig</span>
<span id="cb1-8"></span>
<span id="cb1-9">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-10">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-11">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-12">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14"></span>
<span id="cb1-15">big12_matrix_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/b9b4ff8620f90045a0377f27ec4eb50f/raw/e6923583530edadbe9da1a1f4821e415d8a7e6f2/2023-big-12-adjacency.csv"</span></span>
<span id="cb1-16">big12_rankings_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/0207b8fd18a05e096a89498290b08d4a/raw/462d2b1bef52d96ae20e077f55501bfa23951ae4/2023-big-12-rankings.csv"</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ------------------------------------------------------------------------------</span></span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>watermark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>conda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>hostname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>machine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>iversions</span>
<span id="cb1-21"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Python implementation: CPython
Python version       : 3.11.10
IPython version      : 8.28.0

conda environment: py311

Compiler    : MSC v.1941 64 bit (AMD64)
OS          : Windows
Release     : 10
Machine     : AMD64
Processor   : Intel64 Family 6 Model 170 Stepping 4, GenuineIntel
CPU cores   : 22
Architecture: 64bit

Hostname: JTRIZPC11

numpy     : 2.1.0
matplotlib: 3.9.2
pandas    : 2.2.2
networkx  : 3.3
</code></pre>
</div>
</div>
<p><br></p>
<p>Big 12 regular season rankings for 2023:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">ranks_big12 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(big12_rankings_url)</span>
<span id="cb3-3"></span>
<span id="cb3-4">ranks_big12.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">team</th>
<th data-quarto-table-cell-role="th">conf_wins</th>
<th data-quarto-table-cell-role="th">conf_losses</th>
<th data-quarto-table-cell-role="th">overall_wins</th>
<th data-quarto-table-cell-role="th">overall_losses</th>
<th data-quarto-table-cell-role="th">conf_win_pct</th>
<th data-quarto-table-cell-role="th">overall_win_pct</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Texas</td>
<td>8</td>
<td>1</td>
<td>12</td>
<td>2</td>
<td>0.889</td>
<td>0.857</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Oklahoma State</td>
<td>7</td>
<td>2</td>
<td>10</td>
<td>4</td>
<td>0.778</td>
<td>0.714</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Oklahoma</td>
<td>7</td>
<td>2</td>
<td>10</td>
<td>3</td>
<td>0.778</td>
<td>0.769</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Iowa State</td>
<td>6</td>
<td>3</td>
<td>7</td>
<td>6</td>
<td>0.667</td>
<td>0.538</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Kansas State</td>
<td>6</td>
<td>3</td>
<td>9</td>
<td>4</td>
<td>0.667</td>
<td>0.692</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>West Virginia</td>
<td>6</td>
<td>3</td>
<td>9</td>
<td>4</td>
<td>0.667</td>
<td>0.692</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Texas Tech</td>
<td>5</td>
<td>4</td>
<td>7</td>
<td>6</td>
<td>0.556</td>
<td>0.538</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>Kansas</td>
<td>5</td>
<td>4</td>
<td>9</td>
<td>4</td>
<td>0.556</td>
<td>0.692</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>UCF</td>
<td>3</td>
<td>6</td>
<td>6</td>
<td>7</td>
<td>0.333</td>
<td>0.462</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>TCU</td>
<td>3</td>
<td>6</td>
<td>5</td>
<td>7</td>
<td>0.333</td>
<td>0.417</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>Houston</td>
<td>2</td>
<td>7</td>
<td>4</td>
<td>8</td>
<td>0.222</td>
<td>0.333</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>BYU</td>
<td>2</td>
<td>7</td>
<td>5</td>
<td>7</td>
<td>0.222</td>
<td>0.417</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>Baylor</td>
<td>2</td>
<td>7</td>
<td>3</td>
<td>9</td>
<td>0.222</td>
<td>0.250</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>Cincinnati</td>
<td>1</td>
<td>8</td>
<td>3</td>
<td>9</td>
<td>0.111</td>
<td>0.250</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>The adjacency matrix considers only conference play (non-conference games excluded):</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">adj_big12 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(big12_matrix_url)</span>
<span id="cb4-3"></span>
<span id="cb4-4">adj_big12.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Unnamed: 0</th>
<th data-quarto-table-cell-role="th">Baylor</th>
<th data-quarto-table-cell-role="th">BYU</th>
<th data-quarto-table-cell-role="th">Cincinnati</th>
<th data-quarto-table-cell-role="th">Houston</th>
<th data-quarto-table-cell-role="th">Iowa State</th>
<th data-quarto-table-cell-role="th">Kansas</th>
<th data-quarto-table-cell-role="th">Kansas State</th>
<th data-quarto-table-cell-role="th">Oklahoma</th>
<th data-quarto-table-cell-role="th">Oklahoma State</th>
<th data-quarto-table-cell-role="th">TCU</th>
<th data-quarto-table-cell-role="th">Texas</th>
<th data-quarto-table-cell-role="th">Texas Tech</th>
<th data-quarto-table-cell-role="th">UCF</th>
<th data-quarto-table-cell-role="th">West Virginia</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Baylor</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>BYU</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Cincinnati</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Houston</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Iowa State</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Kansas</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Kansas State</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>Oklahoma</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>Oklahoma State</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>TCU</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>Texas</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>Texas Tech</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>UCF</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>West Virginia</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>For each row in <code>adj_big12</code>, 1 indicates that team at row <img src="https://latex.codecogs.com/png.latex?i"> defeated the team in column <img src="https://latex.codecogs.com/png.latex?j">. For example, Oklahoma defeated BYU 31-24 in 2023, so the value at the intersection of row Oklahoma and column BYU is 1. The value at the intersection of row BYU and column Oklahoma is 0, since BYU did not defeat Oklahoma in 2023, and they only faced each other in one contest.</p>
<p>The sum of each row in the adjacency matrix represents the number of regular season wins in conference play for a given team. Texas was 8-1 in 2023 regular season conference play, therefore the sum of the Texas row is 8. The columnar sum represents the number of losses for a given team (for Texas, this is 1).</p>
<p>We can use NetworkX to visualize the relationships encoded in the adjacency matrix (each node label corresponds to the alphabetical enumeration of teams: 0=Baylor, 1=BYU, … 13=West Virginia). Edges indicate whether team <img src="https://latex.codecogs.com/png.latex?i"> and team <img src="https://latex.codecogs.com/png.latex?j"> faced each other in a regular season contest:</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create adjacency matrix as Numpy array. </span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># team_names = dfadj["Unnamed: 0"].values</span></span>
<span id="cb5-7">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> adj_big12.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unnamed: 0"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).values</span>
<span id="cb5-8">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.from_numpy_array(A)</span>
<span id="cb5-9"></span>
<span id="cb5-10">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-11">ax.set_title(</span>
<span id="cb5-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023 Big-12 Regular Season Football Matchups"</span>, </span>
<span id="cb5-13">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb5-14">)</span>
<span id="cb5-15">nx.draw_networkx(</span>
<span id="cb5-16">    G, node_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span>, node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">350</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, with_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb5-17">    edge_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nx.spring_layout(G, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb5-18">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/direct-method-eigenrankings/direct-method-eigenrankings_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>The adjacency matrix, <img src="https://latex.codecogs.com/png.latex?A">:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">A</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
       [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0],
       [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0],
       [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0],
       [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1],
       [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0],
       [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
       [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0]])</code></pre>
</div>
</div>
<p><br></p>
<p>If we create an initial ranking vector <img src="https://latex.codecogs.com/png.latex?r_%7B0%7D"> with all values set to 1, the the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> component of <img src="https://latex.codecogs.com/png.latex?Ar_%7B0%7D"> is the winning percentage for team <img src="https://latex.codecogs.com/png.latex?i"> (after dividing by the number of games played):</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2">r0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb8-3">win_pcts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> r0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb8-4"></span>
<span id="cb8-5">pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(adj_big12.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:], win_pcts.tolist())</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pairs:</span>
<span id="cb8-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('Baylor', 0.2222222222222222)
('BYU', 0.2222222222222222)
('Cincinnati', 0.1111111111111111)
('Houston', 0.2222222222222222)
('Iowa State', 0.6666666666666666)
('Kansas', 0.5555555555555556)
('Kansas State', 0.6666666666666666)
('Oklahoma', 0.7777777777777778)
('Oklahoma State', 0.7777777777777778)
('TCU', 0.3333333333333333)
('Texas', 0.8888888888888888)
('Texas Tech', 0.5555555555555556)
('UCF', 0.3333333333333333)
('West Virginia', 0.6666666666666666)</code></pre>
</div>
</div>
<p><br></p>
<p>This aligns with values in the <em>conf_win_pct</em> column from <code>ranks_big12</code>.</p>
<p>The <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> component of <img src="https://latex.codecogs.com/png.latex?A%5E%7B2%7Dr_%7B0%7D"> represents the average winning percentage of the teams that team <img src="https://latex.codecogs.com/png.latex?i"> defeated. As the author highlights, <img src="https://latex.codecogs.com/png.latex?A%5E%7B2%7Dr_%7B0%7D"> can be considered a proxy for strength of schedule. In the limit as <img src="https://latex.codecogs.com/png.latex?n"> goes to infinity, <img src="https://latex.codecogs.com/png.latex?A%5E%7Bn%7Dr_%7B0%7D/%7CA%5E%7Bn%7Dr_%7B0%7D%7C"> converges to the unique positive eigenvector of <img src="https://latex.codecogs.com/png.latex?A">, and the magnitude of the entries of this eigenvector gives a ranking of teams.</p>
<p>If <img src="https://latex.codecogs.com/png.latex?A"> has nonnegative entries (which will always be the case given out definition of <img src="https://latex.codecogs.com/png.latex?A">), then it has an eigenvector <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Br%7D"> with non-negative entries associated with a positive eigenvalue <img src="https://latex.codecogs.com/png.latex?%5Clambda">. If <img src="https://latex.codecogs.com/png.latex?A"> is irreducible, then <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Br%7D"> has strictly positive entries and the corresponding eigenvalue is the one of largest absolute value. Note however that if <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Br%7D"> is an eigenvector of <img src="https://latex.codecogs.com/png.latex?A">, so is <img src="https://latex.codecogs.com/png.latex?-%5Cvec%7Br%7D">. In practice, we simply take the absolute value of the eigenvector associated with the largest eigenvalue. Note that for <img src="https://latex.codecogs.com/png.latex?A"> to be irreducible, there can be no winless teams.</p>
<p>The steps for deriving our rankings are outlined below:</p>
<ol type="1">
<li><p>Construct the adjacency matrix <img src="https://latex.codecogs.com/png.latex?A">, in which entry <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D"> represents the number of times team <img src="https://latex.codecogs.com/png.latex?i"> defeated team <img src="https://latex.codecogs.com/png.latex?j">.</p></li>
<li><p>Perform the eigendecomposition of <img src="https://latex.codecogs.com/png.latex?A">, factoring the matrix into its eigenvalues and eigenvectors.</p></li>
<li><p>Identify the index of the largest eigenvalue.</p></li>
<li><p>Extract the eigenvector at the index identified in step 3. If using Numpy and the maximum eigenvalue is found at index <img src="https://latex.codecogs.com/png.latex?j">, the corresponding eigenvector <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Br%7D"> will be located in column <img src="https://latex.codecogs.com/png.latex?j">.</p></li>
<li><p>Take the absolute value of <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Br%7D">. The value at index <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Br%7D"> represents the score for the team at the same index (for the Big 12 example, index 0 = Baylor, index 1 = BYU, …).</p></li>
<li><p>Sort the eigenvector scores in decreasing order; higher performing teams will have a larger value, poorer performing teams will have a smaller value.</p></li>
</ol>
<p><br></p>
<p>Keep in mind that using a binary encoding scheme in a football setting, where each team may only compete once per season, overlooks information that could enhance the encoding. As it stands, a victory by 80 points for team A over team B is treated the same as a victory in triple overtime. In sports where teams face each other multiple times in a season, <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D"> serves as a better indicator of the relative strength between the two teams. We’ll explore regular season Major League Baseball results later.</p>
<p>The next cell demonstrates how to implement the ranking procedure using Numpy.</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> eig</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjacency matrix as Numpy array.</span></span>
<span id="cb10-5">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> adj_big12.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unnamed: 0"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).values.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform eigendecomposition of A. </span></span>
<span id="cb10-8">e_vals, e_vecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eig(A)</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify index of largest eigenvalue. </span></span>
<span id="cb10-11">e_val1_indx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(e_vals)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract real part of eigenvector at index e_val1_indx. </span></span>
<span id="cb10-14">e_vec1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(e_vecs[:, e_val1_indx])</span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get indices associated with each team.</span></span>
<span id="cb10-17">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argsort(e_vec1)[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-18"></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Associate ranks with teams. </span></span>
<span id="cb10-20">teams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> adj_big12.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb10-21">ranked_teams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> teams[indices]</span>
<span id="cb10-22"></span>
<span id="cb10-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> team <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ranked_teams:</span>
<span id="cb10-24">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(team)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Texas
Oklahoma State
Oklahoma
Kansas
Iowa State
Kansas State
Texas Tech
West Virginia
UCF
Houston
BYU
TCU
Baylor
Cincinnati</code></pre>
</div>
</div>
<p><br></p>
<p>We can compare actual vs.&nbsp;predicted rankings to see how well the direct method performed:</p>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> jj, team <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(ranked_teams):</span>
<span id="cb12-3">    actual_rank <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ranks_big12[ranks_big12.team<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>team].index.item()</span>
<span id="cb12-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>team<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: actual/predicted : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>actual_rank<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>jj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-5"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Texas: actual/predicted : 0/0
Oklahoma State: actual/predicted : 1/1
Oklahoma: actual/predicted : 2/2
Kansas: actual/predicted : 7/3
Iowa State: actual/predicted : 3/4
Kansas State: actual/predicted : 4/5
Texas Tech: actual/predicted : 6/6
West Virginia: actual/predicted : 5/7
UCF: actual/predicted : 8/8
Houston: actual/predicted : 10/9
BYU: actual/predicted : 11/10
TCU: actual/predicted : 9/11
Baylor: actual/predicted : 12/12
Cincinnati: actual/predicted : 13/13</code></pre>
</div>
</div>
<p>There are a few discrepancies, but the ranks are largely consistent. An interesting discrepancy is Kansas, having an actual rank of 7 vs.&nbsp;a predicted rank of 3. It’s difficult to say why Kansas is given such a high rank, but it may have to do with strength of schedule.</p>
<p>For the bottom five teams, the direct method does a good job. Three of the five teams have the same in-conference winning percentage, therefore slight out-of-orderings aren’t of concern.</p>
<p>Next let’s look at a more substantial example: All games for the 2021 MLB regular season.</p>
<p><br></p>
</section>
<section id="mlb-example" class="level3">
<h3 class="anchored" data-anchor-id="mlb-example">MLB Example</h3>
<p>A Major League Baseball dataset with game results from 2016-2021 is available on <a href="https://www.kaggle.com/datasets/josephvm/mlb-game-data">Kaggle</a>. The <em>games.csv</em> dataset has information about each contest that can be used to build an adjacency matrix. We load the dataset and inspect the first few records:</p>
<div id="cell-19" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb14-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb14-4"></span>
<span id="cb14-5">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb14-6">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb14-7">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb14-8">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/Users/jtriv/datasets/MLB/games.csv"</span>)</span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"df.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-13"></span>
<span id="cb14-14">df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>df.shape: (13439, 43)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Game</th>
<th data-quarto-table-cell-role="th">away</th>
<th data-quarto-table-cell-role="th">away-record</th>
<th data-quarto-table-cell-role="th">awayaway-record</th>
<th data-quarto-table-cell-role="th">home</th>
<th data-quarto-table-cell-role="th">home-record</th>
<th data-quarto-table-cell-role="th">homehome-record</th>
<th data-quarto-table-cell-role="th">away-score</th>
<th data-quarto-table-cell-role="th">home-score</th>
<th data-quarto-table-cell-role="th">postseason info</th>
<th data-quarto-table-cell-role="th">Walks Issued - Away</th>
<th data-quarto-table-cell-role="th">Walks Issued - Home</th>
<th data-quarto-table-cell-role="th">Stolen Bases - Away</th>
<th data-quarto-table-cell-role="th">Stolen Bases - Home</th>
<th data-quarto-table-cell-role="th">Strikeouts Thrown - Away</th>
<th data-quarto-table-cell-role="th">Strikeouts Thrown - Home</th>
<th data-quarto-table-cell-role="th">Total Bases - Away</th>
<th data-quarto-table-cell-role="th">Total Bases - Home</th>
<th data-quarto-table-cell-role="th">Stadium</th>
<th data-quarto-table-cell-role="th">Date</th>
<th data-quarto-table-cell-role="th">Location</th>
<th data-quarto-table-cell-role="th">Odds</th>
<th data-quarto-table-cell-role="th">O/U</th>
<th data-quarto-table-cell-role="th">Attendance</th>
<th data-quarto-table-cell-role="th">Capacity</th>
<th data-quarto-table-cell-role="th">Duration</th>
<th data-quarto-table-cell-role="th">Umpires</th>
<th data-quarto-table-cell-role="th">WIN - Pitcher - Stats</th>
<th data-quarto-table-cell-role="th">WIN - Pitcher - Id</th>
<th data-quarto-table-cell-role="th">WIN - Pitcher - Name</th>
<th data-quarto-table-cell-role="th">WIN - Pitcher - AbbrName</th>
<th data-quarto-table-cell-role="th">WIN - Pitcher - Record</th>
<th data-quarto-table-cell-role="th">LOSS - Pitcher - Stats</th>
<th data-quarto-table-cell-role="th">LOSS - Pitcher - Id</th>
<th data-quarto-table-cell-role="th">LOSS - Pitcher - Name</th>
<th data-quarto-table-cell-role="th">LOSS - Pitcher - AbbrName</th>
<th data-quarto-table-cell-role="th">LOSS - Pitcher - Record</th>
<th data-quarto-table-cell-role="th">SAVE - Pitcher - Stats</th>
<th data-quarto-table-cell-role="th">SAVE - Pitcher - Id</th>
<th data-quarto-table-cell-role="th">SAVE - Pitcher - Name</th>
<th data-quarto-table-cell-role="th">SAVE - Pitcher - AbbrName</th>
<th data-quarto-table-cell-role="th">SAVE - Pitcher - Record</th>
<th data-quarto-table-cell-role="th">Extra Innings</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>360403123</td>
<td>STL</td>
<td>0-1</td>
<td>0-1 Away</td>
<td>PIT</td>
<td>Jan-00</td>
<td>1-0 Home</td>
<td>1.0</td>
<td>4.0</td>
<td>NaN</td>
<td>5.0</td>
<td>5.0</td>
<td>0.0</td>
<td>0.0</td>
<td>5.0</td>
<td>14.0</td>
<td>5.0</td>
<td>13.0</td>
<td>\n\n\n\n\n\t\t\t\t\t\t\tPNC Park\n\t\t\t\t\t\t...</td>
<td>2016-04-03T17:00Z</td>
<td>Pittsburgh, Pennsylvania\n\t\t\t\t\t\t\t\n\t\t...</td>
<td>NaN</td>
<td>NaN</td>
<td>39,500</td>
<td>38,362</td>
<td>3:02</td>
<td>Home Plate Umpire - Jerry Layne, First Base Um...</td>
<td>6.0 IP, 0 ER, 10 K, 5 BB</td>
<td>6211.0</td>
<td>Francisco Liriano</td>
<td>F. Liriano</td>
<td>(1-0)</td>
<td>6.0 IP, 3 ER, 3 K, 3 BB</td>
<td>5403.0</td>
<td>Adam Wainwright</td>
<td>A. Wainwright</td>
<td>(0-1)</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>360403130</td>
<td>TOR</td>
<td>Jan-00</td>
<td>1-0 Away</td>
<td>TB</td>
<td>0-1</td>
<td>0-1 Home</td>
<td>5.0</td>
<td>3.0</td>
<td>NaN</td>
<td>1.0</td>
<td>3.0</td>
<td>0.0</td>
<td>0.0</td>
<td>7.0</td>
<td>16.0</td>
<td>11.0</td>
<td>11.0</td>
<td>\n\n\n\n\n\t\t\t\t\t\t\tTropicana Field\n\t\t\...</td>
<td>2016-04-03T20:00Z</td>
<td>St. Petersburg, Florida\n\t\t\t\t\t\t\t\n\t\t\...</td>
<td>NaN</td>
<td>NaN</td>
<td>31,042</td>
<td>31,042</td>
<td>2:51</td>
<td>Home Plate Umpire - Mike Everitt, First Base U...</td>
<td>8.0 IP, 3 ER, 5 K, 1 BB</td>
<td>32815.0</td>
<td>Marcus Stroman</td>
<td>M. Stroman</td>
<td>(1-0)</td>
<td>5.0 IP, 2 ER, 12 K, 3 BB</td>
<td>31003.0</td>
<td>Chris Archer</td>
<td>C. Archer</td>
<td>(0-1)</td>
<td>1.0 IP, 0 ER, 2 K, 0 BB</td>
<td>32693.0</td>
<td>Roberto Osuna</td>
<td>R. Osuna</td>
<td>-1.0</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>360403107</td>
<td>NYM</td>
<td>0-1</td>
<td>0-1 Away</td>
<td>KC</td>
<td>Jan-00</td>
<td>1-0 Home</td>
<td>3.0</td>
<td>4.0</td>
<td>NaN</td>
<td>2.0</td>
<td>6.0</td>
<td>0.0</td>
<td>1.0</td>
<td>3.0</td>
<td>9.0</td>
<td>8.0</td>
<td>9.0</td>
<td>\n\n\n\n\n\t\t\t\t\t\t\tKauffman Stadium\n\t\t...</td>
<td>2016-04-04T00:30Z</td>
<td>Kansas City, Missouri\n\t\t\t\t\t\t\t\n\t\t\t\...</td>
<td>NaN</td>
<td>NaN</td>
<td>40,030</td>
<td>37,903</td>
<td>3:13</td>
<td>Home Plate Umpire - Gerry Davis, First Base Um...</td>
<td>6.0 IP, 0 ER, 5 K, 3 BB</td>
<td>6401.0</td>
<td>Edinson Volquez</td>
<td>E. Volquez</td>
<td>(1-0)</td>
<td>5.2 IP, 3 ER, 2 K, 2 BB</td>
<td>31214.0</td>
<td>Matt Harvey</td>
<td>M. Harvey</td>
<td>(0-1)</td>
<td>1.0 IP, 0 ER, 2 K, 1 BB</td>
<td>28957.0</td>
<td>Wade Davis</td>
<td>W. Davis</td>
<td>-1.0</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>It is first necessary to filter down to 2021 regular season games. If “postseason info” column is null, we assume the game is a regular season matchup. The “Date” column is used to extract the year.</p>
<p>In order to create the adjacency matrix only “away”, “home”, “away-score” and “home-score” need be retained. All other columns are removed:</p>
<div id="cell-21" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yyyy"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span>]).dt.year</span>
<span id="cb16-3"></span>
<span id="cb16-4">df21 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb16-5">    df[(pd.isnull(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postseason info"</span>])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yyyy"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>)]</span>
<span id="cb16-6">    .dropna(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"away"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"away-score"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home-score"</span>])</span>
<span id="cb16-7">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"away-score"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"away_score"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home-score"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home_score"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-8">    [[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"away"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"away_score"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home_score"</span>]]</span>
<span id="cb16-9">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-10">)</span>
<span id="cb16-11"></span>
<span id="cb16-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"df21.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df21<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-13"></span>
<span id="cb16-14">df21.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>df21.shape: (2310, 4)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">away</th>
<th data-quarto-table-cell-role="th">home</th>
<th data-quarto-table-cell-role="th">away_score</th>
<th data-quarto-table-cell-role="th">home_score</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>TOR</td>
<td>NYY</td>
<td>3.0</td>
<td>2.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>CLE</td>
<td>DET</td>
<td>2.0</td>
<td>3.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>MIN</td>
<td>MIL</td>
<td>5.0</td>
<td>6.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>PIT</td>
<td>CHC</td>
<td>5.0</td>
<td>3.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>ATL</td>
<td>PHI</td>
<td>2.0</td>
<td>3.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>ARI</td>
<td>SD</td>
<td>7.0</td>
<td>8.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>LAD</td>
<td>COL</td>
<td>5.0</td>
<td>8.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>STL</td>
<td>CIN</td>
<td>11.0</td>
<td>6.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>TB</td>
<td>MIA</td>
<td>1.0</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>TEX</td>
<td>KC</td>
<td>10.0</td>
<td>14.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>CHW</td>
<td>LAA</td>
<td>3.0</td>
<td>4.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>HOU</td>
<td>OAK</td>
<td>8.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>SF</td>
<td>SEA</td>
<td>7.0</td>
<td>8.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>BAL</td>
<td>BOS</td>
<td>3.0</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>TB</td>
<td>MIA</td>
<td>6.0</td>
<td>4.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>All 30 MLB teams are represented in the “home” and away” columns. An empty DataFrame is created with columns and rows indexed using the 30 teams ordered alphabetically.</p>
<div id="cell-23" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create empty DataFrame with rows and columns indexed by the 30 MLB teams.</span></span>
<span id="cb18-3">mlb_teams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(df21[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home"</span>].unique().tolist())</span>
<span id="cb18-4">dfadj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mlb_teams, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mlb_teams)</span>
<span id="cb18-5">dfadj.loc[:,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-6"></span>
<span id="cb18-7">dfadj</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">ARI</th>
<th data-quarto-table-cell-role="th">ATL</th>
<th data-quarto-table-cell-role="th">BAL</th>
<th data-quarto-table-cell-role="th">BOS</th>
<th data-quarto-table-cell-role="th">CHC</th>
<th data-quarto-table-cell-role="th">CHW</th>
<th data-quarto-table-cell-role="th">CIN</th>
<th data-quarto-table-cell-role="th">CLE</th>
<th data-quarto-table-cell-role="th">COL</th>
<th data-quarto-table-cell-role="th">DET</th>
<th data-quarto-table-cell-role="th">HOU</th>
<th data-quarto-table-cell-role="th">KC</th>
<th data-quarto-table-cell-role="th">LAA</th>
<th data-quarto-table-cell-role="th">LAD</th>
<th data-quarto-table-cell-role="th">MIA</th>
<th data-quarto-table-cell-role="th">MIL</th>
<th data-quarto-table-cell-role="th">MIN</th>
<th data-quarto-table-cell-role="th">NYM</th>
<th data-quarto-table-cell-role="th">NYY</th>
<th data-quarto-table-cell-role="th">OAK</th>
<th data-quarto-table-cell-role="th">PHI</th>
<th data-quarto-table-cell-role="th">PIT</th>
<th data-quarto-table-cell-role="th">SD</th>
<th data-quarto-table-cell-role="th">SEA</th>
<th data-quarto-table-cell-role="th">SF</th>
<th data-quarto-table-cell-role="th">STL</th>
<th data-quarto-table-cell-role="th">TB</th>
<th data-quarto-table-cell-role="th">TEX</th>
<th data-quarto-table-cell-role="th">TOR</th>
<th data-quarto-table-cell-role="th">WSH</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ARI</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ATL</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">BAL</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">BOS</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CHC</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">CHW</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CIN</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">CLE</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">COL</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DET</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">HOU</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">KC</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">LAA</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">LAD</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">MIA</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MIL</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">MIN</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">NYM</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">NYY</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">OAK</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">PHI</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">PIT</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SD</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">SEA</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SF</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">STL</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">TB</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TEX</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">TOR</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">WSH</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>We iterate over <code>df21</code>, updating values in <code>dfadj</code> according to the following rules:</p>
<ul>
<li>If team in row <img src="https://latex.codecogs.com/png.latex?i"> defeated team in column <img src="https://latex.codecogs.com/png.latex?j">, <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D"> is incremented by 1.</li>
<li>If team in row <img src="https://latex.codecogs.com/png.latex?i"> lost to team in column <img src="https://latex.codecogs.com/png.latex?j">, <img src="https://latex.codecogs.com/png.latex?a_%7Bji%7D"> is incremented by 1.</li>
<li>If the contest resulted in a tie, <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D"> and <img src="https://latex.codecogs.com/png.latex?a_%7Bji%7D"> are incremented by <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D">, but there are no ties in <code>df21</code>.</li>
</ul>
<p>A dictionary <code>dresults</code> tracking wins and losses for each team is also created, in order to use regular season winning percentage as a proxy to compare against our direct method rankings.</p>
<div id="cell-25" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"></span>
<span id="cb19-2">dresults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {kk: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wins"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"losses"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dfadj.columns}</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rr <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df21.itertuples(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb19-5"></span>
<span id="cb19-6">    ii, jj, ii_score, jj_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rr.away, rr.home, rr.away_score, rr.home_score</span>
<span id="cb19-7"></span>
<span id="cb19-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> jj_score:</span>
<span id="cb19-9">        dfadj.at[ii, jj]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span></span>
<span id="cb19-10">        dfadj.at[jj, ii]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span></span>
<span id="cb19-11"></span>
<span id="cb19-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> ii_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> jj_score:</span>
<span id="cb19-13">        dfadj.at[ii, jj]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-14">        dresults[ii][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wins"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-15">        dresults[jj][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"losses"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-16"></span>
<span id="cb19-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb19-18">        dfadj.at[jj, ii]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-19">        dresults[jj][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wins"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-20">        dresults[ii][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"losses"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-21"></span>
<span id="cb19-22">dfadj</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">ARI</th>
<th data-quarto-table-cell-role="th">ATL</th>
<th data-quarto-table-cell-role="th">BAL</th>
<th data-quarto-table-cell-role="th">BOS</th>
<th data-quarto-table-cell-role="th">CHC</th>
<th data-quarto-table-cell-role="th">CHW</th>
<th data-quarto-table-cell-role="th">CIN</th>
<th data-quarto-table-cell-role="th">CLE</th>
<th data-quarto-table-cell-role="th">COL</th>
<th data-quarto-table-cell-role="th">DET</th>
<th data-quarto-table-cell-role="th">HOU</th>
<th data-quarto-table-cell-role="th">KC</th>
<th data-quarto-table-cell-role="th">LAA</th>
<th data-quarto-table-cell-role="th">LAD</th>
<th data-quarto-table-cell-role="th">MIA</th>
<th data-quarto-table-cell-role="th">MIL</th>
<th data-quarto-table-cell-role="th">MIN</th>
<th data-quarto-table-cell-role="th">NYM</th>
<th data-quarto-table-cell-role="th">NYY</th>
<th data-quarto-table-cell-role="th">OAK</th>
<th data-quarto-table-cell-role="th">PHI</th>
<th data-quarto-table-cell-role="th">PIT</th>
<th data-quarto-table-cell-role="th">SD</th>
<th data-quarto-table-cell-role="th">SEA</th>
<th data-quarto-table-cell-role="th">SF</th>
<th data-quarto-table-cell-role="th">STL</th>
<th data-quarto-table-cell-role="th">TB</th>
<th data-quarto-table-cell-role="th">TEX</th>
<th data-quarto-table-cell-role="th">TOR</th>
<th data-quarto-table-cell-role="th">WSH</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ARI</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>9</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>4</td>
<td>8</td>
<td>2</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ATL</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>1</td>
<td>5</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>11</td>
<td>3</td>
<td>0</td>
<td>9</td>
<td>1</td>
<td>0</td>
<td>10</td>
<td>4</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>5</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">BAL</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>1</td>
<td>8</td>
<td>3</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>4</td>
<td>5</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">BOS</td>
<td>0</td>
<td>3</td>
<td>13</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>2</td>
<td>5</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>4</td>
<td>10</td>
<td>3</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>8</td>
<td>2</td>
<td>8</td>
<td>3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CHC</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>8</td>
<td>1</td>
<td>2</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>1</td>
<td>4</td>
<td>2</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>14</td>
<td>5</td>
<td>0</td>
<td>1</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">CHW</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>2</td>
<td>5</td>
<td>0</td>
<td>3</td>
<td>9</td>
<td>0</td>
<td>9</td>
<td>2</td>
<td>8</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>12</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>3</td>
<td>5</td>
<td>4</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CIN</td>
<td>1</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>11</td>
<td>1</td>
<td>0</td>
<td>3</td>
<td>5</td>
<td>1</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>5</td>
<td>9</td>
<td>2</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>12</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">CLE</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>2</td>
<td>3</td>
<td>7</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>12</td>
<td>1</td>
<td>13</td>
<td>5</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>7</td>
<td>0</td>
<td>3</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>1</td>
<td>4</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">COL</td>
<td>10</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>6</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>5</td>
<td>4</td>
<td>10</td>
<td>2</td>
<td>3</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DET</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>3</td>
<td>1</td>
<td>7</td>
<td>2</td>
<td>5</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>8</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>6</td>
<td>0</td>
<td>3</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>3</td>
<td>4</td>
<td>6</td>
<td>3</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">HOU</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>5</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>6</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>3</td>
<td>13</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>11</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>11</td>
<td>1</td>
<td>0</td>
<td>4</td>
<td>14</td>
<td>4</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">KC</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>2</td>
<td>3</td>
<td>9</td>
<td>1</td>
<td>3</td>
<td>0</td>
<td>11</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>10</td>
<td>0</td>
<td>2</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">LAA</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>3</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>6</td>
<td>6</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>4</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>8</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>11</td>
<td>3</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">LAD</td>
<td>16</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>13</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>4</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>2</td>
<td>4</td>
<td>6</td>
<td>12</td>
<td>3</td>
<td>9</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>7</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">MIA</td>
<td>5</td>
<td>8</td>
<td>2</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td>9</td>
<td>2</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>8</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MIL</td>
<td>6</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>13</td>
<td>2</td>
<td>10</td>
<td>3</td>
<td>5</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>13</td>
<td>5</td>
<td>0</td>
<td>4</td>
<td>8</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">MIN</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>2</td>
<td>2</td>
<td>5</td>
<td>2</td>
<td>10</td>
<td>0</td>
<td>10</td>
<td>4</td>
<td>9</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>3</td>
<td>4</td>
<td>3</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">NYM</td>
<td>5</td>
<td>7</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>9</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>6</td>
<td>2</td>
<td>4</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>8</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">NYY</td>
<td>0</td>
<td>3</td>
<td>11</td>
<td>7</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>4</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>5</td>
<td>1</td>
<td>0</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>0</td>
<td>8</td>
<td>6</td>
<td>7</td>
<td>2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">OAK</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>2</td>
<td>6</td>
<td>8</td>
<td>5</td>
<td>15</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>4</td>
<td>10</td>
<td>2</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">PHI</td>
<td>3</td>
<td>9</td>
<td>2</td>
<td>3</td>
<td>5</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>9</td>
<td>5</td>
<td>0</td>
<td>9</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">PIT</td>
<td>2</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>1</td>
<td>6</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>4</td>
<td>2</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>7</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SD</td>
<td>11</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>7</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>7</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>2</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>8</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">SEA</td>
<td>4</td>
<td>0</td>
<td>1</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>4</td>
<td>2</td>
<td>1</td>
<td>8</td>
<td>3</td>
<td>11</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>15</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>6</td>
<td>13</td>
<td>4</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SF</td>
<td>17</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>14</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>10</td>
<td>4</td>
<td>3</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>4</td>
<td>4</td>
<td>3</td>
<td>11</td>
<td>1</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">STL</td>
<td>6</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>8</td>
<td>1</td>
<td>8</td>
<td>2</td>
<td>4</td>
<td>1</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>3</td>
<td>6</td>
<td>11</td>
<td>2</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>12</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">TB</td>
<td>0</td>
<td>2</td>
<td>18</td>
<td>11</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>2</td>
<td>4</td>
<td>6</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>3</td>
<td>3</td>
<td>11</td>
<td>3</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>11</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TEX</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>4</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>2</td>
<td>2</td>
<td>1</td>
<td>5</td>
<td>4</td>
<td>8</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>1</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>6</td>
<td>1</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">TOR</td>
<td>0</td>
<td>6</td>
<td>12</td>
<td>7</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>2</td>
<td>3</td>
<td>2</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>4</td>
<td>1</td>
<td>10</td>
<td>5</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>8</td>
<td>3</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">WSH</td>
<td>4</td>
<td>5</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>11</td>
<td>1</td>
<td>0</td>
<td>6</td>
<td>1</td>
<td>0</td>
<td>5</td>
<td>4</td>
<td>3</td>
<td>0</td>
<td>1</td>
<td>4</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Convert <code>dresults</code> into a DataFrame and add win_pct column:</p>
<div id="cell-27" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2">dfresults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb20-3">    pd.DataFrame().from_dict(dresults, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>)</span>
<span id="cb20-4">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"team"</span>)</span>
<span id="cb20-5">)</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute winning percentage. </span></span>
<span id="cb20-8">dfresults[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"win_pct"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfresults[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wins"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (dfresults[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wins"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dfresults[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"losses"</span>])</span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort values by win_pct. </span></span>
<span id="cb20-11">dfresults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb20-12">    dfresults.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"win_pct"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb20-13">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-14">)</span>
<span id="cb20-15"></span>
<span id="cb20-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add win_pct rank column.</span></span>
<span id="cb20-17">dfresults[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rank0"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfresults.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb20-18"></span>
<span id="cb20-19">dfresults.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">team</th>
<th data-quarto-table-cell-role="th">wins</th>
<th data-quarto-table-cell-role="th">losses</th>
<th data-quarto-table-cell-role="th">win_pct</th>
<th data-quarto-table-cell-role="th">rank0</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>SF</td>
<td>105</td>
<td>53</td>
<td>0.664557</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>LAD</td>
<td>106</td>
<td>54</td>
<td>0.662500</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>TB</td>
<td>98</td>
<td>62</td>
<td>0.612500</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>HOU</td>
<td>94</td>
<td>66</td>
<td>0.587500</td>
<td>4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>MIL</td>
<td>89</td>
<td>65</td>
<td>0.577922</td>
<td>5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>BOS</td>
<td>86</td>
<td>64</td>
<td>0.573333</td>
<td>6</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>NYY</td>
<td>86</td>
<td>67</td>
<td>0.562092</td>
<td>7</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>ATL</td>
<td>84</td>
<td>66</td>
<td>0.560000</td>
<td>8</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>TOR</td>
<td>82</td>
<td>65</td>
<td>0.557823</td>
<td>9</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>CHW</td>
<td>82</td>
<td>66</td>
<td>0.554054</td>
<td>10</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>SEA</td>
<td>88</td>
<td>71</td>
<td>0.553459</td>
<td>11</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>STL</td>
<td>85</td>
<td>69</td>
<td>0.551948</td>
<td>12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>OAK</td>
<td>84</td>
<td>76</td>
<td>0.525000</td>
<td>13</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>PHI</td>
<td>80</td>
<td>74</td>
<td>0.519481</td>
<td>14</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>CLE</td>
<td>74</td>
<td>73</td>
<td>0.503401</td>
<td>15</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>CIN</td>
<td>80</td>
<td>79</td>
<td>0.503145</td>
<td>16</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>SD</td>
<td>77</td>
<td>82</td>
<td>0.484277</td>
<td>17</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>LAA</td>
<td>75</td>
<td>82</td>
<td>0.477707</td>
<td>18</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>DET</td>
<td>71</td>
<td>79</td>
<td>0.473333</td>
<td>19</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>COL</td>
<td>70</td>
<td>79</td>
<td>0.469799</td>
<td>20</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>MIN</td>
<td>69</td>
<td>79</td>
<td>0.466216</td>
<td>21</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">21</td>
<td>KC</td>
<td>70</td>
<td>85</td>
<td>0.451613</td>
<td>22</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">22</td>
<td>NYM</td>
<td>61</td>
<td>76</td>
<td>0.445255</td>
<td>23</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">23</td>
<td>CHC</td>
<td>68</td>
<td>86</td>
<td>0.441558</td>
<td>24</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">24</td>
<td>MIA</td>
<td>66</td>
<td>93</td>
<td>0.415094</td>
<td>25</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">25</td>
<td>WSH</td>
<td>62</td>
<td>89</td>
<td>0.410596</td>
<td>26</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26</td>
<td>TEX</td>
<td>60</td>
<td>100</td>
<td>0.375000</td>
<td>27</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">27</td>
<td>PIT</td>
<td>56</td>
<td>97</td>
<td>0.366013</td>
<td>28</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">28</td>
<td>BAL</td>
<td>51</td>
<td>103</td>
<td>0.331169</td>
<td>29</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">29</td>
<td>ARI</td>
<td>51</td>
<td>110</td>
<td>0.316770</td>
<td>30</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>rank0 will be used to compare our results against. Let’s visualize the regular season matchup network:</p>
<div id="cell-29" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"></span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb21-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create adjacency matrix as Numpy array. </span></span>
<span id="cb21-6">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfadj.values.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb21-7">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.from_numpy_array(A)</span>
<span id="cb21-8"></span>
<span id="cb21-9">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb21-10"></span>
<span id="cb21-11">ax.set_title(</span>
<span id="cb21-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021 MLB Regular Season Matchups"</span>, </span>
<span id="cb21-13">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb21-14">)</span>
<span id="cb21-15">nx.draw_networkx(</span>
<span id="cb21-16">    G, node_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#32cd32"</span>, node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, with_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb21-17">    edge_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>, pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nx.spring_layout(G, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb21-18">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/direct-method-eigenrankings/direct-method-eigenrankings_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Next we perform the same steps carried out for the Big 12 analysis:</p>
<div id="cell-31" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"></span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> eig</span>
<span id="cb22-3"></span>
<span id="cb22-4"></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjacency matrix as Numpy array.</span></span>
<span id="cb22-6">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfadj.values.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb22-7"></span>
<span id="cb22-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform eigendecomposition of A. </span></span>
<span id="cb22-9">e_vals, e_vecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eig(A)</span>
<span id="cb22-10"></span>
<span id="cb22-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify index of largest eigenvalue. </span></span>
<span id="cb22-12">e_val1_indx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(e_vals)</span>
<span id="cb22-13"></span>
<span id="cb22-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract real part of eigenvector at index e_val1_indx. </span></span>
<span id="cb22-15">e_vec1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(e_vecs[:, e_val1_indx])</span>
<span id="cb22-16"></span>
<span id="cb22-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get indices associated with each team.</span></span>
<span id="cb22-18">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argsort(e_vec1)[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb22-19"></span>
<span id="cb22-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Associate ranks with teams. </span></span>
<span id="cb22-21">teams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfadj.columns</span>
<span id="cb22-22">ranked_teams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> teams[indices]</span>
<span id="cb22-23"></span>
<span id="cb22-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> team <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ranked_teams:</span>
<span id="cb22-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(team)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>HOU
TB
LAD
SF
SEA
NYY
OAK
BOS
TOR
CHW
MIL
LAA
STL
SD
DET
CLE
ATL
KC
CIN
MIN
PHI
COL
TEX
CHC
MIA
WSH
BAL
NYM
PIT
ARI</code></pre>
</div>
</div>
<p><br></p>
<p>Again comparing actual vs.&nbsp;predicted ranks, using regular season winning percentage as a proxy for actual rank:</p>
<div id="cell-33" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"></span>
<span id="cb24-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> jj, team <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(ranked_teams, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb24-3">    actual_rank <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfresults[dfresults.team<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>team][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rank0"</span>].item()</span>
<span id="cb24-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>team<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: actual/predicted : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>actual_rank<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>jj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>HOU: actual/predicted : 4/1
TB: actual/predicted : 3/2
LAD: actual/predicted : 2/3
SF: actual/predicted : 1/4
SEA: actual/predicted : 11/5
NYY: actual/predicted : 7/6
OAK: actual/predicted : 13/7
BOS: actual/predicted : 6/8
TOR: actual/predicted : 9/9
CHW: actual/predicted : 10/10
MIL: actual/predicted : 5/11
LAA: actual/predicted : 18/12
STL: actual/predicted : 12/13
SD: actual/predicted : 17/14
DET: actual/predicted : 19/15
CLE: actual/predicted : 15/16
ATL: actual/predicted : 8/17
KC: actual/predicted : 22/18
CIN: actual/predicted : 16/19
MIN: actual/predicted : 21/20
PHI: actual/predicted : 14/21
COL: actual/predicted : 20/22
TEX: actual/predicted : 27/23
CHC: actual/predicted : 24/24
MIA: actual/predicted : 25/25
WSH: actual/predicted : 26/26
BAL: actual/predicted : 29/27
NYM: actual/predicted : 23/28
PIT: actual/predicted : 28/29
ARI: actual/predicted : 30/30</code></pre>
</div>
</div>
<p><br></p>
<p>The Houston Astros are considered the best team based on the direct method, which is encouraging as they ultimately reached the 2021 World Series. One of the biggest discrepancies is with the Atlanta Braves, who were 8th in terms of regular season winning percentage but 17th in terms of the direct method. They went on to win the 2021 World Series. Nonetheless, the modeled ranking are reasonable, and it is clear that the direct might be able to provide further insight into how teams rank looking beyond winning percentage.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/direct-method-eigenrankings/direct-method-eigenrankings.html</guid>
  <pubDate>Fri, 04 Oct 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Techniques for Convolutional Neural Network Interpretability</title>
  <link>https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability.html</link>
  <description><![CDATA[ 





<p>Saliency maps for Convolutional Neural Networks are a technique used to visualize and understand the behavior of CNN models, particularly in tasks such as image classification, object detection and segmentation. They highlight which parts of an input (like an image) are most important for a model’s decision. They help with understanding how a model is making its predictions by showing the areas that contributed most to its output. The term “saliency” refers to the prominence of certain features, and in the context of deep learning saliency maps can reveal which pixels in an image most influenced the model’s classification task.</p>
<p>In this post, we walkthrough the process of generating saliency maps for holdout images using the CIFAR-10 dataset. To begin, we’ll train a simple Convolutional Neural Network model using PyTorch. After the model is trained, we will use it to generate saliency maps for a random selection of holdout images from the dataset. These saliency maps will help us visualize which parts of the images were most influential in the model’s predictions.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-3">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>, category<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">UserWarning</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage.transform <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rescale, resize</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb1-14"></span>
<span id="cb1-15">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-16">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-17">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-18">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-19"></span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of images to process in each batch. </span></span>
<span id="cb1-22">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify CIFAR-10 classes.</span></span>
<span id="cb1-26">classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plane"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"car"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bird"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dog"</span>, </span>
<span id="cb1-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frog"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"horse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ship"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"truck"</span></span>
<span id="cb1-29">    ]</span>
<span id="cb1-30"></span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ImageNet transforms to normalize images. </span></span>
<span id="cb1-33">transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb1-34">    [transforms.ToTensor(),</span>
<span id="cb1-35">     transforms.Normalize((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))]</span>
<span id="cb1-36">     )</span>
<span id="cb1-37"></span>
<span id="cb1-38"></span>
<span id="cb1-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download CIFAR-10 training and validation data.</span></span>
<span id="cb1-40">train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.datasets.CIFAR10(</span>
<span id="cb1-41">    root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data"</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform</span>
<span id="cb1-42">    )</span>
<span id="cb1-43">valid_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.datasets.CIFAR10(</span>
<span id="cb1-44">    root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data"</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform</span>
<span id="cb1-45">    )</span>
<span id="cb1-46"></span>
<span id="cb1-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create training and validation DataLoader instances. This is what gets </span></span>
<span id="cb1-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterated over during training. </span></span>
<span id="cb1-49">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-50">valid_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-51"></span>
<span id="cb1-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Number of training batches of size </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Files already downloaded and verified
Files already downloaded and verified

Number of training batches of size 32: 1563</code></pre>
</div>
</div>
<p><br></p>
<p>Define network, training and validation loops.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb3-4"></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BasicCNN(nn.Module):</span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb3-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MaxPool2d(kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb3-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">84</span>)</span>
<span id="cb3-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">84</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.drp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Dropout(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout)</span>
<span id="cb3-16">        </span>
<span id="cb3-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X):</span>
<span id="cb3-18">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1(X)))</span>
<span id="cb3-19">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2(output)))</span>
<span id="cb3-20">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.flatten(output, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-21">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.drp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1(output)))</span>
<span id="cb3-22">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.drp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2(output)))</span>
<span id="cb3-23">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc3(output)</span>
<span id="cb3-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> output</span>
<span id="cb3-25"></span>
<span id="cb3-26"></span>
<span id="cb3-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> epoch_trainer(epoch, data_loader, model, loss_fn, optimizer, device, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb3-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Execute a single training epoch. Return last batch training loss</span></span>
<span id="cb3-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and accuracy. </span></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-32">    loss, checkpoint_loss, correct, samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-33"></span>
<span id="cb3-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put model in train mode.</span></span>
<span id="cb3-35">    model.train()</span>
<span id="cb3-36"></span>
<span id="cb3-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over batches in data_loader. </span></span>
<span id="cb3-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, (X, yactual) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(data_loader):</span>
<span id="cb3-39"></span>
<span id="cb3-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Send datasets to device. </span></span>
<span id="cb3-41">        X, yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.to(device), yactual.to(device)</span>
<span id="cb3-42"></span>
<span id="cb3-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero out parameter gradients.</span></span>
<span id="cb3-44">        optimizer.zero_grad()</span>
<span id="cb3-45"></span>
<span id="cb3-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get model predictions (forward pass). </span></span>
<span id="cb3-47">        ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(X)</span>
<span id="cb3-48"></span>
<span id="cb3-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss. </span></span>
<span id="cb3-50">        loss_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(ypred, yactual)</span>
<span id="cb3-51"></span>
<span id="cb3-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation and optimizer step. </span></span>
<span id="cb3-53">        loss_ii.backward()</span>
<span id="cb3-54">        optimizer.step()</span>
<span id="cb3-55"></span>
<span id="cb3-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update running_loss.</span></span>
<span id="cb3-57">        loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>loss_ii.item()</span>
<span id="cb3-58">        correct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>(ypred.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>yactual).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb3-59">        samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>yactual.size(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-60"></span>
<span id="cb3-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print running_loss for every 100 mini-batches.</span></span>
<span id="cb3-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-63">            checkpoint_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> samples</span>
<span id="cb3-64">            checkpoint_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span></span>
<span id="cb3-65"></span>
<span id="cb3-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> verbose:</span>
<span id="cb3-67">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">+ [train][epoch=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, batch=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] loss = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, acc = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb3-68">            </span>
<span id="cb3-69">            loss, correct, samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-70"></span>
<span id="cb3-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> checkpoint_loss, checkpoint_acc</span>
<span id="cb3-72">        </span>
<span id="cb3-73"></span>
<span id="cb3-74"></span>
<span id="cb3-75"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> epoch_validator(data_loader, model, loss_fn, optimizer, device):</span>
<span id="cb3-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Execute a single validation epoch. Return average validation loss</span></span>
<span id="cb3-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and accuracy.</span></span>
<span id="cb3-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-80">    valid_loss, correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-81"></span>
<span id="cb3-82">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put model in validation mode.</span></span>
<span id="cb3-83">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb3-84"></span>
<span id="cb3-85">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb3-86"></span>
<span id="cb3-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, (X, yactual) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(data_loader, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-88"></span>
<span id="cb3-89">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Send dataset and target to device. </span></span>
<span id="cb3-90">            X, yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.to(device), yactual.to(device)</span>
<span id="cb3-91"></span>
<span id="cb3-92">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get model predictions. </span></span>
<span id="cb3-93">            ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(X)</span>
<span id="cb3-94"></span>
<span id="cb3-95">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss and update valid_loss.</span></span>
<span id="cb3-96">            valid_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>loss_fn(ypred, yactual).item()</span>
<span id="cb3-97"></span>
<span id="cb3-98">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count number of correct class predictions.</span></span>
<span id="cb3-99">            correct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>(ypred.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>yactual).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb3-100"></span>
<span id="cb3-101">    loss, acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ii, correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader.dataset)</span>
<span id="cb3-102"></span>
<span id="cb3-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> loss, acc</span></code></pre></div>
</div>
<p><br></p>
<p>Configure training parameters.</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> optim</span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Configuration ----------------------------------------------------------------</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of epochs.</span></span>
<span id="cb4-8">n_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate.</span></span>
<span id="cb4-11">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Momentum.</span></span>
<span id="cb4-14">momentum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.90</span></span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dropout.</span></span>
<span id="cb4-17">dropout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ------------------------------------------------------------------------------</span></span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if gpu is available. If not, use cpu. </span></span>
<span id="cb4-22">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda:0"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize instance of BasicCNN. Put on device for completeness.</span></span>
<span id="cb4-25">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BasicCNN(dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout).to(device)</span>
<span id="cb4-26"></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify loss function.</span></span>
<span id="cb4-28">loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify optimizer. </span></span>
<span id="cb4-31">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim.SGD(mdl.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>momentum)</span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-34"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>device: cpu</code></pre>
</div>
</div>
<p><br></p>
<p>Train model for 25 epochs.</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb6-5"></span>
<span id="cb6-6">    tloss, tacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epoch_trainer(</span>
<span id="cb6-7">        epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch, data_loader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_loader, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mdl, loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_fn, </span>
<span id="cb6-8">        optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb6-9">        )</span>
<span id="cb6-10">    </span>
<span id="cb6-11">    vloss, vacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epoch_validator(</span>
<span id="cb6-12">        data_loader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_loader, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mdl, loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_fn, </span>
<span id="cb6-13">        optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device</span>
<span id="cb6-14">        )</span>
<span id="cb6-15">    </span>
<span id="cb6-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[epoch=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]: tloss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tloss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, tacc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tacc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, vloss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vloss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, vacc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vacc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb6-17"></span>
<span id="cb6-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append metrics to results.</span></span>
<span id="cb6-19">    results.append((tloss, tacc, vloss, vacc))</span>
<span id="cb6-20"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[epoch=1]: tloss=2.11117, tacc=0.23975, vloss=2.01603, vacc=0.27400.
[epoch=2]: tloss=1.71003, tacc=0.36488, vloss=1.68098, vacc=0.37990.
[epoch=3]: tloss=1.54233, tacc=0.44200, vloss=1.53085, vacc=0.44330.
[epoch=4]: tloss=1.43812, tacc=0.48037, vloss=1.42335, vacc=0.47970.
[epoch=5]: tloss=1.37371, tacc=0.50675, vloss=1.34363, vacc=0.51350.
[epoch=6]: tloss=1.31023, tacc=0.53050, vloss=1.30940, vacc=0.53170.
[epoch=7]: tloss=1.25473, tacc=0.55137, vloss=1.26415, vacc=0.54980.
[epoch=8]: tloss=1.19880, tacc=0.58000, vloss=1.20769, vacc=0.57130.
[epoch=9]: tloss=1.14536, tacc=0.60250, vloss=1.23778, vacc=0.56390.
[epoch=10]: tloss=1.10834, tacc=0.60925, vloss=1.15941, vacc=0.58830.
[epoch=11]: tloss=1.10043, tacc=0.61250, vloss=1.12090, vacc=0.60210.
[epoch=12]: tloss=1.06026, tacc=0.62600, vloss=1.11189, vacc=0.60440.
[epoch=13]: tloss=1.04040, tacc=0.63150, vloss=1.10926, vacc=0.60780.
[epoch=14]: tloss=0.98636, tacc=0.65163, vloss=1.08105, vacc=0.62470.
[epoch=15]: tloss=0.99510, tacc=0.65763, vloss=1.11601, vacc=0.60920.
[epoch=16]: tloss=0.93263, tacc=0.67000, vloss=1.04570, vacc=0.63480.
[epoch=17]: tloss=0.92362, tacc=0.67175, vloss=1.03489, vacc=0.63770.
[epoch=18]: tloss=0.89687, tacc=0.68788, vloss=1.03604, vacc=0.64380.
[epoch=19]: tloss=0.88411, tacc=0.69112, vloss=1.07083, vacc=0.62580.
[epoch=20]: tloss=0.84812, tacc=0.69963, vloss=1.03803, vacc=0.64410.
[epoch=21]: tloss=0.82565, tacc=0.70750, vloss=1.01656, vacc=0.64570.
[epoch=22]: tloss=0.81153, tacc=0.71813, vloss=1.02534, vacc=0.65150.
[epoch=23]: tloss=0.80340, tacc=0.72525, vloss=1.04477, vacc=0.64590.
[epoch=24]: tloss=0.80007, tacc=0.72150, vloss=1.01501, vacc=0.65290.
[epoch=25]: tloss=0.78900, tacc=0.72288, vloss=1.03552, vacc=0.64820.</code></pre>
</div>
</div>
<p><br></p>
<p>The gradient of the model’s output class score (or a specific neuron’s activation) with respect to the input image pixels is computed. The gradients are computed using backpropagation through the model. This involves propagating the gradients backward from the output layer to the input layer while computing the partial derivatives of the output with respect to the input. The magnitude of the gradients indicates how sensitive the model’s output is to changes in each pixel of the input image. Pixels with higher magnitude gradients are considered more salient and are highlighted in the saliency map. Once the gradients are computed, they are typically normalized and then visualized as a saliency map, where brighter regions correspond to more salient parts of the image and darker regions correspond to less salient parts.</p>
<p>Below is a function which computes the saliency map for a give image in CIFAR-10, and returns the map with the original image. This can also be accomplished using libraries such has captum, but for this demonstration we’re keeping it simple:</p>
<div id="cell-10" class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_saliency(tensor, model):</span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return saliency map and original image.</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put original image pixels on [0, 1].</span></span>
<span id="cb8-8">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor.squeeze().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).detach().numpy()</span>
<span id="cb8-9"></span>
<span id="cb8-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># img = cv2.resize(img, (224, 224))</span></span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># img = resize(img, (32, 32))</span></span>
<span id="cb8-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># img /= np.max(np.abs(img), axis=0)</span></span>
<span id="cb8-13"></span>
<span id="cb8-14">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb8-15">    tensor.requires_grad_()</span>
<span id="cb8-16">    scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(tensor)</span>
<span id="cb8-17"></span>
<span id="cb8-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the index corresponding to the maximum score and the maximum score itself.</span></span>
<span id="cb8-19">    score_max_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores.argmax()</span>
<span id="cb8-20">    score_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, score_max_index]  </span>
<span id="cb8-21"></span>
<span id="cb8-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backward method on score_max performs the backward pass in the computation </span></span>
<span id="cb8-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># graph and calculates the gradient of score_max with respect to nodes in the </span></span>
<span id="cb8-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># graph.</span></span>
<span id="cb8-25">    score_max.backward()</span>
<span id="cb8-26"></span>
<span id="cb8-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Saliency would be the gradient with respect to the input image. But note that </span></span>
<span id="cb8-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the input image has 3 channels, R, G and B. To derive a single class saliency </span></span>
<span id="cb8-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># value for each pixel (i, j),  we take the maximum magnitude across all color </span></span>
<span id="cb8-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># channels.</span></span>
<span id="cb8-31">    saliency, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(tensor.grad.data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-32"></span>
<span id="cb8-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return original image along with saliency map. </span></span>
<span id="cb8-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> img, saliency</span>
<span id="cb8-35"></span>
<span id="cb8-36"></span>
<span id="cb8-37"></span>
<span id="cb8-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_saliency(img, saliency, actual_label, predicted_label):</span>
<span id="cb8-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Display original image along with saliency map.</span></span>
<span id="cb8-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-42">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-43">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].imshow(img)</span>
<span id="cb8-44">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb8-45">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb8-46">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].imshow(saliency[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.hot)</span>
<span id="cb8-47">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb8-48">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"saliency map"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb8-49">    plt.suptitle(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"actual=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>actual_label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, predicted=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>predicted_label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-50">    plt.show()</span>
<span id="cb8-51">    </span></code></pre></div>
</div>
<p><br></p>
<p>For each image in the batch, display the original image and saliency map side-by-side, along with actual and predicted classes.</p>
<div id="cell-12" class="cell" data-execution_count="75">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get images and labels for first batch of validation set.</span></span>
<span id="cb9-3">images, labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(valid_loader))</span>
<span id="cb9-4">yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels.detach().numpy()</span>
<span id="cb9-5">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl(images).argmax(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).detach().numpy()</span>
<span id="cb9-6"></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For each image in current batch, show original along with saliency map</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with actual and predicted class labels.</span></span>
<span id="cb9-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(yactual)):</span>
<span id="cb9-11">    tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> images[[ii]]</span>
<span id="cb9-12">    img, saliency <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_saliency(tensor, mdl)</span>
<span id="cb9-13">    actual_label, predicted_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classes[yactual[ii]], classes[ypred[ii]]</span>
<span id="cb9-14">    plot_saliency(img, saliency, actual_label, predicted_label)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-6.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-8.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-10.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-12.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-14.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-16.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-18.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-20.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-22.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-24.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-26.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-28.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-30.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-32.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-34.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-36.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-38.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-40.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-42.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-44.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-46.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-48.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-50.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-52.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-54.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-56.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-58.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-60.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-62.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-64.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>We can observe which regions are highlighted in the saliency map for each image, and start to get an idea of which image characteristics result in a particular prediction. This is an informative diagnostic and a valuable technique to use when attempting to explain CNN model output.</p>



 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability.html</guid>
  <pubDate>Thu, 03 Oct 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Generating Correlated Boostrap Reserve Estimates</title>
  <link>https://www.jtrive.com/posts/correl-reserves-r/correl-reserves-r.html</link>
  <description><![CDATA[ 





<p>In this post, a technique to estimate total reserves accounting for correlation between lines of business is introduced. We focus on workers compensation, commercial auto, product liability and other liability data sourced from the CAS Loss Reserves Database. We’ll demonstrate how to account for correlation between lines, and show how changes to the correlation assumption affects the total reserve estimate.</p>
<p>The <a href="https://www.casact.org/publications-research/research/research-resources/loss-reserving-data-pulled-naic-schedule-p">CAS Loss Reserves Database</a> represents a set of triangles intended for use in claims reserving studies. The data includes major personal and commercial lines of business from U.S. property casualty insurers. The claims data comes from Schedule P in the National Association of Insurance Commissioners (NAIC) database. NAIC Schedule P contains information on claims for major personal and commercial lines for all P&amp;C insurers that write business in US.</p>
<p>The data can be downloaded from the CAS website directly using data.table’s <code>fread</code>. We perform some preprocessing to normalize column names and assign like columns the same name in each table.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.table"</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foreach"</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ChainLadder"</span>)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6">DF1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fread</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.casact.org/sites/default/files/2021-04/wkcomp_pos.csv"</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># workers compensation</span></span>
<span id="cb1-7">DF2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fread</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.casact.org/sites/default/files/2021-04/comauto_pos.csv"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># commercial auto</span></span>
<span id="cb1-8">DF3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fread</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.casact.org/sites/default/files/2021-04/prodliab_pos.csv"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># product liability</span></span>
<span id="cb1-9">DF4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fread</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.casact.org/sites/default/files/2021-04/othliab_pos.csv"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># other liability</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(DF1) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(DF1))</span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(DF2) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(DF2))</span>
<span id="cb1-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(DF3) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(DF3))</span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(DF4) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(DF4))</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setnames</span>(</span>
<span id="cb1-17">    DF1, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"incurloss_d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bulkloss_d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accidentyear"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"developmentlag"</span>),</span>
<span id="cb1-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"incurloss"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bulkloss"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>)</span>
<span id="cb1-19">    )</span>
<span id="cb1-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setnames</span>(</span>
<span id="cb1-21">    DF2, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"incurloss_c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bulkloss_c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accidentyear"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"developmentlag"</span>),</span>
<span id="cb1-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"incurloss"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bulkloss"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>)</span>
<span id="cb1-23">    )</span>
<span id="cb1-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setnames</span>(</span>
<span id="cb1-25">    DF3, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"incurloss_r1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bulkloss_r1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accidentyear"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"developmentlag"</span>),</span>
<span id="cb1-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"incurloss"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bulkloss"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>)</span>
<span id="cb1-27">    )</span>
<span id="cb1-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setnames</span>(</span>
<span id="cb1-29">    DF4, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"incurloss_h1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bulkloss_h1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accidentyear"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"developmentlag"</span>),</span>
<span id="cb1-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"incurloss"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bulkloss"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>)</span>
<span id="cb1-31">    )</span>
<span id="cb1-32"></span>
<span id="cb1-33">dfList <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wkcomp=</span>DF1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comauto=</span>DF2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prodliab=</span>DF3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">othliab=</span>DF4) </span></code></pre></div>
<p><br></p>
<p>Each dataset contains loss data indexed by grcode, which is a company id. We need to find a company with losses in DF1, DF2, DF3 and DF4. This can be accomplished with the following:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">grcodes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reduce</span>(</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(v1, v2) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">intersect</span>(v1, v2),</span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(dfList, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(DF) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(DF[,grcode]))</span>
<span id="cb2-4">    )</span>
<span id="cb2-5">grnamesDF <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(</span>
<span id="cb2-6">    DF1[grcode <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> grcodes, .(grcode, grname)]</span>
<span id="cb2-7">    )</span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setorderv</span>(grnamesDF, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grcode"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<p><br></p>
<p>Which yields:</p>
<pre class="text"><code>    grcode                              grname
 1:    337                  California Cas Grp
 2:    715               West Bend Mut Ins Grp
 3:   1066                  Island Ins Cos Grp
 4:   1538              Farmers Automobile Grp
 5:   1767                  State Farm Mut Grp
 6:   2143   Farmers Alliance Mut &amp; Affiliates
 7:   5185                    Grinnell Mut Grp
 8:   7080        New Jersey Manufacturers Grp
 9:   9466                      Lumber Ins Cos
10:  10048    Hyundai Marine &amp; Fire Ins Co Ltd
11:  11126 Yasuda Fire &amp; Marine Ins Co Of Amer
12:  13439                 Partners Mut Ins Co
13:  13528              Brotherhood Mut Ins Co
14:  13587                  Chicago Mut Ins Co
15:  14044                Goodville Mut Cas Co
16:  14257                      IMT Ins Co Mut
17:  14370                  Lebanon Mut Ins Co
18:  14508         Michigan Millers Mut Ins Co
19:  15024                Preferred Mut Ins Co
20:  18791                 Virginia Mut Ins Co
21:  23663            National American Ins Co
22:  26433                   Harco Natl Ins Co
23:  28258             Continental Natl Ind Co
24:  35408                  Sirius Amer Ins Co
25:  38300    Samsung Fire &amp; Marine Ins Co Ltd
26:  38733                   Alaska Nat Ins Co
27:  44091 Dowa Fire &amp; Marine Ins Co Ltd Us Br
    grcode                              grname</code></pre>
<p><br></p>
<p>Let’s go with <strong>1767</strong>, which represents State Farm. In the next code block, we subset each data.table to only those records with <code>grcode=="1767"</code>, then create runoff triangles for each line of business:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">GRCODE <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1767</span> </span>
<span id="cb4-2">grList <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(dfList, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(DF) DF[grcode<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>GRCODE,])</span>
<span id="cb4-3"></span>
<span id="cb4-4">triData <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(</span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(grList), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.inorder=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.errorhandling=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stop"</span>,</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.final=</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(ll) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(ll, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(grList))</span>
<span id="cb4-7">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb4-8">    currLOB <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(grList)[[ii]]</span>
<span id="cb4-9">    DFInit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> grList[[ii]]</span>
<span id="cb4-10">    DF <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> DFInit[dev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(origin) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> origin <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]</span>
<span id="cb4-11">    DF[,value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span>incurloss <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bulkloss]</span>
<span id="cb4-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.triangle</span>(DF[,.(origin, dev, value)])</span>
<span id="cb4-13">}</span></code></pre></div>
<p><br></p>
<p>Triangles for each lob are presented below:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> triData</span>
<span id="cb5-2"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wkcomp</span>
<span id="cb5-3">      dev</span>
<span id="cb5-4">origin      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb5-5">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1988</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50758</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">94150</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">106804</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">113733</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120148</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123986</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">127650</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128622</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">129791</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130625</span></span>
<span id="cb5-6">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1989</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65423</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110204</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">131509</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140383</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">147011</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150266</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">152264</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">155017</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">155979</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-7">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1990</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68719</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">141501</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">165694</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">181789</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">189149</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">194315</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">196897</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">201780</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-8">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1991</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82409</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">165813</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199016</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">213698</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">222994</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">229774</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">232413</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-9">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1992</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">97138</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">183451</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">208163</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220275</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">227404</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">234320</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-10">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1993</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">106508</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">167688</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">195533</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">212777</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220063</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-11">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1994</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">93736</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">141067</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160848</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">173457</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-12">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1995</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">81309</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">116739</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">135447</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-13">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1996</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">66073</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92365</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-14">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1997</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56003</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>prodliab</span>
<span id="cb5-17">      dev</span>
<span id="cb5-18">origin   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb5-19">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1988</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">696</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">737</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">881</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1002</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1379</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1451</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1741</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1814</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1818</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1850</span></span>
<span id="cb5-20">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1989</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">428</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">351</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">617</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">718</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">761</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">788</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">797</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">802</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">804</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-21">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1990</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">135</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">197</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">235</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">263</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-22">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1991</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">141</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">172</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">189</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">190</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-23">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1992</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">109</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">131</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-24">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1993</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">119</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">278</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-25">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1994</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-26">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1995</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-27">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1996</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-28">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1997</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>   <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-29"></span>
<span id="cb5-30"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>comauto</span>
<span id="cb5-31">      dev</span>
<span id="cb5-32">origin      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb5-33">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1988</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110231</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">152848</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">168137</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180062</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">186150</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">188142</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">189352</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">191307</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">191867</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">194000</span></span>
<span id="cb5-34">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1989</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">121678</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158218</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">176744</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">188127</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192966</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">196104</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199178</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199655</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200949</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-35">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1990</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123376</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">175239</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">201955</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">214113</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">219988</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">223308</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">225841</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">226373</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-36">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1991</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">117457</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">162601</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">183338</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">198607</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203398</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">205870</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">206957</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-37">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1992</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">124611</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">166788</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">189771</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">201033</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">206826</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">212361</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-38">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1993</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">137902</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">185952</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">209357</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220428</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">226541</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-39">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1994</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150582</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">194528</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">216205</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">231077</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-40">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1995</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150511</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">194730</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">215037</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-41">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1996</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">142301</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">184283</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-42">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1997</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">143970</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-43"></span>
<span id="cb5-44"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>othliab</span>
<span id="cb5-45">      dev</span>
<span id="cb5-46">origin     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb5-47">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1988</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22417</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">58806</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77536</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103003</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">112976</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120070</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">124641</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">126954</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">127444</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128036</span></span>
<span id="cb5-48">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1989</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24740</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55381</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">76543</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">97608</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">113777</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">124341</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">126171</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128952</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">132618</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-49">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1990</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19432</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">63891</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">94243</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">119678</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">124938</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">129990</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133964</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133949</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-50">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1991</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25821</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">84453</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">136275</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">159204</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">169820</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">172446</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">181744</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-51">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1992</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38377</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98045</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">138205</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">154554</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">171701</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">177467</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-52">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1993</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53001</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150478</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">196273</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224523</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">232681</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-53">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1994</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50848</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">127767</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">187297</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">233255</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-54">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1995</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59140</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">149648</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">215701</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-55">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1996</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">71637</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">159561</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-56">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1997</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82937</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>     <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span></code></pre></div>
<p><br></p>
<p>Next, for each triangle call the <code>BootChainLadder</code> function (available in the ChainLadder library), running 5000 iterations and retaining only the total IBNR samples (discarding IBNR simulations by accident year). We replace simulated values less than or equal to 1 with 1:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">ibnrSimsDF <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(</span>
<span id="cb6-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(triData), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.inorder=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.errorhandling=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stop"</span>,</span>
<span id="cb6-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cbind.data.frame"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.final=</span>setDT</span>
<span id="cb6-4">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb6-5">    tri <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> triData[[ii]]</span>
<span id="cb6-6">    bcl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">BootChainLadder</span>(tri, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">R=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">process.distr=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gamma"</span>)</span>
<span id="cb6-7">    lobSims <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> bcl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>IBNR.Totals</span>
<span id="cb6-8">    lobSims[lobSims<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-9">    lobSims</span>
<span id="cb6-10">}</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set names of each column in simsDataDF to associated LOB.</span></span>
<span id="cb6-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(ibnrSimsDF) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(triData)</span></code></pre></div>
<p><br></p>
<p>Inspecting <code>ibnrSimsDF</code> yields:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(ibnrSimsDF)</span>
<span id="cb7-2">     wkcomp prodliab  comauto  othliab</span>
<span id="cb7-3"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">213282.5</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">309.9531</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">207524.1</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">836339.0</span></span>
<span id="cb7-4"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">185281.3</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">453.1356</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">228032.9</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">876116.3</span></span>
<span id="cb7-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">178462.7</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">263.7076</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">246759.9</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">633045.5</span></span>
<span id="cb7-6"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">204928.1</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">169.7184</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">246953.0</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">641145.2</span></span>
<span id="cb7-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">168382.3</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">408.6908</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">213764.4</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">717701.9</span></span>
<span id="cb7-8"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">158486.8</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">194.0509</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">227606.5</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">711641.2</span></span></code></pre></div>
<p><br></p>
<p><code>ibnrSimsDF</code> contains 5000 rows, with the value in each row representing the total simulated reserve need across all accident years for the lob in question. It is possible to produce histograms of the simulated total IBNR using ggplot2. The code that follows generates a faceted quad-plot of the sampling distribution of total IBNR for each lob, with a vertical dashed red line marking the location of the distribution mean. We first transform <code>ibnrSimsDF</code> into a ggplot2-compatible format (which is <code>ggDF</code>):</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create faceted quad-plot representing sampling distribution of total IBNR.</span></span>
<span id="cb8-2">ggDF <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> data.table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">melt</span>(</span>
<span id="cb8-3">    ibnrSimsDF, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">measure.vars=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(ibnrSimsDF), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value.name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>, </span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variable.name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lob"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variable.factor=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb8-5">    )</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add mean.ibnr for huistogram overlay.</span></span>
<span id="cb8-8">ggDF[,mean.ibnr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(ibnr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), by<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lob"</span>]</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggDF, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>ibnr)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(</span>
<span id="cb8-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept=</span>mean.ibnr), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-14">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb8-16">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.y=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb8-17">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.y=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.x=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()</span>
<span id="cb8-18">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb8-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(</span>
<span id="cb8-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels=</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">big.mark=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scientific=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb8-21">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>lob, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>)</span></code></pre></div>
<p><br></p>
<p>Running the code above produces:</p>
<p><img src="https://www.jtrive.com/posts/correl-reserves-r/correlated0.png" class="img-fluid"></p>
<p><br></p>
<section id="quantifying-total-reserve-variability" class="level3">
<h3 class="anchored" data-anchor-id="quantifying-total-reserve-variability">Quantifying Total Reserve Variability</h3>
<p>If all we are trying to do is determine the expected value of the reserve run-off, we can calculate the expected value for each lob separately and add all the expectations together. However, if we are trying to quantify a value other than the mean (such as the 75th percentile), we cannot simply sum across lines of business. If we do so, we will overstate the aggregate reserve need. The only time the sum of each lob’s 75th percentile would be appropriate for the aggregate reserve indication is when all lines are fully correlated with each other, which is highly unlikely.</p>
<p>To account for correlation between lobs, we rely on the rank correlation methodology described in <a href="https://www.casact.org/sites/default/files/database/forum_02fforum_02ff211.pdf"><em>Two Approaches to Calculating Correlated Reserve Indications Across Multiple Lines of Business</em></a>. The methodology is carried out through a two-step process:</p>
<p>In the first step, a stochastic reserving technique is used to generate N possible reserve runoffs from each data triangle being analyzed (this is what we have in <code>ibnrSimsDF</code>). In the second step, a correlation matrix is specified, where individual elements of the correlation matrix describe the association between different pairs of lobs. With the correlation matrix <img src="https://latex.codecogs.com/png.latex?%5CSigma">, carry out the following steps:</p>
<ol type="1">
<li><p>Compute the Cholesky decomposition of <img src="https://latex.codecogs.com/png.latex?%5CSigma">, that is, find the unique lower triangular matrix <img src="https://latex.codecogs.com/png.latex?A"> such that <img src="https://latex.codecogs.com/png.latex?AA%5E%7BT%7D%20=%20%5CSigma">.</p></li>
<li><p>Compute <img src="https://latex.codecogs.com/png.latex?Z%20=%20(z_%7B1%7D,%20%5Cdots,%20z_%7Bn%7D)%5E%7BT%7D">, a vector whose components are <img src="https://latex.codecogs.com/png.latex?n"> independent standard normal variates (for our example, <img src="https://latex.codecogs.com/png.latex?n=5000">.)</p></li>
<li><p>Let <img src="https://latex.codecogs.com/png.latex?X%20=%20%5Cmu%20+%20AZ">. Since <img src="https://latex.codecogs.com/png.latex?Z"> represents independent draws from the standard normal distribution, the value of the mean vector <img src="https://latex.codecogs.com/png.latex?%5Cmu"> is 0. Therefore correlated random draws are obtained by matrix multiplying <img src="https://latex.codecogs.com/png.latex?A"> with <img src="https://latex.codecogs.com/png.latex?Z">.</p></li>
</ol>
<p>For the correlation matrix, we’ll initially assume no correlation between lobs (all off-diagonal elements=0). Later<br>
we’ll compare estimated reserve need as a function of changing correlation.</p>
<p>The correlation matrix can be initialized as follows:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb9-3">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb9-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb9-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb9-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb9-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dimnames=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(ibnrSimsDF), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(ibnrSimsDF))</span>
<span id="cb9-8">    )</span></code></pre></div>
<p><br></p>
<p>Which looks like the following:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">         wkcomp prodliab comauto othliab</span>
<span id="cb10-2">wkcomp        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-3">prodliab      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-4">comauto       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-5">othliab       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p><br></p>
<p>The next code block implements steps 1-3:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">A <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chol</span>(sigma))</span>
<span id="cb11-2">Z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(A) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(A))</span>
<span id="cb11-3">X <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> Z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> A</span></code></pre></div>
<p><br></p>
<p>Checking out the first few records of <code>X</code> yields:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(X)</span>
<span id="cb12-2">         wkcomp    prodliab    comauto    othliab</span>
<span id="cb12-3">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2256225</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.66492692</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8239846</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5497317</span></span>
<span id="cb12-4">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,]  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1101583</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.60652201</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9572046</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5200923</span></span>
<span id="cb12-5">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5961369</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.13732270</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5355783</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0622470</span></span>
<span id="cb12-6">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,]  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6863108</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02719480</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1086142</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4941367</span></span>
<span id="cb12-7">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,]  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3918400</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.09805293</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3412182</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1409186</span></span>
<span id="cb12-8">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,]  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5547157</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.57012447</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1263973</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7135559</span></span></code></pre></div>
<p><br></p>
<p>For each column in X, we need to obtain the rank of each correlated random draw. This can be accomplished by running:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">rankX <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(X), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cbind"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rank</span>(X[,ii]) }</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(rankX) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(sigma)</span></code></pre></div>
<p>Inspecting the first few records from <code>rankX</code> yields:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(rankX)</span>
<span id="cb14-2">     wkcomp prodliab comauto othliab</span>
<span id="cb14-3">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2971</span>     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3758</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3975</span>     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">293</span></span>
<span id="cb14-4">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,]   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2751</span>     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3658</span>     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">856</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1493</span></span>
<span id="cb14-5">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,]   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1393</span>     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2759</span>     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">288</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4335</span></span>
<span id="cb14-6">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,]   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3785</span>      <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">782</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2746</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1544</span></span>
<span id="cb14-7">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,]   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4619</span>     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2684</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3178</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2221</span></span>
<span id="cb14-8">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,]   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3569</span>     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4687</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2784</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3866</span></span></code></pre></div>
<p><br></p>
<p>To prepare for the rank correlation step, we need to order the total IBNR simulations from smallest to largest within each lob column:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Order total bootstrapped ibnr samples from smallest to largest. </span></span>
<span id="cb15-2">orderedSimsDF <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(</span>
<span id="cb15-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(ibnrSimsDF)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cbind.data.frame"</span>,</span>
<span id="cb15-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.final=</span>setDT</span>
<span id="cb15-5">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb15-6">    currLOB <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(ibnrSimsDF)[[ii]]</span>
<span id="cb15-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(ibnrSimsDF[[currLOB]])</span>
<span id="cb15-8">}</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(orderedSimsDF) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(ibnrSimsDF)</span></code></pre></div>
<p>Then for each rank in <code>rankX</code>, we lookup the corresponding position-wise element from <code>orderedSimsDF</code>. This ensures that the rank order correlations between lobs are the same as the correlations imposed on the random normal samples. For example, the first row of <code>rankX</code> is:</p>
<pre><code>  wkcomp prodliab  comauto  othliab 
    2971     3758     3975      293 </code></pre>
<p><br></p>
<p>Then using <code>orderedSimsDF</code>, we lookup the 2971st element under wkcomp, the 3758th element under prodliab, the 3975th element under comauto and the 293rd element under othliab. This can be accomplished as follows:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get correlated IBNR samples.</span></span>
<span id="cb17-2">corrIBNR <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(</span>
<span id="cb17-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(orderedSimsDF)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cbind"</span></span>
<span id="cb17-4">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb17-5">    currLOB <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(orderedSimsDF)[[ii]]</span>
<span id="cb17-6">    lobIndx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> rankR[,currLOB]</span>
<span id="cb17-7">    orderedSimsDF[lobIndx, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(currLOB)]</span>
<span id="cb17-8">}</span>
<span id="cb17-9"></span>
<span id="cb17-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(corrIBNR) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(orderedSimsDF)</span></code></pre></div>
<p><br></p>
<p>Finally, we sum the correlated samples across lobs, resulting in a vector of values representing the aggregate reserve distribution:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">totalIBNR <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(corrIBNR, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">MARGIN=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sum)</span></code></pre></div>
<p><br></p>
<p>Percentiles of the aggregate IBNR distribution can be obtained by calling:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(totalIBNR, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>))</span>
<span id="cb19-2">       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%       25%</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%       75%</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>% </span>
<span id="cb19-3"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">962340.6</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1107900.3</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1171348.8</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1241553.0</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1428743.0</span> </span></code></pre></div>
<p><br></p>
</section>
<section id="comparing-different-values-of-sigma" class="level3">
<h3 class="anchored" data-anchor-id="comparing-different-values-of-sigma">Comparing different values of <img src="https://latex.codecogs.com/png.latex?%5CSigma"></h3>
<p>We’ve re-run the procedure described in the previous section for 5 different correlation matrices, assuming 0, .25, .50, .75 and .99 off-diagonal correlation, and combined the results into a single data.table <code>qqDF</code>. I then estimated the 1st, 25th, 50th, 75th and 99th percentile of each aggregate reserve distribution and created an exhibit comparing the distribution of each as a function of percentile. The code used to create the exhibit is given below:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ------------------------------------------------------------------------</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume qqDF contains  1st, 25th, 50th, 75th and 99th percentile of the</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># aggregate IBNR distribution for off-diagonal correlation values of </span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0, .25, .50, .75 and .99. The first few records of qqDF look like:</span></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#          rho    x         y</span></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       1:  0% 0.00  871243.8</span></span>
<span id="cb20-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       2:  0% 0.25 1107900.3</span></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       3:  0% 0.50 1171348.8</span></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       4:  0% 0.75 1241553.0</span></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       5:  0% 0.99 1428743.0</span></span>
<span id="cb20-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span></span>
<span id="cb20-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ------------------------------------------------------------------------</span></span>
<span id="cb20-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(qqDF, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y=</span>y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color=</span>rho), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size=</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(</span>
<span id="cb20-16">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels=</span><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">big.mark=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scientific=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb20-17">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb20-19">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.y=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.x=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()</span>
<span id="cb20-20">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlim</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggtitle</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Aggregate reserve distribution by off-diagonal correlation"</span>)</span></code></pre></div>
<p><br></p>
<p>Which produces:</p>
<p><img src="https://www.jtrive.com/posts/correl-reserves-r/correlated1.png" class="img-fluid"></p>
<p><br></p>
<p>By setting <code>xlim(.50, 1)</code>, we can zoom in on the right-hand side of the distribution:</p>
<p><img src="https://www.jtrive.com/posts/correl-reserves-r/correlated2.png" class="img-fluid"></p>
<p><br></p>
<p>We see that around .50 mark on the x-axis, there is essntially no difference between 0% and 25% off-diagonal correlation assumption. However, as we move right along the x-axis, there’s a greater and greater discrepancy. when x=.99, the difference in the estimated total needed reserve is ~50,000, which represents approximately a 5% difference.</p>
<p><strong>A few take-aways:</strong></p>
<ul>
<li><p>If the goal is to determine the expected value of the reserve run-off, the expected value for each lob can be computed separately then added together.</p></li>
<li><p>If the aim is to quantify a value other than the mean such as the 75th percentile, we cannot simply sum across the lines of business, as this is akin to assuming full correlation between lines of business, which is unlikely and will overstate the aggregate reserve need.</p></li>
<li><p>Off-diagonal correlation values do not need to be the same, but the matrix does need to be symmetric (identical values at <img src="https://latex.codecogs.com/png.latex?m_%7Bi,j%7D"> and <img src="https://latex.codecogs.com/png.latex?m_%7Bj,i%7D">).</p></li>
<li><p>See <a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2597405">Correlations between insurance lines of business: An illusion or a real phenomenon? Some methodological considerations</a> for further context.</p></li>
</ul>


</section>

 ]]></description>
  <category>Statistical Modeling</category>
  <category>R</category>
  <guid>https://www.jtrive.com/posts/correl-reserves-r/correl-reserves-r.html</guid>
  <pubDate>Thu, 26 Sep 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to Markov Chain Monte Carlo - The Metropolis-Hastings Algorithm</title>
  <link>https://www.jtrive.com/posts/introduction-to-metropolis-hastings/introduction-to-metropolis-hastings.html</link>
  <description><![CDATA[ 





<p>Markov Chain Monte Carlo (MCMC) is a class of algorithms used to sample from probability distributions when direct sampling is difficult or inefficient. It leverages Markov chains to explore the target distribution and Monte Carlo methods to perform repeated random sampling. MCMC algorithms are widely used in the insurance industry, particularly in areas involving risk assessment, pricing, reserving, and capital modeling. Markov Chain Monte Carlo is an alternative to rejection sampling, which can be inefficient when dealing with high-dimensional probability distributions. MCMC is considered a Bayesian approach to statistical inference since it incorporates both prior knowledge and observed data into the estimation of the posterior distribution.</p>
<p>The <em>Metropolis-Hastings</em> algorithm is a method used to generate a sequence of samples from a probability distribution for which direct sampling might be difficult. It is a particiular variant of MCMC, which approximates a desired distribution by creating a chain of values that resemble samples drawn from that distribution. The algorithm generates a sequence of samples by proposing new candidates and deciding whether to accept or reject them based on a ratio of probabilities from the target distribution.</p>
<p>Before getting into the details of Metropolis-Hastings, a few key definitions:</p>
<p><strong>Likelihood</strong>: <br> The apriori assumption specifying the distribution from which the data are assumed to originate. For example, if we assume losses follow an exponential distribution within unknown parameter <img src="https://latex.codecogs.com/png.latex?%5Ctheta">, this is equivalent to specifying an exponential likelihood. Symbolically, the likelihood is represented as <img src="https://latex.codecogs.com/png.latex?f(x%7C%5Ctheta)">.</p>
<p><strong>Prior</strong>:<br> Sticking with the exponential likelihood example, once we’ve proposed the likelihood, we need to specify a distribution for each parameter of the likelihood. In the case of the exponential there is only a single parameter, <img src="https://latex.codecogs.com/png.latex?%5Ctheta">. Typically when selecting prior distributions, it should have the same domain as the parameter itself. When parameterizing the exponential distribution, we know that <img src="https://latex.codecogs.com/png.latex?0%20%3C%20%5Ctheta%20%3C%20%5Cinfty">, so the prior distribution should be valid on <img src="https://latex.codecogs.com/png.latex?(0,%20%5Cinfty)">. Valid distributions for <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> are gamma, lognormal, pareto, weibull, etc. Invalid distributions would be any discrete distribution or the normal distribution. Symbolically, the prior is represented as <img src="https://latex.codecogs.com/png.latex?f(%5Ctheta)">.</p>
<p><strong>Posterior</strong>: <br> This is the expression which encapsulates the power, simplicity and flexibility of the Bayesian approach and is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7BPosterior%7D%20%5Cpropto%20%5Cmathrm%7BLikelihood%7D%20%5Ctimes%20%5Cmathrm%7BPrior%7D%0A"></p>
<p>The posterior is represented as <img src="https://latex.codecogs.com/png.latex?f(%5Ctheta%7Cx)">, so the above expression becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Ctheta%7Cx)%20%5Cpropto%20f(x%7C%5Ctheta)%20f(%5Ctheta).%0A"></p>
<p>We can update the proportionality to direct equality by the inclusion of a normalizing constant, which ensures the expression on the RHS integrates to 1:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Ctheta%7Cx)%20=%20%5Cfrac%7Bf(x%7C%5Ctheta)%20%20f(%5Ctheta)%7D%7Bf(x)%7D.%0A"></p>
<section id="metropolis-hastings-outline" class="level3">
<h3 class="anchored" data-anchor-id="metropolis-hastings-outline">Metropolis-Hastings Outline</h3>
<p>Suppose we have a collection of <img src="https://latex.codecogs.com/png.latex?%5C%7B%5Ctheta%5E%7B(1)%7D,%20%5Cdots%20%5Ctheta%5E%7B(s)%7D%5C%7D">, to which we would like to add a new value <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s+1)%7D">. We generate a sample from our transition kernel <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D"> which is nearby <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s)%7D">.</p>
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?f(%5Ctheta%5E%7B*%7D%7Cy)%20%3E%20f(%5Ctheta%5E%7B(s)%7D%7Cy)">, then we should include <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D"> with probability 1.<br>
</li>
<li>If <img src="https://latex.codecogs.com/png.latex?f(%5Ctheta%5E%7B*%7D%7Cy)%20%3C%20f(%5Ctheta%5E%7B(s)%7D%7Cy)">, we will include <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D"> with probability determined by the acceptance ratio.</li>
</ul>
<p>For <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D">, the posterior is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Ctheta%5E%7B*%7D%7Cy)%20%20=%20%5Cfrac%7Bf(y%7C%5Ctheta%5E%7B*%7D)%20f(%5Ctheta%5E%7B*%7D)%7D%7Bf(y)%7D,%0A"></p>
<p>and for <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s)%7D">, the posterior is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Ctheta%5E%7B(s)%7D%7Cy)%20%20=%20%5Cfrac%7Bf(y%7C%5Ctheta%5E%7B(s)%7D)%20f(%5Ctheta%5E%7B(s)%7D)%7D%7Bf(y)%7D.%0A"></p>
<p><br></p>
<p>Next, compute the acceptance ratio, <img src="https://latex.codecogs.com/png.latex?%5Calpha">, as <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bf(%5Ctheta%5E%7B*%7D%7Cy)%7D%7Bf(%5Ctheta%5E%7B(s)%7D%7Cy)%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha%20=%20%5Cfrac%7Bf(%5Ctheta%5E%7B*%7D%7Cy)%7D%7Bf(%5Ctheta%5E%7B(s)%7D%7Cy)%7D%20=%20%5Cfrac%7Bf(y%7C%5Ctheta%5E%7B*%7D)%20f(%5Ctheta%5E%7B*%7D)%7D%7Bf(y)%7D%20%5Ctimes%20%5Cfrac%7Bf(y)%7D%7Bf(y%7C%5Ctheta%5E%7B(s)%7D)%20f(%5Ctheta%5E%7B(s)%7D)%7D%20=%20%5Cfrac%7Bf(y%7C%5Ctheta%5E%7B*%7D)%20f(%5Ctheta%5E%7B*%7D)%7D%7Bf(y%7C%5Ctheta%5E%7B(s)%7D)%20f(%5Ctheta%5E%7B(s)%7D)%7D.%0A"> <br></p>
<ul>
<li><p>If <img src="https://latex.codecogs.com/png.latex?%5Calpha"> &gt;= 1: We add <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D"> to our collection of samples, since it has a higher likelihood than <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s)%7D">. Set <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s%20+%201)%7D%20=%20%5Ctheta%5E%7B*%7D">.</p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?%5Calpha"> &lt; 1: Set <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s%20+%201)%7D%20=%20%5Ctheta%5E%7B*%7D"> with probability <img src="https://latex.codecogs.com/png.latex?%5Calpha">.</p></li>
</ul>
<p>Notice that the acceptance ratio is calculated without needing to compute the normalizing constant <img src="https://latex.codecogs.com/png.latex?f(y)">, which can be difficult to do, especially in high-dimensional settings. This is the power of Metropolis-Hastings and MCMC in general: It provides a way to approximate the posterior distribution by generating samples from it without direct calculation of the normalizing constant.</p>
<p><br></p>
<p>Metropolis-Hastings accept-reject logic can be summarized in three steps:</p>
<ol type="1">
<li>Generate sample from proposal distribution / transition kernel <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D%20%5Csim%20J(%5Ctheta%7C%5Ctheta%5E%7B(s)%7D)">.</li>
<li>Compute acceptance ratio <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%20%5Cfrac%7Bf(y%7C%5Ctheta%5E%7B*%7D)%20f(%5Ctheta%5E%7B*%7D)%7D%7Bf(y%7C%5Ctheta%5E%7B(s)%7D)%20f(%5Ctheta%5E%7B(s)%7D)%7D">.</li>
<li>Sample <img src="https://latex.codecogs.com/png.latex?u%20%5Csim%20%5Cmathrm%7Buniform%7D(0,%201)">.
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cgeq%20u">, set <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s%20+%201)%7D%20=%20%5Ctheta%5E%7B*%7D">.</li>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%3C%20u">, set <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s%20+%201)%7D%20=%20%5Ctheta%5E%7B(s)%7D">.</li>
</ul></li>
</ol>
<p><br></p>
</section>
<section id="conjugate-priors" class="level3">
<h3 class="anchored" data-anchor-id="conjugate-priors">Conjugate Priors</h3>
<p><a href="(https://en.wikipedia.org/wiki/Conjugate_prior#cite_note-beta_rate-7)">Conjugate priors</a> are a class of prior distributions in Bayesian statistics that result in a posterior distribution that has the same functional form as the prior when combined with a particular likelihood function. This makes the posterior distribution easier to compute and analyze, as it remains within the same family of distributions as the prior. For example, if we select an exponential likelihood with a gamma prior, the posterior distribution is also gamma, with a specified parameterization.</p>
<p>Further, many of these conjugate priors have analytical expressions for the posterior predictive distribution, which represents the modeled target output of our analysis. We can use conjugate prior relationships as a means to validate the output of our MCMC sampler.</p>
<p><br></p>
<p><br></p>
</section>
<section id="example-conjugate-normal-normal-model-with-known-variance" class="level3">
<h3 class="anchored" data-anchor-id="example-conjugate-normal-normal-model-with-known-variance">Example: Conjugate Normal-Normal Model with Known Variance</h3>
<p>Let’s start with a simple example where we assume a model with normal likelihood and prior (adapted from Chapter 10 of <em>A First Course in Bayesian Statistical Methods</em> by Peter Hoff). Assume:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5C%7By_%7B1%7D,%20%5Cdots,%20y_%7Bn%7D%5C%7D%20%5Csim%20%5Cmathcal%7BN%7D(%5Cmu,%20%5Csigma%5E%7B2%7D)">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmu%20%5Csim%20%5Cmathcal%7BN%7D(%5Cmu_%7B0%7D,%20%5Csigma%5E%7B2%7D_%7B0%7D)"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D%20=%201"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmu_%7B0%7D%20=%205"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D_%7B0%7D%20=%2010"></li>
<li><img src="https://latex.codecogs.com/png.latex?y%20=%20(9.37,%2010.18,%209.16,%2011.60,%2010.33)"></li>
</ul>
<p><br> Because this model is conjugate, we have analytical expressions for the posterior parameters:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmu_%7B0%7D%5E%7B'%7D%20=%20%5Cfrac%7B1%7D%7B%5Cfrac%7B1%7D%7B%5Csigma%5E%7B2%7D_%7B0%7D%7D%20+%20%5Cfrac%7Bn%7D%7B%5Csigma%5E%7B2%7D%7D%7D%20%5CBigg(%5Cfrac%7B%5Cmu_%7B0%7D%7D%7B%5Csigma%5E%7B2%7D_%7B0%7D%7D%20+%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7D%7D%7B%5Csigma%5E%7B2%7D%7D%20%5CBigg);%20%5Chspace%7B.50em%7D%20%7B%5Csigma%5E%7B2%7D_%7B0%7D%7D%5E%7B'%7D%20=%20%5CBigg(%20%5Cfrac%7B1%7D%7B%5Csigma%5E%7B2%7D_%7B0%7D%7D%20+%20%5Cfrac%7Bn%7D%7B%5Csigma%5E%7B2%7D%7D%20%5CBigg)%5E%7B-1%7D%0A"></p>
<p><br></p>
<p>We can compute these quantities for later reference:</p>
<div id="cell-2" class="cell" data-tags="[]" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute posterior mean and variance using closed-form expressions. </span></span>
<span id="cb1-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.37</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.18</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.16</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.60</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.33</span>]</span>
<span id="cb1-4">s2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-5">mu_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-6">s2_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-7">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y)</span>
<span id="cb1-8"></span>
<span id="cb1-9">mu_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> s2_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> s2)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (mu_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>  s2_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> s2)</span>
<span id="cb1-10">s2_posterior  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> s2_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> s2)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mu_prior     : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mu_prior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"s2_prior     : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>s2_prior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mu_posterior : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mu_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"s2_posterior : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>s2_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mu_prior     : 5.000
s2_prior     : 10.000
mu_posterior : 10.027
s2_posterior : 0.196</code></pre>
</div>
</div>
<p>The posterior distribution parameter estimates have been updated in the direction of the data. Next imagine a scenario in which closed form expressions for posterior parameters did not exist, and it was necessary to use Metropolis-Hastings to approximate the posterior. The acceptance ratio comparing <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D"> to <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s)%7D"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha%20=%20%5Cfrac%7Bf(%5Ctheta%5E%7B*%7D%7Cy)%7D%7Bf(%5Ctheta%5E%7B(s)%7D%7Cy)%7D%20=%20%5CBigg(%5Cfrac%7B%5Cprod_%7Bi=1%7D%5E%7Bn%7D%20%5Cmathrm%7Bdnorm%7D(y_%7Bi%7D,%20%5Ctheta%5E%7B*%7D,%20%5Csigma)%7D%7B%5Cprod_%7Bi=1%7D%5E%7Bn%7D%20%5Cmathrm%7Bdnorm%7D(y_%7Bi%7D,%20%5Ctheta%5E%7B(s)%7D,%20%5Csigma)%7D%5CBigg)%20%5Ctimes%20%5CBigg(%5Cfrac%7B%5Cmathrm%7Bdnorm%7D(%5Ctheta%5E%7B*%7D,%20%5Cmu_%7B0%7D,%20%5Csigma_%7B0%7D)%7D%7B%5Cmathrm%7Bdnorm%7D(%5Ctheta%5E%7B(s)%7D,%20%5Cmu_%7B0%7D,%20%5Csigma_%7B0%7D)%7D%5CBigg).%0A"></p>
<p><br></p>
<p>An implementation of Metropolis-Hastings to recover the posterior mean is provided below.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Implementation of Metropolis-Hastings algorithm for normal likelihood </span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">and normal prior with known variance.</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Goal is to recover the posterior distribution of the unknown parameter mu. </span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> norm</span>
<span id="cb3-8"></span>
<span id="cb3-9">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb3-10"></span>
<span id="cb3-11"></span>
<span id="cb3-12">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.37</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.18</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.16</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.60</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.33</span>]</span>
<span id="cb3-13"></span>
<span id="cb3-14">nbr_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of samples to generate.</span></span>
<span id="cb3-15">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard deviation of likelihood.</span></span>
<span id="cb3-16">s0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prior standard deviation.</span></span>
<span id="cb3-17">mu0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prior mean.</span></span>
<span id="cb3-18">s_prop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard deviation of proposal distribution / transition kernel.</span></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Array to hold posterior samples, initialized with prior mean.</span></span>
<span id="cb3-21">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(nbr_samples)</span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize prior density.</span></span>
<span id="cb3-24">prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu0, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s0)</span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Track the number of accepted samples. </span></span>
<span id="cb3-27">accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbr_samples):</span>
<span id="cb3-30"></span>
<span id="cb3-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get most recently accepted sample.</span></span>
<span id="cb3-32">    theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> samples[ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-33"></span>
<span id="cb3-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate sample from proposal distribution.</span></span>
<span id="cb3-35">    theta_star <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s_prop)</span>
<span id="cb3-36"></span>
<span id="cb3-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute numerator and denominator of acceptance ratio.</span></span>
<span id="cb3-38">    numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta_star, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s).pdf(y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prior.pdf(theta_star)</span>
<span id="cb3-39">    denom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s).pdf(y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prior.pdf(theta)</span>
<span id="cb3-40">    ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> denom</span>
<span id="cb3-41"></span>
<span id="cb3-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random uniform sample.</span></span>
<span id="cb3-43">    u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-44">    </span>
<span id="cb3-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check whether theta_star should be added to samples by comparing ar with u.</span></span>
<span id="cb3-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> u:</span>
<span id="cb3-47">        theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta_star</span>
<span id="cb3-48">        accepted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-49"></span>
<span id="cb3-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update samples array.</span></span>
<span id="cb3-51">    samples[ii] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta</span>
<span id="cb3-52"></span>
<span id="cb3-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-54">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: theta_star: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>theta_star<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, ar: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ar<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, curr_rate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-55"></span>
<span id="cb3-56">acc_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> nbr_samples</span>
<span id="cb3-57"></span>
<span id="cb3-58"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Acceptance rate     : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc_rate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb3-59"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior mean (mh) : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb3-60"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior mean (cp) : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mu_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1000: theta_star: 9.35597, ar: 1.08038, curr_rate: 0.24600
2000: theta_star: 13.01504, ar: 0.00000, curr_rate: 0.25900
3000: theta_star: 9.28924, ar: 0.27716, curr_rate: 0.25567
4000: theta_star: 8.22652, ar: 0.00034, curr_rate: 0.26200
5000: theta_star: 6.09725, ar: 0.00000, curr_rate: 0.26440
6000: theta_star: 10.27182, ar: 2.13374, curr_rate: 0.26483
7000: theta_star: 10.73066, ar: 0.30604, curr_rate: 0.26414
8000: theta_star: 12.76409, ar: 0.00000, curr_rate: 0.26637
9000: theta_star: 8.88424, ar: 0.03592, curr_rate: 0.26522

Acceptance rate     : 0.267.
Posterior mean (mh) : 10.03768.
Posterior mean (cp) : 10.02745.</code></pre>
</div>
</div>
<p>Generally the acceptance rate should fall between 20%-40%, so our result seems reasonable, if not a little on the low side.</p>
<p>In the Metropolis-Hastings update step, we compute the product of many potentially small numbers to determine the acceptance ratio, which can be numerically unstable. We can instead compute the log of the RHS of the acceptance ratio, which will result in more stability especially as the number of data points increases. The posterior estimates will be no different, but we reduce the chance of numerical underflow by replacing the product with a sum. The update step using the log basis is given below:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Implementation of Metropolis-Hastings algorithm for Normal likelihood </span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">and Normal prior with known variance.</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Goal is to recover the posterior distribution of the unknown parameter mu. </span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> norm</span>
<span id="cb5-8"></span>
<span id="cb5-9">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb5-10"></span>
<span id="cb5-11"></span>
<span id="cb5-12">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.37</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.18</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.16</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.60</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.33</span>]</span>
<span id="cb5-13"></span>
<span id="cb5-14">nbr_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of samples to generate.</span></span>
<span id="cb5-15">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard deviation of likelihood.</span></span>
<span id="cb5-16">s0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prior standard deviation.</span></span>
<span id="cb5-17">mu0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prior mean.</span></span>
<span id="cb5-18">s_prop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard deviation of proposal distribution / transition kernel.</span></span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Array to hold posterior samples, initialized with prior mean.</span></span>
<span id="cb5-21">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(nbr_samples)</span>
<span id="cb5-22"></span>
<span id="cb5-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize prior density.</span></span>
<span id="cb5-24">prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu0, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s0)</span>
<span id="cb5-25"></span>
<span id="cb5-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Track the number of accepted samples. </span></span>
<span id="cb5-27">accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-28"></span>
<span id="cb5-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbr_samples):</span>
<span id="cb5-30"></span>
<span id="cb5-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get most recently accepted sample.</span></span>
<span id="cb5-32">    theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> samples[ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-33"></span>
<span id="cb5-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate sample from proposal distribution.</span></span>
<span id="cb5-35">    theta_star <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s_prop)</span>
<span id="cb5-36"></span>
<span id="cb5-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute numerator and denominator of acceptance ratio using log basis. </span></span>
<span id="cb5-38">    ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta_star, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s).logpdf(y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> prior.logpdf(theta_star)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-\</span></span>
<span id="cb5-39">         (np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s).logpdf(y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> prior.logpdf(theta))</span>
<span id="cb5-40"></span>
<span id="cb5-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random uniform sample.</span></span>
<span id="cb5-42">    u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-43">    </span>
<span id="cb5-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check whether theta_star should be added to samples by comparing a with u.</span></span>
<span id="cb5-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> np.log(u):</span>
<span id="cb5-46">        theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta_star</span>
<span id="cb5-47">        accepted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-48"></span>
<span id="cb5-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update samples array.</span></span>
<span id="cb5-50">    samples[ii] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta</span>
<span id="cb5-51"></span>
<span id="cb5-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-53">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: theta_star: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>theta_star<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, ar: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ar<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, curr_rate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-54"></span>
<span id="cb5-55"></span>
<span id="cb5-56">acc_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> nbr_samples</span>
<span id="cb5-57"></span>
<span id="cb5-58"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Acceptance rate   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc_rate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb5-59"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior mean (mh) : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb5-60"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior mean (cp) : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mu_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1000: theta_star: 9.35597, ar: 0.07731, curr_rate: 0.24600
2000: theta_star: 13.01504, ar: -20.59962, curr_rate: 0.25900
3000: theta_star: 9.28924, ar: -1.28315, curr_rate: 0.25567
4000: theta_star: 8.22652, ar: -7.99570, curr_rate: 0.26200
5000: theta_star: 6.09725, ar: -39.02023, curr_rate: 0.26440
6000: theta_star: 10.27182, ar: 0.75788, curr_rate: 0.26483
7000: theta_star: 10.73066, ar: -1.18404, curr_rate: 0.26414
8000: theta_star: 12.76409, ar: -18.37748, curr_rate: 0.26637
9000: theta_star: 8.88424, ar: -3.32637, curr_rate: 0.26522

Acceptance rate   : 0.267.
Posterior mean (mh) : 10.03768.
Posterior mean (cp) : 10.02745.</code></pre>
</div>
</div>
<p>As expected, this aligns with the original non-log basis results.</p>
<p>We can visualize the distribution of posterior samples as well as the traceplot. Traceplots are graphical tools used to diagnose the convergence and mixing of MCMC simulations. They help assess whether the algorithm has properly explored the target distribution and whether the samples are representative of the posterior distribution.</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-4"></span>
<span id="cb7-5"></span>
<span id="cb7-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb7-7"></span>
<span id="cb7-8">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior samples (normal likelihood)"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb7-9">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(</span>
<span id="cb7-10">    samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff7595"</span>, </span>
<span id="cb7-11">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb7-12">    )</span>
<span id="cb7-13">    </span>
<span id="cb7-14">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axvline(mu_posterior, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\mu^{'}$"</span>)</span>
<span id="cb7-15">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_yticklabels([])</span>
<span id="cb7-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb7-17">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb7-18">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb7-19">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb7-20">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb7-21">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb7-22">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb7-23">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-24">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb7-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb7-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb7-28"></span>
<span id="cb7-29">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Traceplot"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb7-30">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(samples, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span>
<span id="cb7-31">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb7-32">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sample"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb7-33">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \mu$"</span>)</span>
<span id="cb7-34">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb7-35">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb7-36">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-37">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-38"></span>
<span id="cb7-39">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/introduction-to-metropolis-hastings/introduction-to-metropolis-hastings_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Notice in the traceplot that even though we started far from the estimated posterior mean, it made little difference, as the algorithm was able to quickly zero in on the region of higher likelihood. You want to see that the samples have stabilized around a certain value after an initial “burn-in” period. If the trace shows significant fluctuations without settling, it may indicate that the chain has not yet converged. This is not the case with our samples.</p>
<p><br></p>
</section>
<section id="severity-modeling" class="level2">
<h2 class="anchored" data-anchor-id="severity-modeling">Severity Modeling</h2>
<p>MCMC approaches can be leveraged to estimate severity or size-of-loss curves for a given line of business based on past claim history. Severity estimates are used in multiple actuarial contexts, especially reserving and capital modeling. Imagine we have loss data we believe originates from an exponential distribution with unknown rate parameter:</p>
<blockquote class="blockquote">
<p>266, 934, 138</p>
</blockquote>
<p>We again assume a conjugate relationship between prior and posterior distributions:</p>
<ul>
<li><p><strong>Likelihood</strong>: Losses are exponentially distributed with unknown rate <img src="https://latex.codecogs.com/png.latex?%5Clambda">.</p></li>
<li><p><strong>Prior</strong>: Gamma with <img src="https://latex.codecogs.com/png.latex?%5Calpha_%7B0%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B0%7D">.</p></li>
<li><p><strong>Posterior</strong>: Gamma with <img src="https://latex.codecogs.com/png.latex?%5Calpha%5E%7B'%7D%20=%20%5Calpha_%7B0%7D%20+%20n"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B'%7D%20=%20%5Cbeta_%7B0%7D%20+%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_%7Bi%7D">.</p></li>
<li><p><strong>Posterior predictive</strong>: Lomax (shifted Pareto with support beginning at zero) with <img src="https://latex.codecogs.com/png.latex?%5Calpha%5E%7B'%7D,%20%5Cbeta%5E%7B'%7D">. The expected value of the posterior predictive distribution is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cbeta%5E%7B'%7D%7D%7B%5Calpha%5E%7B'%7D%20-%201%7D">.</p></li>
</ul>
<p>We judgmentally set <img src="https://latex.codecogs.com/png.latex?%5Calpha_%7B0%7D%20=%202"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B0%7D%20=%201,000">. Prior and posterior predictive means are computed in the next cell.</p>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">266</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">934</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">138</span>]</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Judgmentally select a0 and b0.</span></span>
<span id="cb8-5">a0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-6">b0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb8-7">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y)</span>
<span id="cb8-8">a_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n</span>
<span id="cb8-9">b_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(y)</span>
<span id="cb8-10">prior_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b0</span>
<span id="cb8-11">post_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (a_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"a0              : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"b0              : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"a_posterior     : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb8-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"b_posterior     : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb8-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Empirical mean  : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Prior mean      : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prior_mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Post. pred. mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>post_pred_mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>a0              : 2
b0              : 1000
a_posterior     : 5.
b_posterior     : 2338.
Empirical mean  : 446.0
Prior mean      : 2000
Post. pred. mean: 584.50</code></pre>
</div>
</div>
<p><br></p>
<p>Using Metropolis-Hastings, the mean of generated samples should match the posterior predictive mean obtained from the analytical expression (584.50 above). Adapting the sampling code from the previous model, an exponential distribution is used to generate proposals, since the exponential scale parameter must be strictly greater than 0. We have the following:</p>
<div id="cell-13" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Implementation of Metropolis-Hastings algorithm for exponential likelihood</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">with gamma prior.</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Goal is to recover the posterior distribution of the unknown parameter lambda. </span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> expon, norm, gamma, lomax</span>
<span id="cb10-8"></span>
<span id="cb10-9">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11">nbr_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb10-12">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">266</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">934</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">138</span>]</span>
<span id="cb10-13">a0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-14">b0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb10-15"></span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Array to hold posterior samples, initialized with prior mean.</span></span>
<span id="cb10-18">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(nbr_samples)</span>
<span id="cb10-19">samples[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(y)</span>
<span id="cb10-20"></span>
<span id="cb10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize prior density.</span></span>
<span id="cb10-22">prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gamma(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a0, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>b0)</span>
<span id="cb10-23"></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Track the number of accepted samples. </span></span>
<span id="cb10-25">accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-26"></span>
<span id="cb10-27"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbr_samples):</span>
<span id="cb10-28"></span>
<span id="cb10-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get most recently accepted sample.</span></span>
<span id="cb10-30">    theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> samples[ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-31"></span>
<span id="cb10-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate sample from proposal distribution.</span></span>
<span id="cb10-33">    theta_star <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.exponential(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta)</span>
<span id="cb10-34"></span>
<span id="cb10-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute numerator and denominator of acceptance ratio.</span></span>
<span id="cb10-36">    numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(expon(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta_star).pdf(y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prior.pdf(theta_star)</span>
<span id="cb10-37">    denom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(expon(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta).pdf(y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prior.pdf(theta)</span>
<span id="cb10-38">    ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> denom</span>
<span id="cb10-39"></span>
<span id="cb10-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random uniform sample.</span></span>
<span id="cb10-41">    u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-42">    </span>
<span id="cb10-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check whether theta_star should be added to samples by comparing ar with u.</span></span>
<span id="cb10-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> u:</span>
<span id="cb10-45">        theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta_star</span>
<span id="cb10-46">        accepted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-47"></span>
<span id="cb10-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update samples array.</span></span>
<span id="cb10-49">    samples[ii] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta</span>
<span id="cb10-50"></span>
<span id="cb10-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-52">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: theta_star: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>theta_star<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, ar: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ar<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, curr_rate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-53"></span>
<span id="cb10-54">acc_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> nbr_samples</span>
<span id="cb10-55"></span>
<span id="cb10-56"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Acceptance rate    : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc_rate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb10-57"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior sample mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1000: theta_star: 82.99100, ar: 0.00008, curr_rate: 0.45900
2000: theta_star: 544.00186, ar: 1.07857, curr_rate: 0.46450
3000: theta_star: 246.98682, ar: 0.33871, curr_rate: 0.47433
4000: theta_star: 73.75990, ar: 0.00002, curr_rate: 0.47900
5000: theta_star: 451.83333, ar: 0.97910, curr_rate: 0.47880
6000: theta_star: 607.07687, ar: 1.45090, curr_rate: 0.47833
7000: theta_star: 1509.11070, ar: 0.74937, curr_rate: 0.48186
8000: theta_star: 677.30894, ar: 1.04365, curr_rate: 0.48187
9000: theta_star: 740.90659, ar: 1.58914, curr_rate: 0.48156

Acceptance rate    : 0.481.
Posterior sample mean: 586.353.</code></pre>
</div>
</div>
<p><br></p>
<p>Visualizing the histogram of posterior samples along with the traceplot:</p>
<div id="cell-15" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb12-3"></span>
<span id="cb12-4">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(</span>
<span id="cb12-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior samples (exponential likelihood)"</span>, </span>
<span id="cb12-6">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb12-7">)</span>
<span id="cb12-8">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(</span>
<span id="cb12-9">    samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff7595"</span>, </span>
<span id="cb12-10">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb12-11">)</span>
<span id="cb12-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axvline(</span>
<span id="cb12-13">    samples.mean(), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, </span>
<span id="cb12-14">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posterior mean"</span></span>
<span id="cb12-15">)</span>
<span id="cb12-16"></span>
<span id="cb12-17">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-18">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-19">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>)</span>
<span id="cb12-20">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb12-21">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-22">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-23">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-24">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb12-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb12-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb12-28">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb12-29">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb12-30"></span>
<span id="cb12-31">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Traceplot"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb12-32">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(samples, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span>
<span id="cb12-33">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb12-34">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sample"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb12-35">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \beta$"</span>)</span>
<span id="cb12-36">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-37">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-38">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb12-39">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb12-40"></span>
<span id="cb12-41">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/introduction-to-metropolis-hastings/introduction-to-metropolis-hastings_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>The distribution of posterior samples resembles a gamma distribution, which we expect.</p>
<p>Next, to generate posterior predictive samples, we randomly sample from an exponential distribution parameterized using each scale parameter. This is accomplished in the next cell:</p>
<div id="cell-17" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Generate posterior predictive samples, one random draw per posterior scale sample.</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-4"></span>
<span id="cb13-5">post_pred_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.exponential(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>samples)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior predictive mean (cp): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>post_pred_mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior predictive mean (mh): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>post_pred_samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Posterior predictive mean (cp): 584.50000
Posterior predictive mean (mh): 585.71307</code></pre>
</div>
</div>
<p><br></p>
<p>We can overlay the posterior predictive distribution with the histogram of posterior predictive samples and assess how well they match:</p>
<div id="cell-19" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb15-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb15-4"></span>
<span id="cb15-5">pp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lomax(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a_posterior, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>b_posterior)</span>
<span id="cb15-6">xx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pp.ppf(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.995</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb15-7">yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pp.pdf(xx)</span>
<span id="cb15-8"></span>
<span id="cb15-9"></span>
<span id="cb15-10">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb15-11"></span>
<span id="cb15-12">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior predictive samples with analytical density"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb15-13"></span>
<span id="cb15-14">ax.hist(</span>
<span id="cb15-15">    post_pred_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff7595"</span>, </span>
<span id="cb15-16">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior predictive samples"</span></span>
<span id="cb15-17">)</span>
<span id="cb15-18">ax.plot(</span>
<span id="cb15-19">    xx, yy, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, </span>
<span id="cb15-20">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\mathrm</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{Lomax}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">($"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$)$"</span></span>
<span id="cb15-21">)</span>
<span id="cb15-22">ax.axvline(</span>
<span id="cb15-23">    post_pred_mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-."</span>, </span>
<span id="cb15-24">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posterior preditive mean"</span></span>
<span id="cb15-25">)</span>
<span id="cb15-26"></span>
<span id="cb15-27">ax.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>)</span>
<span id="cb15-28">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb15-29">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb15-30">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb15-31">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb15-32">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb15-33">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb15-34">ax.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb15-35">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb15-36">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb15-37">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb15-38">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb15-39">ax.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb15-40">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/introduction-to-metropolis-hastings/introduction-to-metropolis-hastings_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>The plot shows the two distributions align well. Finally, we can compare quantiles of our posterior predictive samples with the analytical density to see how well they agree in the extreme left and right tails:</p>
<div id="cell-21" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb16-3"></span>
<span id="cb16-4">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.025</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.90</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.99</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.995</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.999</span>]</span>
<span id="cb16-5"></span>
<span id="cb16-6">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb16-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>: q,</span>
<span id="cb16-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cp"</span>: pp.ppf(q), </span>
<span id="cb16-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mh"</span>: np.quantile(post_pred_samples, q)</span>
<span id="cb16-10">})</span>
<span id="cb16-11"></span>
<span id="cb16-12">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cp"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mh"</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cp"</span>] </span>
<span id="cb16-13"></span>
<span id="cb16-14">df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">q</th>
<th data-quarto-table-cell-role="th">cp</th>
<th data-quarto-table-cell-role="th">mh</th>
<th data-quarto-table-cell-role="th">error</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.010</td>
<td>4.704263</td>
<td>4.841719</td>
<td>-2.921931</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.025</td>
<td>11.868630</td>
<td>12.136623</td>
<td>-2.257991</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0.050</td>
<td>24.108192</td>
<td>23.368946</td>
<td>3.066368</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0.100</td>
<td>49.789318</td>
<td>47.340357</td>
<td>4.918647</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0.250</td>
<td>138.465340</td>
<td>135.870227</td>
<td>1.874197</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>0.500</td>
<td>347.656754</td>
<td>347.845394</td>
<td>-0.054260</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>0.750</td>
<td>747.009495</td>
<td>736.928440</td>
<td>1.349522</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>0.900</td>
<td>1367.480284</td>
<td>1387.431296</td>
<td>-1.458962</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>0.950</td>
<td>1918.479107</td>
<td>1958.620885</td>
<td>-2.092375</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>0.990</td>
<td>3534.790477</td>
<td>3488.275714</td>
<td>1.315913</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>0.995</td>
<td>4408.064760</td>
<td>4380.679896</td>
<td>0.621245</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>0.999</td>
<td>6969.745648</td>
<td>6872.765923</td>
<td>1.391439</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>In the table above:</p>
<ul>
<li><code>q</code> represents the target quantile.</li>
<li><code>cp</code> represents analytical quantiles from the conjugate prior posterior predictive distribution.</li>
<li><code>mh</code> represents quantiles from the Metropolis-Hastings generated posterior predictive samples.</li>
<li><code>error</code> represents the percent deviation from analytical quantiles.</li>
</ul>
<p>Even at q=0.999, <code>cp</code> and <code>mh</code> differ by less than 1.50%.</p>
<p>Unfortunately, most distributional relationships used in practice are not conjugate. But by leveraging conjugate relationships we were able to demonstrate that when the same likelihood, prior and loss data are used, Metropolis-Hastings will yield distributional estimates of the posterior predictive distribution very to close to the analytical distribution.</p>
<p>While implementing your own MCMC sampler is a great way to gain a better understanding of the inner workings of Markov Chain Monte Carlo, in practice it is almost always preferrable to an optimized MCMC library such as PyStan or PyMC3. These will be explored in a future post.</p>


</section>

 ]]></description>
  <category>Statistical Modeling</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/introduction-to-metropolis-hastings/introduction-to-metropolis-hastings.html</guid>
  <pubDate>Sat, 21 Sep 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating a Blog with Quarto and GitHub Pages</title>
  <link>https://www.jtrive.com/posts/creating-gh-pages-blog-with-quarto/creating-gh-pages-blog-with-quarto.html</link>
  <description><![CDATA[ 





<p>Quarto is a publishing system that allows for the creation of reproducible documents, presentations and websites using both R and Python. Quarto supports Jupyter Notebooks, making it possible to write content in Jupyter notebooks which can then converted to HTML. The static HTML files can be hosted free of charge on GitHub. GitHub Pages is a feature that allows you to host static websites directly from a GitHub repository. In what follows I walkthrough the setup and configuration of a technical blog managed by Quarto and hosted on GitHub Pages.</p>
<section id="create-new-quarto-project" class="level3">
<h3 class="anchored" data-anchor-id="create-new-quarto-project">Create new Quarto project</h3>
<p>Once quarto has been installed, create a new project using the Quarto CLI. For the purposes of demonstration, we will refer to this as <em>dat303-blog</em>, but you can name it anything (just don’t include whitespace). A folder with that name will be created in the Git client’s current working directory. I like to keep all my repositories in a <em>Repos</em> folder, so I’ll first navigate to <em>Repos</em> using the <code>cd</code> command (note that in the examples that follow, lines starting with <code>#</code> are comments and should not be run. Lines starting with <code>$</code> represent the command line prompt and should be run from the Git client):</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Switch into desired directory to create dat303-blog folder.</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> cd T:/Repos</span></code></pre></div>
<p><br></p>
<p>Next, we run the quarto <code>create-project</code> command, which will create a folder named <em>dat303-blog</em> located at <em>T:/Repos/at303-blog</em>:</p>
<pre><code>$ quarto create-project dat303-blog --type website:blog</code></pre>
<p><br></p>
<p>This folder will contain a <em>posts</em> folder which will eventually contain our blog content, and a number of additional files:</p>
<ul>
<li><p><code>_quarto.yaml</code>: Contains the title of our blog, links to our GitHub/social media accounts and styling options. By default, <code>_quarto.yaml</code> looks like:</p>
<pre><code># contents of _quarto.yaml.
project:
type: website

website:
title: "dat303-blog"
navbar:
    right:
    - about.qmd
    - icon: github
        href: https://github.com/
    - icon: twitter
        href: https://twitter.com
format:
html:
    theme: cosmo
    css: styles.css</code></pre>
<p><br></p>
<p>The theme is initially set to “cosmo”. It can be changed to any valid bootswatch theme. The full list of available themes can be found <a href="https://bootswatch.com/">here</a>.</p></li>
<li><p><code>about.qmd</code>: File to provide information about yourself.</p></li>
<li><p><code>profile.jpg</code>: Replace this with a personal photo with the same name (<code>profile.jpg</code>), or update the name of the photo in <code>about.qmd</code> for the image key-value pair.</p></li>
</ul>
<p><br></p>
</section>
<section id="create-.gitignore" class="level3">
<h3 class="anchored" data-anchor-id="create-.gitignore">Create <em>.gitignore</em></h3>
<p>A <code>.gitignore</code> file is used in Git to specify which files or directories should be ignored by Git when you make a commit. This means that any files or directories listed in the <code>.gitignore</code> file won’t be tracked by Git, which is useful for excluding files that are not necessary for version control. From VSCode, create a file named <em>.gitignore</em> and save it to the <em>dat303-blog</em> folder. Add the following lines to the <em>.gitignore</em>:</p>
<pre><code>/.quarto/
/_site/
.*</code></pre>
<p>Save your changes.</p>
<p><br></p>
</section>
<section id="initialize-git-project-in-dat303-blog-directory" class="level3">
<h3 class="anchored" data-anchor-id="initialize-git-project-in-dat303-blog-directory">Initialize Git project in <em>dat303-blog</em> directory</h3>
<p>Ensure that the current working directory of the Git client is <em>dat303-blog</em>, then run <code>git init</code>:</p>
<pre><code>$ cd T:/Repos/dat303-blog
$ git init</code></pre>
<p><br></p>
</section>
<section id="adding-new-content" class="level3">
<h3 class="anchored" data-anchor-id="adding-new-content">Adding new content</h3>
<p>In the <em>posts</em> directory, we will create a new subdirectory for each post. We use all lowercase with words separated by dashes to make it easy to navigate between pages.</p>
<p>For example, I might create a <em>solving-normal-equations</em> directory under <em>posts</em>. Within the directory, I would create a new jupyter notebook named <em>solving-normal-equations.ipynb</em>.</p>
<p>In the very first cell of <em>solving-normal-equations.ipynb</em>, change the cell type to raw (click on the lower right of the cell and change “Python” to “raw”), and add the following header detail:</p>
<pre><code>---
title: Solving the Normal Equations
date: 2024-09-02
description: An investigation into solving the normal equations with Python
categories: [Python]
---</code></pre>
<p><br></p>
<p>Be sure to include the three dashes at the top and bottom of the cell as in the example above.</p>
<p>Populate the remaining cells of your notebook with your inline commentary, code and plots, etc. Be sure to save your changes.</p>
<p><br></p>
</section>
<section id="committing-changes-locally" class="level3">
<h3 class="anchored" data-anchor-id="committing-changes-locally">Committing changes locally</h3>
<p>Saving our changes with Git is a two-step process: We first stage any changes via <code>git add</code>, then commit them using <code>git commit</code>. Whenever running <code>git commit</code>, you are required to include a commit message, which comes after the <code>-m</code> flag. Assuming the notebook has been saved locally, run:</p>
<pre><code>$ git add --all
$ git commit -m "Added solving-normal-equations article."</code></pre>
<p><br></p>
</section>
<section id="creating-repository-on-github" class="level3">
<h3 class="anchored" data-anchor-id="creating-repository-on-github">Creating repository on GitHub</h3>
<p>From GitHub, click on the <code>+</code> and select <em>New Repository</em>. In the Repository name field, enter <em>[username].github.io</em>. In this example, it would be <em>jtrive.github.io</em>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/creating-gh-pages-blog-with-quarto/new-repo.png" class="img-fluid figure-img"></p>
<figcaption>new-repo</figcaption>
</figure>
</div>
<p><br></p>
<p>Add a description and be sure to keep the repository Public. Do not add a README or a <em>.gitignore</em> (we already created this). Click on <em>Create Repository</em>.</p>
<p>In the next window, be sure to click on SSH at the top. You’ll see something similar to:</p>
<p><img src="https://www.jtrive.com/posts/creating-gh-pages-blog-with-quarto/set-origin.png" class="img-fluid"></p>
<p><br></p>
<p>Since we already created our repository locally and committed our first change, we are going to focus on the second box, <em>…or push an existing repository from the command line</em>. Copy the first line starting with <code>git remote add origin ...</code> and paste it into the Git client and hit enter. In my case, it looked like:</p>
<pre><code>$ git remote add origin git@github.com:jtrive/jtrive.github.io.git</code></pre>
<p>Don’t worry about the other two commands: We have to do things a little different since we’re using Quarto.</p>
<p><br></p>
</section>
<section id="create-gh-pages-branch" class="level3">
<h3 class="anchored" data-anchor-id="create-gh-pages-branch">Create <code>gh-pages</code> branch</h3>
<p>Verify that no changes are pending in your blog directory by running <code>git status</code>:</p>
<pre><code>$ git status
On branch master
nothing to commit, working tree clean</code></pre>
<p><br></p>
<p>We need to create a separate <code>gh-pages</code> branch to host our blog. Note that this is a one-time action. From the <em>dat303-blog</em> directory, run the following commands (<strong>make sure all changes are committed before running this!</strong>):</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> git checkout <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--orphan</span> gh-pages</span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> git reset <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--hard</span></span>
<span id="cb10-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> git commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--allow-empty</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initializing gh-pages branch."</span></span>
<span id="cb10-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> git push origin gh-pages</span></code></pre></div>
<p><br></p>
</section>
<section id="publishing-content-with-quarto" class="level3">
<h3 class="anchored" data-anchor-id="publishing-content-with-quarto">Publishing content with Quarto</h3>
<p>From the Git client, checkout the master branch, then run <code>quarto publish gh-pages</code>:</p>
<pre><code>$ git checkout master
$ quarto publish gh-pages</code></pre>
<p><br></p>
<p>Type <code>Y</code> when prompted:</p>
<pre class="ssh"><code>$ quarto publish gh-pages
? Update site at git@github.com-jtrive:jtrive/jtrive.github.io.git? (Y/n) » Y</code></pre>
<p><br></p>
<p>Upon completion, navigate to <code>jtrive.github.io</code>. You’ll see something like:</p>
<p><img src="https://www.jtrive.com/posts/creating-gh-pages-blog-with-quarto/blog-1.png" class="img-fluid"></p>
<p><br></p>
<p>You can remove the <em>Post With Code</em> and <em>Welcome to My Blog</em> subdirectories under <em>posts</em> to drop those entries. Navigating to <em>Solving the Normal Equations</em>, we see:</p>
<p><img src="https://www.jtrive.com/posts/creating-gh-pages-blog-with-quarto/blog-2.png" class="img-fluid"></p>
<p>Looks pretty good!</p>
<p><br></p>
</section>
<section id="steady-state-workflow" class="level3">
<h3 class="anchored" data-anchor-id="steady-state-workflow">Steady-State Workflow</h3>
<p>Many of the initial configuration steps are one-time actions. Once you’ve setup your blog as described, the typical workflow will be the following:</p>
<ol type="1">
<li><p>Create a new folder in the <em>posts</em> directory, using lowercase letters/numbers with words separated by dashes.</p></li>
<li><p>Create a Jupyter notebook in this directory with the same name and .ipynb extension.</p></li>
<li><p>Change the first cell of the notebook to raw, and add title information as shown below. Be sure the first and last lines are three dashes, <code>---</code>:</p>
<pre><code> ---
 title: Solving the Normal Equations
 date: 2024-02-09
 description: An investigation into solving the normal equations with Python
 categories: [Python]
 ---</code></pre></li>
<li><p>Create your blog post (narrative text, code, plots, equations, etc.). Save your changes.</p></li>
<li><p>From the Git client, navigate to the blog directory, then add and commit your changes:</p>
<pre><code> $ cd /path/to/blog
 $ git add --all
 $ git commit -m "Added second blog post."</code></pre></li>
<li><p>Ensure master branch is checkout (it should already be), then run the following two commands:</p>
<pre><code> $ git checkout master
 $ quarto publish gh-pages</code></pre></li>
<li><p>View your published content at [username].github.io. If my username is jtrive, my content will be available at <em>jtrive.github.io</em>.</p></li>
</ol>


</section>

 ]]></description>
  <category>Other</category>
  <guid>https://www.jtrive.com/posts/creating-gh-pages-blog-with-quarto/creating-gh-pages-blog-with-quarto.html</guid>
  <pubDate>Tue, 03 Sep 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to Folium</title>
  <link>https://www.jtrive.com/posts/getting-started-with-folium/getting-started-with-folium.html</link>
  <description><![CDATA[ 





<p>Learning geospatial data science is crucial in today’s data-driven world for several reasons. Geospatial data science enables individuals to understand and analyze complex spatial phenomena, including natural disasters, urbanization, climate change, and environmental degradation. By gaining familiarity with geospatial analysis techniques, individuals can gain insights into spatial patterns, relationships and processes, which is essential for making informed decisions.</p>
<p>As the availability and complexity of geospatial data continue to grow with advancements in technology and data collection methods, the demand for skilled geospatial data scientists is expected to rise. Therefore, investing in learning geospatial data science equips individuals with valuable skills that are not only relevant today but also increasingly essential for future career success.</p>
<section id="folium" class="level2">
<h2 class="anchored" data-anchor-id="folium">Folium</h2>
<p>Folium is a Python library used for visualizing geospatial data interactively on web maps. Leveraging the capabilities of Leaflet.js, Folium allows users to create maps directly within Python code, making it an accessible and powerful tool for geospatial visualization and analysis.</p>
<p>With Folium, users can create various types of interactive maps, including point maps, choropleth maps, heatmaps, and vector overlays, by simply specifying geographic coordinates and map styling options. The library provides intuitive APIs for customizing map features such as markers, popups, tooltips, legends, and map layers, enabling users to create visually appealing and informative maps with ease.</p>
<p>Folium integrates with other popular Python libraries such as Pandas and Matplotlib, allowing users to visualize geospatial data stored in DataFrame objects or plot data directly onto Folium maps. It also supports various tile providers and basemaps, enabling users to choose from a wide range of map styles and sources.</p>
<section id="creating-interactive-maps-in-folium" class="level3">
<h3 class="anchored" data-anchor-id="creating-interactive-maps-in-folium">Creating Interactive Maps in Folium</h3>
<p>Creating maps with folium is straightforward. We simply pass the latitude and longitude of the point of interest (POI) and specify a zoom level. We can then drop a marker on the point of interest, and interact with the map however we’d like.</p>
<p>We can get the latitude and longitude for a given POI by performing a google search. Latitude ranges from -90 to 90 degrees, longitude from -180 to 180 degrees. The latitude and longitude for the DMACC Ankeny campus is <strong>(41.5996, -93.6276)</strong>, which is <strong>(latitude, longitude)</strong>. Note that for US coordinates, the longitude will always be negative. An illustration is provided below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/getting-started-with-folium/lon-lat.png" class="img-fluid figure-img"></p>
<figcaption>img01</figcaption>
</figure>
</div>
<p><br></p>
<p>To illustrate, let’s render a map over the park I used to play at as a child (Durkin Park on the southwest side of Chicago). Note that zoom level provides more detail as the number gets larger. A zoom level of 4 would show the entire US; a zoom level of 17 would render roughly a city block:</p>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Latitude and longitude for Durkin Park, 84th &amp; Kolin Ave, Chicago IL. </span></span>
<span id="cb1-5">lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.739</span></span>
<span id="cb1-6">lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.729</span></span>
<span id="cb1-7">zoom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zoom)</span>
<span id="cb1-10">folium.Marker(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon]).add_to(m)</span>
<span id="cb1-11"></span>
<span id="cb1-12">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_cd856410cd725d4ba42a6a4f368b2615 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_cd856410cd725d4ba42a6a4f368b2615&quot; ></div>
        
</body>
<script>
    
    
            var map_cd856410cd725d4ba42a6a4f368b2615 = L.map(
                &quot;map_cd856410cd725d4ba42a6a4f368b2615&quot;,
                {
                    center: [41.739, -87.729],
                    crs: L.CRS.EPSG3857,
                    zoom: 18,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_f997475a2304f79bf56dc959368cd0e1 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_f997475a2304f79bf56dc959368cd0e1.addTo(map_cd856410cd725d4ba42a6a4f368b2615);
        
    
            var marker_b522f7453c8990c6b667046af3544d9b = L.marker(
                [41.739, -87.729],
                {}
            ).addTo(map_cd856410cd725d4ba42a6a4f368b2615);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>A few things to note about the code used to render the map:</p>
<ul>
<li>We start by importing the folium library.</li>
<li>The lat/lon for Durkin Park was obtained by a simple google search.</li>
<li>I used a level 18 zoom but this is not necessary since the map is dynamic and can be resized.</li>
<li>To add the marker to the map, we call <code>.add_to(m)</code>.</li>
<li>We included <code>m</code> by itself in the last line of the cell in order for the map to render. Without doing this, the map would not display.</li>
</ul>
<p>We can change the color of the marker by passing an additional argument into <code>folium.Marker</code>. I’ll place a second marker in another park I used to visit when I was younger, Scottsdale Park. I’ll make this second marker red.</p>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Durkin Park coordinates.</span></span>
<span id="cb2-3">lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.739</span></span>
<span id="cb2-4">lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.729</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scottsdale Park coordinates. </span></span>
<span id="cb2-7">lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.7416</span></span>
<span id="cb2-8">lon1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.7356</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center map at midway point between parks.</span></span>
<span id="cb2-11">mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-12">mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lon1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify zoom level. </span></span>
<span id="cb2-15">zoom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize map.</span></span>
<span id="cb2-18">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zoom)</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Durkin Park marker.</span></span>
<span id="cb2-21">folium.Marker(</span>
<span id="cb2-22">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat0, lon0],</span>
<span id="cb2-23">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Durkin Park"</span>,</span>
<span id="cb2-24">    ).add_to(m)</span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Scottsdale Park marker.</span></span>
<span id="cb2-27">folium.Marker(</span>
<span id="cb2-28">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat1, lon1],</span>
<span id="cb2-29">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scottsdale Park"</span>,</span>
<span id="cb2-30">    icon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>folium.Icon(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb2-31">    ).add_to(m)</span>
<span id="cb2-32"></span>
<span id="cb2-33">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_0390f039fde0da559498446d2a3da9d7 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_0390f039fde0da559498446d2a3da9d7&quot; ></div>
        
</body>
<script>
    
    
            var map_0390f039fde0da559498446d2a3da9d7 = L.map(
                &quot;map_0390f039fde0da559498446d2a3da9d7&quot;,
                {
                    center: [41.7403, -87.73230000000001],
                    crs: L.CRS.EPSG3857,
                    zoom: 16,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_f1d08f23817f4ed4a0dd4bfe14113e0e = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_f1d08f23817f4ed4a0dd4bfe14113e0e.addTo(map_0390f039fde0da559498446d2a3da9d7);
        
    
            var marker_c032973fe2b2a8effe89ec7a2717ccbd = L.marker(
                [41.739, -87.729],
                {}
            ).addTo(map_0390f039fde0da559498446d2a3da9d7);
        
    
        var popup_c107a5eb06ec6e09c1eccb01c37e0e74 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_de4e4adcf06e31c7827c71082f2d2289 = $(`<div id=&quot;html_de4e4adcf06e31c7827c71082f2d2289&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Durkin Park</div>`)[0];
                popup_c107a5eb06ec6e09c1eccb01c37e0e74.setContent(html_de4e4adcf06e31c7827c71082f2d2289);
            
        

        marker_c032973fe2b2a8effe89ec7a2717ccbd.bindPopup(popup_c107a5eb06ec6e09c1eccb01c37e0e74)
        ;

        
    
    
            var marker_1b28327c0e9079b53748f4c286dc2087 = L.marker(
                [41.7416, -87.7356],
                {}
            ).addTo(map_0390f039fde0da559498446d2a3da9d7);
        
    
            var icon_8ea62c90f8270c29eed1843f1a4992ee = L.AwesomeMarkers.icon(
                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;red&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}
            );
            marker_1b28327c0e9079b53748f4c286dc2087.setIcon(icon_8ea62c90f8270c29eed1843f1a4992ee);
        
    
        var popup_0581c82e8ed1a0713081e31c89c96bd6 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_248ad0ab52deb5c75f5fdae23d1361df = $(`<div id=&quot;html_248ad0ab52deb5c75f5fdae23d1361df&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Scottsdale Park</div>`)[0];
                popup_0581c82e8ed1a0713081e31c89c96bd6.setContent(html_248ad0ab52deb5c75f5fdae23d1361df);
            
        

        marker_1b28327c0e9079b53748f4c286dc2087.bindPopup(popup_0581c82e8ed1a0713081e31c89c96bd6)
        ;

        
    
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>Notice that the <code>popup</code> argument was supplied to <code>folium.Marker</code>. Now when we click on the markers, whatever text we supply to <code>popup</code> will be shown on the map.</p>
<p>We can connect the markers in the map by using <code>folium.PolyLine</code>. We pass it a list of lat/lon pairs, and it draws a line connecting the points. Let’s connect the two parks with a green line:</p>
<div id="cell-7" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Durkin Park coordinates.</span></span>
<span id="cb3-3">lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.739</span></span>
<span id="cb3-4">lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.729</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scottsdale Park coordinates. </span></span>
<span id="cb3-7">lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.7416</span></span>
<span id="cb3-8">lon1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.7356</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center map at midway point between parks.</span></span>
<span id="cb3-11">mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-12">mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lon1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify zoom level. </span></span>
<span id="cb3-15">zoom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize map.</span></span>
<span id="cb3-18">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zoom)</span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Durkin Park marker.</span></span>
<span id="cb3-21">folium.Marker(</span>
<span id="cb3-22">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat0, lon0],</span>
<span id="cb3-23">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Durkin Park"</span>,</span>
<span id="cb3-24">    ).add_to(m)</span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Scottsdale Park marker.</span></span>
<span id="cb3-27">folium.Marker(</span>
<span id="cb3-28">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat1, lon1],</span>
<span id="cb3-29">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scottsdale Park"</span>,</span>
<span id="cb3-30">    icon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>folium.Icon(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb3-31">    ).add_to(m)</span>
<span id="cb3-32"></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect parks with green line. </span></span>
<span id="cb3-34">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(lat0, lon0), (lat1, lon1)]</span>
<span id="cb3-35">folium.PolyLine(points, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>).add_to(m)</span>
<span id="cb3-36"></span>
<span id="cb3-37">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_cafa663ffe5b0c2e73d28792b24f021e {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_cafa663ffe5b0c2e73d28792b24f021e&quot; ></div>
        
</body>
<script>
    
    
            var map_cafa663ffe5b0c2e73d28792b24f021e = L.map(
                &quot;map_cafa663ffe5b0c2e73d28792b24f021e&quot;,
                {
                    center: [41.7403, -87.73230000000001],
                    crs: L.CRS.EPSG3857,
                    zoom: 16,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_42b3d08d23fcc2959f842ccfa373dde5 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_42b3d08d23fcc2959f842ccfa373dde5.addTo(map_cafa663ffe5b0c2e73d28792b24f021e);
        
    
            var marker_77bd6738d2cb38080b88f816c6ba6b20 = L.marker(
                [41.739, -87.729],
                {}
            ).addTo(map_cafa663ffe5b0c2e73d28792b24f021e);
        
    
        var popup_19047bc0fd4d2f004e80a4454ad75688 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_f55c8512714a73977a02cac9e4163e0f = $(`<div id=&quot;html_f55c8512714a73977a02cac9e4163e0f&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Durkin Park</div>`)[0];
                popup_19047bc0fd4d2f004e80a4454ad75688.setContent(html_f55c8512714a73977a02cac9e4163e0f);
            
        

        marker_77bd6738d2cb38080b88f816c6ba6b20.bindPopup(popup_19047bc0fd4d2f004e80a4454ad75688)
        ;

        
    
    
            var marker_8b2c7c5f2ad62ddca9c5bdb1464ce8a5 = L.marker(
                [41.7416, -87.7356],
                {}
            ).addTo(map_cafa663ffe5b0c2e73d28792b24f021e);
        
    
            var icon_c5ba6488664b60741bf228ff07f59cab = L.AwesomeMarkers.icon(
                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;red&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}
            );
            marker_8b2c7c5f2ad62ddca9c5bdb1464ce8a5.setIcon(icon_c5ba6488664b60741bf228ff07f59cab);
        
    
        var popup_f321726ea51c2cb82179e934f2157f3a = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_7566338c12b173ed99dbf1c622a634c6 = $(`<div id=&quot;html_7566338c12b173ed99dbf1c622a634c6&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Scottsdale Park</div>`)[0];
                popup_f321726ea51c2cb82179e934f2157f3a.setContent(html_7566338c12b173ed99dbf1c622a634c6);
            
        

        marker_8b2c7c5f2ad62ddca9c5bdb1464ce8a5.bindPopup(popup_f321726ea51c2cb82179e934f2157f3a)
        ;

        
    
    
            var poly_line_8371564e57dc1a34e5b243b09f75579a = L.polyline(
                [[41.739, -87.729], [41.7416, -87.7356]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;green&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: false, &quot;fillColor&quot;: &quot;green&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_cafa663ffe5b0c2e73d28792b24f021e);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>One final point: We can replace the standard markers with circle markers by using <code>folium.CircleMarker</code>. <code>radius</code> controls the size of the markers and <code>color/fill_color</code> set the color of the marker:</p>
<div id="cell-9" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zoom)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Durkin Park circle marker.</span></span>
<span id="cb4-5">folium.CircleMarker(</span>
<span id="cb4-6">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat0, lon0], </span>
<span id="cb4-7">    radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, </span>
<span id="cb4-8">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Durkin Park"</span>,</span>
<span id="cb4-9">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb4-10">    fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb4-11">    fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-12">    fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-13">    ).add_to(m)</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Scottsdale Park marker.</span></span>
<span id="cb4-16">folium.CircleMarker(</span>
<span id="cb4-17">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat1, lon1], </span>
<span id="cb4-18">    radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, </span>
<span id="cb4-19">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scottsdale Park"</span>,</span>
<span id="cb4-20">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb4-21">    fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb4-22">    fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-23">    fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-24">    ).add_to(m)</span>
<span id="cb4-25"></span>
<span id="cb4-26"></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect parks with green line. </span></span>
<span id="cb4-28">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(lat0, lon0), (lat1, lon1)]</span>
<span id="cb4-29">folium.PolyLine(points, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>).add_to(m)</span>
<span id="cb4-30"></span>
<span id="cb4-31">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_2559a1f643f43870be214ea5397396a8 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_2559a1f643f43870be214ea5397396a8&quot; ></div>
        
</body>
<script>
    
    
            var map_2559a1f643f43870be214ea5397396a8 = L.map(
                &quot;map_2559a1f643f43870be214ea5397396a8&quot;,
                {
                    center: [41.7403, -87.73230000000001],
                    crs: L.CRS.EPSG3857,
                    zoom: 16,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_781212999bf028a93893216298447816 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_781212999bf028a93893216298447816.addTo(map_2559a1f643f43870be214ea5397396a8);
        
    
            var circle_marker_2e0b623e6946d0403ff93ea9bfa48fb4 = L.circleMarker(
                [41.739, -87.729],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 7, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_2559a1f643f43870be214ea5397396a8);
        
    
        var popup_0d4b11ff32b0b7a358aa081ee1fb3f05 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_a0507c36dfe912d29cb4607016727fb8 = $(`<div id=&quot;html_a0507c36dfe912d29cb4607016727fb8&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Durkin Park</div>`)[0];
                popup_0d4b11ff32b0b7a358aa081ee1fb3f05.setContent(html_a0507c36dfe912d29cb4607016727fb8);
            
        

        circle_marker_2e0b623e6946d0403ff93ea9bfa48fb4.bindPopup(popup_0d4b11ff32b0b7a358aa081ee1fb3f05)
        ;

        
    
    
            var circle_marker_c497bc67ad50d4b27b57dc7787f46bcc = L.circleMarker(
                [41.7416, -87.7356],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 7, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_2559a1f643f43870be214ea5397396a8);
        
    
        var popup_d54f4e6ff9baa4d0e25872e09b7ae160 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_f834993b2b3b49f946a6fc5bf12a6972 = $(`<div id=&quot;html_f834993b2b3b49f946a6fc5bf12a6972&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Scottsdale Park</div>`)[0];
                popup_d54f4e6ff9baa4d0e25872e09b7ae160.setContent(html_f834993b2b3b49f946a6fc5bf12a6972);
            
        

        circle_marker_c497bc67ad50d4b27b57dc7787f46bcc.bindPopup(popup_d54f4e6ff9baa4d0e25872e09b7ae160)
        ;

        
    
    
            var poly_line_0a7121955f355f8730616c216224bea5 = L.polyline(
                [[41.739, -87.729], [41.7416, -87.7356]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;green&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: false, &quot;fillColor&quot;: &quot;green&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_2559a1f643f43870be214ea5397396a8);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>The International Space Station (ISS) is a collaborative effort among multiple nations, serving as a hub for scientific research and international cooperation in space exploration. The ISS orbits the Earth at an astonishing speed of approximately 17,500 miles per hour, completing an orbit around the planet approximately every 90 minutes.</p>
<p>The <code>coords</code> list in the next cell represents the position as latitude-longitude pairs of the ISS sampled every minute for 20 minutes. We can render each of the 20 points as red circle markers connected by a red dashed line. Note that it is not necessary to call <code>folium.CircleMarker</code> 20 times: Use a for loop to iterate over the <code>coords</code> list.</p>
<div id="cell-11" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-3">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.4183</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">35.337</span>),</span>
<span id="cb5-4">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">49.3934</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.7562</span>),</span>
<span id="cb5-5">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">48.0881</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.4462</span>),</span>
<span id="cb5-6">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">46.5282</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">19.4374</span>),</span>
<span id="cb5-7">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44.7411</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.743</span>),</span>
<span id="cb5-8">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.7364</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.3267</span>),</span>
<span id="cb5-9">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.5727</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.2481</span>),</span>
<span id="cb5-10">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">38.2576</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.4505</span>),</span>
<span id="cb5-11">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">35.8123</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0896</span>),</span>
<span id="cb5-12">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">33.2554</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.3975</span>),</span>
<span id="cb5-13">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30.6031</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.4986</span>),</span>
<span id="cb5-14">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">27.8697</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.4178</span>),</span>
<span id="cb5-15">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.0674</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.1786</span>),</span>
<span id="cb5-16">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">22.197</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.8122</span>), </span>
<span id="cb5-17">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">19.2887</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.3195</span>),</span>
<span id="cb5-18">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">16.3407</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.7295</span>),</span>
<span id="cb5-19">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.3611</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">23.059</span>), </span>
<span id="cb5-20">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.3562</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.325</span>),</span>
<span id="cb5-21">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.3323</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">27.5427</span>), </span>
<span id="cb5-22">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.2953</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.7267</span>)</span>
<span id="cb5-23">    ]</span>
<span id="cb5-24"></span>
<span id="cb5-25"></span>
<span id="cb5-26">lats, lons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>coords)</span>
<span id="cb5-27">mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(lats) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lats)</span>
<span id="cb5-28">mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(lons) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lons)</span>
<span id="cb5-29"></span>
<span id="cb5-30">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb5-31"></span>
<span id="cb5-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> lat, lon <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> coords:</span>
<span id="cb5-33"></span>
<span id="cb5-34">    folium.CircleMarker(</span>
<span id="cb5-35">        location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], </span>
<span id="cb5-36">        radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb5-37">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb5-38">        fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb5-39">        fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-40">        fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-41">        ).add_to(m)</span>
<span id="cb5-42"></span>
<span id="cb5-43"></span>
<span id="cb5-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect coords with red dashed line.</span></span>
<span id="cb5-45">folium.PolyLine(coords, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, dash_array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span>).add_to(m)</span>
<span id="cb5-46"></span>
<span id="cb5-47">m</span>
<span id="cb5-48"></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_5019534892c9825414fcf011c574038c {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_5019534892c9825414fcf011c574038c&quot; ></div>
        
</body>
<script>
    
    
            var map_5019534892c9825414fcf011c574038c = L.map(
                &quot;map_5019534892c9825414fcf011c574038c&quot;,
                {
                    center: [30.325749999999992, 2.7175800000000025],
                    crs: L.CRS.EPSG3857,
                    zoom: 4,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_789127f332392bed4916c8c1b64cd430 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_789127f332392bed4916c8c1b64cd430.addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_dbd330c6e72dfeb9a8210d6ba98436a7 = L.circleMarker(
                [50.4183, -35.337],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_4cfefdcc9938b64218c3edad81d20bde = L.circleMarker(
                [49.3934, -29.7562],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_114ba3dd0f517b0009c35cab78c0c041 = L.circleMarker(
                [48.0881, -24.4462],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_1e74c6af3cb6b1d41f86cc71203e1209 = L.circleMarker(
                [46.5282, -19.4374],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_f161fc442366f125b395c8ee07f1413d = L.circleMarker(
                [44.7411, -14.743],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_2eca911684441980c5d4d83a41c1ec1d = L.circleMarker(
                [42.7364, -10.3267],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_7801676c154ce1baf2d308fa81e0520a = L.circleMarker(
                [40.5727, -6.2481],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_28ee765082c108a82ad0dbd9afbc0953 = L.circleMarker(
                [38.2576, -2.4505],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_5e4aa6ee3e0ae4f8edf83f62de22bcfa = L.circleMarker(
                [35.8123, 1.0896],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_c46c3726974cdb0e444a26e9747aa52f = L.circleMarker(
                [33.2554, 4.3975],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_e04702d6208c6754387cadfdb0f9c67e = L.circleMarker(
                [30.6031, 7.4986],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_bb16e9c9dc16027be099d3e3c6a2f5a8 = L.circleMarker(
                [27.8697, 10.4178],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_49c7e7325c142d2a55ed048a60f92498 = L.circleMarker(
                [25.0674, 13.1786],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_aac339f316801d5d0de40bebb1884446 = L.circleMarker(
                [22.197, 15.8122],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_3e3a5a2bf76661f27c49d5598bfb355a = L.circleMarker(
                [19.2887, 18.3195],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_7500983d1c39caf9f77426d7f8cc88ac = L.circleMarker(
                [16.3407, 20.7295],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_64d2f7ed370962fbf08de028c24ef35a = L.circleMarker(
                [13.3611, 23.059],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_ad436a27b49b6ed91634cff60a4e2f9b = L.circleMarker(
                [10.3562, 25.325],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_19b7e716bcd8c04d6de6542c9e4e6527 = L.circleMarker(
                [7.3323, 27.5427],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_836e3d69472ab2b9f29976f242b29b6e = L.circleMarker(
                [4.2953, 29.7267],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var poly_line_83bd5d8b950b32a1480d449f50f42764 = L.polyline(
                [[50.4183, -35.337], [49.3934, -29.7562], [48.0881, -24.4462], [46.5282, -19.4374], [44.7411, -14.743], [42.7364, -10.3267], [40.5727, -6.2481], [38.2576, -2.4505], [35.8123, 1.0896], [33.2554, 4.3975], [30.6031, 7.4986], [27.8697, 10.4178], [25.0674, 13.1786], [22.197, 15.8122], [19.2887, 18.3195], [16.3407, 20.7295], [13.3611, 23.059], [10.3562, 25.325], [7.3323, 27.5427], [4.2953, 29.7267]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: &quot;5&quot;, &quot;dashOffset&quot;: null, &quot;fill&quot;: false, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Python</category>
  <category>Geospatial</category>
  <guid>https://www.jtrive.com/posts/getting-started-with-folium/getting-started-with-folium.html</guid>
  <pubDate>Sun, 01 Sep 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Geospatial Vector Data</title>
  <link>https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data.html</link>
  <description><![CDATA[ 





<p>Geospatial vector data is a way of representing geographic features in a digital format using points, lines, and polygons. Unlike raster data, which represents geographic data as a grid of cells or pixels, vector data represents features more precisely with distinct shapes and boundaries. Each vector feature can have associated attributes, such as names, types, or other descriptive information.</p>
<section id="types-of-geospatial-vector-data" class="level3">
<h3 class="anchored" data-anchor-id="types-of-geospatial-vector-data">Types of Geospatial Vector Data</h3>
<ul>
<li><p><strong>Points</strong>: Represent discrete locations such as cities, landmarks, or individual trees. Each point has a specific location defined by coordinates (e.g., latitude and longitude).</p></li>
<li><p><strong>Lines</strong> (or polylines): Represent linear features such as roads, rivers, or boundaries. Lines are composed of a series of connected points.</p></li>
<li><p><strong>Polygons</strong> (or multipolygons): Represent areas or shapes such as lakes, parks, or country borders. Polygons are defined by a series of points that create a closed shape.</p></li>
</ul>
<p>Shapefiles are one of the most common formats for vector data. They store points, lines, and polygons along with attribute information. The US Census Bureau makes a number of shapefiles available <a href="https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html">here</a>. In this notebook, we’ll walkthrough how to load shapefiles into GeoPandas, plotting the boundaries and create a choropleth map based on a second dataset (choropleth maps are those where the color of each shape is based on the value of an associated variable).</p>
<p>To start, download US state shapefile <em>cb_2018_us_state_500k.zip</em> from the <a href="https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html">United States Census Bureau boundary files page</a>. Under the <em>State</em> subheader, you will see three files:</p>
<ul>
<li><em>cb_2018_us_state_500k.zip</em></li>
<li><em>cb_2018_us_state_5m.zip</em></li>
<li><em>cb_2018_us_state_20m.zip</em></li>
</ul>
<p>The 500k files are the most detailed, but also the largest. The 20m files are the smallest, but at the cost of some dramatic simplification. The 5m files fall somewhere between the other two. We will work with the 500k files.</p>
<p>Once downloaded, the shapefile can be loaded into a GeoPandas DataFrame as follows:</p>
<div id="cell-2" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geopandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gpd</span>
<span id="cb1-5"></span>
<span id="cb1-6">shp_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cb_2018_us_state_500k.zip"</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">dfshp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(shp_path)</span>
<span id="cb1-9"></span>
<span id="cb1-10">dfshp.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">STATEFP</th>
<th data-quarto-table-cell-role="th">STATENS</th>
<th data-quarto-table-cell-role="th">AFFGEOID</th>
<th data-quarto-table-cell-role="th">GEOID</th>
<th data-quarto-table-cell-role="th">STUSPS</th>
<th data-quarto-table-cell-role="th">NAME</th>
<th data-quarto-table-cell-role="th">LSAD</th>
<th data-quarto-table-cell-role="th">ALAND</th>
<th data-quarto-table-cell-role="th">AWATER</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>28</td>
<td>01779790</td>
<td>0400000US28</td>
<td>28</td>
<td>MS</td>
<td>Mississippi</td>
<td>00</td>
<td>121533519481</td>
<td>3926919758</td>
<td>MULTIPOLYGON (((-88.50297 30.21523, -88.49176 ...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>37</td>
<td>01027616</td>
<td>0400000US37</td>
<td>37</td>
<td>NC</td>
<td>North Carolina</td>
<td>00</td>
<td>125923656064</td>
<td>13466071395</td>
<td>MULTIPOLYGON (((-75.72681 35.93584, -75.71827 ...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>40</td>
<td>01102857</td>
<td>0400000US40</td>
<td>40</td>
<td>OK</td>
<td>Oklahoma</td>
<td>00</td>
<td>177662925723</td>
<td>3374587997</td>
<td>POLYGON ((-103.00257 36.52659, -103.00219 36.6...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>51</td>
<td>01779803</td>
<td>0400000US51</td>
<td>51</td>
<td>VA</td>
<td>Virginia</td>
<td>00</td>
<td>102257717110</td>
<td>8528531774</td>
<td>MULTIPOLYGON (((-75.74241 37.80835, -75.74151 ...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>54</td>
<td>01779805</td>
<td>0400000US54</td>
<td>54</td>
<td>WV</td>
<td>West Virginia</td>
<td>00</td>
<td>62266474513</td>
<td>489028543</td>
<td>POLYGON ((-82.64320 38.16909, -82.64300 38.169...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>The geometry column is a special column in a GeoDataFrame that stores the geometric shapes associated with each row (in this case, the shapes in latitude-longitude pairs that define the boundary of each state). This column contains the vector data that defines the spatial features in the dataset. Some states have boundaries defined by a MULTIPOLYGON, such as Hawaii, whose boundary consists of multiple closed POLYGONS. If it isn’t already present, the geometry column needs to be defined.</p>
<p>We can plot the data present in the present in the shapefile by calling the GeoDataFrame’s <code>plot</code> method:</p>
<div id="cell-4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">dfshp.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Let’s zoom in and focus on a map of the lower 48 states only:</p>
<div id="cell-6" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">exclude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"American Samoa"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alaska"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hawaii"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Guam"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"United States Virgin Islands"</span>,</span>
<span id="cb3-3">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Commonwealth of the Northern Mariana Islands"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Puerto Rico"</span>]</span>
<span id="cb3-4"></span>
<span id="cb3-5">dfshp48 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfshp[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>dfshp.NAME.isin(exclude)].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">dfshp48.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>We can get a better view of the boundaries of each state by calling <code>boundary.plot</code>:</p>
<div id="cell-8" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">dfshp48.boundary.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>By default, the plots rendered via GeoPandas are smaller than we might like. We can increase the size of the rendered map, suppress ticklabels, change the boundary color and add a title as follows:</p>
<div id="cell-10" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-3"></span>
<span id="cb5-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U.S. Boundaries - Lower 48 States"</span>)</span>
<span id="cb5-7">dfshp48.boundary.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb5-10"></span>
<span id="cb5-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>To overlay the state name at the center of each state, use:</p>
<div id="cell-12" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-3">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U.S. Boundaries - Lower 48 States"</span>)</span>
<span id="cb6-4">dfshp48.boundary.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>)</span>
<span id="cb6-5">dfshp48.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: ax.annotate(x.NAME, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x.geometry.centroid.coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-6">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb6-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>In the shapefile, ALAND and AWATER represent the land and water area of each state in square meters. To create a choropleth map based on the natural log of AWATER, include the <code>column</code> argument to the <code>plot</code> method:</p>
<div id="cell-14" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute natural log of AWATER to get better separation by state.</span></span>
<span id="cb7-3">dfshp48[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_AWATER"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(dfshp48[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AWATER"</span>])</span>
<span id="cb7-4">dfshp48.plot(column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_AWATER"</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plasma"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>We can reformat the map as before, while also adding a legend to give context the difference in colors by state. Options for colormaps are available <a href="https://matplotlib.org/stable/users/explain/colors/colormaps.html">here</a>:</p>
<div id="cell-16" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-3">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ln(AWATER) - Lower 48 States"</span>)</span>
<span id="cb8-4">dfshp48.plot(</span>
<span id="cb8-5">    ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_AWATER"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>, </span>
<span id="cb8-6">    cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gist_rainbow"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.750</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb8-7">    legend_kwds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ln(AWATER)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orientation"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vertical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shrink"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>}</span>
<span id="cb8-8">    )</span>
<span id="cb8-9">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb8-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="congressional-district-shapefiles" class="level3">
<h3 class="anchored" data-anchor-id="congressional-district-shapefiles">Congressional District Shapefiles</h3>
<p>For variety, let’s download the Congressional District shapefile and plot the boundaries. It is available at the same link as above, and is identified as <em>cb_2018_us_cd116_500k.zip</em>. Reading the file into GeoPandas and displaying the first 5 rows yields:</p>
<div id="cell-18" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2">dfc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cb_2018_us_cd116_500k.zip"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dfc.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dfc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-5"></span>
<span id="cb9-6">dfc.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dfc.shape: (441, 9)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="62">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">STATEFP</th>
<th data-quarto-table-cell-role="th">CD116FP</th>
<th data-quarto-table-cell-role="th">AFFGEOID</th>
<th data-quarto-table-cell-role="th">GEOID</th>
<th data-quarto-table-cell-role="th">LSAD</th>
<th data-quarto-table-cell-role="th">CDSESSN</th>
<th data-quarto-table-cell-role="th">ALAND</th>
<th data-quarto-table-cell-role="th">AWATER</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>17</td>
<td>10</td>
<td>5001600US1710</td>
<td>1710</td>
<td>C2</td>
<td>116</td>
<td>777404163</td>
<td>31605644</td>
<td>POLYGON ((-88.19882 42.41557, -88.19860 42.415...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>47</td>
<td>06</td>
<td>5001600US4706</td>
<td>4706</td>
<td>C2</td>
<td>116</td>
<td>16770155959</td>
<td>324676580</td>
<td>POLYGON ((-87.15023 36.56770, -87.14962 36.568...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>48</td>
<td>06</td>
<td>5001600US4806</td>
<td>4806</td>
<td>C2</td>
<td>116</td>
<td>5564805243</td>
<td>255530191</td>
<td>POLYGON ((-97.38860 32.61731, -97.38856 32.618...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>48</td>
<td>07</td>
<td>5001600US4807</td>
<td>4807</td>
<td>C2</td>
<td>116</td>
<td>419784487</td>
<td>3069802</td>
<td>POLYGON ((-95.77383 29.87515, -95.76962 29.875...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>48</td>
<td>26</td>
<td>5001600US4826</td>
<td>4826</td>
<td>C2</td>
<td>116</td>
<td>2349987793</td>
<td>191353567</td>
<td>POLYGON ((-97.39826 32.99996, -97.39792 33.013...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We again display the boundaries:</p>
<div id="cell-20" class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2">dfc.boundary.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We’d like to focus on the lower 48 states again, but this time the shapefile doesn’t have a NAME column. How should we proceed?</p>
<p>One approach is to define a bounding box that encloses the lower 48 states, then filter the shapefile to retain only those congressional districts whose geometry intersects the bounding box. GeoPandas provides coordinate based indexing with the <code>cx</code> indexer, which slices using a bounding box. Geometries in the GeoSeries or GeoDataFrame that intersect the bounding box will be returned.</p>
<p>For the lower 48 states bounding box, we’ll use <strong>(-125, 24.6), (-65, 50)</strong>, southwest to northeast. We also include a circle marker at the center of each congressional district:</p>
<div id="cell-22" class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2">xmin, ymin, xmax, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.6</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb12-3">dfc48 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfc.cx[xmin:xmax, ymin:ymax]</span>
<span id="cb12-4"></span>
<span id="cb12-5"></span>
<span id="cb12-6"></span>
<span id="cb12-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-8">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"US Congressional Districts, 116th Congress - Lower 48 States"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb12-9">dfc48.boundary.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>)</span>
<span id="cb12-10">dfc48.geometry.centroid.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb12-11">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb12-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\jtriv\AppData\Local\Temp\ipykernel_8996\3296541533.py:9: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.

  dfc48.geometry.centroid.plot(ax=ax, markersize=6, color="red")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-12-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="geojson" class="level3">
<h3 class="anchored" data-anchor-id="geojson">GeoJSON</h3>
<p>Working with GeoJSON is much the same as working with shapefiles, one difference being that with GeoJSON, vector data is contained within a single file as opposed to an archive of multiple file types. See <a href="https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json">here</a> for an example.</p>
<p>But once read into GeoPandas, we work with it the same way. We can load US state boundary files as GeoJSON from GitHub via:</p>
<div id="cell-24" class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2">dfstate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json"</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4">dfstate.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="81">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">density</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>01</td>
<td>Alabama</td>
<td>94.650</td>
<td>POLYGON ((-87.35930 35.00118, -85.60667 34.984...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>02</td>
<td>Alaska</td>
<td>1.264</td>
<td>MULTIPOLYGON (((-131.60202 55.11798, -131.5691...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>04</td>
<td>Arizona</td>
<td>57.050</td>
<td>POLYGON ((-109.04250 37.00026, -109.04798 31.3...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>05</td>
<td>Arkansas</td>
<td>56.430</td>
<td>POLYGON ((-94.47384 36.50186, -90.15254 36.496...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>06</td>
<td>California</td>
<td>241.700</td>
<td>POLYGON ((-123.23326 42.00619, -122.37885 42.0...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="82">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2">dfstate.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <category>Geospatial</category>
  <guid>https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data.html</guid>
  <pubDate>Sat, 17 Aug 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Composite Estimators in scikit-learn</title>
  <link>https://www.jtrive.com/posts/composite-estimators/composite-estimators.html</link>
  <description><![CDATA[ 





<p>To build a composite estimator in scikit-learn, transformers are usually combined with other transformers and/or predictors (such as classifiers or regressors). The most common tool used for composing estimators is a Pipeline. The <code>Pipeline</code> is often used in combination with <code>ColumnTransformer</code> or <code>FeatureUnion</code> which concatenate the output of transformers into a composite feature space.</p>
<p>In this notebook, I demonstrate how to create a composite estimator based on a synthetic dataset.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Create synthetic dataset for composite estimator demo.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-7"></span>
<span id="cb1-8">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb1-9">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-10">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-11">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb1-14"></span>
<span id="cb1-15">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb1-16"></span>
<span id="cb1-17">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb1-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>: rng.gamma(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n),</span>
<span id="cb1-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>: rng.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n),</span>
<span id="cb1-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>: rng.choice([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>], p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n),</span>
<span id="cb1-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>: rng.choice([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>], p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.475</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.475</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n),</span>
<span id="cb1-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>: rng.poisson(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n),</span>
<span id="cb1-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>: rng.choice([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>], p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb1-24">})</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set a selected samples to NaN in A, B and C. </span></span>
<span id="cb1-27">df.loc[rng.choice(n, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.NaN</span>
<span id="cb1-28">df.loc[rng.choice(n, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.NaN</span>
<span id="cb1-29">df.loc[rng.choice(n, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.NaN</span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create train-validation split. </span></span>
<span id="cb1-32">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb1-33">dftrain, dfvalid, ytrain, yvalid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)</span>
<span id="cb1-34"></span>
<span id="cb1-35"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dftrain.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dftrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-36"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dfvalid.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dfvalid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-37"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"prop. ytrain : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ytrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dftrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"prop. yvalid : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yvalid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dfvalid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dftrain.shape: (950, 6)
dfvalid.shape: (50, 6)
prop. ytrain : 0.2389
prop. yvalid : 0.2400</code></pre>
</div>
</div>
<p><br></p>
<p>For this dataset, we’ll use <code>ColumnTransformer</code> to create separate pre-processing pipelines for continuous and categorical features. For continuous features, we impute missing values and standardize each to be on the same scale. For categorical features, we impute missing values and one-hot encode, creating k-1 features for a variable with k distinct levels. As the last step a <code>LogisticRegression</code> classifier is included with elastic net penatly. The code to accomplish this is given below:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.compose <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ColumnTransformer</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.experimental <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> enable_iterative_imputer</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.impute <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IterativeImputer</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OneHotEncoder, OrdinalEncoder, StandardScaler</span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LogisticRegression</span>
<span id="cb3-7"></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data pre-processing for LogisticRegression model.</span></span>
<span id="cb3-10">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression(</span>
<span id="cb3-11">    penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elasticnet"</span>, solver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"saga"</span>, max_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb3-12">    )</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify continuous and catergorical features. </span></span>
<span id="cb3-15">continuous <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>]</span>
<span id="cb3-16">categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>]</span>
<span id="cb3-17"></span>
<span id="cb3-18">continuous_transformer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb3-19">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imputer"</span>, IterativeImputer()),</span>
<span id="cb3-20">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scaler"</span> , StandardScaler())</span>
<span id="cb3-21">    ])</span>
<span id="cb3-22">categorical_transformer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb3-23">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"onehot"</span>, OneHotEncoder(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>, sparse_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, handle_unknown<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>))</span>
<span id="cb3-24">    ])</span>
<span id="cb3-25"></span>
<span id="cb3-26">preprocessor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnTransformer(transformers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb3-27">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span> , continuous_transformer, continuous),  </span>
<span id="cb3-28">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"categorical"</span>, categorical_transformer, categorical)</span>
<span id="cb3-29">    ], remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span></span>
<span id="cb3-30">    )</span>
<span id="cb3-31"></span>
<span id="cb3-32">pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb3-33">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"preprocessor"</span>, preprocessor),</span>
<span id="cb3-34">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier"</span>, lr)</span>
<span id="cb3-35">    ]).set_output(transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span>)</span>
<span id="cb3-36"></span>
<span id="cb3-37">pipeline</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('continuous',
                                                  Pipeline(steps=[('imputer',
                                                                   IterativeImputer()),
                                                                  ('scaler',
                                                                   StandardScaler())]),
                                                  ['A', 'B', 'E']),
                                                 ('categorical',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(drop='first',
                                                                                 sparse_output=False))]),
                                                  ['C', 'D'])])),
                ('classifier',
                 LogisticRegression(max_iter=5000, penalty='elasticnet',
                                    solver='saga'))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox"><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('continuous',
                                                  Pipeline(steps=[('imputer',
                                                                   IterativeImputer()),
                                                                  ('scaler',
                                                                   StandardScaler())]),
                                                  ['A', 'B', 'E']),
                                                 ('categorical',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(drop='first',
                                                                                 sparse_output=False))]),
                                                  ['C', 'D'])])),
                ('classifier',
                 LogisticRegression(max_iter=5000, penalty='elasticnet',
                                    solver='saga'))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox"><label for="sk-estimator-id-2" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('continuous',
                                 Pipeline(steps=[('imputer',
                                                  IterativeImputer()),
                                                 ('scaler', StandardScaler())]),
                                 ['A', 'B', 'E']),
                                ('categorical',
                                 Pipeline(steps=[('onehot',
                                                  OneHotEncoder(drop='first',
                                                                sparse_output=False))]),
                                 ['C', 'D'])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox"><label for="sk-estimator-id-3" class="sk-toggleable__label sk-toggleable__label-arrow">continuous</label><div class="sk-toggleable__content"><pre>['A', 'B', 'E']</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-4" type="checkbox"><label for="sk-estimator-id-4" class="sk-toggleable__label sk-toggleable__label-arrow">IterativeImputer</label><div class="sk-toggleable__content"><pre>IterativeImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox"><label for="sk-estimator-id-5" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-6" type="checkbox"><label for="sk-estimator-id-6" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>['C', 'D']</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-7" type="checkbox"><label for="sk-estimator-id-7" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(drop='first', sparse_output=False)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-8" type="checkbox"><label for="sk-estimator-id-8" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=5000, penalty='elasticnet', solver='saga')</pre></div></div></div></div></div></div></div>
</div>
</div>
<p><br></p>
<p>In the next cell, <code>RandomizedSearchCV</code> is run agasinst two hyperparameters: <code>l1_ratio</code> and <code>C</code>. Notice that we only call <code>mdl.fit</code> on the pipeline, as the data transform will be applied to each of the k-datasets separately based on the samples in each fold.</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomizedSearchCV</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hyperparameters to search over. </span></span>
<span id="cb4-6">param_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__l1_ratio"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb4-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__C"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-9">    }</span>
<span id="cb4-10"></span>
<span id="cb4-11">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomizedSearchCV(</span>
<span id="cb4-12">    pipeline, param_grid, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span>, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb4-13">    n_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span></span>
<span id="cb4-14">    )</span>
<span id="cb4-15"></span>
<span id="cb4-16">mdl.fit(dftrain.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), ytrain)</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">best parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fitting 5 folds for each of 3 candidates, totalling 15 fits
[CV] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915; total time=   0.0s
[CV] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915; total time=   0.0s
[CV] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915; total time=   0.0s
[CV] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915; total time=   0.0s
[CV] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915; total time=   0.0s
[CV] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359; total time=   0.0s
[CV] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359; total time=   0.0s
[CV] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359; total time=   0.0s
[CV] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359; total time=   0.0s
[CV] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359; total time=   0.0s
[CV] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002; total time=   0.0s
[CV] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002; total time=   0.0s
[CV] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002; total time=   0.0s
[CV] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002; total time=   0.0s
[CV] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002; total time=   0.0s

best parameters: {'classifier__C': 8.115660497752215, 'classifier__l1_ratio': 0.7084090612742915}</code></pre>
</div>
</div>
<p><br></p>
<p>When an estimator is included within a scikit-learn pipeline and a grid search performed using <code>RandomizedGridSearchCV</code>, the estimator is automatically set to the best parameters found during the search. The <code>best_estimator_</code> attribute of the <code>RandomizedGridSearchCV</code> object will reflect the best parameters for the estimator within the pipeline in terms of the scoring measure:</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">mdl.best_estimator_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('continuous',
                                                  Pipeline(steps=[('imputer',
                                                                   IterativeImputer()),
                                                                  ('scaler',
                                                                   StandardScaler())]),
                                                  ['A', 'B', 'E']),
                                                 ('categorical',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(drop='first',
                                                                                 sparse_output=False))]),
                                                  ['C', 'D'])])),
                ('classifier',
                 LogisticRegression(C=8.115660497752215,
                                    l1_ratio=0.7084090612742915, max_iter=5000,
                                    penalty='elasticnet', solver='saga'))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-9" type="checkbox"><label for="sk-estimator-id-9" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('continuous',
                                                  Pipeline(steps=[('imputer',
                                                                   IterativeImputer()),
                                                                  ('scaler',
                                                                   StandardScaler())]),
                                                  ['A', 'B', 'E']),
                                                 ('categorical',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(drop='first',
                                                                                 sparse_output=False))]),
                                                  ['C', 'D'])])),
                ('classifier',
                 LogisticRegression(C=8.115660497752215,
                                    l1_ratio=0.7084090612742915, max_iter=5000,
                                    penalty='elasticnet', solver='saga'))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-10" type="checkbox"><label for="sk-estimator-id-10" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('continuous',
                                 Pipeline(steps=[('imputer',
                                                  IterativeImputer()),
                                                 ('scaler', StandardScaler())]),
                                 ['A', 'B', 'E']),
                                ('categorical',
                                 Pipeline(steps=[('onehot',
                                                  OneHotEncoder(drop='first',
                                                                sparse_output=False))]),
                                 ['C', 'D'])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-11" type="checkbox"><label for="sk-estimator-id-11" class="sk-toggleable__label sk-toggleable__label-arrow">continuous</label><div class="sk-toggleable__content"><pre>['A', 'B', 'E']</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-12" type="checkbox"><label for="sk-estimator-id-12" class="sk-toggleable__label sk-toggleable__label-arrow">IterativeImputer</label><div class="sk-toggleable__content"><pre>IterativeImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-13" type="checkbox"><label for="sk-estimator-id-13" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-14" type="checkbox"><label for="sk-estimator-id-14" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>['C', 'D']</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-15" type="checkbox"><label for="sk-estimator-id-15" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(drop='first', sparse_output=False)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-16" type="checkbox"><label for="sk-estimator-id-16" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(C=8.115660497752215, l1_ratio=0.7084090612742915,
                   max_iter=5000, penalty='elasticnet', solver='saga')</pre></div></div></div></div></div></div></div>
</div>
</div>
<p><br></p>
<p>Once the optimal model has been determined, we can pass our validation/test data into the pipeline to generate predicted probabilities for unseen data:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assessing model performance on unseen data.</span></span>
<span id="cb7-3">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict_proba(dfvalid)[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-4"></span>
<span id="cb7-5">ypred</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([0.23803061, 0.23987571, 0.22497394, 0.2360284 , 0.21692351,
       0.24979123, 0.22930123, 0.23805811, 0.18848299, 0.2269307 ,
       0.18739627, 0.21963412, 0.24601412, 0.24592807, 0.26313459,
       0.19509853, 0.22403892, 0.2644474 , 0.25217899, 0.25114582,
       0.25275472, 0.25602435, 0.23526247, 0.22682578, 0.21364797,
       0.31097165, 0.25706994, 0.26917858, 0.21912074, 0.14953379,
       0.2521859 , 0.19803027, 0.23446292, 0.20239688, 0.22329016,
       0.23452063, 0.19225738, 0.1971433 , 0.32557197, 0.2366244 ,
       0.21352434, 0.27294373, 0.25589429, 0.23278834, 0.24858346,
       0.2058699 , 0.17559173, 0.24556249, 0.22534097, 0.22728177])</code></pre>
</div>
</div>
<p>In some cases, we may want to pickle our model to share with a third-party for some downstream task. This is straightforward:</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-model.pkl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fpkl:</span>
<span id="cb9-4">    pickle.dump(mdl, fpkl, protocol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pickle.HIGHEST_PROTOCOL)</span></code></pre></div>
</div>



 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/composite-estimators/composite-estimators.html</guid>
  <pubDate>Thu, 01 Aug 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Querying SQL Server from Pandas</title>
  <link>https://www.jtrive.com/posts/sqlserver-from-python/sqlserver-from-python.html</link>
  <description><![CDATA[ 





<p>If you research how to connect to a database from Python, many examples use the pyodbc library, which, aptly named, creates a connection to any ODBC-compatible database. However, connections with pyodbc itself are uni-directional: Data can be retrieved, but it cannot be uploaded into the database. To allow for simple, bi-directional database transactions, we use pyodbc along with <a href="https://www.sqlalchemy.org/">sqlalchemy</a>, a Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL. With pyodbc and sqlalchemy together, it becomes possible to retrieve and upload data from Pandas DataFrames with relative ease. Let’s assume we’re interested in connecting to a SQL Server database on some server. A connection using sqlalchemy is created as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Creating a database connection with sqlalchemy. </span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlalchemy</span>
<span id="cb1-6"></span>
<span id="cb1-7">DRIVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQL Server"</span></span>
<span id="cb1-8">SERVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SERVER"</span></span>
<span id="cb1-9">DATABASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATABASE"</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create connection uri.</span></span>
<span id="cb1-12">conn_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mssql+pyodbc://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>SERVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATABASE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?driver=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DRIVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize connection.</span></span>
<span id="cb1-15">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  sqlalchemy.create_engine(conn_uri)</span></code></pre></div>
<p>A few points to highlight:</p>
<ul>
<li><p><code>conn_uri</code> is a string that contains information needed to connect to our database. The prefix <code>mssql+pyodbc://</code> indicates that we’re targeting a SQL Server database via the pyodbc connector. Also, if we weren’t using Windows authentication, or were working with a different RDBMS, it would be necessary to change <code>conn_uri</code>. For example, an Oracle connection uri would be specified as <code>oracle://[USERNAME]:[PASSWORD]@[DATABASE]</code>.</p></li>
<li><p>Also in <code>conn_uri</code>, within the format substitution, whitespace in <code>DRIVER</code> is replaced with <code>+</code>. This is consistent with how whitespace is encoded for web addresses.</p></li>
</ul>
<p>Next, to query the French Motor Third-Party Liability Claims sample dataset in the table <em>SAMPLE_FREMTPL</em>, use the <code>read_sql</code> function. I’ve included the connection initialization logic for convenience:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Reading database data into Pandas DataFrame.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlalchemy</span>
<span id="cb2-6"></span>
<span id="cb2-7">DRIVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQL Server"</span></span>
<span id="cb2-8">SERVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SERVER"</span></span>
<span id="cb2-9">DATABASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATABASE"</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create connection uri.</span></span>
<span id="cb2-12">conn_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mssql+pyodbc://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>SERVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATABASE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?driver=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DRIVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize connection.</span></span>
<span id="cb2-15">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  sqlalchemy.create_engine(conn_uri)</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create query. </span></span>
<span id="cb2-18">SQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM SAMPLE_TABLE"</span></span>
<span id="cb2-19"></span>
<span id="cb2-20">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(SQL, con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>conn)</span></code></pre></div>
<p>Instead of passing a query to <code>pd.read_sql</code>, the tablename could have been provided. <code>pd.read_sql</code> is convenience wrapper around <code>read_sql_table</code> and <code>read_sql_query</code> which will delegate to the specific function depending on the input (dispatches <code>read_sql_table</code> if input is a tablename, <code>read_sql_query</code> if input is a query). Refer to the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html#pandas.read_sql">documentation</a> for more information.</p>
<p>Let’s assume SAMPLE_TABLE represents the French Motor Third-Party Liability Claims dataset available <a href="https://www.kaggle.com/datasets/floser/french-motor-claims-datasets-fremtpl2freq">here</a>. Inspecting the first 10 records of the dataset yields:</p>
<pre><code>  IDPOL CLAIMNB  EXPOSURE AREA  VEHPOWER VEHAGE  DRIVAGE  BONUSMALUS VEHBRAND     VEHGAS  DENSITY REGION
0  1290       1   0.66000  'B'         7      0       28          60    'B12'  'Regular'       52  'R72'
1  1292       1   0.12000  'B'         7      0       28          60    'B12'  'Regular'       52  'R72'
2  1295       1   0.08000  'E'         5      0       36          50    'B12'  'Regular'     3274  'R11'
3  1296       1   0.50000  'E'         5      0       36          50    'B12'  'Regular'     3274  'R11'
4  1297       1   0.20000  'E'         5      0       36          50    'B12'  'Regular'     3274  'R11'
5  1299       1   0.74000  'D'         6      0       76          50    'B12'  'Regular'      543  'R91'
6  1301       1   0.05000  'D'         6      0       76          50    'B12'  'Regular'      543  'R91'
7  1303       1   0.03000  'B'        11      0       39          50    'B12'   'Diesel'       55  'R52'
8  1304       1   0.76000  'B'        11      0       39          50    'B12'   'Diesel'       55  'R52'
9  1306       1   0.49000  'E'        10      0       38          50    'B12'  'Regular'     2715  'R93'</code></pre>
<section id="iterative-data-retrieval" class="level3">
<h3 class="anchored" data-anchor-id="iterative-data-retrieval">Iterative Data Retrieval</h3>
<p>When working with large datasets, it may be inefficient to retrieve the entire dataset in a single pass. Pandas provides functionality to retrieve data in <code>chunksize</code>-record blocks, which can result in significant speedups. In the following example, the same French Motor Third-Party Liability Claims sample dataset is retrieved in 20,000-record blocks. The only change in the call to <code>read_sql</code> is the inclusion of <code>chunksize</code>, which specifies the maximum number of records to retrieve for a given iteration. We assume <code>conn</code> has already been initialized:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Using `read_sql`'s *chunksize* parameter for iterative retrieval.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-4">CHUNKSIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span></span>
<span id="cb4-5">SQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM SAMPLE_TABLE"</span></span>
<span id="cb4-6">dfiter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(SQL, con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>conn, chunksize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CHUNKSIZE)</span>
<span id="cb4-7">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([dd <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dd <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dfiter])</span></code></pre></div>
<ul>
<li><code>CHUNKSIZE</code> specifies the maximum number of records to retrieve at each iteration.</li>
<li><code>dfiter</code> is a reference to the data targeted in our query. <code>dfiter</code> is not a DataFrame, rather it is a generator, a Python object which makes it easy to create iterators. Generators yield values lazily, so they are particularly memory efficient.</li>
<li><code>df = pd.concat([dd for dd in dfiter])</code> can be decomposed into two parts: First, <code>[dd for dd in dfiter]</code> is a <em>list comprehension</em>, a very powerful tool that works similar to a flattened for loop. If we bound <code>[dd for dd in dfiter]</code> to a variable directly, the result would be a list of 34 DataFrames, each having no more than 20,000 records. Second, <code>pd.concat</code> takes the list of DataFrames, and performs a row-wise concatenation of each DataFrame, resulting in a single DataFrame with 678,013 records. <code>pd.concat</code> is akin to the SQL <code>UNION</code> operator. The final result, <code>df</code>, is a DataFrame having 678,013 rows and 12 columns.</li>
</ul>
</section>
<section id="exporting-results-to-file" class="level3">
<h3 class="anchored" data-anchor-id="exporting-results-to-file">Exporting Results to File</h3>
<p>Instead of reading the data into memory, it may be necessary to retrieve the dataset, then write the results to file for later analysis. This can be accomplished in an iterative fashion so that no more than <code>CHUNKSIZE</code> records are in-memory at any point in time. Results will be saved to .csv in a file named <code>"FREMTPL.csv"</code> in 100,000 record blocks:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Writing queried results to file. </span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb5-5"></span>
<span id="cb5-6">CHUNKSIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span></span>
<span id="cb5-7">CSV_PATH  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FREMTPL.csv"</span></span>
<span id="cb5-8">SQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM SAMPLE_TABLE"</span></span>
<span id="cb5-9"></span>
<span id="cb5-10">dfiter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(SQL, conn, chunksize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CHUNKSIZE)</span>
<span id="cb5-11"></span>
<span id="cb5-12">t_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb5-13">trkr, nbrrecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(CSV_PATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fcsv:</span>
<span id="cb5-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dfiter:</span>
<span id="cb5-17">        fcsv.write(df.to_csv(header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nbrrecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>))</span>
<span id="cb5-18">        nbrrecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieved records </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>((trkr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CHUNKSIZE) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbrrecs))</span>
<span id="cb5-20">        trkr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-21"></span>
<span id="cb5-22">t_tot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t_i</span>
<span id="cb5-23">retrieval_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nbrrecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> t_tot</span>
<span id="cb5-24"></span>
<span id="cb5-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb5-26">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Retrieved </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbrrecs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> records in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t_tot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>retrieval_rate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> recs/sec.)."</span></span>
<span id="cb5-27">    )</span></code></pre></div>
<p>Executing the code above produces the following output:</p>
<pre><code>Retrieved records 1-100000
Retrieved records 100001-200000
Retrieved records 200001-300000
Retrieved records 300001-400000
Retrieved records 400001-500000
Retrieved records 500001-600000
Retrieved records 600001-678013
Retrieved 678013 records in 20 seconds (33370 recs/sec.).</code></pre>
</section>
<section id="exporting-data" class="level3">
<h3 class="anchored" data-anchor-id="exporting-data">Exporting Data</h3>
<p>In order to export a DataFrame into a database, we leverage the DataFrame’s <code>to_sql</code> method. We provide the name of the table we wish to upload data into, along with a connection object, and what action to take if the table already exists. <code>if_exists</code> can be one of:</p>
<ul>
<li><p>“fail”: Raise a <code>ValueError</code>.</p></li>
<li><p>“replace”: Drop the table before inserting new values.</p></li>
<li><p>“append”: Insert new values to the existing table.</p></li>
</ul>
<p>As a simple transformation, we determine aggregate EXPOSURE by AREA, append a timestamp, then export the result as “SAMPLE_AREA_SUMM”. If the table exists, we want the query to fail:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Summary of aggregate EXPOSURE by AREA based on the French Motor Third-Party </span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Liability Claims sample dataset.</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute aggregate EXPOSURE by AREA.</span></span>
<span id="cb7-8">dfsumm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AREA"</span>, as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EXPOSURE"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append timestamp.</span></span>
<span id="cb7-11">timestamp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %H:%M:%S.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-12">dfsumm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TIMESTAMP"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timestamp</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export results.</span></span>
<span id="cb7-15">dfsumm.to_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SAMPLE_AREA_SUMM"</span>, con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>conn, if_exists<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fail"</span>)</span></code></pre></div>
<p>If the table already exists, an error like the following will be generated:</p>
<pre><code>ValueError: Table 'SAMPLE_AREA_SUMM' already exists.</code></pre>
<p>Otherwise, no output will be generated.</p>
</section>
<section id="writing-queried-data-to-compressed-format" class="level3">
<h3 class="anchored" data-anchor-id="writing-queried-data-to-compressed-format">Writing Queried Data to Compressed Format</h3>
<p>Next we demonstrate how data can be queried iteratively and written directly to a compressed file format. This is especially useful when working with very large datasets, or when the data exceeds available system resources. Another reason to save datasets in compressed format is that Pandas can read compressed files just as easily as csvs. Once read into memory, the dataset will expand to the full uncompressed size, but by writing data to compressed format we reduce our overall storage footprint. Here’s the code to do it:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlalchemy</span>
<span id="cb9-5"></span>
<span id="cb9-6">DRIVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQL Server"</span></span>
<span id="cb9-7">SERVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SERVER"</span></span>
<span id="cb9-8">DATABASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATABASE"</span></span>
<span id="cb9-9">CHUNKSIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span></span>
<span id="cb9-10">DATA_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"COMPRESSED-SAMPLE-TABLE.csv.gz"</span></span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create connection uri.</span></span>
<span id="cb9-13">conn_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mssql+pyodbc://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>SERVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATABASE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?driver=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DRIVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize connection.</span></span>
<span id="cb9-16">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  sqlalchemy.create_engine(conn_uri)</span>
<span id="cb9-17">SQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM SAMPLE_TABLE"</span></span>
<span id="cb9-18">dfiter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(SQL, con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>conn, chunksize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CHUNKSIZE)</span>
<span id="cb9-19"></span>
<span id="cb9-20">t_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb9-21">trkr, nbrrecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(DATA_PATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fgz:</span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dfiter:</span>
<span id="cb9-24">        fgz.write(df.to_csv(header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nbrrecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>).encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>))</span>
<span id="cb9-25">        nbrrecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieved records </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>((trkr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CHUNKSIZE) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbrrecs))</span>
<span id="cb9-27">        trkr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-28"></span>
<span id="cb9-29">t_tot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t_i</span>
<span id="cb9-30">retrieval_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nbrrecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> t_tot</span>
<span id="cb9-31"></span>
<span id="cb9-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb9-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieved </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> records in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> recs/sec.)."</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(</span>
<span id="cb9-34">        nbrrecs, t_tot, retrieval_rate</span>
<span id="cb9-35">        )</span>
<span id="cb9-36">    ) </span></code></pre></div>
<p>The only expression requiring explanation is within <code>df.to_csv</code>, where <code>header=nbrrecs==0</code> is specified. This ensures that headers are written for the first batch of records only, and ignored for subsequent batches (100,000 record chunks are read in at each iteration).</p>
<p>To read the compressed file back into Pandas, use the <code>pd.read_csv</code> function specifying the compression type (in this example we used “gzip” - other options are “zip”, “bz2” or “xz”):</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">In [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]: df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(DATA_PATH, compression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gzip"</span>)</span>
<span id="cb10-2">In [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]: df.shape</span>
<span id="cb10-3">Out[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]: (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">678013</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>


</section>

 ]]></description>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/sqlserver-from-python/sqlserver-from-python.html</guid>
  <pubDate>Sat, 01 Jun 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Hyperparameter Search and Classifier Threshold Selection</title>
  <link>https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding.html</link>
  <description><![CDATA[ 





<p>The following notebook demonstrates how to use <code>GridSearchCV</code> to identify optimal hyperparameters for a given model and metric, and alternatives for selecting a classifier threshold in scikit-learn.</p>
<p>First we load the breast cancer dataset. We will forgo any pre-processing, but create separate train and validation sets:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_breast_cancer</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-8"></span>
<span id="cb1-9">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-10">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-11">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-12">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_breast_cancer()</span>
<span id="cb1-15">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>]</span>
<span id="cb1-16">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create train, validation and test splits. </span></span>
<span id="cb1-20">Xtrain, Xvalid, ytrain, yvalid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.20</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Xtrain.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Xtrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Xvalid.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Xvalid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Xtrain.shape: (455, 30)
Xvalid.shape: (114, 30)</code></pre>
</div>
</div>
<section id="hyperparameter-search" class="level2">
<h2 class="anchored" data-anchor-id="hyperparameter-search">Hyperparameter Search</h2>
<p>A random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting (see documentation <a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#sklearn-ensemble-randomforestclassifier">here</a>).</p>
<p>The <code>RandomForestClassifier</code> takes a number of hyperparameters. It can be difficult to determine which values to set these to manually, so instead we can perform a cross-validated grid search over a number of candidate values to determine which hyperparmeter combination is best for our data and specified metric. <code>GridSearchCV</code>is part of scikit-learn, and is a method used to find the best possible configuration of hyperparameters for optimal performance. It works as follows:</p>
<ol type="1">
<li><p><strong>Define a parameter grid</strong>: The grid is a dictionary that maps parameter names to the values that should be tested. These parameters are specific to the model you are working to optimize.</p></li>
<li><p><strong>Specify a model</strong>: Choose a model that you want to optimize using <code>GridSearchCV</code>. This model is not trained yet; it’s just passed in with it’s default parameters.</p></li>
<li><p><strong>Cross-validation setup</strong>: <code>GridSearchCV</code> uses cross-validation to evaluate each combination of parameter values provided in the grid. You need to specify the number of folds (splits) for the cross-validation process (this is the <code>cv</code> parameter). Common choices are 5 or 10 folds, depending on the size of your dataset and how thorough you want the search to be.</p></li>
<li><p><strong>Search Execution</strong>: With the parameter grid, model, and cross-validation setup, <code>GridSearchCV</code> systematically works through multiple combinations of parameter sets, cross-validating as it goes to determine which configuration gives the best performance based on a score function. The performance is often measured using metrics like accuracy, precision or recall for classification problems or mean squared error for regression problems.</p></li>
<li><p><strong>Results:</strong> Finally, <code>GridSearchCV</code> provides the best parameters, allowing you to understand which parameters work best for your model. Additionally, it can provide other results like the score for each parameter combination, allowing for deeper analysis of how different parameter values impact model performance.</p></li>
</ol>
<p><br></p>
<p>The documentation for <code>GridSearchCV</code> is available <a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html#sklearn.model_selection.GridSearchCV">here</a>.</p>
<p><br></p>
<p>In the next cell, we assess the following <code>RandomForestClassifier</code> hyperparameters:</p>
<ul>
<li><code>n_estimators</code>: [100, 150, 250]</li>
<li><code>min_samples_leaf</code>: [2, 3, 4]</li>
<li><code>ccp_alpha</code>: [0, .1, .2, .3]</li>
</ul>
<p>For the metric, recall is used since the cost of a false negative is high (not detecting breast cancer). This means the hyperparameter combination with the maximum average recall over the k-folds will be selected as the best parameter set.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Example using GridSearchCV to identify optimal hyperparameters w.r.t. recall.</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Note that within GridSearchCV, cv represents the number of folds for </span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">k-Fold cross validation.</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GridSearchCV</span>
<span id="cb3-8"></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create parameter grid as dictionary.</span></span>
<span id="cb3-11">param_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_estimators"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>],</span>
<span id="cb3-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min_samples_leaf"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb3-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ccp_alpha"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span>]</span>
<span id="cb3-15">    }</span>
<span id="cb3-16"></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pass model and param_grid into GridSearchCV.</span></span>
<span id="cb3-19">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GridSearchCV(</span>
<span id="cb3-20">    RandomForestClassifier(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>), </span>
<span id="cb3-21">    param_grid, </span>
<span id="cb3-22">    scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"recall"</span>, </span>
<span id="cb3-23">    cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb3-24">    )</span>
<span id="cb3-25">    </span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit model on training set. This can take a while depending on the number of </span></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hyperparameter combinations in param_grid.</span></span>
<span id="cb3-28">mdl.fit(Xtrain, ytrain)</span>
<span id="cb3-29"></span>
<span id="cb3-30"></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print optimal parameters.</span></span>
<span id="cb3-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"best parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-33"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>best parameters: {'ccp_alpha': 0, 'min_samples_leaf': 4, 'n_estimators': 100}</code></pre>
</div>
</div>
<p><br></p>
<p>For random forests, boosting models and other tree-based ensemble methods, we can obtain a summary of the relative importance of each of the input features. This is available in the <code>mdl.best_estimator_.feature_importances_</code> attribute. We can plot feature importances in decreasing order as follows:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2">imp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.best_estimator_.feature_importances_</span>
<span id="cb5-3"></span>
<span id="cb5-4">rf_imp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(imp, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature_names"</span>]).sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-7">rf_imp.plot.bar(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb5-8">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomForestClassifier feature importances"</span>)</span>
<span id="cb5-9">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean decrease in impurity"</span>)</span>
<span id="cb5-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>In terms of mean decrease in impurity, the top 7 features are assigned the highest importance, with the remaining features deemed not as relevant. For more information on how feature importance is calculated, see <a href="https://scikit-learn.org/stable/auto_examples/ensemble/plot_forest_importances.html">here</a>.</p>
<p><br></p>
<p>The resulting <code>mdl</code> object can be used to make predictions on the validation set (<code>mdl</code> exposes the <code>RandomForestClassifier</code> with optimal hyperparameters set). We use <code>mdl.predict_proba</code> to get probabilities on [0, 1], with values closer to 1 representing positive predicted instances of breast cancer on the validation set:</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict_proba(Xvalid)[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb6-3"></span>
<span id="cb6-4">ypred</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([0.005     , 0.82743637, 0.97088095, 0.        , 0.        , 1.        , 0.98020202, 0.67380556, 0.        , 0.99333333, 0.9975    , 0.30048576, 0.9528113 , 0.99666667, 0.04102381, 0.99444444, 1.        , 0.828226  , 0.        , 0.        , 0.97916667, 1.        , 0.99607143, 0.90425163, 0.        , 0.02844156, 0.99333333, 0.98183333, 0.9975    , 0.08869769, 0.97369841, 0.        , 1.        , 0.71100866, 0.96022727, 0.        , 0.71200885, 0.06103175, 0.005     , 0.99490476, 0.1644127 , 0.        , 0.23646934, 1.        , 0.57680164, 0.64901715, 0.9975    , 0.61790818, 0.95509668, 0.99383333, 0.04570455, 0.97575758, 1.        , 0.47115815, 0.92422619, 0.77371415, 0.        , 1.        , 0.26198657, 0.        , 0.28206638, 0.95216162, 0.98761905, 0.99464286, 0.98704762, 0.85579351, 0.10036905, 0.00222222, 0.98011905, 0.99857143, 0.92285967, 0.95180556, 0.97546947, 0.84433189, 0.005     , 0.99833333, 0.83616339, 1.        , 0.9955    , 1.        , 0.99833333, 1.        ,
       0.86399315, 0.9807381 , 0.        , 0.99833333, 0.9975    , 0.        , 0.98733333, 0.96822727, 0.23980827, 0.7914127 , 0.        , 0.98133333, 1.        , 1.        , 0.89251019, 0.9498226 , 0.18943254, 0.83494391, 0.9975    , 1.        , 0.77079113, 0.99722222, 0.30208297, 1.        , 0.92111977, 0.99428571, 0.91936508, 0.47118074, 0.98467172, 0.006     , 0.05750305, 0.96954978])</code></pre>
</div>
</div>
<p>Note that scikit-learn <code>predict_proba</code> outputs an nx2 dimensional array, where the first column represents the probability of class 0 and the second column the probability of class 1 (has breast cancer). Each row will sum to 1. We will work with the probabilities of the class we’re interested in analyzing, so we extract only the values from the positive class (the second column), that’s why we call <code>mdl.predict_proba(Xvalid)[:,1]</code>.</p>
<p><br></p>
<section id="threshold-selection" class="level3">
<h3 class="anchored" data-anchor-id="threshold-selection">Threshold Selection</h3>
<p>In order to master machine learning, it is necessary to learn a variety of minor concepts that underpin these systems. One such concept is setting the optimal classification threshold.</p>
<p>By default, for probabilistic classifiers scikit-learn uses a threshold of .50 to distinguish between positive and negative class instances. The predicted classes are obtained by calling <code>mdl.predict</code>. Here’s a side by side comparison of the model predicted probabilities and predicted classes:</p>
<div id="cell-12" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted probabilities.</span></span>
<span id="cb8-3">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict_proba(Xvalid)[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted classes.</span></span>
<span id="cb8-7">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict(Xvalid).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine probabilities and predicted class labels.</span></span>
<span id="cb8-11">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate([ypred, yhat], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-12"></span>
<span id="cb8-13">preds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([[0.005     , 0.        ],
       [0.82743637, 1.        ],
       [0.97088095, 1.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [1.        , 1.        ],
       [0.98020202, 1.        ],
       [0.67380556, 1.        ],
       [0.        , 0.        ],
       [0.99333333, 1.        ],
       [0.9975    , 1.        ],
       [0.30048576, 0.        ],
       [0.9528113 , 1.        ],
       [0.99666667, 1.        ],
       [0.04102381, 0.        ],
       [0.99444444, 1.        ],
       [1.        , 1.        ],
       [0.828226  , 1.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.97916667, 1.        ],
       [1.        , 1.        ],
       [0.99607143, 1.        ],
       [0.90425163, 1.        ],
       [0.        , 0.        ],
       [0.02844156, 0.        ],
       [0.99333333, 1.        ],
       [0.98183333, 1.        ],
       [0.9975    , 1.        ],
       [0.08869769, 0.        ],
       [0.97369841, 1.        ],
       [0.        , 0.        ],
       [1.        , 1.        ],
       [0.71100866, 1.        ],
       [0.96022727, 1.        ],
       [0.        , 0.        ],
       [0.71200885, 1.        ],
       [0.06103175, 0.        ],
       [0.005     , 0.        ],
       [0.99490476, 1.        ],
       [0.1644127 , 0.        ],
       [0.        , 0.        ],
       [0.23646934, 0.        ],
       [1.        , 1.        ],
       [0.57680164, 1.        ],
       [0.64901715, 1.        ],
       [0.9975    , 1.        ],
       [0.61790818, 1.        ],
       [0.95509668, 1.        ],
       [0.99383333, 1.        ],
       [0.04570455, 0.        ],
       [0.97575758, 1.        ],
       [1.        , 1.        ],
       [0.47115815, 0.        ],
       [0.92422619, 1.        ],
       [0.77371415, 1.        ],
       [0.        , 0.        ],
       [1.        , 1.        ],
       [0.26198657, 0.        ],
       [0.        , 0.        ],
       [0.28206638, 0.        ],
       [0.95216162, 1.        ],
       [0.98761905, 1.        ],
       [0.99464286, 1.        ],
       [0.98704762, 1.        ],
       [0.85579351, 1.        ],
       [0.10036905, 0.        ],
       [0.00222222, 0.        ],
       [0.98011905, 1.        ],
       [0.99857143, 1.        ],
       [0.92285967, 1.        ],
       [0.95180556, 1.        ],
       [0.97546947, 1.        ],
       [0.84433189, 1.        ],
       [0.005     , 0.        ],
       [0.99833333, 1.        ],
       [0.83616339, 1.        ],
       [1.        , 1.        ],
       [0.9955    , 1.        ],
       [1.        , 1.        ],
       [0.99833333, 1.        ],
       [1.        , 1.        ],
       [0.86399315, 1.        ],
       [0.9807381 , 1.        ],
       [0.        , 0.        ],
       [0.99833333, 1.        ],
       [0.9975    , 1.        ],
       [0.        , 0.        ],
       [0.98733333, 1.        ],
       [0.96822727, 1.        ],
       [0.23980827, 0.        ],
       [0.7914127 , 1.        ],
       [0.        , 0.        ],
       [0.98133333, 1.        ],
       [1.        , 1.        ],
       [1.        , 1.        ],
       [0.89251019, 1.        ],
       [0.9498226 , 1.        ],
       [0.18943254, 0.        ],
       [0.83494391, 1.        ],
       [0.9975    , 1.        ],
       [1.        , 1.        ],
       [0.77079113, 1.        ],
       [0.99722222, 1.        ],
       [0.30208297, 0.        ],
       [1.        , 1.        ],
       [0.92111977, 1.        ],
       [0.99428571, 1.        ],
       [0.91936508, 1.        ],
       [0.47118074, 0.        ],
       [0.98467172, 1.        ],
       [0.006     , 0.        ],
       [0.05750305, 0.        ],
       [0.96954978, 1.        ]])</code></pre>
</div>
</div>
<p>Notice that when the probability is less that 0.50, the predicted class is 0. When the predicted probability is greater than 0.50, the predicted class is 1. For certain applications, the 0.50 threshold might make sense, for example when your target is balanced or close to balanced (when the number of 0s and 1s in the training set is approximately equal). But for unbalanced datasets, using the default threshold can give misleading results. In what follows, we walkthrough a few approaches that can be used to assess the optimal discrimination theshold for a classifier.</p>
</section>
<section id="use-0.50" class="level3">
<h3 class="anchored" data-anchor-id="use-0.50">1. Use 0.50</h3>
<p>The first approach is the most straightforward: Just use the default scikit-learn threshold of .50. This makes sense when your classes are balanced, but will give misleading results when classes are imbalanced.</p>
<p><br></p>
</section>
<section id="use-1---the-proportion-of-positive-instances-in-the-training-data" class="level3">
<h3 class="anchored" data-anchor-id="use-1---the-proportion-of-positive-instances-in-the-training-data">2. Use 1 - the proportion of positive instances in the training data</h3>
<p>If we look at the number of positives (1s) vs.&nbsp;total samples in our training set, we have:</p>
<div id="cell-16" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Proportion of positives in training set: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ytrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ytrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Proportion of positives in training set: 0.62</code></pre>
</div>
</div>
<p>We see that 62% of the samples belong to class 1. This is usually not the case. In many classification scenarios, we’re dealing with 10%, 5% or even less than 1% of samples belonging to the positive class.</p>
<p>To illustrate the approach, since 62% percent of the observations belong to the positive class, we would use a threshold of <strong>1 - .62 = .38</strong>. The predicted class labels are then created using the following code:</p>
<div id="cell-18" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating predicted classes based on adjusted classifier threshold. </span></span>
<span id="cb12-3">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.38</span></span>
<span id="cb12-4"></span>
<span id="cb12-5">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thresh, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Now any sample with a predicted probability less than or equal to .38 will be assigned to class 0, and samples with predicted probability greater than .38 are assigned to the positive class.</p>
<p>If we’re dealing with a highly imbalanced dataset with only 1% positive instances, we would use <strong>1 - .01 = .99</strong> as the threshold using this method.</p>
<p><br></p>
</section>
<section id="use-best-f1-score" class="level3">
<h3 class="anchored" data-anchor-id="use-best-f1-score">3. Use best f1-score</h3>
<p>The f1-score is the geometric average of precision and recall. We can compute precision and recall for a number of different thresholds then select the threshold that maximizes the f1-score. This is a suitable approach if your classification task weighs precision and recall equally. Although this isn’t the case for our breast cancer classifier (we want to maximize recall since the cost of a false negative is high), the approach is demonstrated in the next cell:</p>
<div id="cell-20" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> precision_recall_curve</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get precision and recall for various thresholds.</span></span>
<span id="cb13-5">p, r, thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(yvalid, ypred)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute f1-score for each threshold.</span></span>
<span id="cb13-8">f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify threshold that maximizes f1-score.</span></span>
<span id="cb13-11">best_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thresh[np.argmax(f1)]</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Threshold using optimal f1-score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>best_thresh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Threshold using optimal f1-score: 0.471.</code></pre>
</div>
</div>
<p>Using this method, we would set the discrimination threshold to <strong>.471</strong>, and would obtain the predicted class labels the same way as before:</p>
<div id="cell-22" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.471</span></span>
<span id="cb15-3"></span>
<span id="cb15-4">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thresh, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p><br></p>
</section>
<section id="inspection-of-roc-curve" class="level3">
<h3 class="anchored" data-anchor-id="inspection-of-roc-curve">4. Inspection of ROC curve</h3>
<p>The Receiver Operating Characteristic (ROC) curve plots the true positive rate (TPR) against the false positive rate (FPR) at various classification thresholds. Typically we’re interested in using a threshold that maximizes TPR while minimizing FPR, which is the point (0, 1). The curve starts with a threshold of 1 at the far left and decreases towards 0 as the x-axis increases.</p>
<p>We can plot the ROC curve in scikit-learn using the code below. Note that <code>ypred</code> are predicted probabilities and <code>yvalid</code> are class labels (1s or 0s).</p>
<div id="cell-24" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RocCurveDisplay</span>
<span id="cb16-3"></span>
<span id="cb16-4">roc_disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RocCurveDisplay.from_predictions(</span>
<span id="cb16-5">    yvalid, ypred, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomForestClassifier"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#191964"</span></span>
<span id="cb16-6">    )</span>
<span id="cb16-7">roc_disp.ax_.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ROC curve"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb16-8">roc_disp.ax_.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Using approach 4, the optimal threshold would be somewhere between .70-.80, which is much higher than what is indicated using the other methods so far. Ultimately it is up to you to determine which threshold makes the most sense, but intuitively, a threshold of .70-.80 seems too high when the prevalence of the positive class in the training data is 62%.</p>
<p><br></p>
</section>
<section id="inspection-of-the-precision-recall-curve" class="level3">
<h3 class="anchored" data-anchor-id="inspection-of-the-precision-recall-curve">5. Inspection of the precision-recall curve</h3>
<p>The precision-recall curve is a graphical representation used in binary classification to evaluate the performance of a classification model at different probability thresholds. This curve shows the trade-off between precision and recall for a number of different thresholds. The curve plots recall on the x-axis and precision on the y-axis.</p>
<p>The curve starts from the rightmost part of the graph. As the threshold for classifying positive instances decreases, recall increases, and precision can either increase or decrease, but typically it decreases because the model starts to classify more instances as positive, including both true positives and false positives.</p>
<p>The top-right corner of the graph (high precision, high recall) represents the ideal point, where the classifier perfectly identifies all positive cases with no false positives. Generally, we’d like to select a threshold that corresponds to a point closest to top-right corner of the graph.</p>
<p>We can plot the precision-recall curve in scikit-learn using the code below. Note that <code>ypred</code> are predicted probabilities and <code>yvalid</code> are class labels (1s or 0s).</p>
<div id="cell-27" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PrecisionRecallDisplay</span>
<span id="cb17-3"></span>
<span id="cb17-4">pr_disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PrecisionRecallDisplay.from_predictions(</span>
<span id="cb17-5">    yvalid, ypred, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomForestClassifier"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#CD0066"</span></span>
<span id="cb17-6">    )</span>
<span id="cb17-7">pr_disp.ax_.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Precision-Recall curve"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb17-8">pr_disp.ax_.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb17-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Based on the plot, would want to select the threshold that corresponds to a recall of about .95, since this is close to the point (1, 1). This can be determined using the following code:</p>
<div id="cell-29" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> precision_recall_curve</span>
<span id="cb18-3"></span>
<span id="cb18-4">p, r, thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(yvalid, ypred)</span>
<span id="cb18-5"></span>
<span id="cb18-6">best_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thresh[np.where(r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Selected threshold using precision-recall curve: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>best_thresh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Selected threshold using precision-recall curve: 0.674.</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="inspection-of-precision-and-recall-as-a-function-of-threshold" class="level3">
<h3 class="anchored" data-anchor-id="inspection-of-precision-and-recall-as-a-function-of-threshold">6. Inspection of precision and recall as a function of threshold</h3>
<p>It is also possible to plot precision and recall as two separate series against threshold on the x-axis. The goal is to identify a point where precision and recall intersect. Using this approach may be suitable in some scenarios.</p>
<div id="cell-31" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> precision_recall_curve</span>
<span id="cb20-3"></span>
<span id="cb20-4">p, r, thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(yvalid, ypred)</span>
<span id="cb20-5">p, r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], r[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb20-6"></span>
<span id="cb20-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-8">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"precision &amp; recall vs. threshold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb20-9">ax.plot(thresh, p, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"precision"</span>)</span>
<span id="cb20-10">ax.plot(thresh, r, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"recall"</span>)</span>
<span id="cb20-11">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"threshold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb20-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax.set_xticks(np.arange(tmax+1))</span></span>
<span id="cb20-13">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb20-14">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb20-15">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb20-16">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb20-17">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-18">ax.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb20-19"></span>
<span id="cb20-20">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The precision and recall series intersect right after .60, therefore method #5 would set the threshold to roughly .60.</p>
<p><br></p>
</section>
<section id="assessing-a-classifier" class="level3">
<h3 class="anchored" data-anchor-id="assessing-a-classifier">Assessing a Classifier</h3>
<p>Once a threshold has been selected, the predictive power of the classifier can be assessed. To do this, we will look at the confusion matrix as well as the <code>sklearn.metrics.classification_report</code>. Note that both diagnostics require actual and predicted labels. Once we’ve settled on a threshold, model assessment is performed comparing actual vs.&nbsp;predicted labels. In what follows, the 0.471 threshold obtained from method #3 will be used as the classification threshold.</p>
<p>Technically, once we’ve decided on a threshold, we should then assess the performance of the model on a separate test set. However, for the purposes of demonstration, we are going to re-use the validation set.</p>
<p>We start by creating the confusion matrix:</p>
<div id="cell-33" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"></span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ConfusionMatrixDisplay</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine predicted classes using the .471 threshold.</span></span>
<span id="cb21-5">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.471</span></span>
<span id="cb21-6">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thresh, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-7"></span>
<span id="cb21-8">cm_disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfusionMatrixDisplay.from_predictions(yvalid, yhat, colorbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb21-9">cm_disp.ax_.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mm confusion matrix (thresh=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>thresh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb21-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The output indicates:</p>
<ul>
<li>There are 76 True Positives (TP).</li>
<li>There are 34 True Negatives (TN).</li>
<li>There are 4 False Positives (FP).</li>
<li>There are 0 False Negatives (FN).</li>
</ul>
<p><br></p>
<p>Next we inspect the classification report. This also takes actual and predicted labels, and returns a summary of common classifier metrics:</p>
<div id="cell-35" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"></span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(classification_report(yvalid, yhat))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              precision    recall  f1-score   support

           0       1.00      0.89      0.94        38
           1       0.95      1.00      0.97        76

    accuracy                           0.96       114
   macro avg       0.97      0.95      0.96       114
weighted avg       0.97      0.96      0.96       114
</code></pre>
</div>
</div>
<p>Overall this is very good performance.</p>


</section>
</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding.html</guid>
  <pubDate>Sun, 28 Apr 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Using the Singular Value Decomposition for Image Compression</title>
  <link>https://www.jtrive.com/posts/svd-image-compression/svd-image-compression.html</link>
  <description><![CDATA[ 





<p>The Singular Value Decomposition (SVD) is a mathematical technique used in linear algebra to decompose a matrix into three other matrices. Specifically, for any <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> matrix <img src="https://latex.codecogs.com/png.latex?X">, the SVD is a factorization of the form</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AX%20=%20U%20%5CSigma%20V%5E%7B*%7D,%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?X"> is <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20m">.</li>
<li><img src="https://latex.codecogs.com/png.latex?U"> is <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> (unitary with orthonormal columns; columns = <em>left signular vectors</em>).</li>
<li><img src="https://latex.codecogs.com/png.latex?V"> is <img src="https://latex.codecogs.com/png.latex?m%20%5Ctimes%20m"> (unitary with orthonormal columns; columns = <em>right signular vectors</em>).</li>
<li><img src="https://latex.codecogs.com/png.latex?%5CSigma"> is <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> with real non-negative entries along the diagonal (<em>singular values</em>). The singular values are the square roots of the eigenvalues of <img src="https://latex.codecogs.com/png.latex?A%5E%7BT%7DA"> or <img src="https://latex.codecogs.com/png.latex?AA%5E%7BT%7D">.</li>
<li>When <img src="https://latex.codecogs.com/png.latex?n%20%5Cgeq%20m">, <img src="https://latex.codecogs.com/png.latex?%5CSigma"> has at most <img src="https://latex.codecogs.com/png.latex?m"> non-zero elements on the diagonal.</li>
<li>Rank of <img src="https://latex.codecogs.com/png.latex?X"> = number of non-zero singular values.</li>
</ul>
<p><strong>In numpy:</strong></p>
<ul>
<li>The rows of <img src="https://latex.codecogs.com/png.latex?V%5E%7BT%7D"> represent the eigenvectors of <img src="https://latex.codecogs.com/png.latex?X%5E%7BT%7DX">.</li>
<li>The columns of <img src="https://latex.codecogs.com/png.latex?U"> represent the eigenvectors of <img src="https://latex.codecogs.com/png.latex?XX%5E%7BT%7D">.</li>
<li>The eigenvalues are <img src="https://latex.codecogs.com/png.latex?%5CSigma%5E%7B2%7D">.</li>
</ul>
<p><br></p>
<p>The SVD provides a systematic way to determine a low-dimensional approximation to high-dimensional data in terms of dominant patterns. This technique is data-driven in that patterns are discovered purely from data, without the addition of expert knowledge or intuition.</p>
<p>If <img src="https://latex.codecogs.com/png.latex?X"> is self-adjoint, (<img src="https://latex.codecogs.com/png.latex?X%20=%20X%5E%7B*%7D">), then the singular values of <img src="https://latex.codecogs.com/png.latex?X"> are equal to the absolute values of the eigenvalues of <img src="https://latex.codecogs.com/png.latex?X">. In Numpy, we compute the SVD as follows:</p>
<div id="cd0b94d7-62f8-4321-9b34-57ff2f4cf24f" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-5">U, S, Vt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(X, full_matrices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-6">Uhat, Shat, Vhatt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(X, full_matrices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">full_matrices=True:"</span>)</span>
<span id="cb1-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"U.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>U<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"S.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>S<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Vt.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Vt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">full_matrices=False:"</span>)</span>
<span id="cb1-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Uhat.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Uhat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Shat.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Shat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Vhatt.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Vhatt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">S:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>S<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Shat:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Shat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
full_matrices=True:
U.shape: (5, 5).
S.shape: (3,).
Vt.shape: (3, 3).

full_matrices=False:
Uhat.shape: (5, 3).
Shat.shape: (3,).
Vhatt.shape: (3, 3).

S:
[2.13628638 0.91901978 0.39330927].

Shat:
[2.13628638 0.91901978 0.39330927].
</code></pre>
</div>
</div>
<section id="matrix-approximation" class="level3">
<h3 class="anchored" data-anchor-id="matrix-approximation">Matrix Approximation</h3>
<p>Perhaps the most useful and defining property of the SVD is that it provides an optimal low-rank approximation to a matrix <img src="https://latex.codecogs.com/png.latex?X">. The Eckhart-Young theorem states that the optimal rank-<img src="https://latex.codecogs.com/png.latex?r"> approximation to <img src="https://latex.codecogs.com/png.latex?X"> in a least-squares sense is given by the rank-<img src="https://latex.codecogs.com/png.latex?r"> SVD truncation <img src="https://latex.codecogs.com/png.latex?%5Ctilde%20X">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7B%5Ctilde%20X,%20%5Chspace%7B.25em%7D%20%5Cmathrm%7Bs.t.%7D%20%5Chspace%7B.25em%7D%5Cmathrm%7Brank%7D(%5Ctilde%20X)=r%7D%7B%5Cmathrm%7Bargmin%7D%7D%20%7C%7C%20X%20-%20%5Ctilde%20X%7C%7C_%7BF%7D%20=%20%5Ctilde%20U%20%5Ctilde%20%5CSigma%20%5Ctilde%20V%5E%7B*%7D,%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctilde%20U,%20%5Ctilde%20V"> represent the first <img src="https://latex.codecogs.com/png.latex?r"> leading columns of <img src="https://latex.codecogs.com/png.latex?U,%20V">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctilde%20%5CSigma"> represents the leading <img src="https://latex.codecogs.com/png.latex?r%20%5Ctimes%20r"> sub-block of <img src="https://latex.codecogs.com/png.latex?%5CSigma">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%7C%7C%5Ccdot%7C%7C_%7BF%7D"> represents the Frobenius norm.</li>
</ul>
<p><br></p>
<p>Because <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is diagonal, the rank-<img src="https://latex.codecogs.com/png.latex?r"> SVD approximation is given by the sum of <img src="https://latex.codecogs.com/png.latex?r"> distinct rank-1 matrices:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctilde%20X%20=%20%5Csum_%7Bk=1%7D%5E%7Br%7D%20%5Csigma_%7Bk%7D%20%5Cboldsymbol%7Bu%7D_%7Bk%7D%20%5Cboldsymbol%7Bv%7D_%7Bk%7D%5E%7B*%7D%20=%20%5Csigma_%7B1%7D%20%5Cboldsymbol%7Bu%7D_%7B1%7D%20%5Cboldsymbol%7Bv%7D_%7B1%7D%5E%7B*%7D%20+%20%5Csigma_%7B2%7D%20%5Cboldsymbol%7Bu%7D_%7B2%7D%20%5Cboldsymbol%7Bv%7D_%7B2%7D%5E%7B*%7D%20+%20%5Ccdots%20+%20%5Csigma_%7Br%7D%20%5Cboldsymbol%7Bu%7D_%7Br%7D%20%5Cboldsymbol%7Bv%7D_%7Br%7D%5E%7B*%7D%0A"></p>
<p>The truncated SVD basis <img src="https://latex.codecogs.com/png.latex?%5Ctilde%20U"> provides a coordinate transformation from the high-dimensional original matrix into a lower dimensional representation.</p>
<p>For truncation values <img src="https://latex.codecogs.com/png.latex?r"> that are smaller than the number of non-zero singular values (i.e., the rank of <img src="https://latex.codecogs.com/png.latex?X">), the truncated SVD only approximates <img src="https://latex.codecogs.com/png.latex?X">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctilde%20X%20%5Capprox%20%5Ctilde%20U%20%5Ctilde%20%5CSigma%20%5Ctilde%20V%5E%7B*%7D%0A"></p>
<p>If we choose the truncation value to keep all non-zero singular values, then <img src="https://latex.codecogs.com/png.latex?%5Ctilde%20X%20=%20%5Ctilde%20U%20%5Ctilde%20%5CSigma%20%5Ctilde%20V%5E%7B*%7D"> is exact.</p>
<p><br></p>
</section>
<section id="example-image-compression" class="level3">
<h3 class="anchored" data-anchor-id="example-image-compression">Example: Image Compression</h3>
<p>For the next example, we use an alternate cover photo from the Allman Brothers 1971 release <em>At the Fillmore East</em>, shown in color and grayscale side-by-side. We’ll work with the grayscale image going forward since it limits us to two dimensions:</p>
<div id="29d7c238-458a-40af-b6ac-643d5bed18d4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage.color <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rgb2gray</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3-D RGB image. </span></span>
<span id="cb3-8">imgrgb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> io.imread(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fillmore.jpg"</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2-D grayscale image.</span></span>
<span id="cb3-11">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rgb2gray(imgrgb)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make grayscale image symmetric. </span></span>
<span id="cb3-14">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, :<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>]</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"img.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18"></span>
<span id="cb3-19">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># figsize=(8, 4))</span></span>
<span id="cb3-20"></span>
<span id="cb3-21">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].imshow(imgrgb)</span>
<span id="cb3-22">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb3-23">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_axis_off()</span>
<span id="cb3-24"></span>
<span id="cb3-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].imshow(img, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.gray)</span>
<span id="cb3-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grayscale"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb3-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_axis_off()</span>
<span id="cb3-28"></span>
<span id="cb3-29">plt.show()</span>
<span id="cb3-30"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>img.shape: (800, 800)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/svd-image-compression/svd-image-compression_files/figure-html/cell-3-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Next we generate successive rank-<img src="https://latex.codecogs.com/png.latex?r"> approximations of the original image, showing the storage requirement of each rank-<img src="https://latex.codecogs.com/png.latex?r"> approximation.</p>
<div id="2f6aa96d-6aba-41da-a425-8669be640a79" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grayscale image.</span></span>
<span id="cb5-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run SVD on grayscale image X. </span></span>
<span id="cb5-6">U, S, Vt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(X, full_matrices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert signular values array to full matrix. </span></span>
<span id="cb5-9">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(S) </span>
<span id="cb5-10"></span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rank-r approximations to evaluate. </span></span>
<span id="cb5-13">ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,]<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># len(S)]</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matplotlib indices. </span></span>
<span id="cb5-16">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb5-17"></span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of values associated with original image.</span></span>
<span id="cb5-20">total_nbr_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(X.shape)</span>
<span id="cb5-21"></span>
<span id="cb5-22">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb5-23"></span>
<span id="cb5-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r, (ii, jj) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ranks, indices):</span>
<span id="cb5-25">    </span>
<span id="cb5-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute rank-r approximation of X.</span></span>
<span id="cb5-27">    Xr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U[:, :r] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> S[:r, :r] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Vt[:r, :]</span>
<span id="cb5-28"></span>
<span id="cb5-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute storage or rank-r approximation vs. full image.</span></span>
<span id="cb5-30">    rank_r_nbr_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(U[:, :r].shape) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.prod(Vt[:r, :].shape)</span>
<span id="cb5-31">    rank_r_storage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rank_r_nbr_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_nbr_vals</span>
<span id="cb5-32"></span>
<span id="cb5-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display rank-r approximation.</span></span>
<span id="cb5-34">    ax[ii, jj].imshow(Xr, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.gray)</span>
<span id="cb5-35">    ax[ii, jj].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"r=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (storage=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rank_r_storage<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2%}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb5-36">    ax[ii, jj].set_axis_off()</span>
<span id="cb5-37"></span>
<span id="cb5-38">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/svd-image-compression/svd-image-compression_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>A rank-100 approximation provides a decent representation of the original. At rank-200, there is virtually no difference between the original and the approximation. In practice, we could store <code>U[:, :200], S[:200, :200]</code> and <code>Vt[:200, :]</code> separately, then compute the matrix product prior to rendering the image. Doing so reduces the storage requirements by a factor of 2.</p>
<p>We can plot the magnitude of the singular values along with the cumulative proportion to assess how much variation in the original image is captured for a given rank-<img src="https://latex.codecogs.com/png.latex?r"> approximation:</p>
<div id="1fa20662-a86e-47af-aad1-9accea3b555a" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(S)</span>
<span id="cb6-3"></span>
<span id="cb6-4">ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>]</span>
<span id="cb6-5"></span>
<span id="cb6-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb6-7">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].semilogy(s, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-8">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"Singular value,  $\sigma_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{r}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>)</span>
<span id="cb6-9">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$r$"</span>)</span>
<span id="cb6-10">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-11">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-13">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-14">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-15">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-17"></span>
<span id="cb6-18">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(np.cumsum(s) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(s), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-19">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"cumulative sum"</span>)</span>
<span id="cb6-20">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$r$"</span>)</span>
<span id="cb6-21">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-22">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-23">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-24">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-28"></span>
<span id="cb6-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ranks:</span>
<span id="cb6-30">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(s[:r]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(s)</span>
<span id="cb6-31">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].scatter(r, y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb6-32">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].annotate(</span>
<span id="cb6-33">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$r=$"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(r), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(r, y), </span>
<span id="cb6-34">    xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset points"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, </span>
<span id="cb6-35">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, </span>
<span id="cb6-36">    )</span>
<span id="cb6-37"></span>
<span id="cb6-38">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/svd-image-compression/svd-image-compression_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>The rank-100 approximation accounts for ~60% of the cumulative sum of singular values. By rank-200, the approximation is closer to 80%. For completeness, we also show that a rank-800 approximation is able to recover the original image fully, since it is using all singular values and vectors (the original grayscale image was 800 x 800). The benefit of using SVD for image compression lies in its ability to prioritize and retain the most significant features of the image data, while excluding less significant features. <br></p>
<p>Note that much of this analysis is based on Chapter 1 of Steve Brunton’s <em>Data-Driven Science and Engineering</em>, which is an excellent resource for practicing Data Scientists. Be sure to pickup your own copy, as the second edition was recently released.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/svd-image-compression/svd-image-compression.html</guid>
  <pubDate>Sun, 28 Apr 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>The Doomsday Argument</title>
  <link>https://www.jtrive.com/posts/doomsday-scenario/doomsday-scenario.html</link>
  <description><![CDATA[ 





<p>A few years ago, Lex Fridman had <a href="https://www.youtube.com/watch?v=rfKiTGj-zeQ&amp;t=4424s">Nick Bostrom as a guest on his podcast</a>. They discussed many topics, but of particular interest for me was the Doomsday Argument, a controversial hypothesis regarding the estimation of the remaining lifespan of the human species. It proposes that based on statistical reasoning and the assumption that humans are not special in the grand scheme of things, one can estimate the likelihood of humanity’s extinction. It is a probabilistic argument that claims to predict the number of future members of the human species given an estimate of the total number of humans born so far. Supposing all humans are born in a random order, chances are that any one human is born roughly in the middle. The argument has three main points:</p>
<ol type="1">
<li><p>Assuming that humans are a random sample from all humans that will ever exist, the probability that any individual is born at a particular time in human history is proportional to the population size at that time.</p></li>
<li><p>Based on historical population data, one can estimate the total number of humans who have ever lived up to the present.</p></li>
<li><p>Under the assumption that humans will continue to reproduce at a roughly constant rate until extinction, the argument suggests that since you are observing humanity at a random point in its history, it is statistically more likely that you are living closer to the midpoint of human existence rather than at the beginning or end.</p></li>
</ol>
<p>In the podcast, Bostrom suggests that we have systematically underestimated the probability that humanity will go extinct soon, and uses sampling from two urns and observing the results as an analogy:</p>
<p>Imagine we have two urns: The first (urn A) has 10 balls numbered 1 thru 10, and the second (urn B) has 1,000,000 balls numbered 1-1,000,000. Someone puts one urn in front of you, and asks you what is the probability that it is the 10 ball urn? With no other information, as a rational participant you might say 50%.</p>
<p>But you are then allowed to reach in and pick a ball at random from the urn. Suppose you draw a ball at random, and find that you’ve drawn a ball with 7 on it. Drawing a 7 is strong evidence for the 10 ball urn, since the probability of drawing a 7 from the 10 ball urn is 10%, while the probability of drawing a 7 from the 1,000,000 ball urn is .00001%.</p>
<p>You then perform a Bayesian update: If your prior was 50/50 for the 10 ball urn, you become virtually certain after finding a randomly sampled 7 that it only has 10 balls in it.</p>
<p>Let:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?P%5BA%5D"> = Prior probability that the unknown urn is urn A = .50.</li>
<li><img src="https://latex.codecogs.com/png.latex?P%5BB%5D"> = Prior probability that the unknown urn is urn B = .50.</li>
<li><img src="https://latex.codecogs.com/png.latex?P%5BU%7CX%5D"> = Given a randomly drawn ball <img src="https://latex.codecogs.com/png.latex?X">, the probability that it came from urn <img src="https://latex.codecogs.com/png.latex?U">.</li>
<li><img src="https://latex.codecogs.com/png.latex?P%5BX%7CU%5D"> = Given that a random draw originates from urn <img src="https://latex.codecogs.com/png.latex?U">, the probability of observing the drawn <img src="https://latex.codecogs.com/png.latex?X">.</li>
</ul>
<p>The expression for the Bayesian update is then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP%5BU%7CX%5D%20=%20%5Cfrac%7BP%5BX%7CU%5DP%5BU%5D%7D%7BP%5BX%5D%7D%0A"></p>
<p>We know <img src="https://latex.codecogs.com/png.latex?P%5BX=7%7CA%5D%20=%20.10"> and <img src="https://latex.codecogs.com/png.latex?P%5BX=7%7CB%5D%20=%20.000001">, since there are 10 balls in urn <img src="https://latex.codecogs.com/png.latex?A"> and 1,000,000 balls in urn <img src="https://latex.codecogs.com/png.latex?B">, and each has an equally likely chance of being drawn.</p>
<p>After observing a 7, For urn A we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP%5BA%7CX=7%5D%20=%20%5Cfrac%7BP%5BX=7%7CA%5DP%5BA%5D%7D%7BP%5BX=7%7CA%5DP%5BA%5D%20+%20P%5BX=7%7CB%5DP%5BB%5D%7D%20=%20%5Cfrac%7B.10%20%5Ctimes%20.50%7D%7B.10%20%5Ctimes%20.50%20+%20.000001%20%5Ctimes%20.50%7D%20%5Capprox%200.99999.%0A"></p>
<p>After observing a 7, For urn B we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP%5BB%7CX=7%5D%20=%20%5Cfrac%7BP%5BX=7%7CB%5DP%5BB%5D%7D%7BP%5BX=7%7CA%5DP%5BA%5D%20+%20P%5BX=7%7CB%5DP%5BB%5D%7D%20=%20%5Cfrac%7B.000001%20%5Ctimes%20.50%7D%7B.10%20%5Ctimes%20.50%20+%20.000001%20%5Ctimes%20.50%7D%20%5Capprox%209.9999%20%5Ctimes%2010%5E%7B-6%7D.%0A"></p>
<p>Therefore, there is a greater than 99.99% probability that the unknown urn is urn <img src="https://latex.codecogs.com/png.latex?A"> given the observed 7.</p>
<p>The Doomsday argument asks how many humans will have lived by the time the species goes extinct.</p>
<p>Suppose we consider 2 hypotheses:</p>
<ul>
<li>There will be <strong>200,000,000,000</strong> humans (200 billion) in total.</li>
<li>There will be <strong>200,000,000,000,000</strong> humans (200 trillion) in total.</li>
</ul>
<p>Take your own birth rank as a random sample (your position in the sequence of all humans who have ever lived), and reason that you are a random sample from the set of all humans who have ever existed. It turns out you are roughly human 100 billion. If there are only going to be a total of 200 billion humans that ever live, 100 billion is a perfectly unremarkable number, and your actual birth rank lies somewhere in the middle.</p>
<p>But if there are going to be 200 trillion humans, then a birth rank of 100 billion is remarkably early (100,000,000,000 / 200,000,000,000,000 = 0.0005).</p>
<p>When considering these two hypotheses, you should update in favor of the human species having a lower total number of members (what Bostrom calls “doom soon”).</p>
<p>He goes on to summarize that there has to be something “fishy” with this argument, because from very weak premises, it gets a very striking implication, that we have almost no chance of reaching 200T humans in the future. How can we get there by simply reflecting on when we were born?</p>



 ]]></description>
  <category>Other</category>
  <guid>https://www.jtrive.com/posts/doomsday-scenario/doomsday-scenario.html</guid>
  <pubDate>Sat, 16 Mar 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Estimating Logistic Regression coefficients From Scratch in Python</title>
  <link>https://www.jtrive.com/posts/logistic-regression-python/logistic-regression-python.html</link>
  <description><![CDATA[ 





<p>In this post, I’ll demonstrate how to estimate the coefficients of a logistic regression model using the Fisher Scoring algorithm in Python. These estimates will be compared with statsmodels coefficients to ensure consistency.</p>
<p>In a generalized linear model (GLM), the response may have any distribution from the exponential family. Rather than assuming the mean is a linear function of the explanatory variables, we assume that a function of the mean, or the link function, is a linear function of the explanatory variables.</p>
<p>Logistic regression is used for modeling data with a categorical response. Although it’s possible to model multinomial data using logistic regression, in this post our analysis will be limited to models targeting a dichotomous response, where the outcome can be classified as ‘Yes/No’ or ‘1/0’.</p>
<p>The logistic regression model is a GLM whose canonical link is the logit, or log-odds:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7BLn%7D%20%5Cbig(%5Cfrac%7B%5Cpi_%7Bi%7D%7D%7B1%20-%20%5Cpi_%7Bi%7D%7D%20%5Cbig)%20=%20%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%0A"></p>
<p>for <img src="https://latex.codecogs.com/png.latex?i%20=%20(1,%20%5Cldots%20,%20n)">.</p>
<p>Solving the logit for <img src="https://latex.codecogs.com/png.latex?%5Cpi_%7Bi%7D">, which is a stand-in for the predicted probability associated with observation <img src="https://latex.codecogs.com/png.latex?x_%7Bi%7D">, yields</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cpi_%7Bi%7D%20=%20%5Cfrac%20%7Be%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%7B1%20+%20e%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%20=%20%5Cfrac%20%7B1%7D%7B1%20+%20e%5E%7B-(%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D)%7D%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?-%5Cinfty%20%3C%20x_%7Bi%7D%20%3C%20%5Cinfty"> and <img src="https://latex.codecogs.com/png.latex?0%20%3C%20%5Cpi_%7Bi%20%7D%3C%201">.</p>
<section id="parameter-estimation" class="level3">
<h3 class="anchored" data-anchor-id="parameter-estimation">Parameter Estimation</h3>
<p>Maximum Likelihood Estimation can be used to determine the parameters of a Logistic Regression model, which entails finding the set of parameters for which the probability of the observed data is greatest. The objective is to estimate the <img src="https://latex.codecogs.com/png.latex?p%20+%201"> unknown <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B0%7D,%20%5Cldots%20,%5Cbeta_%7Bp%7D">.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?Y_%7Bi%7D"> represent independent, dichotomous response values for each of <img src="https://latex.codecogs.com/png.latex?n"> observations, where <img src="https://latex.codecogs.com/png.latex?Y_i=1"> denotes a success and <img src="https://latex.codecogs.com/png.latex?Y_i=0"> denotes a failure. The density function of a single observation <img src="https://latex.codecogs.com/png.latex?Y_i"> is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(y_%7Bi%7D)%20=%20%5Cpi_%7Bi%7D%5E%7By_%7Bi%7D%7D(1-%5Cpi_%7Bi%7D)%5E%7B1-y_%7Bi%7D%7D,%0A"></p>
<p>and the corresponding likelihood function is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AL(%5Cbeta)%20=%20%5Cprod_%7Bi=1%7D%5E%7Bn%7D%20%5Cpi_%7Bi%7D%5E%7By_%7Bi%7D%7D(1-%5Cpi_%7Bi%7D)%5E%7B1-y_%7Bi%7D%7D.%0A"></p>
<p>Taking the natural log of the maximum likelihood estimate results in the log-likelihood function:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Al(%5Cbeta)%20&amp;=%20%5Cmathrm%7BLn%7D(L(%5Cbeta))%20=%20%5Cmathrm%7BLn%7D%20%5CBig(%5Cprod_%7Bi=1%7D%5E%7Bn%7D%20%5Cpi_%7Bi%7D%5E%7By_%7Bi%7D%7D(1-%5Cpi_%7Bi%7D)%5E%7B1-y_%7Bi%7D%7D%20%5CBig)%0A=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7D%20%5Ccdot%20%5Cmathrm%7BLn%7D(%5Cpi_%7Bi%7D)%20+%20(1-y_%7Bi%7D)%20%5Ccdot%20%5Cmathrm%7BLn%7D(1-%5Cpi_%7Bi%7D)%5C%5C%0A&amp;=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7D%20%5Ccdot%20%5Cmathrm%7BLn%7D%20%5CBig(%5Cfrac%20%7Be%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%7B1%20+%20e%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%20%5CBig)%20+%20(1%20-%20y_%7Bi%7D)%20%5Ccdot%20%5Cmathrm%7BLn%7D%20%5CBig(%5Cfrac%20%7B1%7D%7B1%20+%20e%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%20%5CBig)%5C%5C%0A&amp;=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7D(%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D)%20-%20%5Cmathrm%7BLn%7D(1%20+%20e%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D)%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>The first-order partial derivatives of the log-likelihood are calculated and set to zero for each <img src="https://latex.codecogs.com/png.latex?k%20=%200,%201,%20%5Cldots,%20p"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%20%7B%5Cpartial%20l(%5Cbeta)%7D%7B%5Cpartial%20%5Cbeta_%7Bk%7D%7D%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7Dx_%7Bik%7D%20-%20%5Cpi_%7Bi%7Dx_%7Bik%7D%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_%7Bik%7D(y_%7Bi%7D%20-%20%5Cpi_%7Bi%7D)%20=%200,%0A"></p>
<p>which can be represented in matrix notation as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%20%7B%5Cpartial%20l(%5Cbeta)%7D%7B%5Cpartial%20%5Cbeta%7D%20=%20X%5E%7BT%7D(y%20-%20%5Cpi),%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?X%5E%7BT%7D"> is a (p + 1)-by-n matrix and <img src="https://latex.codecogs.com/png.latex?(y%20-%20%5Cpi)"> an n-by-1 vector.</p>
<p>The vector of first-order partial derivatives of the log-likelihood function is referred to as the score function and is typically represented as <img src="https://latex.codecogs.com/png.latex?U">.</p>
<p>These (p+1) equations are solved simultaneously to obtain the parameter estimates <img src="https://latex.codecogs.com/png.latex?%5Chat%5Cbeta_%7B0%7D,%20%5Cldots%20,%5Chat%5Cbeta_%7Bp%7D">.</p>
<p>Each solution specifies a critical-point which will be either a maximum or a minimum. The critical point will be a maximum if the matrix of second partial derivatives is negative definite (which means every element on the diagonal of the matrix is less than zero).</p>
<p>The matrix of second partial derivatives is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta_%7Bk%7D%7D%7B%5Cpartial%20%5Cbeta_%7Bk%7D%7D%5E%7BT%7D%7D%20=%20-%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_%7Bik%7D%5Cpi_%7Bi%7D(1-%5Cpi_%7Bi%7D)%7Bx_%7Bik%7D%7D%5E%7BT%7D,%0A"></p>
<p>represented in matrix form as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20=%20-X%5E%7BT%7DWX,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?W"> is an n-by-n diagonal matrix of weights with each element equal to <img src="https://latex.codecogs.com/png.latex?%5Cpi_%7Bi%7D(1%20-%20%5Cpi_%7Bi%7D)"> for logistic regression models (in general, the weights matrix <img src="https://latex.codecogs.com/png.latex?W"> will have entries inversely proportional to the variance of the response).</p>
<p>Since no closed-form solution exists for determining logistic regression model coefficients, iterative techniques must be employed.</p>
</section>
<section id="fitting-the-model" class="level3">
<h3 class="anchored" data-anchor-id="fitting-the-model">Fitting the Model</h3>
<p>Two distinct but related iterative methods can be utilized in determining model coefficients: the Newton-Raphson method and Fisher Scoring. The Newton-Raphson method relies on the matrix of second partial derivatives, also known as the Hessian. The Newton-Raphson update expression is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta%5E%7B(t+1)%7D%20=%20%5Cbeta%5E%7B(t)%7D%20-%20(H%5E%7B(t)%7D)%5E%7B-1%7DU%5E%7B(t)%7D,%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t+1)%7D"> = the vector of updated coefficient estimates.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t)%7D"> = the vector of coefficient estimates from the previous iteration.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?(H%5E%7B(t)%7D)%5E%7B-1%7D"> = the inverse of the Hessian, <img src="https://latex.codecogs.com/png.latex?%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)%5E%7B-1%7D">.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?U%5E%7B(t)%7D"> = the vector of first-order partial derivatives of the log-likelihood function, <img src="https://latex.codecogs.com/png.latex?X%5E%7BT%7D(y%20-%20%5Cpi)">.</li>
</ul>
<p>The Newton-Raphson method starts with an initial guess for the solution, and obtains a second guess by approximating the function to be maximized in a neighborhood of the initial guess by a second-degree polynomial, and then finding the location of that polynomial’s maximum value. This process continues until it converges to the actual solution. The convergence of <img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7Bt%7D"> to <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cbeta%7D"> is usually fast, with adequate convergence frequently realized after fewer than 50 iterations.</p>
<p>An alternative method, <em>Fisher Scoring</em>, utilizes the expected information <img src="https://latex.codecogs.com/png.latex?-E%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)">. Let <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D"> serve as a stand-in for the expected value of the information:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BI%7D%20=%20-E%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig).%0A"></p>
<p>The Fisher scoring update step replaces <img src="https://latex.codecogs.com/png.latex?-H%5E%7B(t)%7D"> from Newton-Raphson with <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D%5E%7B(t)%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cbeta%5E%7B(t+1)%7D%20&amp;=%20%5Cbeta%5E%7B(t)%7D%20+%20(%5Cmathcal%7BI%7D%5E%7B(t)%7D)%5E%7B-1%7DU%5E%7B(t)%7D%5C%5C%0A&amp;=%20%5Cbeta%5E%7B(t)%7D%20+%20(X%5E%7BT%7DWX)%5E%7B-1%7DX%5E%7BT%7D(y%20-%20%5Cpi)%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t+1)%7D"> = the vector of updated coefficient estimates.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t)%7D"> = the vector of coefficient estimates from the previous iteration.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?(%5Cmathcal%7BI%7D%5E%7B(t)%7D)%5E%7B-1%7D"> = the inverse of the expected information matrix, <img src="https://latex.codecogs.com/png.latex?-E%20%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)%5E%7B-1%7D">.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?U%5E%7B(t)%7D"> = the vector of first-order partial derivatives of the log-likelihood function, <img src="https://latex.codecogs.com/png.latex?X%5E%7BT%7D(y%20-%20%5Cpi)">.</li>
</ul>
<p>For GLMs with a canonical link (of which employing the logit for logistic regression is an example), the observed and expected information are the same. When the response follows an exponential family distribution, and the canonical link function is employed, observed and expected information coincide so that Fisher scoring and Newton-Raphson are identical.</p>
<p>When the canonical link is used, the second partial derivatives of the log-likelihood do not depend on the observation <img src="https://latex.codecogs.com/png.latex?y_i">, and therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20=%20E%20%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20%5CBig).%0A"></p>
<p>Fisher scoring has the advantage that it produces the asymptotic covariance matrix as a by-product.</p>
<p>To summarize:</p>
<ul>
<li>The <em>Hessian</em> is the matrix of second partial derivatives of the log-likelihood with respect to the parameters, <img src="https://latex.codecogs.com/png.latex?H%20=%20%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D">.</li>
<li>The <em>observed information</em> is <img src="https://latex.codecogs.com/png.latex?-%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D">.<br>
</li>
<li>The <em>expected information</em> is <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D%20=%20E%5CBig(-%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)">.</li>
<li>The <em>asymptotic covariance matrix</em> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BVar%7D(%5Chat%7B%5Cbeta%7D)%20=%20E%5CBig(-%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)%5E%7B-1%7D%20=%20(X%5E%7BT%7DWX)%5E%7B-1%7D">.</li>
</ul>
<p>For models employing a canonical link function:</p>
<ul>
<li>The observed and expected information are the same, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20=%20E%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)">.</li>
<li><img src="https://latex.codecogs.com/png.latex?H%20=%20-%5Cmathcal%7BI%7D">, or <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20=%20E%5CBig(-%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)">.</li>
<li>The Newton-Raphson and Fisher Scoring algorithms yield identical results.</li>
</ul>
</section>
<section id="fisher-scoring-implementation" class="level3">
<h3 class="anchored" data-anchor-id="fisher-scoring-implementation">Fisher Scoring Implementation</h3>
<p>The data used for our sample calculation can be obtained <a href="https://gist.githubusercontent.com/jtrive84/835514a76f7afd552c999e4d9134baa8/raw/6dac51b80f892ef051174a46766eb53c7b609ebd/Challenger.csv">here</a>. The data represents O-Ring failures in the 23 pre-Challenger space shuttle missions. TEMPERATURE will serve as the single explanatory variable which will be used to predict O_RING_FAILURE, which is 1 if a failure occurred, 0 otherwise.</p>
<p>Once the parameters have been determined, the model estimate of the probability of success for a given observation can be calculated with:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%5Cpi_%7Bi%7D%20=%20%5Cfrac%20%7Be%5E%7B%5Chat%5Cbeta_%7B0%7D%20+%20%5Chat%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Chat%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%7B1%20+%20e%5E%7B%5Chat%5Cbeta_%7B0%7D%20+%20%5Chat%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Chat%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%0A"></p>
<p>In the following code, we define a single function, <code>get_params</code>, which returns the estimated model coefficients as a (p+1)-by-1 array. In addition, the function returns the number of scoring iterations, fitted values and the variance-covariance matrix for the estimated parameters.</p>
<div id="cell-2" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> estimate_lr_params(X, y, epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.001</span>):</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Estimate logistic regression coefficients using Fisher Scoring.Iteration </span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ceases once changes between elements in coefficient matrix across</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    consecutive iterations is less than epsilon.</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - design_matrix      `X` : n-by-(p+1)                                </span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - response_vector    `y` : n-by-1                                   </span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - probability_vector `p` : n-by-1                                   </span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - weights_matrix     `W` : n-by-n                                    </span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - epsilon                : threshold above which iteration continues</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - n                      : Number of observations                        </span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - (p + 1)                : Number of parameters (+1 for intercept term) </span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - U: First derivative of log-likelihood with respect to                </span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           each beta_i, i.e. "Score Function" = X^T * (y - p)        </span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           </span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - I: Second derivative of log-likelihood with respect to               </span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           each beta_i, i.e. "Information Matrix" = (X^T * W * X)      </span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                                                           </span></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - X^T*W*X results in a (p + 1)-by-(p + 1) matrix.                          </span></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - X^T(y - p) results in a (p+1)-by-1 matrix.                            </span></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - (X^T*W*X)^-1 * X^T(y - p) results in a (p + 1)-by-1 matrix.     </span></span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dict of model results        </span></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sigmoid(v): </span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>v)))</span>
<span id="cb1-35">    </span>
<span id="cb1-36"></span>
<span id="cb1-37">    betas0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-38">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigmoid(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> betas0)</span>
<span id="cb1-39">    W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag((p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p)).ravel())</span>
<span id="cb1-40">    I <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X</span>
<span id="cb1-41">    U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p)</span>
<span id="cb1-42"></span>
<span id="cb1-43">    n_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-44">    </span>
<span id="cb1-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb1-46">        n_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>        </span>
<span id="cb1-47">        betas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> betas0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.linalg.inv(I) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U</span>
<span id="cb1-48">        betas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> betas.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-49"></span>
<span id="cb1-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(betas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> betas0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> epsilon):</span>
<span id="cb1-51">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb1-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-53">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigmoid(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> betas)</span>
<span id="cb1-54">            W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag((p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p)).ravel())</span>
<span id="cb1-55">            I <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X</span>
<span id="cb1-56">            U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p)</span>
<span id="cb1-57">            betas0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> betas</span>
<span id="cb1-58"></span>
<span id="cb1-59">    dresults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-60">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"params"</span>: betas.ravel(),</span>
<span id="cb1-61">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred"</span>: sigmoid(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> betas),</span>
<span id="cb1-62">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"V"</span>: np.linalg.inv(I),</span>
<span id="cb1-63">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_iter"</span>: n_iter</span>
<span id="cb1-64">        }</span>
<span id="cb1-65"></span>
<span id="cb1-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(dresults)</span>
<span id="cb1-67"></span>
<span id="cb1-68"></span></code></pre></div>
</div>
<p>We read in the Challenger dataset, partition the data into the design matrix and response vector, which are then passed to <code>estimate_lr_params</code>:</p>
<div id="cell-4" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-3"></span>
<span id="cb2-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/835514a76f7afd552c999e4d9134baa8/raw/6dac51b80f892ef051174a46766eb53c7b609ebd/Challenger.csv"</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6">X0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TEMPERATURE"</span>]].values</span>
<span id="cb2-7">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate([np.ones(X0.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), X0], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-8">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"O_RING_FAILURE"</span>]].values</span>
<span id="cb2-9"></span>
<span id="cb2-10">dresults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> estimate_lr_params(X, y)</span>
<span id="cb2-11"></span>
<span id="cb2-12">dresults</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>{'params': array([15.04290163, -0.23216274]),
 'ypred': array([[0.43049313],
        [0.22996826],
        [0.27362106],
        [0.32209405],
        [0.37472428],
        [0.1580491 ],
        [0.12954602],
        [0.22996826],
        [0.85931657],
        [0.60268105],
        [0.22996826],
        [0.04454055],
        [0.37472428],
        [0.93924781],
        [0.37472428],
        [0.08554356],
        [0.22996826],
        [0.02270329],
        [0.06904407],
        [0.03564141],
        [0.08554356],
        [0.06904407],
        [0.82884484]]),
 'V': array([[ 5.44406534e+01, -7.96333573e-01],
        [-7.96333573e-01,  1.17143602e-02]]),
 'n_iter': 5}</code></pre>
</div>
</div>
<p><code>estimate_lr_params</code> returns a dictionary consisting of the following keys:</p>
<ul>
<li><code>"params"</code>: Estimated parameters.</li>
<li><code>"ypred"</code>: Fitted values.<br>
</li>
<li><code>"V"</code>: Variance-covariance matrix of the parameter estimates.<br>
</li>
<li><code>"n_iter"</code>: Number of Fisher scoring iterations.</li>
</ul>
<p>For the Challenger dataset, our implementation of Fisher scoring results in a model with <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Cbeta_%7B0%7D%20=%2015.0429"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Cbeta_%7B1%7D%20=%20-0.2322">. In order to predict new probabilities of O-Ring Failure based on temperature, we use:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Cpi%7D%20=%20%5Cfrac%20%7B1%7D%7B1%20+%20e%5E%7B-(15.0429%20-0.2322%20%5Ctimes%20%5Cmathrm%7BTEMPERATURE%7D)%7D%7D.%0A"></p>
<p>Negative coefficients correspond to features that are negatively associated with the probability of a positive outcome, with the reverse being true for positive coefficients.</p>
<p>Lets compare the results of our implementation against the estimates produced by statsmodels:</p>
<div id="cell-6" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.formula.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> smf</span>
<span id="cb4-3"></span>
<span id="cb4-4">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smf.logit(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"O_RING_FAILURE ~ TEMPERATURE"</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df).fit()</span>
<span id="cb4-5"></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">mdl.params:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl.cov_params():</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>cov_params()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl.predict(df):</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>predict(df)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Optimization terminated successfully.
         Current function value: 0.441635
         Iterations 7

mdl.params:
Intercept      15.042902
TEMPERATURE    -0.232163
dtype: float64

mdl.cov_params():
             Intercept  TEMPERATURE
Intercept    54.444275    -0.796387
TEMPERATURE  -0.796387     0.011715

mdl.predict(df):
0     0.430493
1     0.229968
2     0.273621
3     0.322094
4     0.374724
5     0.158049
6     0.129546
7     0.229968
8     0.859317
9     0.602681
10    0.229968
11    0.044541
12    0.374724
13    0.939248
14    0.374724
15    0.085544
16    0.229968
17    0.022703
18    0.069044
19    0.035641
20    0.085544
21    0.069044
22    0.828845
dtype: float64
</code></pre>
</div>
</div>
<p>The values produced using the statsmodels align closely with the results from <code>estimate_lr_params</code>.</p>
<p>A feature of logistic regression models is that the predictions preserve the data’s marginal probabilities. If you aggregate the fitted values from the model, the total will equal the number of positive outcomes in the original target vector:</p>
<div id="cell-8" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># estimate_lr_params.</span></span>
<span id="cb6-3">dresults[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>7.000000000274647</code></pre>
</div>
</div>
<div id="cell-9" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># statsmodels.</span></span>
<span id="cb8-3">mdl.predict(df).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>7.0000000000000036</code></pre>
</div>
</div>
<p>We have 7 positive instances in our dataset, and the total probability aggregates to 7 in both sets of predictions.</p>


</section>

 ]]></description>
  <category>Statistical Modeling</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/logistic-regression-python/logistic-regression-python.html</guid>
  <pubDate>Sat, 16 Mar 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Assessing Model Goodness-of-Fit in Python with Scipy</title>
  <link>https://www.jtrive.com/posts/gof-python-scipy/gof-python-scipy.html</link>
  <description><![CDATA[ 





<p>This article explores techniques that can be used to assess how well a model fits a dataset. Specifically, we’ll demonstrate how to produce the following visualizations:</p>
<ul>
<li>Q-Q Plot: Compares two probability distributions by plotting their quantiles against each other.<br>
</li>
<li>P-P Plot: Compares two cumulative distribution functions against each other.<br>
</li>
<li>Histogram: Plot density histogram with parametric distribution overlay.</li>
</ul>
<p>In addition, the following tests will be introduced:</p>
<ul>
<li>Kolmogorov-Smirnov: Test the equality of continuous, one-dimensional probability distributions.<br>
</li>
<li>Anderson-Darling: Test whether a given sample is drawn from a given probability distribution.<br>
</li>
<li>Shapiro-Wilk: Test the null hypothesis that the data is drawn from a normal distribution.</li>
</ul>
<p>The same dataset will be used throughout the post, provided below:</p>
<div id="cell-2" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb1-6"></span>
<span id="cb1-7">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9">dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray([</span>
<span id="cb1-10">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">62.55976</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.71019</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.67025</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">35.43758</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.65457</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">21.55292</span>, </span>
<span id="cb1-11">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.26359</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.33537</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.43599</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.66612</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.45701</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.39694</span>, </span>
<span id="cb1-12">     <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">55.1221</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.50901</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.61822</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.10305</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.21494</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.25862</span>,  </span>
<span id="cb1-13">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.54446</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.48212</span>,  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.34573</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">21.47846</span>,   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0777</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">26.48881</span>, </span>
<span id="cb1-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.68764</span>,  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.49631</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.58039</span>,  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.59111</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">23.08169</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">19.09755</span>, </span>
<span id="cb1-15">   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">21.35046</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.24064</span>,  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.16365</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">37.43091</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.48556</span>,    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.6263</span>,  </span>
<span id="cb1-16">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">31.14471</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.75287</span>,  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">46.8529</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.26814</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.41045</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.11071</span>, </span>
<span id="cb1-17">   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30.46438</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.22195</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">31.83203</span>,  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.09629</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">52.06456</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.30986</span>, </span>
<span id="cb1-18">   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.62359</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.86882</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.77073</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">31.17838</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">22.04998</span></span>
<span id="cb1-19">    ])</span></code></pre></div>
</div>
<p>The task is to assess how well our data fits a normal distribution parameterized with mean and variance computed using:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cbar%7Bx%7D%20&amp;=%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_%7Bi%7D%20%5C%5C%0As%5E%7B2%7D%20&amp;=%20%5Cfrac%7B1%7D%7Bn-1%7D%5Csum_%7Bi=1%7D%5E%7Bn%7D%20(x_%7Bi%7D%20-%20%5Cbar%7Bx%7D)%5E2%0A%5Cend%7Balign*%7D%0A"></p>
<p>Keep in mind that although we’re testing how well othe data can be approximated by a normal distribution, many of the tests we highlight (with the exception of Shapiro-Wilk) can assess the quality of fit for many different parametric models.</p>
<p>We begin with visual assessments of goodness-of-fit.</p>
<section id="q-q-plot" class="level3">
<h3 class="anchored" data-anchor-id="q-q-plot">Q-Q Plot</h3>
<p>The Q-Q plot compares two probability distributions by plotting their quantiles against each other. We compare standard normal quantiles (x-axis) against the empirical quantiles from the dataset of interest (y-axis). If the two distributions are similar, the points in the Q-Q plot will approximately lie on a straight line. There isn’t a hard and fast rule to determine how much deviation from the straight line is too much, but if the distributions are very different, it will be readily apparent in the Q-Q plot. We can construct a Q-Q plot from scratch using matplotlib as follows:</p>
<div id="cell-4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Generate qq-plot comparing data against standard normal distribution.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">line_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span></span>
<span id="cb2-6">dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(dat)</span>
<span id="cb2-7">cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dat.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat.size</span>
<span id="cb2-8">ndist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-9">theo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ndist.ppf(cdf)</span>
<span id="cb2-10"></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove observations containing Inf.</span></span>
<span id="cb2-13">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>[tt <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(theo, dat) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.Inf <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.Inf <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tt])</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Obtain coefficients for best fit regression line.</span></span>
<span id="cb2-16">b1, b0, _, _, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.linregress(x, y)</span>
<span id="cb2-17">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b0 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> x]</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine upper and lower axis bounds.</span></span>
<span id="cb2-20">xmin, xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(x), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x)</span>
<span id="cb2-21">ymin, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-22"></span>
<span id="cb2-23">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-24">ax.set_title(</span>
<span id="cb2-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q-Q Plot: Data vs. Standard Normal Distribution"</span>,</span>
<span id="cb2-26">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb2-27">    )</span>
<span id="cb2-28">ax.scatter(x, y, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb2-29">ax.plot(x, yhat, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>line_color, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>)</span>
<span id="cb2-30">ax.set_xlim(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xmin, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xmax)</span>
<span id="cb2-31">ax.set_ylim(bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ymin, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ymax)</span>
<span id="cb2-32">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empirical Quantiles"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>)</span>
<span id="cb2-33">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standard Normal Quantiles"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>)</span>
<span id="cb2-34">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb2-35">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb2-36">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb2-37">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb2-38">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb2-39">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb2-40">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gof-python-scipy/gof-python-scipy_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The points seem to mostly follow a straight line, but there are observations that deviate from strict linearity. However, there’s nothing here that disqualifies our dataset from being modeled with normal distribution.</p>
</section>
<section id="p-p-plot" class="level3">
<h3 class="anchored" data-anchor-id="p-p-plot">P-P Plot</h3>
<p>The P-P plot compares two cumulative distribution functions against each other. To produce a P-P plot, we plot the theoretical percentiles (x-axis) against empirical percentiles (y-axis), so that each axis ranges from 0-1. The line of comparison is the 45 degree line running from (0,0) to (1,1). The distributions are equal if and only if the plot falls on this line: any deviation indicates a difference between the distributions. The code to generate a P-P plot is provided below:</p>
<div id="cell-6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Create P-P plot, which compares theoretical normal percentiles (x-axis) against </span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">empirical percentiles (y-axis).</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-5">dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(dat)</span>
<span id="cb3-6">dat_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.mean()</span>
<span id="cb3-7">dat_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.std(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standardize dat.</span></span>
<span id="cb3-10">sdat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dat_mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat_std</span>
<span id="cb3-11">cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dat.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat.size</span>
<span id="cb3-12">ndist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-13">theo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ndist.cdf(sdat)</span>
<span id="cb3-14">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theo, cdf</span>
<span id="cb3-15"></span>
<span id="cb3-16">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-17">ax.set_title(</span>
<span id="cb3-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-P Plot: Empricial CDF vs. Standard Normal CDF"</span>,</span>
<span id="cb3-19">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb3-20">    )</span>
<span id="cb3-21"></span>
<span id="cb3-22">ax.scatter(x, y, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb3-23">ax.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>line_color, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>)</span>
<span id="cb3-24">ax.set_xlim(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-25">ax.set_ylim(bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-26">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empirical Cumulative Distribution"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>)</span>
<span id="cb3-27">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standard Normal Distribution"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>)</span>
<span id="cb3-28">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb3-29">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb3-30">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb3-31">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb3-32">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb3-33">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb3-34">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gof-python-scipy/gof-python-scipy_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Although the observations follow the linear trend in general, the data overall appear somewhat above the reference line <img src="https://latex.codecogs.com/png.latex?y=x">. This may be attributable to the mean of <code>dat</code> being greater than 0. However, this doesn’t eliminate the possibility of our data representing a sample from a normal population. We expect some deviation from the expected normal percentiles, which we see in the P-P plot.</p>
</section>
<section id="histogram-with-parametric-overlay" class="level3">
<h3 class="anchored" data-anchor-id="histogram-with-parametric-overlay">Histogram with Parametric Overlay</h3>
<p>For the next diagnostic we create a histogram which represents the density of the empirical data overlaid with a parameterized normal distribution.</p>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Plot histogram with best-fit normal distribution overlay.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-4">dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dat_mean, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dat_std)</span>
<span id="cb4-5">xdist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(dat.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), dat.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>)</span>
<span id="cb4-6">ydist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dist.pdf(xdist)</span>
<span id="cb4-7"></span>
<span id="cb4-8">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-9">ax.set_title(</span>
<span id="cb4-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empirical Data w/ Parametric Overlay"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>,</span>
<span id="cb4-11">    loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb4-12">    )</span>
<span id="cb4-13">ax.hist(</span>
<span id="cb4-14">    dat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span>, </span>
<span id="cb4-15">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb4-16">    )</span>
<span id="cb4-17"></span>
<span id="cb4-18">ax.plot(xdist, ydist, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.75</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb4-19">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb4-20">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb4-21">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb4-22">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb4-23">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb4-24">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb4-25">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-26">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-27">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gof-python-scipy/gof-python-scipy_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The data appear to follow a pattern roughly the shape outlined by a best-fit normal density.</p>
</section>
<section id="kolmogorov-smirnov-test" class="level3">
<h3 class="anchored" data-anchor-id="kolmogorov-smirnov-test">Kolmogorov-Smirnov Test</h3>
<p>The Kolmogorov-Smirnov Test is different than the previous set of visualizations in that it produces a metric used to assess the level of agreement between target and reference distributions, but a visual diagnostic can be obtained as well.</p>
<p>Suppose that we have a set of empirical data that we assume originates from some distribution <img src="https://latex.codecogs.com/png.latex?F">. The Kolmogorov-Smirnov statistic is used to test:</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?H_%7B0%7D"> : the samples come from <img src="https://latex.codecogs.com/png.latex?F"></p>
</blockquote>
<p>against:</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?H_%7B1%7D"> : The samples do not come from <img src="https://latex.codecogs.com/png.latex?F"></p>
</blockquote>
<p>The test compares the empirical distribution function of the data, <img src="https://latex.codecogs.com/png.latex?F_%7Bobs%7D">, with the cumulative distribution function associated with the null hypothesis, <img src="https://latex.codecogs.com/png.latex?F_%7Bexp%7D"> (the expected CDF).</p>
<p>The Kolmogorov-Smirnov statistic is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AD_%7Bn%7D%20=%20max%7CF_%7Bexp%7D(x)%20-%20F_%7Bobs%7D(x)%7C.%0A"></p>
<p>Assuming the data are ordered such that <img src="https://latex.codecogs.com/png.latex?x_%7B1%7D"> represents the the minimum value in the dataset and <img src="https://latex.codecogs.com/png.latex?x_%7Bn%7D"> the maximum value, the empirical CDF can be represented as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AF_%7Bobs%7D(x_%7Bi%7D)%20=%20%5Cfrac%7Bi%7D%7Bn%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?n"> is the number of observations in the dataset.</p>
<p>For each observation, compute the absolute differences between <img src="https://latex.codecogs.com/png.latex?F_%7Bexp%7D(x)"> and <img src="https://latex.codecogs.com/png.latex?F_%7Bobs%7D(x)">. The Kolmogorov-Smirnov statistic <img src="https://latex.codecogs.com/png.latex?D_%7Bn%7D"> is the maximum value from the vector of absolute differences. This value represents the maximum absolute distance between the expected and observed distribution functions. <img src="https://latex.codecogs.com/png.latex?D_%7Bn%7D"> is then compared to a table of critical values to assess whether to reject or fail to reject <img src="https://latex.codecogs.com/png.latex?H_%7B0%7D">.</p>
<p>Before computing the statistic, we first demonstrate how to generate the one-sample Kolmogorov-Smirnov comparison plot:</p>
<div id="cell-11" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Kolmogorov-Smirnov test visualization.</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-4">dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(dat)</span>
<span id="cb5-5">dat_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.mean()</span>
<span id="cb5-6">dat_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.std(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-7">sdat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dat_mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat_std</span>
<span id="cb5-8">cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dat.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat.size</span>
<span id="cb5-9">dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate Kolmogorov-Smirnov comparison plot.</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y0 : Values from reference distribution.</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y1 : Values from empirical distribution.</span></span>
<span id="cb5-14">ecdfpairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(sdat, cdf)</span>
<span id="cb5-15">ecdfpairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ii <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ecdfpairs <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.Inf <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.Inf <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ii]</span>
<span id="cb5-16">x, y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ecdfpairs)</span>
<span id="cb5-17">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(x, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb5-18">y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dist.cdf(x)</span>
<span id="cb5-19">y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(y1, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb5-20"></span>
<span id="cb5-21">absdiffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y0)</span>
<span id="cb5-22">indx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argwhere(absdiffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> absdiffs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()).ravel()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-23">xann, y0ann, y1ann  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x[indx], y0[indx], y1[indx]</span>
<span id="cb5-24">ypoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (y1ann <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y0ann) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-25">xy, xyp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (xann, ypoint), (xann <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span>, ypoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>)</span>
<span id="cb5-26"></span>
<span id="cb5-27">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-28">xmin, xmax, ymin, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(x), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-29">ax.set_title(</span>
<span id="cb5-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kolmogorov-Smirnov Illustration"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb5-31">    loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb5-32">    )</span>
<span id="cb5-33">ax.set_xlim(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xmin, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xmax)</span>
<span id="cb5-34">ax.set_ylim(bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ymin, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ymax)</span>
<span id="cb5-35">ax.plot(x, y0, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reference CDF"</span>)</span>
<span id="cb5-36">ax.step(x, y1, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f33455"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, where<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pre"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empirical CDF"</span>)</span>
<span id="cb5-37">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb5-38">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb5-39">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CDF"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb5-40">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb5-41">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb5-42">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb5-43">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-44">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-45">plt.annotate(</span>
<span id="cb5-46">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maximum Absolute Distance"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xy, xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xyp,</span>
<span id="cb5-47">    arrowprops<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(facecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, shrink<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>, headwidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.5</span>)</span>
<span id="cb5-48">    )</span>
<span id="cb5-49">ax.legend(</span>
<span id="cb5-50">    frameon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper left"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-51">    )</span>
<span id="cb5-52">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gof-python-scipy/gof-python-scipy_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The Kolmogorov-Smirnov statistic is computed as the greatest absolute distance between the empirical and expected CDFs. Computing the statistic is straightforward:</p>
<div id="cell-13" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(dat)</span>
<span id="cb6-3">cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dat.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat.size</span>
<span id="cb6-4">dat_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.mean()</span>
<span id="cb6-5">dat_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.std(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameterized expected normal distribution.</span></span>
<span id="cb6-8">expnorm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dat_mean, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dat_std)</span>
<span id="cb6-9">expcdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expnorm.cdf(dat)</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute difference between datcdf and expcdf.</span></span>
<span id="cb6-12">absdiffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> expcdf)</span>
<span id="cb6-13">D0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> absdiffs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb6-14"></span>
<span id="cb6-15">D0</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>0.07194182492411011</code></pre>
</div>
</div>
<p>We can compare our value of <img src="https://latex.codecogs.com/png.latex?D"> with the value obtained from <code>scipy.stats.kstest</code>, which takes as arguments the empirical dataset and a callable representing the CDF of the expected distribution, and returns the D-statistic as well as the p-value associated with the computed D-statistic (note that critical values depend on the number of observations). The manually computed result is given by <code>D0</code>, the result returned from <code>scipy.stats.kstest</code> by <code>D1</code>:</p>
<div id="cell-15" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2">dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(dat)</span>
<span id="cb8-3">cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dat.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat.size</span>
<span id="cb8-4">dat_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.mean()</span>
<span id="cb8-5">dat_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.std(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameterized expected normal distribution.</span></span>
<span id="cb8-8">expnorm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dat_mean, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dat_std)</span>
<span id="cb8-9">expcdf  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expnorm.cdf(dat)</span>
<span id="cb8-10">absdiffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> expcdf)</span>
<span id="cb8-11">D0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> absdiffs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb8-12">D1, p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.kstest(dat, expnorm.cdf)</span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Our D         : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>D0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.8}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Scipy kstest D: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>D1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.8}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"kstest p-value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.8}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Our D         : 0.071941825
Scipy kstest D: 0.071941825
kstest p-value: 0.92828027</code></pre>
</div>
</div>
<p>The p-value (the second element of the 2-tuple returned by <code>scipy.stats.kstest</code>) is 0.9283. How should this result be interpreted?</p>
<p>For the one-sample Kolmogorov-Smirnov test, the null hypothesis is that the distributions are the same. Thus, the lower the p-value the greater the statistical evidence you have to reject the null hypothesis and conclude the distributions are different. <em>The test only lets you speak of your confidence that the distributions are different, not the same, since the test is designed to find the probability of Type I error</em>. Therefore, if <img src="https://latex.codecogs.com/png.latex?D"> is less than the critical value, we do not reject the null hypothesis (corresponds to a large p-value). If <img src="https://latex.codecogs.com/png.latex?D"> is greater than the critical value, we reject the null hypothesis (corresponds to a small p-value).</p>
<p>Given our p-value of 0.9326, we do not have sufficient evidence to reject the null hypothesis that the distributions are the same.</p>
</section>
<section id="the-anderson-darling-test" class="level3">
<h3 class="anchored" data-anchor-id="the-anderson-darling-test">The Anderson-Darling Test</h3>
<p>The Anderson-Darling test tests the null hypothesis that a sample is drawn from a population that follows a particular distribution. It makes use of the fact that when given a hypothesized underlying distribution and assuming the data is a sample from this distribution, the CDF of the data can be assumed to follow a uniform distribution. The statistic itself can be expressed as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AA%5E%7B2%7D%20&amp;=%20-n%20-%20S,%20%5Chspace%7B2mm%7D%20%5Ctext%7Bwhere%7D%20%5C%5C%0AS%20&amp;=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Cfrac%7B2i-1%7D%7Bn%7D%20%5CBig%5BLn(F(y_%7Bi%7D))%20+%20Ln(1%20-%20F(y_%7Bn+1-i%7D))%20%5CBig%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>The function <code>scipy.stats.anderson</code> takes as arguments the empirical dataset and a distribution to test against (one of “norm”, “expon”, “logistic”, “gumbel”, “gumbel_l” or “gumbel_rexponential”), and returns the Anderson-Darling test statistic, the critical values for the specified distribution and the significance levels associated with the critical values. For example, to test whether our dataset follows a normal distribution, we run the following:</p>
<div id="cell-17" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform Anderson-Darling test.</span></span>
<span id="cb10-3">A, crit, sig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.anderson(dat, dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"norm"</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"A   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>A<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"crit: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>crit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"sig : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sig<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>A   : 0.22442637404651578
crit: [0.54  0.615 0.738 0.861 1.024]
sig : [15.  10.   5.   2.5  1. ]</code></pre>
</div>
</div>
<p>According to the <a href="https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.anderson.html"><code>scipy.stats.anderson</code> documentation</a>, if the returned statistic is larger than the critical values, then for the corresponding significance level the null hypothesis (that the data come from the chosen distribution) can be rejected. Since our statistic 0.224426 is smaller than all critical values, we do not have sufficient evidence to reject the null hypothesis that the data come from a normal distribution.</p>
<p>A table of Anderson-Darling critical values can be found <a href="https://gist.github.com/jtrive84/8e856c402236e9b16f5bf5c165c7df7d/raw/a36497e47dba1f4bbeef95416524aa1efd033d58/AndersonDarling.pdf">here</a>.</p>
</section>
<section id="shapiro-wilk-test" class="level3">
<h3 class="anchored" data-anchor-id="shapiro-wilk-test">Shapiro-Wilk Test</h3>
<p>The Shapiro-Wilk test null hypothesis is that the sample is drawn from a normally distributed population. The function <code>scipy.stats.shapiro</code> takes the empirical dataset as it’s sole argument, and similar to <code>scipy.stats.kstest</code> returns a 2-tuple containing the test statistic and p-value.</p>
<div id="cell-19" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform Shapiro-Wilk test.</span></span>
<span id="cb12-3">W, p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.shapiro(dat)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"W: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>W<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"p: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>W: 0.9804516434669495
p: 0.5324737429618835</code></pre>
</div>
</div>
<p>If the p-value is less than the chosen alpha level, then the null hypothesis is rejected, and there is evidence that the data tested are not normally distributed. If the p-value is greater than the chosen alpha level, then the null hypothesis that the data came from a normally distributed population can not be rejected (e.g., for an alpha level of 0.05, a data set with a p-value of 0.05 rejects the null hypothesis that the data are from a normally distributed population). Our p-value is 0.532, so we cannot reject the null hypothesis.</p>
<p>A table of Shapiro-Wilk critical values can be downloaded <a href="https://gist.github.com/jtrive84/8e856c402236e9b16f5bf5c165c7df7d/raw/c403acff7af1837c03d9f16d0300b291546b7a3d/ShapiroWilk.pdf">here</a>.</p>


</section>

 ]]></description>
  <category>Statistical Modeling</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/gof-python-scipy/gof-python-scipy.html</guid>
  <pubDate>Sat, 02 Mar 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Estimating Logistic Regression coefficients From Scratch in R</title>
  <link>https://www.jtrive.com/posts/logistic-from-scratch-r/logistic-from-scratch-r.html</link>
  <description><![CDATA[ 





<p>In this post, we highlight the parameter estimation routines called behind the scenes upon invocation of R’s glm function. Specifically, we’ll focus on how parameters of a logistic regression model are estimated when fit to data having a binary response.</p>
<p>R’s glm function is used to fit generalized linear models, specified by giving a symbolic description of the linear predictor and a description of the error distribution. This function conceals a good deal of the complexity behind a simple interface, making it easy to overlook the calculations that estimate a model’s coefficients. The goal of this post is to shed some light on the mechanics of those calculations.</p>
<section id="background" class="level3">
<h3 class="anchored" data-anchor-id="background">Background</h3>
<p>In a generalized linear model the response may follow any distribution from the exponential family, and rather than assuming the mean is a linear function of the explanatory variables, we assume that a function of the mean (the link function) is a linear function of the explanatory variables.</p>
<p>Logistic regression is used for modeling data with a categorical response. Although it’s possible to model multinomial data using logistic regression, this article focuses only on fitting data having a dichotomous response (‘Yes/No’, ‘True/False’, ‘1/0’, ‘Good/Bad’).</p>
<p>The logistic regression model is a generalized linear model whose canonical link is the logit, or log-odds:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7BLn%7D%20%5CBig(%5Cfrac%7B%5Cpi_%7Bi%7D%7D%7B1%20-%20%5Cpi_%7Bi%7D%7D%20%5CBig)%20=%20%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7D%7Bx%7D_%7Bi1%7D%20+%20%5Cdots%20+%20%5Cbeta_%7Bp%7D%7Bx%7D_%7Bip%7D,%20%5Cquad%20i%20=%20(1,%20%5Cdots%20,%20n).%0A"></p>
<p>Solving the logit for <img src="https://latex.codecogs.com/png.latex?%5Cpi_%7Bi%7D">, which represents the predicted probability for a set of features <img src="https://latex.codecogs.com/png.latex?x_%7Bi%7D">, yields</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cpi_%7Bi%7D%20=%20%5Cfrac%20%7Be%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7D%7Bx%7D_%7Bi1%7D%20+%20%5Cdots%20+%20%5Cbeta_%7Bp%7D%7Bx%7D_%7Bip%7D%7D%7D%7B1%20+%20e%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7D%7Bx%7D_%7Bi1%7D%20+%20%5Cdots%20+%20%5Cbeta_%7Bp%7D%7Bx%7D_%7Bip%7D%7D%7D%20=%20%5Cfrac%20%7B1%7D%7B1%20+%20e%5E%7B-(%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7D%7Bx%7D_%7Bi1%7D%20+%20%5Cdots%20+%20%5Cbeta_%7Bp%7D%7Bx%7D_%7Bip%7D)%7D%7D,%0A"></p>
<p>Where <img src="https://latex.codecogs.com/png.latex?-%5Cinfty%20%3C%20x_%7Bi%7D%20%3C%20%5Cinfty"> and <img src="https://latex.codecogs.com/png.latex?0%3C%5Cpi_%7Bi%7D%3C1">.</p>
<p>In other words, the expression for <img src="https://latex.codecogs.com/png.latex?%5Cpi_%7Bi%7D"> maps any real-valued <img src="https://latex.codecogs.com/png.latex?x_%7Bi%7D"> to a positive probability between 0 and 1.</p>
</section>
<section id="parameter-estimation" class="level3">
<h3 class="anchored" data-anchor-id="parameter-estimation">Parameter Estimation</h3>
<p>Maximum Likelihood Estimation can be used to determine the parameters of a Logistic Regression model, which entails finding the set of parameters for which the probability of the observed data is greatest. The objective is to estimate the <img src="https://latex.codecogs.com/png.latex?(p+1)"> unknown <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B0%7D,%20%5Cdots,%20%5Cbeta_%7Bp%7D">.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?Y_%7Bi%7D"> represent independent, dichotomous response values for each of <img src="https://latex.codecogs.com/png.latex?n"> observations, where <img src="https://latex.codecogs.com/png.latex?Y_%7Bi%7D=1"> denotes a success and <img src="https://latex.codecogs.com/png.latex?Y_%7Bi%7D=0"> denotes a failure. The density function of a single observation <img src="https://latex.codecogs.com/png.latex?Y_%7Bi%7D"> can be expressed as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(y_%7Bi%7D)%20=%20%5Cpi_%7Bi%7D%5E%7By_%7Bi%7D%7D(1-%5Cpi_%7Bi%7D)%5E%7B1-y_%7Bi%7D%7D,%0A"></p>
<p>From which we obtain the likelihood function:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AL(%5Cbeta)%20=%20%5Cprod_%7Bi=1%7D%5E%7Bn%7D%20%5Cpi_%7Bi%7D%5E%7By_%7Bi%7D%7D(1-%5Cpi_%7Bi%7D)%5E%7B1-y_%7Bi%7D%7D.%0A"></p>
<p>Taking the natural log of the maximum likelihood estimate results in the log-likelihood function:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Al(%5Cbeta)%20&amp;=%20%5Cmathrm%7BLn%7D(L(%5Cbeta))%20=%20%5Cmathrm%7BLn%7D%20%5CBig(%5Cprod_%7Bi=1%7D%5E%7Bn%7D%20%5Cpi_%7Bi%7D%5E%7By_%7Bi%7D%7D(1-%5Cpi_%7Bi%7D)%5E%7B1-y_%7Bi%7D%7D%20%5CBig)%20%5C%5C%0A&amp;=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7D%20%5Cmathrm%7BLn%7D(%5Cpi_%7Bi%7D)%20+%20(1-y_%7Bi%7D)%5Cmathrm%7BLn%7D(1-%5Cpi_%7Bi%7D)%20%5C%5C%0A&amp;=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7D(%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7D%7Bx%7D_%7Bi1%7D%20+%20%5Cdots%20+%20%5Cbeta_%7Bp%7D%7Bx%7D_%7Bip%7D)%20-%20%5Cmathrm%7BLn%7D(1%20+%20e%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7D%7Bx%7D_%7Bi1%7D%20+%20%5Cdots%20+%20%5Cbeta_%7Bp%7D%7Bx%7D_%7Bip%7D%7D)%0A%5Cend%7Balign*%7D%0A"></p>
<p>The first-order partial derivatives of the log-likelihood are calculated and set to zero for each <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7Bk%7D,%20k%20=%200,%201,%20%5Cdots,%20p">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%20%7B%5Cpartial%20l(%5Cbeta)%7D%7B%5Cpartial%20%5Cbeta_%7Bk%7D%7D%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7Dx_%7Bik%7D%20-%20%5Cpi_%7Bi%7Dx_%7Bik%7D%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_%7Bik%7D(y_%7Bi%7D%20-%20%5Cpi_%7Bi%7D)%20=%200,%0A"></p>
<p>which can be represented in matrix form as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%20%7B%5Cpartial%20l(%5Cbeta)%7D%7B%5Cpartial%20%5Cbeta%7D%20=%20X%5E%7BT%7D(y%20-%20%5Cpi),%0A"></p>
<p>Where <img src="https://latex.codecogs.com/png.latex?X%5E%7BT%7D"> is a (p+1)xn matrix and <img src="https://latex.codecogs.com/png.latex?(y%20-%20%5Cpi)"> a nx1 vector.</p>
<p>The vector of first-order partial derivatives of the log-likelihood function is referred to as the score function, and is typically represented as <img src="https://latex.codecogs.com/png.latex?U">.</p>
<p>These <img src="https://latex.codecogs.com/png.latex?(p+1)"> equations are solved simultaneously to obtain the parameter estimates <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B0%7D,%20%5Cdots,%20%5Cbeta_%7Bp%7D">. Each solution specifies a critical-point which will be either a maximum or a minimum. The critical point will be a maximum if the matrix of second partial derivatives is negative definite (which means every element on the diagonal of the matrix is less than zero).</p>
<p>The matrix of second partial derivatives can be expressed as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta_%7Bk%7D%7D%7B%5Cpartial%20%5Cbeta_%7Bk%7D%7D%5E%7BT%7D%7D%20=%20-%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_%7Bik%7D%5Cpi_%7Bi%7D(1-%5Cpi_%7Bi%7D)%7Bx_%7Bik%7D%7D%5E%7BT%7D,%0A"></p>
<p>which can be represented as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20=%20-X%5E%7BT%7DWX,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?W"> is an nxn diagonal matrix of weights with each element equal to <img src="https://latex.codecogs.com/png.latex?%5Cpi_%7Bi%7D(1%20-%20%5Cpi_%7Bi%7D)"> for logistic regression models. In general, the weight matrix <img src="https://latex.codecogs.com/png.latex?W"> will have entries inversely proportional to the variance of the response.</p>
<p>Since no closed-form solution exists for determining logistic regression coefficients, iterative techniques must be employed.</p>
</section>
<section id="fitting-the-model" class="level3">
<h3 class="anchored" data-anchor-id="fitting-the-model">Fitting the Model</h3>
<p>Two distinct but related iterative methods can be utilized in determining model coefficients: the Newton-Raphson method and Fisher Scoring. The Newton-Raphson method relies on the matrix of second partial derivatives, also known as the Hessian. The Newton-Raphson update expression is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta%5E%7B(t+1)%7D%20=%20%5Cbeta%5E%7B(t)%7D%20-%20(H%5E%7B(t)%7D)%5E%7B-1%7DU%5E%7B(t)%7D,%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t+1)%7D"> = the vector of updated coefficient estimates.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t)%7D"> = the vector of coefficient estimates from the previous iteration.</li>
<li><img src="https://latex.codecogs.com/png.latex?(H%5E%7B(t)%7D)%5E%7B-1%7D"> = the inverse Hessian, <img src="https://latex.codecogs.com/png.latex?%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)%5E%7B-1%7D">.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?U%5E%7B(t)%7D"> = the vector of first-order partial derivatives of the log-likelihood function, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%20%7B%5Cpartial%20l(%5Cbeta)%7D%7B%5Cpartial%20%5Cbeta%7D%20=%20X%5E%7BT%7D(y%20-%20%5Cpi)">.</li>
</ul>
<p>The Newton-Raphson method starts with an initial guess for the solution, and obtains a second guess by approximating the function to be maximized in a neighborhood of the initial guess by a second-degree polynomial, and then finding the location of that polynomial’s maximum value. This process continues until it converges to the actual solution. The convergence of <img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t)%7D"> to <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cbeta%7D"> is usually fast, with adequate convergence usually realized in fewer than 20 iterations.</p>
<p>Fisher Scoring utilizes the expected information, <img src="https://latex.codecogs.com/png.latex?-E%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)">. Let <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D"> serve as a stand-in for the expected value of the information:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BI%7D%20=%20-E%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig).%0A"></p>
<p>The Fisher Scoring update step replaces <img src="https://latex.codecogs.com/png.latex?-H%5E%7B(t)%7D"> from Newton-Raphson with <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D%5E%7B(t)%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cbeta%5E%7B(t+1)%7D%20&amp;=%20%5Cbeta%5E%7B(t)%7D%20+%20(%5Cmathcal%7BI%7D%5E%7B(t)%7D)%5E%7B-1%7DU%5E%7B(t)%7D%20%5C%5C%0A&amp;=%20%5Cbeta%5E%7B(t)%7D%20+%20(X%5E%7BT%7DWX)%5E%7B-1%7DX%5E%7BT%7D(y%20-%20%5Cpi),%0A%5Cend%7Balign*%7D%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t+1)%7D"> = the vector of updated coefficient estimates.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t)%7D"> = the vector of coefficient estimates from the previous iteration.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?(%5Cmathcal%7BI%7D%5E%7B(t)%7D)%5E%7B-1%7D"> = the inverse of the expected information matrix, <img src="https://latex.codecogs.com/png.latex?-E%20%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)%5E%7B-1%7D">.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?U%5E%7B(t)%7D"> = the vector of first-order partial derivatives of the log-likelihood function, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%20%7B%5Cpartial%20l(%5Cbeta)%7D%7B%5Cpartial%20%5Cbeta%7D%20=%20X%5E%7BT%7D(y%20-%20%5Cpi)">.</li>
</ul>
<p>For GLM’s with a canonical link, the observed and expected information are the same. When the response follows an exponential family distribution and the canonical link function is employed, observed and expected Information coincide so that Fisher Scoring produces the same estimates as Newton-Raphson.</p>
<p>When the canonical link is used, the second partial derivatives of the log-likelihood do not depend on the observations <img src="https://latex.codecogs.com/png.latex?y_%7Bi%7D">, and therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20=%20E%20%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20%5CBig).%0A"></p>
<p>Fisher scoring has the advantage that it produces the asymptotic covariance matrix as a by-product. To summarize:</p>
<ul>
<li>The Hessian is the matrix of second partial derivatives of the log-likelihood with respect to the parameters: <img src="https://latex.codecogs.com/png.latex?H%20=%20%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D">.<br>
</li>
<li>The observed information is <img src="https://latex.codecogs.com/png.latex?-%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D">.</li>
<li>The expected information is <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D%20=%20E%5CBig(-%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)">.<br>
</li>
<li>The asymptotic covariance matrix is <img src="https://latex.codecogs.com/png.latex?mathrm%7BVar%7D(%5Chat%7B%5Cbeta%7D)%20=%20E%5CBig(-%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)%5E%7B-1%7D%20=%20(X%5E%7BT%7DWX)%5E%7B-1%7D">.</li>
</ul>
<p>For models employing a canonical link function:</p>
<ul>
<li>The observed and expected information are the same: <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20=%20E%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)">.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?H%20=%20-%5Cmathcal%7BI%7D">, or <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20=%20E%5CBig(-%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)">.<br>
</li>
<li>The Newton-Raphson and Fisher Scoring algorithms yield identical results.</li>
</ul>
</section>
<section id="fisher-scoring-in-r" class="level3">
<h3 class="anchored" data-anchor-id="fisher-scoring-in-r">Fisher Scoring in R</h3>
<p>The data used for our sample calculation can be obtained <a href="https://gist.github.com/jtrive84/835514a76f7afd552c999e4d9134baa8">here</a>. This data represents O-ring failures in the 23 pre-Challenger space shuttle missions. In this dataset, TEMPERATURE serves as the single explanatory variable which will be used to predict “O_RING_FAILURE”, which is 1 if a failure occurred, 0 otherwise.</p>
<p>Once the parameters have been determined, the model estimate of the probability of success for a given observation can be calculated via:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%5Cpi_%7Bi%7D%20=%20%5Cfrac%20%7Be%5E%7B%5Chat%5Cbeta_%7B0%7D%20+%20%5Chat%5Cbeta_%7B1%7D%7Bx%7D_%7Bi1%7D%20+%20%5Cdots%20+%20%5Chat%5Cbeta_%7Bp%7D%7Bx%7D_%7Bip%7D%7D%7D%7B1%20+%20e%5E%7B%5Chat%5Cbeta_%7B0%7D%20+%20%5Chat%5Cbeta_%7B1%7D%7Bx%7D_%7Bi1%7D%20+%20%5Cdots%20+%20%5Chat%5Cbeta_%7Bp%7D%7Bx%7D_%7Bip%7D%7D%7D%0A"></p>
<p><code>getCoefficients</code> returns the estimated model coefficients as a (p+1)x1 matrix. In addition, the function returns the number of scoring iterations, fitted values and resulting variance-covariance matrix.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"></span>
<span id="cb1-2">getCoefficients <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(design_matrix, response_vector, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">epsilon=</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0001</span>) {</span>
<span id="cb1-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># =========================================================================</span></span>
<span id="cb1-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># design_matrix      `X`     =&gt; n-by-(p+1)                                |</span></span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># response_vector    `y`     =&gt; n-by-1                                    |</span></span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probability_vector `p`     =&gt; n-by-1                                    |</span></span>
<span id="cb1-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weights_matrix     `W`     =&gt; n-by-n                                    |</span></span>
<span id="cb1-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># epsilon                    =&gt; threshold above which iteration continues |</span></span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># =========================================================================</span></span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n                          =&gt; # of observations                         |</span></span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (p + 1)                    =&gt; # of parameters, +1 for intercept term    |</span></span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># =========================================================================</span></span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># U =&gt; First derivative of Log-Likelihood with respect to                 |</span></span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#      each beta_i, i.e. `Score Function`: X_transpose * (y - p)          |</span></span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                                                                         |</span></span>
<span id="cb1-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I =&gt; Second derivative of Log-Likelihood with respect to                |</span></span>
<span id="cb1-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#      each beta_i. The `Information Matrix`: (X_transpose * W * X)       |</span></span>
<span id="cb1-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                                                                         |</span></span>
<span id="cb1-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X^T*W*X results in a (p+1)-by-(p+1) matrix                              |</span></span>
<span id="cb1-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X^T(y - p) results in a (p+1)-by-1 matrix                               |</span></span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (X^T*W*X)^-1 * X^T(y - p) results in a (p+1)-by-1 matrix                |</span></span>
<span id="cb1-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ========================================================================|</span></span>
<span id="cb1-23">    X <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(design_matrix)</span>
<span id="cb1-24">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(response_vector)</span>
<span id="cb1-25"></span>
<span id="cb1-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize logistic function used for Scoring calculations.</span></span>
<span id="cb1-27">    pi_i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(v) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(v) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(v)))</span>
<span id="cb1-28"></span>
<span id="cb1-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize beta_0, p_0, W_0, I_0 &amp; U_0.</span></span>
<span id="cb1-30">    beta_0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(X)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(X), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dimnames=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb1-31">    p_0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi_i</span>(X <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> beta_0)</span>
<span id="cb1-32">    W_0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(p_0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p_0)))</span>
<span id="cb1-33">    I_0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(X) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> W_0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> X</span>
<span id="cb1-34">    U_0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(X) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> (y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p_0)</span>
<span id="cb1-35"></span>
<span id="cb1-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize variables for iteration.</span></span>
<span id="cb1-37">    beta_old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> beta_0</span>
<span id="cb1-38">    iter_I <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> I_0</span>
<span id="cb1-39">    iter_U <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> U_0</span>
<span id="cb1-40">    iter_p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> p_0</span>
<span id="cb1-41">    iter_W <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> W_0</span>
<span id="cb1-42">    fisher_scoring_iterations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-43"></span>
<span id="cb1-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate until difference between abs(beta_new - beta_old) &lt; epsilon.</span></span>
<span id="cb1-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb1-46">        fisher_scoring_iterations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fisher_scoring_iterations <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-47">        beta_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> beta_old <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(iter_I) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> iter_U</span>
<span id="cb1-48"></span>
<span id="cb1-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(beta_new <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta_old) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> epsilon)) {</span>
<span id="cb1-50">            model_parameters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> beta_new</span>
<span id="cb1-51">            fitted_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi_i</span>(X <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> model_parameters)</span>
<span id="cb1-52">            covariance_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(iter_I)</span>
<span id="cb1-53">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb1-54"></span>
<span id="cb1-55">        } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb1-56">            iter_p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pi_i</span>(X <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> beta_new)</span>
<span id="cb1-57">            iter_W <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(iter_p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>iter_p)))</span>
<span id="cb1-58">            iter_I <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(X) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> iter_W <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> X</span>
<span id="cb1-59">            iter_U <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(X) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> (y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> iter_p)</span>
<span id="cb1-60">            beta_old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> beta_new</span>
<span id="cb1-61">        }</span>
<span id="cb1-62">    }</span>
<span id="cb1-63"></span>
<span id="cb1-64">    results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-65">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_parameters'</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>model_parameters, </span>
<span id="cb1-66">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'covariance_matrix'</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>covariance_matrix,</span>
<span id="cb1-67">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fitted_values'</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>fitted_values,</span>
<span id="cb1-68">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number_iterations'</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>fisher_scoring_iterations</span>
<span id="cb1-69">        )</span>
<span id="cb1-70"></span>
<span id="cb1-71">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(results)</span>
<span id="cb1-72">}</span></code></pre></div>
<p>A quick summary of R’s matrix operators:</p>
<ul>
<li><code>%*%</code> is a stand-in for matrix multiplication.<br>
</li>
<li><code>diag</code> returns a matrix with the provided vector as the diagonal and zero off-diagonal entries.</li>
<li><code>t</code> returns the transpose of the provided matrix.</li>
<li><code>solve</code> returns the inverse of the provided matrix (if it exists).</li>
</ul>
<p>Note that in our implementation, we solve the normal equations directly. You wouldn’t see this in practice or when using optimized numerical software packages. This is because since when confronted with solving ill-conditioned systems of equations, computing <img src="https://latex.codecogs.com/png.latex?(X%5E%7BT%7DWX)%5E%7B-1%7D"> effectively squares the condition number, which results in an answer with diminished accuracy. Optimized statistical computing packages instead leverage more stable methods such as the QR decomposition or SVD. But this suffices for our purposes.</p>
<p>We load the Challenger dataset and partition it into the design matrix and response, which will then be passed into <code>getCoefficients</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.table</span>(</span>
<span id="cb2-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Challenger.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, </span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb2-4">    )</span>
<span id="cb2-5"></span>
<span id="cb2-6">X <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TEMPERATURE'</span>]))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># design matrix</span></span>
<span id="cb2-7">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O_RING_FAILURE'</span>])         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># response vector</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(X) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb2-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(y) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Call `getCoefficients`, keeping epsilon at .0001.</span></span>
<span id="cb2-13">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getCoefficients</span>(X, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">epsilon=</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0001</span>)</span></code></pre></div>
<p>Printing <code>results</code> displays the model’s estimated coefficients (<em>model_parameters</em>), the variance-covariance matrix of the coefficient estimates (<em>covariance_matrix</em>), fitted values (<em>fitted_values</em>) and the number of Fisher Scoring iterations (<em>number_iterations</em>):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(results)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>model_parameters</span>
<span id="cb3-4">           [,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-5">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.0429016</span></span>
<span id="cb3-6">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2321627</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>covariance_matrix</span>
<span id="cb3-9">           [,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]        [,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb3-10">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">54.4442748</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.79638682</span></span>
<span id="cb3-11">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7963868</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01171514</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fitted_values</span>
<span id="cb3-14">            [,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-15"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.43049313</span></span>
<span id="cb3-16"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.22996826</span></span>
<span id="cb3-17"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.27362105</span></span>
<span id="cb3-18"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.32209405</span></span>
<span id="cb3-19"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.37472428</span></span>
<span id="cb3-20"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15804910</span></span>
<span id="cb3-21"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12954602</span></span>
<span id="cb3-22"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.22996826</span></span>
<span id="cb3-23"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.85931657</span></span>
<span id="cb3-24">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.60268105</span></span>
<span id="cb3-25">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.22996826</span></span>
<span id="cb3-26">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.04454055</span></span>
<span id="cb3-27">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.37472428</span></span>
<span id="cb3-28">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.93924781</span></span>
<span id="cb3-29">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.37472428</span></span>
<span id="cb3-30">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08554356</span></span>
<span id="cb3-31">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.22996826</span></span>
<span id="cb3-32">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02270329</span></span>
<span id="cb3-33">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.06904407</span></span>
<span id="cb3-34">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03564141</span></span>
<span id="cb3-35">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08554356</span></span>
<span id="cb3-36">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.06904407</span></span>
<span id="cb3-37">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.82884484</span></span>
<span id="cb3-38"></span>
<span id="cb3-39"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>number_iterations</span>
<span id="cb3-40">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span></code></pre></div>
<p>For the Challenger dataset, our implementation of Fisher Scoring yields a <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B0%7D=15.0429016"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B1%7D=-0.2321627">. In order to predict new probabilities of O-ring failure based on temperature, our model relies on the following formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cpi%20=%20%5Cfrac%20%7Be%5E%7B15.0429016%20-0.2321627%20*%20%5Cmathrm%7BTemperature%7D%7D%7D%7B1%20+%20e%5E%7B15.0429016%20-0.2321627%20*%20%5Cmathrm%7BTemperature%7D%7D%7D%0A"></p>
<p>Negative coefficients correspond to variables that are negatively correlated with the probability of a positive outcome, the reverse being true for positive coefficients.</p>
<p>Lets compare the results of our implementation with the output of <code>glm</code> using the same dataset, and specifying family=“binomial” and link=“logit”:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.table</span>(</span>
<span id="cb4-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Challenger.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, </span>
<span id="cb4-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb4-4">    )</span>
<span id="cb4-5"></span>
<span id="cb4-6">logistic.fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(</span>
<span id="cb4-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula=</span>O_RING_FAILURE <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> TEMPERATURE,</span>
<span id="cb4-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">binomial</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">link=</span>logit), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data=</span>df</span>
<span id="cb4-9">    )</span></code></pre></div>
<p>From <code>logistic.fit</code>, we’ll extract <code>coefficients</code>, <code>fitted.values</code> and <code>iter</code>, and call <code>vcov(logistic.fit)</code> to obtain the variance-covariance matrix of the estimated coefficients:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> logistic.fit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coefficients</span>
<span id="cb5-2">(Intercept) TEMPERATURE </span>
<span id="cb5-3"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.0429016</span>  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2321627</span> </span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(logistic.fit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fitted.values)</span>
<span id="cb5-6">      [,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-7"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.43049313</span></span>
<span id="cb5-8"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.22996826</span></span>
<span id="cb5-9"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.27362105</span></span>
<span id="cb5-10"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.32209405</span></span>
<span id="cb5-11"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.37472428</span></span>
<span id="cb5-12"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15804910</span></span>
<span id="cb5-13"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.12954602</span></span>
<span id="cb5-14"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.22996826</span></span>
<span id="cb5-15"> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.85931657</span></span>
<span id="cb5-16">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.60268105</span></span>
<span id="cb5-17">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.22996826</span></span>
<span id="cb5-18">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.04454055</span></span>
<span id="cb5-19">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.37472428</span></span>
<span id="cb5-20">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.93924781</span></span>
<span id="cb5-21">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.37472428</span></span>
<span id="cb5-22">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08554356</span></span>
<span id="cb5-23">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.22996826</span></span>
<span id="cb5-24">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02270329</span></span>
<span id="cb5-25">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.06904407</span></span>
<span id="cb5-26">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03564141</span></span>
<span id="cb5-27">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.08554356</span></span>
<span id="cb5-28">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.06904407</span></span>
<span id="cb5-29">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>,] <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.82884484</span></span>
<span id="cb5-30"></span>
<span id="cb5-31"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> logistic.fit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fitted.iter</span>
<span id="cb5-32"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb5-33"></span>
<span id="cb5-34"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vcov</span>(logistic.fit)</span>
<span id="cb5-35">             (Intercept) TEMPERATURE</span>
<span id="cb5-36">(Intercept)  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">54.4441826</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.79638547</span></span>
<span id="cb5-37">TEMPERATURE  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7963855</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01171512</span></span></code></pre></div>
<p>Our coefficients match exactly with those generated by glm, and as would be expected, the fitted values are also identical.</p>
<p>Notice there’s some discrepancy in the estimate of the variance-covariance matrix beginning with the 4th decimal (54.4442748 in our algorithm vrs. 54.4441826 for the variance of the Intercept term from glm). This may be due to rounding, or the loss of precision in floating point values when inverting matrices. Notice our implementation required one more Fisher Scoring iteration than glm (6 vrs. 5). Perhaps increasing the size of our epsilon will reduce the number of Fisher Scoring iterations, which in turn may lead to better agreement between the variance-covariance matrices.</p>
<p>Calling <code>summary(logistic.fit)</code> prints, among other things, the standard error of the coefficient estimates:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(logistic.fit)</span>
<span id="cb6-2">Coefficients<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-3">            Estimate Std. Error z value <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Pr</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">|</span>z<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>)  </span>
<span id="cb6-4">(Intercept)  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.0429</span>     <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.3786</span>   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.039</span>   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0415</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb6-5">TEMPERATURE  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2322</span>     <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1082</span>  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.145</span>   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0320</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<p>The <em>Std. Error</em> values are the square root of the diagonal elements of the variance-covariance matrix, <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B54.4441826%7D%20=%207.3786"> and <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B0.01171512%7D%20=%200.1082">.</p>
<p><em>z value</em> is the estimated coefficient divided by <em>Std. Error</em>. In our example, <img src="https://latex.codecogs.com/png.latex?15.0429/7.3786=2.039"> and <img src="https://latex.codecogs.com/png.latex?-0.2322/0.1082%20=%20-2.145">. <em>Pr(&gt;|z|)</em> is the p-value, which tells us whether we should trust the estimated coefficient value. The standard rule of thumb is that coefficients with p-values less than 0.05 are reliable, although some tests require stricter thresholds.</p>
<p>A feature of Logistic Regression is that the training data’s marginal probabilities are preserved. If you aggregate fitted values from the training set, that quantity will equal the number of positive outcomes in the response vector (this is true for all exponential family GLMs employing a canonical link function):</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(y)</span>
<span id="cb7-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Checking sum for our algorithm.</span></span>
<span id="cb7-5"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(mySummary<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fitted_values)</span>
<span id="cb7-6"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#checking sum for glm.</span></span>
<span id="cb7-9"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(logistic.fit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fitted.values)</span>
<span id="cb7-10"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span></code></pre></div>
</section>
<section id="using-the-model-to-calculate-probabilities" class="level2">
<h2 class="anchored" data-anchor-id="using-the-model-to-calculate-probabilities">Using The Model to Calculate Probabilities</h2>
<p>To apply the model generated by glm to a new set of explanatory variables, use the <code>predict</code> function. Pass a list or data.frame of explanatory variables to <code>predict</code>, and for logistic regression models, be sure to set <code>type="response"</code> to ensure probabilities are returned. For example:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New inputs for Logistic Regression model.</span></span>
<span id="cb8-2"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> tempsDF <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TEMPERATURE=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">61</span>))</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(logistic.fit, tempsDF, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>)</span>
<span id="cb8-5"></span>
<span id="cb8-6">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> </span>
<span id="cb8-7"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9999230</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9960269</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9874253</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9841912</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7070241</span></span></code></pre></div>


</section>

 ]]></description>
  <category>Statistical Modeling</category>
  <category>R</category>
  <guid>https://www.jtrive.com/posts/logistic-from-scratch-r/logistic-from-scratch-r.html</guid>
  <pubDate>Sat, 02 Mar 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Backpropagation for Fully-Connected Neural Networks</title>
  <link>https://www.jtrive.com/posts/backprop-python/backprop-python.html</link>
  <description><![CDATA[ 





<p>Backpropagation is a key algorithm used in training fully connected neural networks, also known as feed-forward neural networks. In this algorithm, the network’s output error is propagated backward, layer by layer, to adjust the weights of connections between neurons.</p>
<p><img src="https://www.jtrive.com/posts/backprop-python/fc.png" class="img-fluid"></p>
<p>The process starts by comparing the network’s output to the desired output, calculating the error. Then, starting from the output layer and moving backward, the algorithm computes the gradients of the error with respect to each weight in the network using the chain rule of calculus. These gradients indicate how much each weight contributes to the error.</p>
<p>Next, the weights are updated using gradient descent, where they are adjusted in the direction that minimizes the error. This adjustment is proportional to the gradient and a predefined learning rate, ensuring the network converges towards a solution. Backpropagation continues iteratively over the training data until the network’s performance reaches a satisfactory level or a predetermined number of iterations is reached.</p>
<p>Overall, backpropagation efficiently adjusts the weights of a fully connected network, enabling it to learn complex relationships between input and output data through iterative optimization of the network’s parameters.</p>
<p>In what follows, we walkthrough the mathematics and pseudocode required to train a 2-layer fully connected network for a classification task.</p>
<section id="forward-pass" class="level3">
<h3 class="anchored" data-anchor-id="forward-pass">Forward Pass</h3>
<p>In the following, superscripts represent the layer associated with each variable:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?X%20=%20A%5E%7B(0)%7D">: Input data having dimension n-by-f, where n is the number of samples and f the number of features. For a batch of 32 MNIST samples, <img src="https://latex.codecogs.com/png.latex?X"> would have dimension (32, 784).</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?y">: Target variable. classifying a single digit from MINST, a vector populated with 0s and 1s indicating the ground truth label for the sample (8 or not 8). Has the same length as the first dimension of <img src="https://latex.codecogs.com/png.latex?X">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?W%5E%7B(l)%7D">: Trainable weights. Projects previous layer activations to lower dimensional representation. Again referring to the first set of weights for a batch of 32 MNIST samples, <img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D">’s first dimension will match the second dimension of the activations from the previous layer (784), and <img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D">’s second dimension will be some lower dimension, say 256. <img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D"> will therefore have dimension (784, 256).</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?b%5E%7B(l)%7D">: Bias term, a one-dimensional vector associated with each hidden layer having length equal to the second dimension of the hidden layer. <img src="https://latex.codecogs.com/png.latex?b%5E%7B(1)%7D"> will have dimension (256,).</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(l)%7D%20=%20A%5E%7B(l-1)%7D%20W%5E%7B(l)%7D%20+%20b%5E%7B(l)%7D">: Output of layer <img src="https://latex.codecogs.com/png.latex?l">, which is the matrix product of the previous layer activations <img src="https://latex.codecogs.com/png.latex?A%5E%7B(l-1)%7D"> and current layer weights (plus bias term).</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?A%5E%7B(l)%7D%20=%20%5Csigma(Z%5E%7B(l)%7D)">: Activations associated with layer <img src="https://latex.codecogs.com/png.latex?l">. Passes <img src="https://latex.codecogs.com/png.latex?Z%5E%7B(l)%7D"> through a non-linearity such as sigmoid or ReLU.</p></li>
</ul>
<p>More concretely, assume a 2-layer fully-connected neural network with one hidden layer of size 256, through which a dataset of dimension 32-by-784 is passed to predict whether each of the 32 images is an 8 or not. The forward pass looks like:</p>
<ul>
<li>Randomly initialize <img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D"> (784x256), <img src="https://latex.codecogs.com/png.latex?W%5E%7B(2)%7D"> (256x1), <img src="https://latex.codecogs.com/png.latex?b%5E%7B(1)%7D"> (256x1) and <img src="https://latex.codecogs.com/png.latex?b%5E%7B(2)%7D"> (1x1)</li>
<li><img src="https://latex.codecogs.com/png.latex?X%20=%20A%5E%7B(0)%7D%5Chspace%7B.75em%7D"> (32x784)</li>
<li><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(1)%7D%20=%20A%5E%7B(0)%7D%20W%5E%7B(1)%7D%20+%20b%5E%7B(1)%7D%5Chspace%7B.75em%7D"> (32x256)</li>
<li><img src="https://latex.codecogs.com/png.latex?A%5E%7B1%7D%20=%20%5Csigma(Z%5E%7B(1)%7D)%5Chspace%7B.75em%7D"> (32x256)</li>
<li><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(2)%7D%20=%20A%5E%7B(1)%7D%20W%5E%7B(2)%7D%20+%20b%5E%7B(2)%7D%5Chspace%7B.75em%7D"> (32x1)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D%20=%20A%5E%7B(2)%7D%20=%20%5Csigma(Z%5E%7B(2)%7D)%5Chspace%7B.75em%7D"> (32x1)</li>
</ul>
<p>The final output, <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D">, represents the probability that each sample is the number 8 or not.</p>
<p>With the actual labels <img src="https://latex.codecogs.com/png.latex?y"> and our predicted probabilities <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D">, we can define our loss function, the cross-entropy loss for binary classification:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%20=%20-%5Cfrac%7B1%7D%7Bn%7D%5Cbig(y%20%5Ctimes%20%5Cmathrm%7Blog%7D(%5Chat%7By%7D)%20-%20(1%20-%20y)%5Ctimes%20%5Cmathrm%7Blog%7D(1%20-%20%5Chat%7By%7D)%5Cbig)%0A"></p>
</section>
<section id="backward-pass-backpropagation" class="level3">
<h3 class="anchored" data-anchor-id="backward-pass-backpropagation">Backward Pass (Backpropagation)</h3>
<p>The goal of backpropagation is to compute the partial derivatives of the loss function <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D"> with respect to any weight <img src="https://latex.codecogs.com/png.latex?W"> or <img src="https://latex.codecogs.com/png.latex?b"> in the network. In order to update our weights, we need to take derivatives of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D"> w.r.t. <img src="https://latex.codecogs.com/png.latex?W"> and <img src="https://latex.codecogs.com/png.latex?b">, then update <img src="https://latex.codecogs.com/png.latex?W"> and <img src="https://latex.codecogs.com/png.latex?b"> using the derivatives. Backpropagation starts by taking the derivative of the loss function. We first compute the derivatives of the loss function w.r.t. <img src="https://latex.codecogs.com/png.latex?W%5E%7B(2)%7D"> and <img src="https://latex.codecogs.com/png.latex?b%5E%7B(2)%7D">. Here we make use of the chain rule:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Once we have <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D">, <img src="https://latex.codecogs.com/png.latex?W%5E%7B(2)%7D"> and <img src="https://latex.codecogs.com/png.latex?b%5E%7B(2)%7D"> are updated as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AW%5E%7B(2)%7D%20&amp;:=%20W%5E%7B(2)%7D%20-%20%5Calpha%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%5C%5C%0Ab%5E%7B(2)%7D%20&amp;:=%20b%5E%7B(2)%7D%20-%20%5Calpha%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>for some learning rate <img src="https://latex.codecogs.com/png.latex?%5Calpha">. This holds for all layers. For given layer <img src="https://latex.codecogs.com/png.latex?i">, the update rule for <img src="https://latex.codecogs.com/png.latex?W%5E%7B(i)%7D"> and <img src="https://latex.codecogs.com/png.latex?b%5E%7B(i)%7D"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AW%5E%7B(i)%7D%20&amp;:=%20W%5E%7B(i)%7D%20-%20%5Calpha%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(i)%7D%7D%5C%5C%0Ab%5E%7B(i)%7D%20&amp;:=%20b%5E%7B(i)%7D%20-%20%5Calpha%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(i)%7D%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>Let’s start with unpacking <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D">. The first entry on the r.h.s., <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D">, represents the derivative of the loss function w.r.t. <img src="https://latex.codecogs.com/png.latex?A%5E%7B(2)%7D%20=%20%5Chat%7By%7D">, which is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20=%20-%5Cfrac%7By%7D%7BA%5E%7B(2)%7D%7D%20+%20%5Cfrac%7B1%20-%20y%7D%7B1%20-%20A%5E%7B(2)%7D%7D.%0A"></p>
<p>The second term on the r.h.s., <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D">, is the derivative of the sigmoid activation (<img src="https://latex.codecogs.com/png.latex?A%5E%7B(2)%7D%20=%20%5Csigma(Z%5E%7B(2)%7D)">). The derivative of the sigmoid function is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%5Csigma%7D%7Bdx%7D%20=%20%5Csigma(x)(1-%5Csigma(x)),%0A"></p>
<p>therefore <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D"> is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20=%20A%5E%7B(2)%7D(1%20-%20A%5E%7B(2)%7D).%0A"></p>
<p>For the third term on the r.h.s., <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D">, recall that <img src="https://latex.codecogs.com/png.latex?Z%5E%7B(2)%7D%20=%20A%5E%7B(1)%7D%20W%5E%7B(2)%7D%20+%20b%5E%7B(2)%7D">. Therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%20=%20A%5E%7B(1)%7D.%0A"></p>
<p>Finally, we have</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%5C%5C%0A&amp;=%20%5CBig(-%5Cfrac%7By%7D%7BA%5E%7B(2)%7D%7D%20+%20%5Cfrac%7B1%20-%20y%7D%7B1%20-%20A%5E%7B(2)%7D%7D%5CBig)%20%5Ccdot%20%5Cbig(A%5E%7B(2)%7D(1%20-%20A%5E%7B(2)%7D)%5Cbig)%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D%5Cbig)%5C%5C%0A&amp;=%20(A%5E%7B(2)%7D%20-%20y)%20%5Ccdot%20A%5E%7B(1)%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>As a notational convenience, we define <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20=%20(A%5E%7B(2)%7D%20-%20y).%0A"></p>
<p>This way, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D"> can be expressed as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20A%5E%7B(1)%7D.%0A"></p>
<p>We proceed in a similar fashion for <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%5C%5C%0A&amp;=%20(A%5E%7B(2)%7D%20-%20y),%0A%5Cend%7Balign*%7D%0A"></p>
<p>since <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%20=%201">.</p>
<p>For the first layer we re-use many of these calculations, but for new terms on the r.h.s., we employ the chain rule in the same way. For reference, restate the terms from the forward pass:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AA%5E%7B(0)%7D%20&amp;=%20X%5C%5C%0AZ%5E%7B(1)%7D%20&amp;=%20A%5E%7B(0)%7D%20W%5E%7B(1)%7D%20+%20b%5E%7B(1)%7D%5C%5C%0AA%5E%7B1%7D%20&amp;=%20%5Csigma(Z%5E%7B(1)%7D)%5C%5C%0AZ%5E%7B(2)%7D%20&amp;=%20A%5E%7B(1)%7D%20W%5E%7B(2)%7D%20+%20b%5E%7B(2)%7D%5C%5C%0AA%5E%7B(2)%7D%20&amp;=%20%5Chat%7By%7D%20=%20%5Csigma(Z%5E%7B(2)%7D)%0A%5Cend%7Balign*%7D%0A"></p>
<p>We next consider <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Considering each term on the r.h.s:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20&amp;=%20(A%5E%7B(2)%7D%20-%20y)%5C%5C%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20&amp;=%20W%5E%7B(2)%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20&amp;=%20%5Csigma(Z%5E%7B(1)%7D)%20(1%20-%20%5Csigma(Z%5E%7B(1)%7D))%20=%20A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5C%5C%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%20&amp;=%20A%5E%7B(0)%7D%20=%20X%0A%5Cend%7Balign*%7D%0A"></p>
<p>Resulting in:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%20&amp;=%20(A%5E%7B(2)%7D%20-%20y)%20%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig)%20%5Ccdot%20A%5E%7B(0)%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig)%20%5Ccdot%20A%5E%7B(0)%7D%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>As before, we define <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D"> as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig),%0A"></p>
<p>which allows us to write <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D"> as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20A%5E%7B(0)%7D.%0A"></p>
<p>Similarly for <img src="https://latex.codecogs.com/png.latex?b%5E%7B(1)%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>Considering each term on the r.h.s:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20&amp;=%20(A%5E%7B(2)%7D%20-%20y)%5C%5C%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20&amp;=%20W%5E%7B(2)%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20&amp;=%20%5Csigma(Z%5E%7B(1)%7D)%20(1%20-%20%5Csigma(Z%5E%7B(1)%7D))%20=%20A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5C%5C%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D%20&amp;=%201%0A%5Cend%7Balign*%7D%0A"></p>
<p>Therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D%20&amp;=%20(A%5E%7B(2)%7D%20-%20y)%20%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig)%20%5Ccdot%201%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig)%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>To complete the backpropagation algorithm, it is necessary to define <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20W%5E%7B(2)%7D.%0A"></p>
<p>Assume <img src="https://latex.codecogs.com/png.latex?X"> is a 32x784 batch of MNIST images, and our network has one hidden layer of size 256. Our task is to identify which digit 0-9 a sample most closely resembles. We first declare a number of functions, then implement the forward and backward passes along with weights update.</p>
<div id="b0bf5cc5" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sigmoid(X):</span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute the sigmoid activation for the input.</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>X))</span>
<span id="cb1-10"></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sigmoid_dev(X):</span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The analytical derivative of sigmoid function at X.</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sigmoid(X) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sigmoid(X))</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> softmax(scores):</span>
<span id="cb1-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute softmax scores given the raw output from the model.</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns softmax probabilities (N, num_classes).</span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-24">    numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> scores.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span>
<span id="cb1-25">    denom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numer.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.divide(numer, denom)</span>
<span id="cb1-27"></span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cross_entropy_loss(ypred, yactual):</span>
<span id="cb1-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute Cross-Entropy Loss based on prediction of the network and labels</span></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-33">    yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(yactual)</span>
<span id="cb1-34">    ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ypred[np.arange(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(yactual)), yactual]</span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.mean(np.log(ypred))</span>
<span id="cb1-36"></span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_accuracy(ypred, yactual):</span>
<span id="cb1-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute the accuracy of current batch.</span></span>
<span id="cb1-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-42">    yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(yactual)</span>
<span id="cb1-43">    yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(ypred, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> yhat).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div id="83a0efc0" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stand in for batch of 32 MNIST images. </span></span>
<span id="cb2-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>))</span>
<span id="cb2-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape labels to 32 x 10. </span></span>
<span id="cb2-7">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb2-8">Y[np.arange(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), y] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 10)</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate.</span></span>
<span id="cb2-11">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span> </span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize weights.</span></span>
<span id="cb2-14">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb2-15">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-16">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb2-17">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass.</span></span>
<span id="cb2-20">Z1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 256)</span></span>
<span id="cb2-21">A1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigmoid(Z1)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 256)</span></span>
<span id="cb2-22">Z2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 10)</span></span>
<span id="cb2-23">A2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(Z2)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 10)</span></span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss and accuracy.</span></span>
<span id="cb2-26">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy_loss(A2, y)</span>
<span id="cb2-27">accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_accuracy(A2, y)</span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backward pass.</span></span>
<span id="cb2-30">dZ2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Y                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 10)</span></span>
<span id="cb2-31">dW2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (A1.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dZ2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (256, 10)</span></span>
<span id="cb2-32">db2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dZ2, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (10,)</span></span>
<span id="cb2-33">dA1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dZ2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2.T                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 256)</span></span>
<span id="cb2-34">dZ1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.multiply(dA1, sigmoid_dev(Z1)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 256)</span></span>
<span id="cb2-35">dW1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dZ1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (784, 256)</span></span>
<span id="cb2-36">db1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dZ1, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (256,)</span></span>
<span id="cb2-37"></span>
<span id="cb2-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update weights.</span></span>
<span id="cb2-39">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dW2</span>
<span id="cb2-40">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> db2</span>
<span id="cb2-41">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dW1</span>
<span id="cb2-42">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> db1</span></code></pre></div>
</div>
<p>The code starting with the forward pass would be iterated over a set of batches for a pre-determined number of epochs. The final weights would then be used for inference.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/backprop-python/backprop-python.html</guid>
  <pubDate>Wed, 28 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating scikit-learn Pipelines</title>
  <link>https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines.html</link>
  <description><![CDATA[ 





<p>Within scikit-learn, pipelines allow for the consolidation of all data preprocessing steps along with a final estimator using a single interface. The pipeline object can then be passed into a grid search routine to identify optimal hyperparameters. According to the documentation, the purpose of the pipeline is to assemble several steps that can be cross-validated together while setting different parameters. In this post, we’ll demonstrate how to utilize pipelines to preprocess the adult income data set and fit two classifiers to determine whether a given observation has an income in excess of $50,000 given the set of associated features. We first read in the data and inspect the first few records:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> zip_longest</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.ticker <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MaxNLocator</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sklearn</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.compose <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ColumnTransformer</span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.experimental <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> enable_iterative_imputer</span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.impute <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IterativeImputer</span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb1-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OneHotEncoder, OrdinalEncoder, RobustScaler</span>
<span id="cb1-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb1-20">    accuracy_score, f1_score, precision_score, recall_score, roc_auc_score, </span>
<span id="cb1-21">    confusion_matrix, precision_recall_curve, roc_curve</span>
<span id="cb1-22">    )</span>
<span id="cb1-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomizedSearchCV, train_test_split</span>
<span id="cb1-24"></span>
<span id="cb1-25">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb1-26">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-27">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-28">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb1-29"></span>
<span id="cb1-30">train_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/13d05ace37948cac9583a9ab1f2def31/raw/3dc5bc9e0b573c1039abc20f816321e570aae69c/adult.csv"</span></span>
<span id="cb1-31">dftrain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(train_path)</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dftrain.head())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   age  workclass  fnlwgt     education  educational-num      marital-status         occupation relationship   race  gender  capital-gain  capital-loss  hours-per-week native-country income
0   25    Private  226802          11th                7       Never-married  Machine-op-inspct    Own-child  Black    Male             0             0              40  United-States  &lt;=50K
1   38    Private   89814       HS-grad                9  Married-civ-spouse    Farming-fishing      Husband  White    Male             0             0              50  United-States  &lt;=50K
2   28  Local-gov  336951    Assoc-acdm               12  Married-civ-spouse    Protective-serv      Husband  White    Male             0             0              40  United-States   &gt;50K
3   44    Private  160323  Some-college               10  Married-civ-spouse  Machine-op-inspct      Husband  Black    Male          7688             0              40  United-States   &gt;50K
4   18          ?  103497  Some-college               10       Never-married                  ?    Own-child  White  Female             0             0              30  United-States  &lt;=50K</code></pre>
</div>
</div>
<p>After loading the dataset, the first task is to get an idea of the frequency of different groups within categorical features. In the next cell, a dictionary is created for each categorical feature which remaps groups to ensure a reasonable number of observations in each:</p>
<div id="cell-4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">dworkclass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Federal-gov"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gov"</span>,</span>
<span id="cb3-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Local-gov"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gov"</span>,          </span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Never-worked"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,    </span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Private"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"private"</span>,</span>
<span id="cb3-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Self-emp-inc"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Self-emp-not-inc"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, </span>
<span id="cb3-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"State-gov"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gov"</span>, </span>
<span id="cb3-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Without-pay"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-12">    }</span>
<span id="cb3-13"></span>
<span id="cb3-14">deducation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Preschool"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-hs"</span>,        </span>
<span id="cb3-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1st-4th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-hs"</span>,     </span>
<span id="cb3-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5th-6th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-hs"</span>,  </span>
<span id="cb3-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7th-8th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-hs"</span>,  </span>
<span id="cb3-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs"</span>,         </span>
<span id="cb3-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs"</span>,               </span>
<span id="cb3-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"11th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs"</span>,            </span>
<span id="cb3-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs"</span>,                 </span>
<span id="cb3-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HS-grad"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs-grad"</span>,</span>
<span id="cb3-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prof-school"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-college"</span>,</span>
<span id="cb3-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Some-college"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-college"</span>,</span>
<span id="cb3-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Assoc-acdm"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-college"</span>, </span>
<span id="cb3-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Assoc-voc"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-college"</span>,   </span>
<span id="cb3-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bachelors"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bachelors"</span>,    </span>
<span id="cb3-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Masters"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"masters"</span>,    </span>
<span id="cb3-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Doctorate"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phd"</span>,   </span>
<span id="cb3-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-32">    }</span>
<span id="cb3-33"></span>
<span id="cb3-34">dmarital <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Divorced"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divorced"</span>,  </span>
<span id="cb3-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married-AF-spouse"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>, </span>
<span id="cb3-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married-civ-spouse"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>, </span>
<span id="cb3-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married-spouse-absent"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>, </span>
<span id="cb3-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Never-married"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not-married"</span>, </span>
<span id="cb3-40">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Separated"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divorced"</span>, </span>
<span id="cb3-41">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Widowed"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"widowed"</span>, </span>
<span id="cb3-42">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-43">    }</span>
<span id="cb3-44"></span>
<span id="cb3-45">doccupation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-46">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adm-clerical"</span>:  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clerical"</span>, </span>
<span id="cb3-47">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Armed-Forces"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,          </span>
<span id="cb3-48">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Craft-repair"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repair"</span>,         </span>
<span id="cb3-49">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exec-managerial"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"managerial"</span>,   </span>
<span id="cb3-50">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Farming-fishing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"farming"</span>,     </span>
<span id="cb3-51">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Handlers-cleaners"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cleaners"</span>,  </span>
<span id="cb3-52">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Machine-op-inspct"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repair"</span>,    </span>
<span id="cb3-53">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other-service"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"service"</span>,  </span>
<span id="cb3-54">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Priv-house-serv"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-55">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prof-specialty"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"specialty"</span>,</span>
<span id="cb3-56">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Protective-serv"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-57">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sales"</span>, </span>
<span id="cb3-58">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tech-support"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tech"</span>, </span>
<span id="cb3-59">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Transport-moving"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"moving"</span>,</span>
<span id="cb3-60">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-61">    }</span>
<span id="cb3-62"></span>
<span id="cb3-63">doccupation2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-64">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adm-clerical"</span>:  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, </span>
<span id="cb3-65">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Armed-Forces"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, </span>
<span id="cb3-66">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Craft-repair"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>,  </span>
<span id="cb3-67">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exec-managerial"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb3-68">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Farming-fishing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb3-69">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Handlers-cleaners"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb3-70">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Machine-op-inspct"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb3-71">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other-service"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb3-72">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Priv-house-serv"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, </span>
<span id="cb3-73">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prof-specialty"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, </span>
<span id="cb3-74">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Protective-serv"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>,</span>
<span id="cb3-75">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,  </span>
<span id="cb3-76">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tech-support"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb3-77">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Transport-moving"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>,  </span>
<span id="cb3-78">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-79">    }</span>
<span id="cb3-80"></span>
<span id="cb3-81">drelationship <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-82">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Husband"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"husband"</span>,  </span>
<span id="cb3-83">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not-in-family"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-family"</span>, </span>
<span id="cb3-84">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other-relative"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,  </span>
<span id="cb3-85">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Own-child"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"child"</span>,      </span>
<span id="cb3-86">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unmarried"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unmarried"</span>,  </span>
<span id="cb3-87">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wife"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wife"</span>, </span>
<span id="cb3-88">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-89">    }</span>
<span id="cb3-90"></span>
<span id="cb3-91">drace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-92">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amer-Indian-Eskimo"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eskimo"</span>,</span>
<span id="cb3-93">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asian-Pac-Islander"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"asian"</span>, </span>
<span id="cb3-94">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Black"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, </span>
<span id="cb3-95">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-96">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"White"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb3-97">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-98">    }</span>
<span id="cb3-99"></span>
<span id="cb3-100">dgender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-101">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>,</span>
<span id="cb3-102">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,</span>
<span id="cb3-103">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-104">    }</span></code></pre></div>
</div>
<p>Next we distinguish between categorical and continuous features. Categorical features are re-mapped to align with the groups defined above. For categorical features, we assign null values to a “missing” category instead of relying on an imputation rule. This allows us to check for possible patterns in the missing data later on. <code>capital-gain</code> and <code>capital-loss</code> are converted into binary indicators and <code>native-country</code> into US vs.&nbsp;non-US. Finally, we split the data into training and validation sets ensuring the same proportion of positive instances in each cut:</p>
<div id="cell-6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>,</span>
<span id="cb4-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-gain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-loss"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native-country"</span></span>
<span id="cb4-5">    ]</span>
<span id="cb4-6"></span>
<span id="cb4-7">continuous <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fnlwgt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hours-per-week"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"educational-num"</span></span>
<span id="cb4-9">    ]</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># workclass.</span></span>
<span id="cb4-12">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-13">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dworkclass)</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># marital-status.</span></span>
<span id="cb4-16">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-17">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dmarital)</span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># occupation.</span></span>
<span id="cb4-20">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-21">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(doccupation)</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># relationship.</span></span>
<span id="cb4-24">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-25">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(drelationship)</span>
<span id="cb4-26"></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># race.</span></span>
<span id="cb4-28">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-29">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(drace)</span>
<span id="cb4-30"></span>
<span id="cb4-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sex.</span></span>
<span id="cb4-32">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-33">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dgender)</span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># capital-gain: Convert to binary indicator. </span></span>
<span id="cb4-36">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-gain"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-gain"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-37"></span>
<span id="cb4-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># capital-loss: Convert to binary indicator. </span></span>
<span id="cb4-39">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-loss"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-loss"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-40"></span>
<span id="cb4-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Encode native-country.</span></span>
<span id="cb4-42">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native-country"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native-country"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"US"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"United-States"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>)</span>
<span id="cb4-43"></span>
<span id="cb4-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Encode response.</span></span>
<span id="cb4-45">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;50K"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-46"></span>
<span id="cb4-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create train and validation sets. </span></span>
<span id="cb4-48">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>]</span>
<span id="cb4-49">dft, dfv, yt, yv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(dftrain, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.125</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)</span>
<span id="cb4-50"></span>
<span id="cb4-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dft.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dft<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dfv.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dfv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-53"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"prop. yt : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dft<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"prop. yv : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dfv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dft.shape: (42736, 15)
dfv.shape: (6106, 15)
prop. yt : 0.2393
prop. yv : 0.2393</code></pre>
</div>
</div>
<p>With categorical features re-mapped, it is useful to look at the proportion of positive instances in each group per feature:</p>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-3">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb6-4">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb6-5">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb6-6">    ]</span>
<span id="cb6-7"></span>
<span id="cb6-8">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (ii, jj), col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> zip_longest(indices, categorical):</span>
<span id="cb6-11"></span>
<span id="cb6-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb6-13">        ax[ii, jj].remove()</span>
<span id="cb6-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-15">        gg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain.groupby(col, as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).agg(</span>
<span id="cb6-16">            leq50k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: v[v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].size),</span>
<span id="cb6-17">            gt50k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>)</span>
<span id="cb6-18">            ).sort_values(col, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-19">        </span>
<span id="cb6-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"education-num"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-gain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-loss"</span>]:</span>
<span id="cb6-21">            gg[col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gg[col].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb6-22"></span>
<span id="cb6-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>:</span>
<span id="cb6-24">            rot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb6-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-26">            rot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-27"></span>
<span id="cb6-28">        gg.plot.bar(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[ii, jj])</span>
<span id="cb6-29">        ax[ii, jj].set_title(col, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb6-30">        ax[ii, jj].set_xticklabels(gg[col].values, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rot)</span>
<span id="cb6-31">        ax[ii, jj].yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb6-32">        ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-33">        ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-34">        ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-35">        ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-36">        ax[ii, jj].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-37">        ax[ii, jj].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-38">        ax[ii, jj].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x-small"</span>)</span>
<span id="cb6-39">        ax[ii, jj].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb6-40">        ax[ii, jj].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb6-41"></span>
<span id="cb6-42">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>From the generated plot, we take-away the following:</p>
<ul>
<li><code>education-num</code>: Higher percentage of “&gt;50k” for levels &gt;= 13.</li>
<li><code>maritial-status</code>: Higher proportion of “&gt;50k” for married vs.&nbsp;all other groups.</li>
<li><code>sex</code>: Higher proportion of “&gt;50k” for Males vs.&nbsp;Females.</li>
<li><code>occupation</code>: Higher proportion of “&gt;50k” for managerial and specialty.</li>
</ul>
<p>A similar exhibit for continuous features gives us an idea of the distribution of values in each:</p>
<div id="cell-10" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb7-3"></span>
<span id="cb7-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> zip_longest(indices, continuous):</span>
<span id="cb7-7">    ax[ii].set_title(col, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb7-8">    ax[ii].hist(</span>
<span id="cb7-9">        dft[col], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span>, </span>
<span id="cb7-10">        edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb7-11">        )</span>
<span id="cb7-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#ax[ii].yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter("{x:,.0f}"))</span></span>
<span id="cb7-13">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-14">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-15">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-16">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-17">    ax[ii].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-18">    ax[ii].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax[ii].legend(loc="best", fancybox=True, framealpha=1, fontsize="x-small")</span></span>
<span id="cb7-20">    ax[ii].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb7-21">    ax[ii].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb7-22"></span>
<span id="cb7-23">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We are now in a position to create our pipelines. The first pipeline is created to support a logistic regression classifier. We initialize a <code>ColumnTransformer</code> instance, which gives us the ability to define separate preprocessing steps for different groups of columns (in our case, categorical vs.&nbsp;continuous). As the logistic regression classifier doesn’t support categorical features, we one-hot encode them. In addition, since the logistic regression classifier relies on gradient descent to estimate coefficients, continuous features are scaled using <code>RobustScaler</code> to help with convergence and missing values imputed using <code>IterativeImputer</code>. For the classifier, we use the elasticnet penalty, which is a blend of lasso and ridge penalties. We’ll determine the optimal weighting using grid search.</p>
<div id="cell-12" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LogisticRegression</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data pre-processing for LogisticRegression model.</span></span>
<span id="cb8-4">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression(</span>
<span id="cb8-5">    penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elasticnet"</span>, solver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"saga"</span>, max_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb8-6">    )</span>
<span id="cb8-7">continuous_transformer1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-8">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imputer"</span>, IterativeImputer()),</span>
<span id="cb8-9">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scaler"</span> , RobustScaler())</span>
<span id="cb8-10">    ])</span>
<span id="cb8-11">categorical_transformer1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-12">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"onehot"</span>, OneHotEncoder(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>, sparse_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, handle_unknown<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>))</span>
<span id="cb8-13">    ])</span>
<span id="cb8-14">preprocessor1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnTransformer(transformers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-15">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span> , continuous_transformer1, continuous),  </span>
<span id="cb8-16">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"categorical"</span>, categorical_transformer1, categorical)</span>
<span id="cb8-17">    ], remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span></span>
<span id="cb8-18">    )</span>
<span id="cb8-19">pipeline1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-20">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"preprocessor"</span>, preprocessor1),</span>
<span id="cb8-21">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier"</span>, lr)</span>
<span id="cb8-22">    ]).set_output(transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span>)</span></code></pre></div>
</div>
<p>Notice that <code>set_output</code> is affixed to <code>pipeline1</code> by specifying <code>transform="pandas"</code>. This was added in scikit-learn version 1.2, and allows intermediate and final datasets to be represented as Pandas DataFrames instead of Numpy arrays. I’ve found this to be particularly convenient, especially when inspecting the results of a transformation.</p>
<p>A different set of preprocessing steps is carried out for the HistGradientBoostingClassifier instance, which is functionally equivalent to lightgbm. Since HistGradientBoostingClassifier supports categorical features, it isn’t necessary to one-hot encode: We pass a list of columns that should be treated as nominal categorical features to the <code>categorical_features</code> parameter. Coming out of <code>ColumnTransformer</code>, categorical features are renamed with a leading <code>categorical__</code>, so it is easy to identify which columns to pass. As before, <code>IterativeImputer</code> is used to impute missing continuous values. Within <code>categorical_transformer2</code>, we pass <code>OrdinalEncoder</code> to convert non-numeric categories to integers, which can then be processed by HistGradientBoostingClassifier. Since HistGradientBoostingClassifier doesn’t rely on gradient descent, it isn’t necessary to include <code>RobustScaler</code>in <code>continuous_transformer2</code>.</p>
<div id="cell-14" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HistGradientBoostingClassifier</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data pre-processing for HistGradientBoostingClassifier model. Uses OrdinalEncoder</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instead of OneHotEncoder since categorical features are supported.     </span></span>
<span id="cb9-6">gb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HistGradientBoostingClassifier(</span>
<span id="cb9-7">    categorical_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"categorical__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> categorical]</span>
<span id="cb9-8">    )</span>
<span id="cb9-9">continuous_transformer2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-10">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imputer"</span>, IterativeImputer())</span>
<span id="cb9-11">    ])</span>
<span id="cb9-12">categorical_transformer2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-13">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"encoder"</span>, OrdinalEncoder())</span>
<span id="cb9-14">    ])</span>
<span id="cb9-15">preprocessor2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnTransformer(transformers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-16">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span> , continuous_transformer2, continuous), </span>
<span id="cb9-17">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"categorical"</span>, categorical_transformer2, categorical),</span>
<span id="cb9-18">    ], remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span></span>
<span id="cb9-19">    )</span>
<span id="cb9-20">pipeline2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-21">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"preprocessor"</span>, preprocessor2), </span>
<span id="cb9-22">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier"</span>, gb)</span>
<span id="cb9-23">    ]).set_output(transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span>)</span></code></pre></div>
</div>
<p>Instead og using <code>GridSearchCV</code>, we leverage <code>RandomizedSearchCV</code>. <code>GridSearchCV</code> evaluates a multi-dimensional array of hyperparameters, whereas <code>RandomizedSearchCV</code> samples from a pre-specified distribution a defined number of samples. For our logistic regression classifier, we sample uniformly from [0, 1] for <code>l1_ratio</code> and [0, 10] for the regularization parameter <code>C</code>.</p>
<div id="cell-16" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform</span>
<span id="cb10-3"></span>
<span id="cb10-4">RANDOM_STATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span></span>
<span id="cb10-5">verbosity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb10-6">n_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb10-7">scoring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span></span>
<span id="cb10-8">cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb10-9"></span>
<span id="cb10-10">param_grid1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb10-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__l1_ratio"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb10-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__C"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb10-13">    }</span>
<span id="cb10-14"></span>
<span id="cb10-15">mdl1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomizedSearchCV(</span>
<span id="cb10-16">    pipeline1, param_grid1, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scoring, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cv, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbosity, </span>
<span id="cb10-17">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RANDOM_STATE, n_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_iter</span>
<span id="cb10-18">    )</span>
<span id="cb10-19"></span>
<span id="cb10-20">mdl1.fit(dft.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), yt)</span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">best parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-23"></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get holdout scores for each fold to compare against other model.</span></span>
<span id="cb10-25">best_rank1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmin(mdl1.cv_results_[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rank_test_score"</span>])</span>
<span id="cb10-26">best_mdl_cv_scores1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-27">    mdl1.cv_results_[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"split</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_test_score"</span>][best_rank1] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(cv)</span>
<span id="cb10-28">    ]</span>
<span id="cb10-29"></span>
<span id="cb10-30"></span>
<span id="cb10-31">dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl1.predict_proba(dfv.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-32">dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred1"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-33"></span>
<span id="cb10-34">mdl1_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat1"</span>])</span>
<span id="cb10-35">mdl1_precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat1"</span>])</span>
<span id="cb10-36">mdl1_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recall_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat1"</span>])</span>
<span id="cb10-37"></span>
<span id="cb10-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">mdl1_acc      : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl1_precision: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1_precision<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl1_recall   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1_recall<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fitting 5 folds for each of 3 candidates, totalling 15 fits
[CV 1/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.841 total time=   2.3s
[CV 2/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.840 total time=   1.7s
[CV 3/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.843 total time=   2.6s
[CV 4/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.843 total time=   1.8s
[CV 5/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.850 total time=   1.7s
[CV 1/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.841 total time=   1.6s
[CV 2/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.840 total time=   1.5s
[CV 3/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.843 total time=   3.4s
[CV 4/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.843 total time=   1.6s
[CV 5/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.850 total time=   1.3s
[CV 1/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.841 total time=   1.7s
[CV 2/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.840 total time=   1.7s
[CV 3/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.843 total time=   2.3s
[CV 4/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.843 total time=   1.9s
[CV 5/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.850 total time=   1.7s

best parameters: {'classifier__C': 1.115284252761577, 'classifier__l1_ratio': 0.5667878644753359}

mdl1_acc      : 0.8435964624959057
mdl1_precision: 0.7184801381692574
mdl1_recall   : 0.5694729637234771</code></pre>
</div>
</div>
<p>We proceed analogously for HistGradientBoostingClassifier, but sample from different hyperparameters.</p>
<div id="cell-18" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2">RANDOM_STATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span></span>
<span id="cb12-3">scoring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span></span>
<span id="cb12-4">verbosity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb12-5">n_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb12-6">cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"></span>
<span id="cb12-9">param_grid2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb12-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__max_iter"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>],</span>
<span id="cb12-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__min_samples_leaf"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>],</span>
<span id="cb12-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__l2_regularization"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>),</span>
<span id="cb12-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__learning_rate"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>],</span>
<span id="cb12-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__max_leaf_nodes"</span>: [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>]</span>
<span id="cb12-15">    }</span>
<span id="cb12-16"></span>
<span id="cb12-17">mdl2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomizedSearchCV(</span>
<span id="cb12-18">    pipeline2, param_grid2, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scoring, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cv, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbosity, </span>
<span id="cb12-19">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RANDOM_STATE, n_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_iter</span>
<span id="cb12-20">    )</span>
<span id="cb12-21"></span>
<span id="cb12-22">mdl2.fit(dft.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), yt)</span>
<span id="cb12-23"></span>
<span id="cb12-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">best parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-25"></span>
<span id="cb12-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get holdout scores for each fold to compare against other model.</span></span>
<span id="cb12-27">best_rank2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmin(mdl2.cv_results_[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rank_test_score"</span>])</span>
<span id="cb12-28">best_mdl_cv_scores2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb12-29">    mdl2.cv_results_[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"split</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_test_score"</span>][best_rank2] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(cv)</span>
<span id="cb12-30">    ]</span>
<span id="cb12-31"></span>
<span id="cb12-32">dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred2"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl2.predict_proba(dfv.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-33">dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat2"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred2"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-34"></span>
<span id="cb12-35"></span>
<span id="cb12-36">mdl2_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat2"</span>])</span>
<span id="cb12-37">mdl2_precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat2"</span>])</span>
<span id="cb12-38">mdl2_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recall_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat2"</span>])</span>
<span id="cb12-39"></span>
<span id="cb12-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">mdl2_acc      : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-41"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl2_precision: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2_precision<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl2_recall   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2_recall<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fitting 5 folds for each of 3 candidates, totalling 15 fits
[CV 1/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.846 total time=   1.1s
[CV 2/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.848 total time=   1.5s
[CV 3/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.849 total time=   1.1s
[CV 4/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.849 total time=   0.9s
[CV 5/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.852 total time=   1.0s
[CV 1/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.845 total time=   0.6s
[CV 2/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.846 total time=   0.6s
[CV 3/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.849 total time=   0.6s
[CV 4/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.849 total time=   0.6s
[CV 5/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.854 total time=   0.6s
[CV 1/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.846 total time=   0.4s
[CV 2/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.848 total time=   0.5s
[CV 3/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.852 total time=   0.4s
[CV 4/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.850 total time=   0.4s
[CV 5/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.855 total time=   0.6s

best parameters: {'classifier__l2_regularization': 189.1538419557398, 'classifier__learning_rate': 0.1, 'classifier__max_iter': 100, 'classifier__max_leaf_nodes': 20, 'classifier__min_samples_leaf': 20}

mdl2_acc      : 0.8524402227317392
mdl2_precision: 0.7348993288590604
mdl2_recall   : 0.5995893223819302</code></pre>
</div>
</div>
<p>Notice that <code>mdl1</code> and <code>mdl2</code> expose <code>predict/predict_proba</code> methods, so we can generate predictions using the resulting <code>RandomizedSearchCV</code> object directly, and it will dispatch a call to the estimator associated with the hyperparameters that maximize accuracy.</p>
<p>Precision, recall and accuracy are close for each model. We can check if the difference between models is significant using the approach outlined <a href="https://scikit-learn.org/stable/auto_examples/model_selection/plot_grid_search_stats.html#comparing-two-models-frequentist-approach">here</a>:</p>
<div id="cell-20" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> t</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> corrected_std(differences, n_train, n_test):</span>
<span id="cb14-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Corrects standard deviation using Nadeau and Bengio's approach.</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-8">    kr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(differences)</span>
<span id="cb14-9">    corrected_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.var(differences, ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> kr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_train)</span>
<span id="cb14-10">    corrected_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(corrected_var)</span>
<span id="cb14-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(corrected_std)</span>
<span id="cb14-12"></span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_corrected_ttest(differences, df, n_train, n_test):</span>
<span id="cb14-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Computes right-tailed paired t-test with corrected variance.</span></span>
<span id="cb14-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-18">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(differences)</span>
<span id="cb14-19">    std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> corrected_std(differences, n_train, n_test)</span>
<span id="cb14-20">    t_stat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> std</span>
<span id="cb14-21">    p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.sf(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(t_stat), df)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right-tailed t-test</span></span>
<span id="cb14-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(t_stat, p_val)</span>
<span id="cb14-23"></span>
<span id="cb14-24"></span>
<span id="cb14-25">differences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(best_mdl_cv_scores2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.asarray(best_mdl_cv_scores1)</span>
<span id="cb14-26">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(differences)</span>
<span id="cb14-27">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-28">n_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (dft.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb14-29">n_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dft.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb14-30"></span>
<span id="cb14-31">t_stat, p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_corrected_ttest(differences, df, n_train, n_test)</span>
<span id="cb14-32"></span>
<span id="cb14-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"t-value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t_stat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-34"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"p-value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p_val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>t-value: 5.231
p-value: 0.003</code></pre>
</div>
</div>
<p>At a significance alpha level at p=0.05, the test concludes that HistGradientBoostingClassifier is significantly better than the LogisticRegression model.</p>
<p>Finally, we can overlay the histograms of model predictions by true class:</p>
<div id="cell-22" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">color0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span></span>
<span id="cb16-3">color1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6EA1D5"</span></span>
<span id="cb16-4">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.65</span></span>
<span id="cb16-5">n_bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb16-6"></span>
<span id="cb16-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LogisticRegression.</span></span>
<span id="cb16-10">yy0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[dfv.income<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred1"</span>].values</span>
<span id="cb16-11">yy1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[dfv.income<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred1"</span>].values</span>
<span id="cb16-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(</span>
<span id="cb16-13">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"LogisticRegression  (acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, </span>
<span id="cb16-14">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span></span>
<span id="cb16-15">    )</span>
<span id="cb16-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(</span>
<span id="cb16-17">    yy0, n_bins, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color0, </span>
<span id="cb16-18">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;=50K"</span></span>
<span id="cb16-19">    )</span>
<span id="cb16-20">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(</span>
<span id="cb16-21">    yy1, n_bins, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color1,</span>
<span id="cb16-22">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;50K"</span></span>
<span id="cb16-23">    )</span>
<span id="cb16-24">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-28">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-29">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-30">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_yticklabels([])</span>
<span id="cb16-31">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb16-32">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb16-33">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb16-34"></span>
<span id="cb16-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HistGradientBoostingClassifier.</span></span>
<span id="cb16-36">yy0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[dfv.income<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred2"</span>].values</span>
<span id="cb16-37">yy1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[dfv.income<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred2"</span>].values</span>
<span id="cb16-38">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(</span>
<span id="cb16-39">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HistGradientBoostingClassifier (acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, </span>
<span id="cb16-40">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span></span>
<span id="cb16-41">    )</span>
<span id="cb16-42">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(</span>
<span id="cb16-43">    yy0, n_bins, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color0, </span>
<span id="cb16-44">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;=50K"</span></span>
<span id="cb16-45">    )</span>
<span id="cb16-46">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(</span>
<span id="cb16-47">    yy1, n_bins, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color1,</span>
<span id="cb16-48">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;50K"</span></span>
<span id="cb16-49">    )</span>
<span id="cb16-50">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-51">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-52">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-53">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-54">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-55">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-56">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_yticklabels([])</span>
<span id="cb16-57">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb16-58">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb16-59">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb16-60"></span>
<span id="cb16-61">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines.html</guid>
  <pubDate>Wed, 28 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Shared Data Parallel Processing in Python</title>
  <link>https://www.jtrive.com/posts/shared-parallel-python/shared-parallel-python.html</link>
  <description><![CDATA[ 





<p>The Python multiprocessing library exposes an interface that simplifies distributing tasks to multiple cores. The <code>multiprocessing.Pool</code> class provides access to a pool of worker processes to which jobs can be submitted. It supports asynchronous results with timeouts and callbacks and has a parallel map implementation. Leveraging <code>multiprocessing.Pool</code> is straightforward. To demonstrate, we will solve Project Euler Problem #14 in a distributed fashion. The problem states:</p>
<pre><code>The following iterative sequence is defined for the set of positive integers:

n -&gt;    n/2 (n is even)
n -&gt; 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following sequence:

13 -&gt; 40 -&gt; 20 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1

It can be seen that this sequence (starting at 13 and finishing at 1) contains 
10 terms. Although it has not been proved yet (Collatz Problem), it is thought 
that all starting numbers finish at 1.

Which starting number, under one million, produces the longest chain?

NOTE: Once the chain starts the terms are allowed to go above one million.</code></pre>
<p>To start, we define two functions: <code>collatz_test</code> and <code>chain_length</code>. <code>collatz_test</code> contains the logic that either divides the input by 2 (if even) or multiplies it by 3 and adds 1 (if odd). <code>chain_length</code> returns a tuple consisting of the initial integer along with the length of the collatz chain:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> collatz_test(n):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If n is even, return (n/2), else return (3n+1).</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>((n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-6"></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> chain_length(n):</span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return the length of the collatz chain along</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with the input value n.</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb2-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb2-15">    cntr, tstint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n</span>
<span id="cb2-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> tstint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb2-17">        cntr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-18">        tstint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collatz_test(tstint)</span>
<span id="cb2-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(n, cntr)</span></code></pre></div>
<p>One thing to keep in mind when using the multiprocessing library is that instances of the Pool and Process classes can only be initialized after the <code>if __name__ == "__main__"</code> statement, and as a consequence Pool cannot be called from within an interactive Python session.</p>
<p>Next we present our declarations from earlier along with the distributed logic, which sets up <code>chain_length</code> parallel dispatch:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Parallel solution to Project Euler Problem # 14.</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing</span>
<span id="cb3-5"></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> collatz_test(n):</span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If n is even, return (n/2), else return (3n+1).</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>((n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-12"></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> chain_length(n):</span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return the length of the collatz chain along</span></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with the input value `n`.</span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb3-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-21">    cntr, tstint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n</span>
<span id="cb3-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> tstint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-23">        cntr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-24">        tstint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collatz_test(tstint)</span>
<span id="cb3-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(n, cntr)</span>
<span id="cb3-26"></span>
<span id="cb3-27"></span>
<span id="cb3-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb3-29"></span>
<span id="cb3-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize array of values to test.</span></span>
<span id="cb3-31">    arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiprocessing.Array(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>))</span>
<span id="cb3-32">    pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiprocessing.Pool()</span>
<span id="cb3-33">    all_lengths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pool.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(chain_length, arr, chunksize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb3-34">    pool.close()</span>
<span id="cb3-35">    pool.join()</span>
<span id="cb3-36"></span>
<span id="cb3-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search for longest chain.</span></span>
<span id="cb3-38">    longest_chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>((i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_lengths), key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<p>We first declare our sequence of test values as <code>multiprocessing.Array</code>, which prevents the same 1,000,000 element sequence from being replicated in each process (only an issue on Windows, where there is no fork system call). Instead, the array will be created once, and all processes will have access to it. The “L” typecode is from the array module in the Python Standard Library, which indicates the datatype of the elements contained in the sequence. We initialize the Pool instance, then call its map method, which works similarly to the builtin map function, only in parallel. Within <code>pool.map</code>, We set <code>chunksize=1000</code> due to the following commentary in multiprocessing’s documentation:</p>
<blockquote class="blockquote">
<p>For very long iterables using a large value for chunksize can make the job complete much faster than using the default value of 1.</p>
</blockquote>
<p>Upon execution, we find that 837,799 produces the longest sequence, and it is of length 524. By distributing the tasks to four cores, the script completes in 25 seconds, whereas the sequential implementation requires approx. 55 seconds. This disparity would only grow as the range of evaluation increases from 1M to 5M or 10M.</p>
<p>For more information on the multiprocessing module, be sure to check out the documentation. In addition, the Python Standard Library includes the <code>concurrent.futures</code> module, which exposes an even higher-level interface that facilitates both thread and process-based parallelism via Executor objects.</p>



 ]]></description>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/shared-parallel-python/shared-parallel-python.html</guid>
  <pubDate>Sat, 24 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Finding Roots of Equations in R with uniroot</title>
  <link>https://www.jtrive.com/posts/uniroot-r/uniroot-r.html</link>
  <description><![CDATA[ 





<p>Often times we encounter equations which cannot be solved using direct methods. Such systems of equations are commonly encountered within the context of maximum likelihood estimation, and in such cases, iterative methods can be used to obtain a solution.</p>
<p>Assume a set of observations representing ground-up property losses in dollars:</p>
<pre><code>19999  19974  5051  7179 34416  56840  4420  6558</code></pre>
<p>Our task is to fit a Weibull distribution to the loss data in order to produce a severity curve. The Weibull density is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x;%5Clambda%20,k)%20=%20%5Cfrac%7Bk%7D%7B%5Clambda%7D%5CBig(%5Cfrac%7Bx%7D%7B%5Clambda%7D%5CBig)%5E%7Bk%20-%201%7D%5Cmathrm%7Bexp%7D%5Cbig%5B-(x/%5Clambda)%5Ek%5Cbig%5D,%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?k"> is the shape parameter, <img src="https://latex.codecogs.com/png.latex?k%20%5Cin%20(0,%20+%5Cinfty)."></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Clambda"> is the scale parameter, <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%5Cin%20(0,%20+%5Cinfty)">.</li>
<li><img src="https://latex.codecogs.com/png.latex?x%20%5Cin%20%5B0,%20+%5Cinfty%5D">.</li>
</ul>
<p>The expected value of the Weibull distribution is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%5BX%5D%20=%20%5Clambda%5CGamma(1%20+%201/k),%0A"></p>
<p>and the median is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Bmedian%7D%20=%20F(X%20%5Cleq%20.50)%20=%20%5Clambda(%5Cmathrm%7BLn%7D(2))%5E%7B1/k%7D.%0A"></p>
<p>The variance is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7BVar%7D(X)%20=%20%5Clambda%5E2%5Cbig%5B%5CGamma%5Cbig(1%20+%202/k%5Cbig)%20-%20%5Cbig(%5CGamma(1%20+%201/k)%5Cbig)%5E2%5Cbig%5D.%0A"></p>
<p>In <img src="https://latex.codecogs.com/png.latex?E%5BX%5D">, <img src="https://latex.codecogs.com/png.latex?%5CGamma"> represents the gamma function, a generalization of the factorial expressed as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5CGamma%7B(z)%7D%20=%20%5Cint_%7B0%7D%5E%7B%5Cinfty%7D%20x%5E%7Bz-1%7De%5E%7B-x%7Ddx,%20%5Chspace%7B.50em%7D%20%5Cmathcal%7BR%7D(z)%20%3E%200.%0A"></p>
<p>The fitdistrplus library calculates parameter estimates given data and a hypothesized distribution. The <code>fitdist</code> function takes an optional <code>start</code> parameter, which represents initial parameter values associated with the hypothesized distribution. The Weibull distribution has two parameters that require estimation: <img src="https://latex.codecogs.com/png.latex?k">, the shape parameter and <img src="https://latex.codecogs.com/png.latex?%5Clambda">, the scale parameter. How can we come up with reasonable initial estimates of <img src="https://latex.codecogs.com/png.latex?k"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda">?</p>
<p>First, notice that if the mean is divided by the median, <img src="https://latex.codecogs.com/png.latex?%5Clambda"> cancels, leaving a function of <img src="https://latex.codecogs.com/png.latex?k"> only. By setting what remains to the ratio of the empirical mean to median, the result will be an expression we can use to obtain an initial estimate of <img src="https://latex.codecogs.com/png.latex?k">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7BE%5BX%5D%7D%7B%5Cmathrm%7Bmedian%7D%7D%20=%201.421915%20=%20%5Cfrac%7B%5CGamma(1%20+%201/k)%7D%7B%5Cmathrm%7BLn%7D(2)%5E%7B1/k%7D%7D%0A"></p>
<p>As a consequence of the Gamma function in the right-hand-side numerator, we cannot solve for <img src="https://latex.codecogs.com/png.latex?k"> using direct methods. In R, we use <code>uniroot</code> to estimate roots of univariate functions numerically. In the code that follows, we implement a closure which returns a function which then can be evaluated and <code>k</code>, it’s sole argument, which <code>uniroot</code> will use to zero-in on a solution:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example solving for Weibull shape parameter using uniroot.</span></span>
<span id="cb2-2">lossData <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19999</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19974</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5051</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7179</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34416</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56840</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4420</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6558</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calling shapeFunc returns a function, which can then be used by uniroot to find a solution.</span></span>
<span id="cb2-5">shapeFunc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(v) {</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute ratio of empirical mean to median.</span></span>
<span id="cb2-7">    ratio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(v) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(v)</span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(k) {</span>
<span id="cb2-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>((<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamma</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> k)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> k))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ratio)</span>
<span id="cb2-10">    }</span>
<span id="cb2-11">}</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluate shapeFunc. ff is a function which takes a single argument `k`. </span></span>
<span id="cb2-14">ff <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shapeFunc</span>(lossData)</span></code></pre></div>
<p>The body of <code>shapeFunc</code> is a straightforward implementation of our ratio expression above. The only difference is the expression is set to 0 by subtracting the ratio (1.421915) from both sides. We have our function <code>ff</code> and the interval over which to search for a solution <img src="https://latex.codecogs.com/png.latex?0%20%5Clt%20k%20%5Cleq%20%5Cmathrm%7Bmax%7D(%5Cmathrm%7BlossData%7D))">. The call to <code>uniroot</code> is made below:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">shape <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uniroot</span>(ff, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">interval=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.Machine<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>double.eps, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(lossData)))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>root</span></code></pre></div>
<p>Since <img src="https://latex.codecogs.com/png.latex?k"> is strictly greater than 0, we set the search interval lower bound to <code>.Machine$double.eps</code>, which represents the smallest positive floating-point value <img src="https://latex.codecogs.com/png.latex?x"> such that <img src="https://latex.codecogs.com/png.latex?1%20+%20x%20!=%201">. Our initial estimate for the shape parameter given our data is <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bk%7D%20=%201.018877">. To determine an initial estimate for the scale parameter, we can use the fact that</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clambda%20=%20%5Cfrac%7BE%5BX%5D%7D%7B%5CGamma(1%20+%201%20/%20%5Chat%7Bk%7D)%7D,%0A"></p>
<p>resulting in <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Clambda%7D%20=%2019454.27">.</p>
<section id="obtaining-maximum-likelihood-estimates" class="level3">
<h3 class="anchored" data-anchor-id="obtaining-maximum-likelihood-estimates">Obtaining Maximum Likelihood Estimates</h3>
<p>With our hypothesized distribution and initial parameters, obtaining maximum likelihood estimates is straightforward. The initial parameter estimation code is included again for convenience:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Computing maximum likelihood estimates using fitdistrplus.</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fitdistplus"</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4">lossData <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19999</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19974</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5051</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7179</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34416</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56840</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4420</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6558</span>)</span>
<span id="cb4-5"></span>
<span id="cb4-6">shapeFunc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(v) {</span>
<span id="cb4-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute ratio of empirical mean to median.</span></span>
<span id="cb4-8">    ratio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(v) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(v)</span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(k) {</span>
<span id="cb4-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>((<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamma</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> k)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> k))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ratio)</span>
<span id="cb4-11">    }</span>
<span id="cb4-12">}</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluate shapeFunc. ff is a function which takes a single argument `k`. </span></span>
<span id="cb4-15">ff <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shapeFunc</span>(lossData)</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial shape parameter estimate.</span></span>
<span id="cb4-18">shape0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uniroot</span>(ff, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">interval=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.Machine<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>double.eps, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(lossData)))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>root</span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial scale parameter estimate.</span></span>
<span id="cb4-21">scale0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(lossData) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gamma</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> shape0))</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Obtain mle parameter estimates.</span></span>
<span id="cb4-24">mleFit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fitdistrplus<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fitdist</span>(</span>
<span id="cb4-25">    lossData, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">distr=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weibull"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mle"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape=</span>shape0, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale=</span>scale0)</span>
<span id="cb4-26">    )</span></code></pre></div>
<p>Accessing <code>mleFit</code>’s <code>estimate</code> attribute, parameter estimates are:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> mleFit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>estimate</span>
<span id="cb5-2">        shape        scale </span>
<span id="cb5-3">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.177033</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20525.761478</span> </span></code></pre></div>
<p>Which is close to our initial starting parameter estimates.</p>


</section>

 ]]></description>
  <category>Statistical Modeling</category>
  <category>R</category>
  <guid>https://www.jtrive.com/posts/uniroot-r/uniroot-r.html</guid>
  <pubDate>Sat, 24 Feb 2024 06:00:00 GMT</pubDate>
</item>
</channel>
</rss>
