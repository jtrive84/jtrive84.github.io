<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>The Pleasure of Finding Things Out: A blog by James Triveri</title>
<link>https://www.jtrive.com/#category=Machine%20Learning</link>
<atom:link href="https://www.jtrive.com/index-machine learning.xml" rel="self" type="application/rss+xml"/>
<description>A technical blog by James Triveri&quot;</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Sun, 28 Apr 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>Hyperparameter Search and Classifier Threshold Selection</title>
  <link>https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding.html</link>
  <description><![CDATA[ 





<p>The following notebook demonstrates how to use <code>GridSearchCV</code> to identify optimal hyperparameters for a given model and metric, and alternatives for selecting a classifier threshold in scikit-learn.</p>
<p>First we load the breast cancer dataset. We will forgo any pre-processing, but create separate train and validation sets:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_breast_cancer</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-8"></span>
<span id="cb1-9">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-10">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-11">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-12">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_breast_cancer()</span>
<span id="cb1-15">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>]</span>
<span id="cb1-16">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create train, validation and test splits. </span></span>
<span id="cb1-20">Xtrain, Xvalid, ytrain, yvalid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.20</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Xtrain.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Xtrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Xvalid.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Xvalid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Xtrain.shape: (455, 30)
Xvalid.shape: (114, 30)</code></pre>
</div>
</div>
<section id="hyperparameter-search" class="level2">
<h2 class="anchored" data-anchor-id="hyperparameter-search">Hyperparameter Search</h2>
<p>A random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting (see documentation <a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#sklearn-ensemble-randomforestclassifier">here</a>).</p>
<p>The <code>RandomForestClassifier</code> takes a number of hyperparameters. It can be difficult to determine which values to set these to manually, so instead we can perform a cross-validated grid search over a number of candidate values to determine which hyperparmeter combination is best for our data and specified metric. <code>GridSearchCV</code>is part of scikit-learn, and is a method used to find the best possible configuration of hyperparameters for optimal performance. It works as follows:</p>
<ol type="1">
<li><p><strong>Define a parameter grid</strong>: The grid is a dictionary that maps parameter names to the values that should be tested. These parameters are specific to the model you are working to optimize.</p></li>
<li><p><strong>Specify a model</strong>: Choose a model that you want to optimize using <code>GridSearchCV</code>. This model is not trained yet; it’s just passed in with it’s default parameters.</p></li>
<li><p><strong>Cross-validation setup</strong>: <code>GridSearchCV</code> uses cross-validation to evaluate each combination of parameter values provided in the grid. You need to specify the number of folds (splits) for the cross-validation process (this is the <code>cv</code> parameter). Common choices are 5 or 10 folds, depending on the size of your dataset and how thorough you want the search to be.</p></li>
<li><p><strong>Search Execution</strong>: With the parameter grid, model, and cross-validation setup, <code>GridSearchCV</code> systematically works through multiple combinations of parameter sets, cross-validating as it goes to determine which configuration gives the best performance based on a score function. The performance is often measured using metrics like accuracy, precision or recall for classification problems or mean squared error for regression problems.</p></li>
<li><p><strong>Results:</strong> Finally, <code>GridSearchCV</code> provides the best parameters, allowing you to understand which parameters work best for your model. Additionally, it can provide other results like the score for each parameter combination, allowing for deeper analysis of how different parameter values impact model performance.</p></li>
</ol>
<p><br></p>
<p>The documentation for <code>GridSearchCV</code> is available <a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html#sklearn.model_selection.GridSearchCV">here</a>.</p>
<p><br></p>
<p>In the next cell, we assess the following <code>RandomForestClassifier</code> hyperparameters:</p>
<ul>
<li><code>n_estimators</code>: [100, 150, 250]</li>
<li><code>min_samples_leaf</code>: [2, 3, 4]</li>
<li><code>ccp_alpha</code>: [0, .1, .2, .3]</li>
</ul>
<p>For the metric, recall is used since the cost of a false negative is high (not detecting breast cancer). This means the hyperparameter combination with the maximum average recall over the k-folds will be selected as the best parameter set.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Example using GridSearchCV to identify optimal hyperparameters w.r.t. recall.</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Note that within GridSearchCV, cv represents the number of folds for </span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">k-Fold cross validation.</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GridSearchCV</span>
<span id="cb3-8"></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create parameter grid as dictionary.</span></span>
<span id="cb3-11">param_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_estimators"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>],</span>
<span id="cb3-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min_samples_leaf"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb3-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ccp_alpha"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span>]</span>
<span id="cb3-15">    }</span>
<span id="cb3-16"></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pass model and param_grid into GridSearchCV.</span></span>
<span id="cb3-19">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GridSearchCV(</span>
<span id="cb3-20">    RandomForestClassifier(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>), </span>
<span id="cb3-21">    param_grid, </span>
<span id="cb3-22">    scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"recall"</span>, </span>
<span id="cb3-23">    cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb3-24">    )</span>
<span id="cb3-25">    </span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit model on training set. This can take a while depending on the number of </span></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hyperparameter combinations in param_grid.</span></span>
<span id="cb3-28">mdl.fit(Xtrain, ytrain)</span>
<span id="cb3-29"></span>
<span id="cb3-30"></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print optimal parameters.</span></span>
<span id="cb3-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"best parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-33"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>best parameters: {'ccp_alpha': 0, 'min_samples_leaf': 4, 'n_estimators': 100}</code></pre>
</div>
</div>
<p><br></p>
<p>For random forests, boosting models and other tree-based ensemble methods, we can obtain a summary of the relative importance of each of the input features. This is available in the <code>mdl.best_estimator_.feature_importances_</code> attribute. We can plot feature importances in decreasing order as follows:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2">imp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.best_estimator_.feature_importances_</span>
<span id="cb5-3"></span>
<span id="cb5-4">rf_imp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(imp, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature_names"</span>]).sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-7">rf_imp.plot.bar(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb5-8">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomForestClassifier feature importances"</span>)</span>
<span id="cb5-9">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean decrease in impurity"</span>)</span>
<span id="cb5-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>In terms of mean decrease in impurity, the top 7 features are assigned the highest importance, with the remaining features deemed not as relevant. For more information on how feature importance is calculated, see <a href="https://scikit-learn.org/stable/auto_examples/ensemble/plot_forest_importances.html">here</a>.</p>
<p><br></p>
<p>The resulting <code>mdl</code> object can be used to make predictions on the validation set (<code>mdl</code> exposes the <code>RandomForestClassifier</code> with optimal hyperparameters set). We use <code>mdl.predict_proba</code> to get probabilities on [0, 1], with values closer to 1 representing positive predicted instances of breast cancer on the validation set:</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict_proba(Xvalid)[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb6-3"></span>
<span id="cb6-4">ypred</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([0.005     , 0.82743637, 0.97088095, 0.        , 0.        , 1.        , 0.98020202, 0.67380556, 0.        , 0.99333333, 0.9975    , 0.30048576, 0.9528113 , 0.99666667, 0.04102381, 0.99444444, 1.        , 0.828226  , 0.        , 0.        , 0.97916667, 1.        , 0.99607143, 0.90425163, 0.        , 0.02844156, 0.99333333, 0.98183333, 0.9975    , 0.08869769, 0.97369841, 0.        , 1.        , 0.71100866, 0.96022727, 0.        , 0.71200885, 0.06103175, 0.005     , 0.99490476, 0.1644127 , 0.        , 0.23646934, 1.        , 0.57680164, 0.64901715, 0.9975    , 0.61790818, 0.95509668, 0.99383333, 0.04570455, 0.97575758, 1.        , 0.47115815, 0.92422619, 0.77371415, 0.        , 1.        , 0.26198657, 0.        , 0.28206638, 0.95216162, 0.98761905, 0.99464286, 0.98704762, 0.85579351, 0.10036905, 0.00222222, 0.98011905, 0.99857143, 0.92285967, 0.95180556, 0.97546947, 0.84433189, 0.005     , 0.99833333, 0.83616339, 1.        , 0.9955    , 1.        , 0.99833333, 1.        ,
       0.86399315, 0.9807381 , 0.        , 0.99833333, 0.9975    , 0.        , 0.98733333, 0.96822727, 0.23980827, 0.7914127 , 0.        , 0.98133333, 1.        , 1.        , 0.89251019, 0.9498226 , 0.18943254, 0.83494391, 0.9975    , 1.        , 0.77079113, 0.99722222, 0.30208297, 1.        , 0.92111977, 0.99428571, 0.91936508, 0.47118074, 0.98467172, 0.006     , 0.05750305, 0.96954978])</code></pre>
</div>
</div>
<p>Note that scikit-learn <code>predict_proba</code> outputs an nx2 dimensional array, where the first column represents the probability of class 0 and the second column the probability of class 1 (has breast cancer). Each row will sum to 1. We will work with the probabilities of the class we’re interested in analyzing, so we extract only the values from the positive class (the second column), that’s why we call <code>mdl.predict_proba(Xvalid)[:,1]</code>.</p>
<p><br></p>
<section id="threshold-selection" class="level3">
<h3 class="anchored" data-anchor-id="threshold-selection">Threshold Selection</h3>
<p>In order to master machine learning, it is necessary to learn a variety of minor concepts that underpin these systems. One such concept is setting the optimal classification threshold.</p>
<p>By default, for probabilistic classifiers scikit-learn uses a threshold of .50 to distinguish between positive and negative class instances. The predicted classes are obtained by calling <code>mdl.predict</code>. Here’s a side by side comparison of the model predicted probabilities and predicted classes:</p>
<div id="cell-12" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted probabilities.</span></span>
<span id="cb8-3">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict_proba(Xvalid)[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted classes.</span></span>
<span id="cb8-7">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict(Xvalid).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine probabilities and predicted class labels.</span></span>
<span id="cb8-11">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate([ypred, yhat], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-12"></span>
<span id="cb8-13">preds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([[0.005     , 0.        ],
       [0.82743637, 1.        ],
       [0.97088095, 1.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [1.        , 1.        ],
       [0.98020202, 1.        ],
       [0.67380556, 1.        ],
       [0.        , 0.        ],
       [0.99333333, 1.        ],
       [0.9975    , 1.        ],
       [0.30048576, 0.        ],
       [0.9528113 , 1.        ],
       [0.99666667, 1.        ],
       [0.04102381, 0.        ],
       [0.99444444, 1.        ],
       [1.        , 1.        ],
       [0.828226  , 1.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.97916667, 1.        ],
       [1.        , 1.        ],
       [0.99607143, 1.        ],
       [0.90425163, 1.        ],
       [0.        , 0.        ],
       [0.02844156, 0.        ],
       [0.99333333, 1.        ],
       [0.98183333, 1.        ],
       [0.9975    , 1.        ],
       [0.08869769, 0.        ],
       [0.97369841, 1.        ],
       [0.        , 0.        ],
       [1.        , 1.        ],
       [0.71100866, 1.        ],
       [0.96022727, 1.        ],
       [0.        , 0.        ],
       [0.71200885, 1.        ],
       [0.06103175, 0.        ],
       [0.005     , 0.        ],
       [0.99490476, 1.        ],
       [0.1644127 , 0.        ],
       [0.        , 0.        ],
       [0.23646934, 0.        ],
       [1.        , 1.        ],
       [0.57680164, 1.        ],
       [0.64901715, 1.        ],
       [0.9975    , 1.        ],
       [0.61790818, 1.        ],
       [0.95509668, 1.        ],
       [0.99383333, 1.        ],
       [0.04570455, 0.        ],
       [0.97575758, 1.        ],
       [1.        , 1.        ],
       [0.47115815, 0.        ],
       [0.92422619, 1.        ],
       [0.77371415, 1.        ],
       [0.        , 0.        ],
       [1.        , 1.        ],
       [0.26198657, 0.        ],
       [0.        , 0.        ],
       [0.28206638, 0.        ],
       [0.95216162, 1.        ],
       [0.98761905, 1.        ],
       [0.99464286, 1.        ],
       [0.98704762, 1.        ],
       [0.85579351, 1.        ],
       [0.10036905, 0.        ],
       [0.00222222, 0.        ],
       [0.98011905, 1.        ],
       [0.99857143, 1.        ],
       [0.92285967, 1.        ],
       [0.95180556, 1.        ],
       [0.97546947, 1.        ],
       [0.84433189, 1.        ],
       [0.005     , 0.        ],
       [0.99833333, 1.        ],
       [0.83616339, 1.        ],
       [1.        , 1.        ],
       [0.9955    , 1.        ],
       [1.        , 1.        ],
       [0.99833333, 1.        ],
       [1.        , 1.        ],
       [0.86399315, 1.        ],
       [0.9807381 , 1.        ],
       [0.        , 0.        ],
       [0.99833333, 1.        ],
       [0.9975    , 1.        ],
       [0.        , 0.        ],
       [0.98733333, 1.        ],
       [0.96822727, 1.        ],
       [0.23980827, 0.        ],
       [0.7914127 , 1.        ],
       [0.        , 0.        ],
       [0.98133333, 1.        ],
       [1.        , 1.        ],
       [1.        , 1.        ],
       [0.89251019, 1.        ],
       [0.9498226 , 1.        ],
       [0.18943254, 0.        ],
       [0.83494391, 1.        ],
       [0.9975    , 1.        ],
       [1.        , 1.        ],
       [0.77079113, 1.        ],
       [0.99722222, 1.        ],
       [0.30208297, 0.        ],
       [1.        , 1.        ],
       [0.92111977, 1.        ],
       [0.99428571, 1.        ],
       [0.91936508, 1.        ],
       [0.47118074, 0.        ],
       [0.98467172, 1.        ],
       [0.006     , 0.        ],
       [0.05750305, 0.        ],
       [0.96954978, 1.        ]])</code></pre>
</div>
</div>
<p>Notice that when the probability is less that 0.50, the predicted class is 0. When the predicted probability is greater than 0.50, the predicted class is 1. For certain applications, the 0.50 threshold might make sense, for example when your target is balanced or close to balanced (when the number of 0s and 1s in the training set is approximately equal). But for unbalanced datasets, using the default threshold can give misleading results. In what follows, we walkthrough a few approaches that can be used to assess the optimal discrimination theshold for a classifier.</p>
</section>
<section id="use-0.50" class="level3">
<h3 class="anchored" data-anchor-id="use-0.50">1. Use 0.50</h3>
<p>The first approach is the most straightforward: Just use the default scikit-learn threshold of .50. This makes sense when your classes are balanced, but will give misleading results when classes are imbalanced.</p>
<p><br></p>
</section>
<section id="use-1---the-proportion-of-positive-instances-in-the-training-data" class="level3">
<h3 class="anchored" data-anchor-id="use-1---the-proportion-of-positive-instances-in-the-training-data">2. Use 1 - the proportion of positive instances in the training data</h3>
<p>If we look at the number of positives (1s) vs.&nbsp;total samples in our training set, we have:</p>
<div id="cell-16" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Proportion of positives in training set: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ytrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ytrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Proportion of positives in training set: 0.62</code></pre>
</div>
</div>
<p>We see that 62% of the samples belong to class 1. This is usually not the case. In many classification scenarios, we’re dealing with 10%, 5% or even less than 1% of samples belonging to the positive class.</p>
<p>To illustrate the approach, since 62% percent of the observations belong to the positive class, we would use a threshold of <strong>1 - .62 = .38</strong>. The predicted class labels are then created using the following code:</p>
<div id="cell-18" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating predicted classes based on adjusted classifier threshold. </span></span>
<span id="cb12-3">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.38</span></span>
<span id="cb12-4"></span>
<span id="cb12-5">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thresh, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Now any sample with a predicted probability less than or equal to .38 will be assigned to class 0, and samples with predicted probability greater than .38 are assigned to the positive class.</p>
<p>If we’re dealing with a highly imbalanced dataset with only 1% positive instances, we would use <strong>1 - .01 = .99</strong> as the threshold using this method.</p>
<p><br></p>
</section>
<section id="use-best-f1-score" class="level3">
<h3 class="anchored" data-anchor-id="use-best-f1-score">3. Use best f1-score</h3>
<p>The f1-score is the geometric average of precision and recall. We can compute precision and recall for a number of different thresholds then select the threshold that maximizes the f1-score. This is a suitable approach if your classification task weighs precision and recall equally. Although this isn’t the case for our breast cancer classifier (we want to maximize recall since the cost of a false negative is high), the approach is demonstrated in the next cell:</p>
<div id="cell-20" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> precision_recall_curve</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get precision and recall for various thresholds.</span></span>
<span id="cb13-5">p, r, thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(yvalid, ypred)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute f1-score for each threshold.</span></span>
<span id="cb13-8">f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify threshold that maximizes f1-score.</span></span>
<span id="cb13-11">best_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thresh[np.argmax(f1)]</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Threshold using optimal f1-score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>best_thresh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Threshold using optimal f1-score: 0.471.</code></pre>
</div>
</div>
<p>Using this method, we would set the discrimination threshold to <strong>.471</strong>, and would obtain the predicted class labels the same way as before:</p>
<div id="cell-22" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.471</span></span>
<span id="cb15-3"></span>
<span id="cb15-4">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thresh, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p><br></p>
</section>
<section id="inspection-of-roc-curve" class="level3">
<h3 class="anchored" data-anchor-id="inspection-of-roc-curve">4. Inspection of ROC curve</h3>
<p>The Receiver Operating Characteristic (ROC) curve plots the true positive rate (TPR) against the false positive rate (FPR) at various classification thresholds. Typically we’re interested in using a threshold that maximizes TPR while minimizing FPR, which is the point (0, 1). The curve starts with a threshold of 1 at the far left and decreases towards 0 as the x-axis increases.</p>
<p>We can plot the ROC curve in scikit-learn using the code below. Note that <code>ypred</code> are predicted probabilities and <code>yvalid</code> are class labels (1s or 0s).</p>
<div id="cell-24" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RocCurveDisplay</span>
<span id="cb16-3"></span>
<span id="cb16-4">roc_disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RocCurveDisplay.from_predictions(</span>
<span id="cb16-5">    yvalid, ypred, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomForestClassifier"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#191964"</span></span>
<span id="cb16-6">    )</span>
<span id="cb16-7">roc_disp.ax_.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ROC curve"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb16-8">roc_disp.ax_.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Using approach 4, the optimal threshold would be somewhere between .70-.80, which is much higher than what is indicated using the other methods so far. Ultimately it is up to you to determine which threshold makes the most sense, but intuitively, a threshold of .70-.80 seems too high when the prevalence of the positive class in the training data is 62%.</p>
<p><br></p>
</section>
<section id="inspection-of-the-precision-recall-curve" class="level3">
<h3 class="anchored" data-anchor-id="inspection-of-the-precision-recall-curve">5. Inspection of the precision-recall curve</h3>
<p>The precision-recall curve is a graphical representation used in binary classification to evaluate the performance of a classification model at different probability thresholds. This curve shows the trade-off between precision and recall for a number of different thresholds. The curve plots recall on the x-axis and precision on the y-axis.</p>
<p>The curve starts from the rightmost part of the graph. As the threshold for classifying positive instances decreases, recall increases, and precision can either increase or decrease, but typically it decreases because the model starts to classify more instances as positive, including both true positives and false positives.</p>
<p>The top-right corner of the graph (high precision, high recall) represents the ideal point, where the classifier perfectly identifies all positive cases with no false positives. Generally, we’d like to select a threshold that corresponds to a point closest to top-right corner of the graph.</p>
<p>We can plot the precision-recall curve in scikit-learn using the code below. Note that <code>ypred</code> are predicted probabilities and <code>yvalid</code> are class labels (1s or 0s).</p>
<div id="cell-27" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PrecisionRecallDisplay</span>
<span id="cb17-3"></span>
<span id="cb17-4">pr_disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PrecisionRecallDisplay.from_predictions(</span>
<span id="cb17-5">    yvalid, ypred, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomForestClassifier"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#CD0066"</span></span>
<span id="cb17-6">    )</span>
<span id="cb17-7">pr_disp.ax_.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Precision-Recall curve"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb17-8">pr_disp.ax_.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb17-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Based on the plot, would want to select the threshold that corresponds to a recall of about .95, since this is close to the point (1, 1). This can be determined using the following code:</p>
<div id="cell-29" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> precision_recall_curve</span>
<span id="cb18-3"></span>
<span id="cb18-4">p, r, thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(yvalid, ypred)</span>
<span id="cb18-5"></span>
<span id="cb18-6">best_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thresh[np.where(r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Selected threshold using precision-recall curve: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>best_thresh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Selected threshold using precision-recall curve: 0.674.</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="inspection-of-precision-and-recall-as-a-function-of-threshold" class="level3">
<h3 class="anchored" data-anchor-id="inspection-of-precision-and-recall-as-a-function-of-threshold">6. Inspection of precision and recall as a function of threshold</h3>
<p>It is also possible to plot precision and recall as two separate series against threshold on the x-axis. The goal is to identify a point where precision and recall intersect. Using this approach may be suitable in some scenarios.</p>
<div id="cell-31" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> precision_recall_curve</span>
<span id="cb20-3"></span>
<span id="cb20-4">p, r, thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(yvalid, ypred)</span>
<span id="cb20-5">p, r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], r[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb20-6"></span>
<span id="cb20-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-8">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"precision &amp; recall vs. threshold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb20-9">ax.plot(thresh, p, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"precision"</span>)</span>
<span id="cb20-10">ax.plot(thresh, r, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"recall"</span>)</span>
<span id="cb20-11">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"threshold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb20-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax.set_xticks(np.arange(tmax+1))</span></span>
<span id="cb20-13">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb20-14">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb20-15">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb20-16">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb20-17">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-18">ax.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb20-19"></span>
<span id="cb20-20">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The precision and recall series intersect right after .60, therefore method #5 would set the threshold to roughly .60.</p>
<p><br></p>
</section>
<section id="assessing-a-classifier" class="level3">
<h3 class="anchored" data-anchor-id="assessing-a-classifier">Assessing a Classifier</h3>
<p>Once a threshold has been selected, the predictive power of the classifier can be assessed. To do this, we will look at the confusion matrix as well as the <code>sklearn.metrics.classification_report</code>. Note that both diagnostics require actual and predicted labels. Once we’ve settled on a threshold, model assessment is performed comparing actual vs.&nbsp;predicted labels. In what follows, the 0.471 threshold obtained from method #3 will be used as the classification threshold.</p>
<p>Technically, once we’ve decided on a threshold, we should then assess the performance of the model on a separate test set. However, for the purposes of demonstration, we are going to re-use the validation set.</p>
<p>We start by creating the confusion matrix:</p>
<div id="cell-33" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"></span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ConfusionMatrixDisplay</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine predicted classes using the .471 threshold.</span></span>
<span id="cb21-5">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.471</span></span>
<span id="cb21-6">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thresh, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-7"></span>
<span id="cb21-8">cm_disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfusionMatrixDisplay.from_predictions(yvalid, yhat, colorbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb21-9">cm_disp.ax_.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mm confusion matrix (thresh=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>thresh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb21-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The output indicates:</p>
<ul>
<li>There are 76 True Positives (TP).</li>
<li>There are 34 True Negatives (TN).</li>
<li>There are 4 False Positives (FP).</li>
<li>There are 0 False Negatives (FN).</li>
</ul>
<p><br></p>
<p>Next we inspect the classification report. This also takes actual and predicted labels, and returns a summary of common classifier metrics:</p>
<div id="cell-35" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"></span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(classification_report(yvalid, yhat))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              precision    recall  f1-score   support

           0       1.00      0.89      0.94        38
           1       0.95      1.00      0.97        76

    accuracy                           0.96       114
   macro avg       0.97      0.95      0.96       114
weighted avg       0.97      0.96      0.96       114
</code></pre>
</div>
</div>
<p>Overall this is very good performance.</p>


</section>
</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding.html</guid>
  <pubDate>Sun, 28 Apr 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Using the Singular Value Decomposition for Image Compression</title>
  <link>https://www.jtrive.com/posts/svd-image-compression/svd-image-compression.html</link>
  <description><![CDATA[ 





<p>The Singular Value Decomposition (SVD) is a mathematical technique used in linear algebra to decompose a matrix into three other matrices. Specifically, for any <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> matrix <img src="https://latex.codecogs.com/png.latex?X">, the SVD is a factorization of the form</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AX%20=%20U%20%5CSigma%20V%5E%7B*%7D,%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?X"> is <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20m">.</li>
<li><img src="https://latex.codecogs.com/png.latex?U"> is <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> (unitary with orthonormal columns; columns = <em>left signular vectors</em>).</li>
<li><img src="https://latex.codecogs.com/png.latex?V"> is <img src="https://latex.codecogs.com/png.latex?m%20%5Ctimes%20m"> (unitary with orthonormal columns; columns = <em>right signular vectors</em>).</li>
<li><img src="https://latex.codecogs.com/png.latex?%5CSigma"> is <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> with real non-negative entries along the diagonal (<em>singular values</em>). The singular values are the square roots of the eigenvalues of <img src="https://latex.codecogs.com/png.latex?A%5E%7BT%7DA"> or <img src="https://latex.codecogs.com/png.latex?AA%5E%7BT%7D">.</li>
<li>When <img src="https://latex.codecogs.com/png.latex?n%20%5Cgeq%20m">, <img src="https://latex.codecogs.com/png.latex?%5CSigma"> has at most <img src="https://latex.codecogs.com/png.latex?m"> non-zero elements on the diagonal.</li>
<li>Rank of <img src="https://latex.codecogs.com/png.latex?X"> = number of non-zero singular values.</li>
</ul>
<p><strong>In numpy:</strong></p>
<ul>
<li>The rows of <img src="https://latex.codecogs.com/png.latex?V%5E%7BT%7D"> represent the eigenvectors of <img src="https://latex.codecogs.com/png.latex?X%5E%7BT%7DX">.</li>
<li>The columns of <img src="https://latex.codecogs.com/png.latex?U"> represent the eigenvectors of <img src="https://latex.codecogs.com/png.latex?XX%5E%7BT%7D">.</li>
<li>The eigenvalues are <img src="https://latex.codecogs.com/png.latex?%5CSigma%5E%7B2%7D">.</li>
</ul>
<p><br></p>
<p>The SVD provides a systematic way to determine a low-dimensional approximation to high-dimensional data in terms of dominant patterns. This technique is data-driven in that patterns are discovered purely from data, without the addition of expert knowledge or intuition.</p>
<p>If <img src="https://latex.codecogs.com/png.latex?X"> is self-adjoint, (<img src="https://latex.codecogs.com/png.latex?X%20=%20X%5E%7B*%7D">), then the singular values of <img src="https://latex.codecogs.com/png.latex?X"> are equal to the absolute values of the eigenvalues of <img src="https://latex.codecogs.com/png.latex?X">. In Numpy, we compute the SVD as follows:</p>
<div id="cd0b94d7-62f8-4321-9b34-57ff2f4cf24f" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-5">U, S, Vt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(X, full_matrices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-6">Uhat, Shat, Vhatt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(X, full_matrices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">full_matrices=True:"</span>)</span>
<span id="cb1-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"U.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>U<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"S.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>S<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Vt.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Vt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">full_matrices=False:"</span>)</span>
<span id="cb1-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Uhat.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Uhat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Shat.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Shat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Vhatt.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Vhatt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">S:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>S<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Shat:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Shat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
full_matrices=True:
U.shape: (5, 5).
S.shape: (3,).
Vt.shape: (3, 3).

full_matrices=False:
Uhat.shape: (5, 3).
Shat.shape: (3,).
Vhatt.shape: (3, 3).

S:
[2.13628638 0.91901978 0.39330927].

Shat:
[2.13628638 0.91901978 0.39330927].
</code></pre>
</div>
</div>
<section id="matrix-approximation" class="level3">
<h3 class="anchored" data-anchor-id="matrix-approximation">Matrix Approximation</h3>
<p>Perhaps the most useful and defining property of the SVD is that it provides an optimal low-rank approximation to a matrix <img src="https://latex.codecogs.com/png.latex?X">. The Eckhart-Young theorem states that the optimal rank-<img src="https://latex.codecogs.com/png.latex?r"> approximation to <img src="https://latex.codecogs.com/png.latex?X"> in a least-squares sense is given by the rank-<img src="https://latex.codecogs.com/png.latex?r"> SVD truncation <img src="https://latex.codecogs.com/png.latex?%5Ctilde%20X">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7B%5Ctilde%20X,%20%5Chspace%7B.25em%7D%20%5Cmathrm%7Bs.t.%7D%20%5Chspace%7B.25em%7D%5Cmathrm%7Brank%7D(%5Ctilde%20X)=r%7D%7B%5Cmathrm%7Bargmin%7D%7D%20%7C%7C%20X%20-%20%5Ctilde%20X%7C%7C_%7BF%7D%20=%20%5Ctilde%20U%20%5Ctilde%20%5CSigma%20%5Ctilde%20V%5E%7B*%7D,%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctilde%20U,%20%5Ctilde%20V"> represent the first <img src="https://latex.codecogs.com/png.latex?r"> leading columns of <img src="https://latex.codecogs.com/png.latex?U,%20V">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctilde%20%5CSigma"> represents the leading <img src="https://latex.codecogs.com/png.latex?r%20%5Ctimes%20r"> sub-block of <img src="https://latex.codecogs.com/png.latex?%5CSigma">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%7C%7C%5Ccdot%7C%7C_%7BF%7D"> represents the Frobenius norm.</li>
</ul>
<p><br></p>
<p>Because <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is diagonal, the rank-<img src="https://latex.codecogs.com/png.latex?r"> SVD approximation is given by the sum of <img src="https://latex.codecogs.com/png.latex?r"> distinct rank-1 matrices:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctilde%20X%20=%20%5Csum_%7Bk=1%7D%5E%7Br%7D%20%5Csigma_%7Bk%7D%20%5Cboldsymbol%7Bu%7D_%7Bk%7D%20%5Cboldsymbol%7Bv%7D_%7Bk%7D%5E%7B*%7D%20=%20%5Csigma_%7B1%7D%20%5Cboldsymbol%7Bu%7D_%7B1%7D%20%5Cboldsymbol%7Bv%7D_%7B1%7D%5E%7B*%7D%20+%20%5Csigma_%7B2%7D%20%5Cboldsymbol%7Bu%7D_%7B2%7D%20%5Cboldsymbol%7Bv%7D_%7B2%7D%5E%7B*%7D%20+%20%5Ccdots%20+%20%5Csigma_%7Br%7D%20%5Cboldsymbol%7Bu%7D_%7Br%7D%20%5Cboldsymbol%7Bv%7D_%7Br%7D%5E%7B*%7D%0A"></p>
<p>The truncated SVD basis <img src="https://latex.codecogs.com/png.latex?%5Ctilde%20U"> provides a coordinate transformation from the high-dimensional original matrix into a lower dimensional representation.</p>
<p>For truncation values <img src="https://latex.codecogs.com/png.latex?r"> that are smaller than the number of non-zero singular values (i.e., the rank of <img src="https://latex.codecogs.com/png.latex?X">), the truncated SVD only approximates <img src="https://latex.codecogs.com/png.latex?X">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctilde%20X%20%5Capprox%20%5Ctilde%20U%20%5Ctilde%20%5CSigma%20%5Ctilde%20V%5E%7B*%7D%0A"></p>
<p>If we choose the truncation value to keep all non-zero singular values, then <img src="https://latex.codecogs.com/png.latex?%5Ctilde%20X%20=%20%5Ctilde%20U%20%5Ctilde%20%5CSigma%20%5Ctilde%20V%5E%7B*%7D"> is exact.</p>
<p><br></p>
</section>
<section id="example-image-compression" class="level3">
<h3 class="anchored" data-anchor-id="example-image-compression">Example: Image Compression</h3>
<p>For the next example, we use an alternate cover photo from the Allman Brothers 1971 release <em>At the Fillmore East</em>, shown in color and grayscale side-by-side. We’ll work with the grayscale image going forward since it limits us to two dimensions:</p>
<div id="29d7c238-458a-40af-b6ac-643d5bed18d4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage.color <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rgb2gray</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3-D RGB image. </span></span>
<span id="cb3-8">imgrgb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> io.imread(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fillmore.jpg"</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2-D grayscale image.</span></span>
<span id="cb3-11">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rgb2gray(imgrgb)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make grayscale image symmetric. </span></span>
<span id="cb3-14">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, :<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>]</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"img.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18"></span>
<span id="cb3-19">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># figsize=(8, 4))</span></span>
<span id="cb3-20"></span>
<span id="cb3-21">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].imshow(imgrgb)</span>
<span id="cb3-22">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb3-23">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_axis_off()</span>
<span id="cb3-24"></span>
<span id="cb3-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].imshow(img, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.gray)</span>
<span id="cb3-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grayscale"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb3-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_axis_off()</span>
<span id="cb3-28"></span>
<span id="cb3-29">plt.show()</span>
<span id="cb3-30"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>img.shape: (800, 800)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/svd-image-compression/svd-image-compression_files/figure-html/cell-3-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Next we generate successive rank-<img src="https://latex.codecogs.com/png.latex?r"> approximations of the original image, showing the storage requirement of each rank-<img src="https://latex.codecogs.com/png.latex?r"> approximation.</p>
<div id="2f6aa96d-6aba-41da-a425-8669be640a79" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grayscale image.</span></span>
<span id="cb5-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run SVD on grayscale image X. </span></span>
<span id="cb5-6">U, S, Vt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(X, full_matrices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert signular values array to full matrix. </span></span>
<span id="cb5-9">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(S) </span>
<span id="cb5-10"></span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rank-r approximations to evaluate. </span></span>
<span id="cb5-13">ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,]<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># len(S)]</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matplotlib indices. </span></span>
<span id="cb5-16">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb5-17"></span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of values associated with original image.</span></span>
<span id="cb5-20">total_nbr_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(X.shape)</span>
<span id="cb5-21"></span>
<span id="cb5-22">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb5-23"></span>
<span id="cb5-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r, (ii, jj) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ranks, indices):</span>
<span id="cb5-25">    </span>
<span id="cb5-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute rank-r approximation of X.</span></span>
<span id="cb5-27">    Xr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U[:, :r] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> S[:r, :r] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Vt[:r, :]</span>
<span id="cb5-28"></span>
<span id="cb5-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute storage or rank-r approximation vs. full image.</span></span>
<span id="cb5-30">    rank_r_nbr_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(U[:, :r].shape) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.prod(Vt[:r, :].shape)</span>
<span id="cb5-31">    rank_r_storage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rank_r_nbr_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_nbr_vals</span>
<span id="cb5-32"></span>
<span id="cb5-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display rank-r approximation.</span></span>
<span id="cb5-34">    ax[ii, jj].imshow(Xr, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.gray)</span>
<span id="cb5-35">    ax[ii, jj].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"r=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (storage=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rank_r_storage<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2%}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb5-36">    ax[ii, jj].set_axis_off()</span>
<span id="cb5-37"></span>
<span id="cb5-38">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/svd-image-compression/svd-image-compression_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>A rank-100 approximation provides a decent representation of the original. At rank-200, there is virtually no difference between the original and the approximation. In practice, we could store <code>U[:, :200], S[:200, :200]</code> and <code>Vt[:200, :]</code> separately, then compute the matrix product prior to rendering the image. Doing so reduces the storage requirements by a factor of 2.</p>
<p>We can plot the magnitude of the singular values along with the cumulative proportion to assess how much variation in the original image is captured for a given rank-<img src="https://latex.codecogs.com/png.latex?r"> approximation:</p>
<div id="1fa20662-a86e-47af-aad1-9accea3b555a" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(S)</span>
<span id="cb6-3"></span>
<span id="cb6-4">ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>]</span>
<span id="cb6-5"></span>
<span id="cb6-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb6-7">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].semilogy(s, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-8">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"Singular value,  $\sigma_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{r}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>)</span>
<span id="cb6-9">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$r$"</span>)</span>
<span id="cb6-10">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-11">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-13">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-14">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-15">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-17"></span>
<span id="cb6-18">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(np.cumsum(s) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(s), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-19">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"cumulative sum"</span>)</span>
<span id="cb6-20">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$r$"</span>)</span>
<span id="cb6-21">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-22">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-23">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-24">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-28"></span>
<span id="cb6-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ranks:</span>
<span id="cb6-30">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(s[:r]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(s)</span>
<span id="cb6-31">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].scatter(r, y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb6-32">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].annotate(</span>
<span id="cb6-33">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$r=$"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(r), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(r, y), </span>
<span id="cb6-34">    xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset points"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, </span>
<span id="cb6-35">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, </span>
<span id="cb6-36">    )</span>
<span id="cb6-37"></span>
<span id="cb6-38">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/svd-image-compression/svd-image-compression_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>The rank-100 approximation accounts for ~60% of the cumulative sum of singular values. By rank-200, the approximation is closer to 80%. For completeness, we also show that a rank-800 approximation is able to recover the original image fully, since it is using all singular values and vectors (the original grayscale image was 800 x 800). The benefit of using SVD for image compression lies in its ability to prioritize and retain the most significant features of the image data, while excluding less significant features. <br></p>
<p>Note that much of this analysis is based on Chapter 1 of Steve Brunton’s <em>Data-Driven Science and Engineering</em>, which is an excellent resource for practicing Data Scientists. Be sure to pickup your own copy, as the second edition was recently released.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/svd-image-compression/svd-image-compression.html</guid>
  <pubDate>Sun, 28 Apr 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Backpropagation for Fully-Connected Neural Networks</title>
  <link>https://www.jtrive.com/posts/backprop-python/backprop-python.html</link>
  <description><![CDATA[ 





<p>Backpropagation is a key algorithm used in training fully connected neural networks, also known as feed-forward neural networks. In this algorithm, the network’s output error is propagated backward, layer by layer, to adjust the weights of connections between neurons.</p>
<p><img src="https://www.jtrive.com/posts/backprop-python/fc.png" class="img-fluid"></p>
<p>The process starts by comparing the network’s output to the desired output, calculating the error. Then, starting from the output layer and moving backward, the algorithm computes the gradients of the error with respect to each weight in the network using the chain rule of calculus. These gradients indicate how much each weight contributes to the error.</p>
<p>Next, the weights are updated using gradient descent, where they are adjusted in the direction that minimizes the error. This adjustment is proportional to the gradient and a predefined learning rate, ensuring the network converges towards a solution. Backpropagation continues iteratively over the training data until the network’s performance reaches a satisfactory level or a predetermined number of iterations is reached.</p>
<p>Overall, backpropagation efficiently adjusts the weights of a fully connected network, enabling it to learn complex relationships between input and output data through iterative optimization of the network’s parameters.</p>
<p>In what follows, we walkthrough the mathematics and pseudocode required to train a 2-layer fully connected network for a classification task.</p>
<section id="forward-pass" class="level3">
<h3 class="anchored" data-anchor-id="forward-pass">Forward Pass</h3>
<p>In the following, superscripts represent the layer associated with each variable:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?X%20=%20A%5E%7B(0)%7D">: Input data having dimension n-by-f, where n is the number of samples and f the number of features. For a batch of 32 MNIST samples, <img src="https://latex.codecogs.com/png.latex?X"> would have dimension (32, 784).</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?y">: Target variable. classifying a single digit from MINST, a vector populated with 0s and 1s indicating the ground truth label for the sample (8 or not 8). Has the same length as the first dimension of <img src="https://latex.codecogs.com/png.latex?X">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?W%5E%7B(l)%7D">: Trainable weights. Projects previous layer activations to lower dimensional representation. Again referring to the first set of weights for a batch of 32 MNIST samples, <img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D">’s first dimension will match the second dimension of the activations from the previous layer (784), and <img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D">’s second dimension will be some lower dimension, say 256. <img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D"> will therefore have dimension (784, 256).</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?b%5E%7B(l)%7D">: Bias term, a one-dimensional vector associated with each hidden layer having length equal to the second dimension of the hidden layer. <img src="https://latex.codecogs.com/png.latex?b%5E%7B(1)%7D"> will have dimension (256,).</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(l)%7D%20=%20A%5E%7B(l-1)%7D%20W%5E%7B(l)%7D%20+%20b%5E%7B(l)%7D">: Output of layer <img src="https://latex.codecogs.com/png.latex?l">, which is the matrix product of the previous layer activations <img src="https://latex.codecogs.com/png.latex?A%5E%7B(l-1)%7D"> and current layer weights (plus bias term).</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?A%5E%7B(l)%7D%20=%20%5Csigma(Z%5E%7B(l)%7D)">: Activations associated with layer <img src="https://latex.codecogs.com/png.latex?l">. Passes <img src="https://latex.codecogs.com/png.latex?Z%5E%7B(l)%7D"> through a non-linearity such as sigmoid or ReLU.</p></li>
</ul>
<p>More concretely, assume a 2-layer fully-connected neural network with one hidden layer of size 256, through which a dataset of dimension 32-by-784 is passed to predict whether each of the 32 images is an 8 or not. The forward pass looks like:</p>
<ul>
<li>Randomly initialize <img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D"> (784x256), <img src="https://latex.codecogs.com/png.latex?W%5E%7B(2)%7D"> (256x1), <img src="https://latex.codecogs.com/png.latex?b%5E%7B(1)%7D"> (256x1) and <img src="https://latex.codecogs.com/png.latex?b%5E%7B(2)%7D"> (1x1)</li>
<li><img src="https://latex.codecogs.com/png.latex?X%20=%20A%5E%7B(0)%7D%5Chspace%7B.75em%7D"> (32x784)</li>
<li><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(1)%7D%20=%20A%5E%7B(0)%7D%20W%5E%7B(1)%7D%20+%20b%5E%7B(1)%7D%5Chspace%7B.75em%7D"> (32x256)</li>
<li><img src="https://latex.codecogs.com/png.latex?A%5E%7B1%7D%20=%20%5Csigma(Z%5E%7B(1)%7D)%5Chspace%7B.75em%7D"> (32x256)</li>
<li><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(2)%7D%20=%20A%5E%7B(1)%7D%20W%5E%7B(2)%7D%20+%20b%5E%7B(2)%7D%5Chspace%7B.75em%7D"> (32x1)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D%20=%20A%5E%7B(2)%7D%20=%20%5Csigma(Z%5E%7B(2)%7D)%5Chspace%7B.75em%7D"> (32x1)</li>
</ul>
<p>The final output, <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D">, represents the probability that each sample is the number 8 or not.</p>
<p>With the actual labels <img src="https://latex.codecogs.com/png.latex?y"> and our predicted probabilities <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D">, we can define our loss function, the cross-entropy loss for binary classification:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%20=%20-%5Cfrac%7B1%7D%7Bn%7D%5Cbig(y%20%5Ctimes%20%5Cmathrm%7Blog%7D(%5Chat%7By%7D)%20-%20(1%20-%20y)%5Ctimes%20%5Cmathrm%7Blog%7D(1%20-%20%5Chat%7By%7D)%5Cbig)%0A"></p>
</section>
<section id="backward-pass-backpropagation" class="level3">
<h3 class="anchored" data-anchor-id="backward-pass-backpropagation">Backward Pass (Backpropagation)</h3>
<p>The goal of backpropagation is to compute the partial derivatives of the loss function <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D"> with respect to any weight <img src="https://latex.codecogs.com/png.latex?W"> or <img src="https://latex.codecogs.com/png.latex?b"> in the network. In order to update our weights, we need to take derivatives of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D"> w.r.t. <img src="https://latex.codecogs.com/png.latex?W"> and <img src="https://latex.codecogs.com/png.latex?b">, then update <img src="https://latex.codecogs.com/png.latex?W"> and <img src="https://latex.codecogs.com/png.latex?b"> using the derivatives. Backpropagation starts by taking the derivative of the loss function. We first compute the derivatives of the loss function w.r.t. <img src="https://latex.codecogs.com/png.latex?W%5E%7B(2)%7D"> and <img src="https://latex.codecogs.com/png.latex?b%5E%7B(2)%7D">. Here we make use of the chain rule:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Once we have <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D">, <img src="https://latex.codecogs.com/png.latex?W%5E%7B(2)%7D"> and <img src="https://latex.codecogs.com/png.latex?b%5E%7B(2)%7D"> are updated as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AW%5E%7B(2)%7D%20&amp;:=%20W%5E%7B(2)%7D%20-%20%5Calpha%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%5C%5C%0Ab%5E%7B(2)%7D%20&amp;:=%20b%5E%7B(2)%7D%20-%20%5Calpha%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>for some learning rate <img src="https://latex.codecogs.com/png.latex?%5Calpha">. This holds for all layers. For given layer <img src="https://latex.codecogs.com/png.latex?i">, the update rule for <img src="https://latex.codecogs.com/png.latex?W%5E%7B(i)%7D"> and <img src="https://latex.codecogs.com/png.latex?b%5E%7B(i)%7D"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AW%5E%7B(i)%7D%20&amp;:=%20W%5E%7B(i)%7D%20-%20%5Calpha%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(i)%7D%7D%5C%5C%0Ab%5E%7B(i)%7D%20&amp;:=%20b%5E%7B(i)%7D%20-%20%5Calpha%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(i)%7D%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>Let’s start with unpacking <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D">. The first entry on the r.h.s., <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D">, represents the derivative of the loss function w.r.t. <img src="https://latex.codecogs.com/png.latex?A%5E%7B(2)%7D%20=%20%5Chat%7By%7D">, which is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20=%20-%5Cfrac%7By%7D%7BA%5E%7B(2)%7D%7D%20+%20%5Cfrac%7B1%20-%20y%7D%7B1%20-%20A%5E%7B(2)%7D%7D.%0A"></p>
<p>The second term on the r.h.s., <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D">, is the derivative of the sigmoid activation (<img src="https://latex.codecogs.com/png.latex?A%5E%7B(2)%7D%20=%20%5Csigma(Z%5E%7B(2)%7D)">). The derivative of the sigmoid function is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%5Csigma%7D%7Bdx%7D%20=%20%5Csigma(x)(1-%5Csigma(x)),%0A"></p>
<p>therefore <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D"> is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20=%20A%5E%7B(2)%7D(1%20-%20A%5E%7B(2)%7D).%0A"></p>
<p>For the third term on the r.h.s., <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D">, recall that <img src="https://latex.codecogs.com/png.latex?Z%5E%7B(2)%7D%20=%20A%5E%7B(1)%7D%20W%5E%7B(2)%7D%20+%20b%5E%7B(2)%7D">. Therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%20=%20A%5E%7B(1)%7D.%0A"></p>
<p>Finally, we have</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%5C%5C%0A&amp;=%20%5CBig(-%5Cfrac%7By%7D%7BA%5E%7B(2)%7D%7D%20+%20%5Cfrac%7B1%20-%20y%7D%7B1%20-%20A%5E%7B(2)%7D%7D%5CBig)%20%5Ccdot%20%5Cbig(A%5E%7B(2)%7D(1%20-%20A%5E%7B(2)%7D)%5Cbig)%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D%5Cbig)%5C%5C%0A&amp;=%20(A%5E%7B(2)%7D%20-%20y)%20%5Ccdot%20A%5E%7B(1)%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>As a notational convenience, we define <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20=%20(A%5E%7B(2)%7D%20-%20y).%0A"></p>
<p>This way, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D"> can be expressed as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20A%5E%7B(1)%7D.%0A"></p>
<p>We proceed in a similar fashion for <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%5C%5C%0A&amp;=%20(A%5E%7B(2)%7D%20-%20y),%0A%5Cend%7Balign*%7D%0A"></p>
<p>since <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%20=%201">.</p>
<p>For the first layer we re-use many of these calculations, but for new terms on the r.h.s., we employ the chain rule in the same way. For reference, restate the terms from the forward pass:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AA%5E%7B(0)%7D%20&amp;=%20X%5C%5C%0AZ%5E%7B(1)%7D%20&amp;=%20A%5E%7B(0)%7D%20W%5E%7B(1)%7D%20+%20b%5E%7B(1)%7D%5C%5C%0AA%5E%7B1%7D%20&amp;=%20%5Csigma(Z%5E%7B(1)%7D)%5C%5C%0AZ%5E%7B(2)%7D%20&amp;=%20A%5E%7B(1)%7D%20W%5E%7B(2)%7D%20+%20b%5E%7B(2)%7D%5C%5C%0AA%5E%7B(2)%7D%20&amp;=%20%5Chat%7By%7D%20=%20%5Csigma(Z%5E%7B(2)%7D)%0A%5Cend%7Balign*%7D%0A"></p>
<p>We next consider <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Considering each term on the r.h.s:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20&amp;=%20(A%5E%7B(2)%7D%20-%20y)%5C%5C%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20&amp;=%20W%5E%7B(2)%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20&amp;=%20%5Csigma(Z%5E%7B(1)%7D)%20(1%20-%20%5Csigma(Z%5E%7B(1)%7D))%20=%20A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5C%5C%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%20&amp;=%20A%5E%7B(0)%7D%20=%20X%0A%5Cend%7Balign*%7D%0A"></p>
<p>Resulting in:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%20&amp;=%20(A%5E%7B(2)%7D%20-%20y)%20%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig)%20%5Ccdot%20A%5E%7B(0)%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig)%20%5Ccdot%20A%5E%7B(0)%7D%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>As before, we define <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D"> as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig),%0A"></p>
<p>which allows us to write <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D"> as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20A%5E%7B(0)%7D.%0A"></p>
<p>Similarly for <img src="https://latex.codecogs.com/png.latex?b%5E%7B(1)%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>Considering each term on the r.h.s:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20&amp;=%20(A%5E%7B(2)%7D%20-%20y)%5C%5C%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20&amp;=%20W%5E%7B(2)%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20&amp;=%20%5Csigma(Z%5E%7B(1)%7D)%20(1%20-%20%5Csigma(Z%5E%7B(1)%7D))%20=%20A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5C%5C%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D%20&amp;=%201%0A%5Cend%7Balign*%7D%0A"></p>
<p>Therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D%20&amp;=%20(A%5E%7B(2)%7D%20-%20y)%20%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig)%20%5Ccdot%201%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig)%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>To complete the backpropagation algorithm, it is necessary to define <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20W%5E%7B(2)%7D.%0A"></p>
<p>Assume <img src="https://latex.codecogs.com/png.latex?X"> is a 32x784 batch of MNIST images, and our network has one hidden layer of size 256. Our task is to identify which digit 0-9 a sample most closely resembles. We first declare a number of functions, then implement the forward and backward passes along with weights update.</p>
<div id="b0bf5cc5" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sigmoid(X):</span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute the sigmoid activation for the input.</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>X))</span>
<span id="cb1-10"></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sigmoid_dev(X):</span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The analytical derivative of sigmoid function at X.</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sigmoid(X) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sigmoid(X))</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> softmax(scores):</span>
<span id="cb1-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute softmax scores given the raw output from the model.</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns softmax probabilities (N, num_classes).</span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-24">    numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> scores.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span>
<span id="cb1-25">    denom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numer.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.divide(numer, denom)</span>
<span id="cb1-27"></span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cross_entropy_loss(ypred, yactual):</span>
<span id="cb1-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute Cross-Entropy Loss based on prediction of the network and labels</span></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-33">    yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(yactual)</span>
<span id="cb1-34">    ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ypred[np.arange(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(yactual)), yactual]</span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.mean(np.log(ypred))</span>
<span id="cb1-36"></span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_accuracy(ypred, yactual):</span>
<span id="cb1-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute the accuracy of current batch.</span></span>
<span id="cb1-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-42">    yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(yactual)</span>
<span id="cb1-43">    yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(ypred, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> yhat).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div id="83a0efc0" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stand in for batch of 32 MNIST images. </span></span>
<span id="cb2-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>))</span>
<span id="cb2-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape labels to 32 x 10. </span></span>
<span id="cb2-7">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb2-8">Y[np.arange(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), y] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 10)</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate.</span></span>
<span id="cb2-11">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span> </span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize weights.</span></span>
<span id="cb2-14">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb2-15">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-16">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb2-17">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass.</span></span>
<span id="cb2-20">Z1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 256)</span></span>
<span id="cb2-21">A1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigmoid(Z1)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 256)</span></span>
<span id="cb2-22">Z2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 10)</span></span>
<span id="cb2-23">A2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(Z2)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 10)</span></span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss and accuracy.</span></span>
<span id="cb2-26">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy_loss(A2, y)</span>
<span id="cb2-27">accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_accuracy(A2, y)</span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backward pass.</span></span>
<span id="cb2-30">dZ2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Y                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 10)</span></span>
<span id="cb2-31">dW2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (A1.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dZ2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (256, 10)</span></span>
<span id="cb2-32">db2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dZ2, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (10,)</span></span>
<span id="cb2-33">dA1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dZ2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2.T                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 256)</span></span>
<span id="cb2-34">dZ1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.multiply(dA1, sigmoid_dev(Z1)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 256)</span></span>
<span id="cb2-35">dW1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dZ1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (784, 256)</span></span>
<span id="cb2-36">db1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dZ1, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (256,)</span></span>
<span id="cb2-37"></span>
<span id="cb2-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update weights.</span></span>
<span id="cb2-39">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dW2</span>
<span id="cb2-40">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> db2</span>
<span id="cb2-41">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dW1</span>
<span id="cb2-42">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> db1</span></code></pre></div>
</div>
<p>The code starting with the forward pass would be iterated over a set of batches for a pre-determined number of epochs. The final weights would then be used for inference.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/backprop-python/backprop-python.html</guid>
  <pubDate>Wed, 28 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating scikit-learn Pipelines</title>
  <link>https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines.html</link>
  <description><![CDATA[ 





<p>Within scikit-learn, pipelines allow for the consolidation of all data preprocessing steps along with a final estimator using a single interface. The pipeline object can then be passed into a grid search routine to identify optimal hyperparameters. According to the documentation, the purpose of the pipeline is to assemble several steps that can be cross-validated together while setting different parameters. In this post, we’ll demonstrate how to utilize pipelines to preprocess the adult income data set and fit two classifiers to determine whether a given observation has an income in excess of $50,000 given the set of associated features. We first read in the data and inspect the first few records:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> zip_longest</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.ticker <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MaxNLocator</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sklearn</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.compose <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ColumnTransformer</span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.experimental <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> enable_iterative_imputer</span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.impute <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IterativeImputer</span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb1-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OneHotEncoder, OrdinalEncoder, RobustScaler</span>
<span id="cb1-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb1-20">    accuracy_score, f1_score, precision_score, recall_score, roc_auc_score, </span>
<span id="cb1-21">    confusion_matrix, precision_recall_curve, roc_curve</span>
<span id="cb1-22">    )</span>
<span id="cb1-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomizedSearchCV, train_test_split</span>
<span id="cb1-24"></span>
<span id="cb1-25">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb1-26">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-27">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-28">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb1-29"></span>
<span id="cb1-30">train_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/13d05ace37948cac9583a9ab1f2def31/raw/3dc5bc9e0b573c1039abc20f816321e570aae69c/adult.csv"</span></span>
<span id="cb1-31">dftrain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(train_path)</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dftrain.head())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   age  workclass  fnlwgt     education  educational-num      marital-status         occupation relationship   race  gender  capital-gain  capital-loss  hours-per-week native-country income
0   25    Private  226802          11th                7       Never-married  Machine-op-inspct    Own-child  Black    Male             0             0              40  United-States  &lt;=50K
1   38    Private   89814       HS-grad                9  Married-civ-spouse    Farming-fishing      Husband  White    Male             0             0              50  United-States  &lt;=50K
2   28  Local-gov  336951    Assoc-acdm               12  Married-civ-spouse    Protective-serv      Husband  White    Male             0             0              40  United-States   &gt;50K
3   44    Private  160323  Some-college               10  Married-civ-spouse  Machine-op-inspct      Husband  Black    Male          7688             0              40  United-States   &gt;50K
4   18          ?  103497  Some-college               10       Never-married                  ?    Own-child  White  Female             0             0              30  United-States  &lt;=50K</code></pre>
</div>
</div>
<p>After loading the dataset, the first task is to get an idea of the frequency of different groups within categorical features. In the next cell, a dictionary is created for each categorical feature which remaps groups to ensure a reasonable number of observations in each:</p>
<div id="cell-4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">dworkclass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Federal-gov"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gov"</span>,</span>
<span id="cb3-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Local-gov"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gov"</span>,          </span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Never-worked"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,    </span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Private"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"private"</span>,</span>
<span id="cb3-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Self-emp-inc"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Self-emp-not-inc"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, </span>
<span id="cb3-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"State-gov"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gov"</span>, </span>
<span id="cb3-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Without-pay"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-12">    }</span>
<span id="cb3-13"></span>
<span id="cb3-14">deducation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Preschool"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-hs"</span>,        </span>
<span id="cb3-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1st-4th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-hs"</span>,     </span>
<span id="cb3-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5th-6th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-hs"</span>,  </span>
<span id="cb3-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7th-8th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-hs"</span>,  </span>
<span id="cb3-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs"</span>,         </span>
<span id="cb3-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs"</span>,               </span>
<span id="cb3-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"11th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs"</span>,            </span>
<span id="cb3-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs"</span>,                 </span>
<span id="cb3-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HS-grad"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs-grad"</span>,</span>
<span id="cb3-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prof-school"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-college"</span>,</span>
<span id="cb3-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Some-college"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-college"</span>,</span>
<span id="cb3-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Assoc-acdm"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-college"</span>, </span>
<span id="cb3-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Assoc-voc"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-college"</span>,   </span>
<span id="cb3-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bachelors"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bachelors"</span>,    </span>
<span id="cb3-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Masters"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"masters"</span>,    </span>
<span id="cb3-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Doctorate"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phd"</span>,   </span>
<span id="cb3-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-32">    }</span>
<span id="cb3-33"></span>
<span id="cb3-34">dmarital <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Divorced"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divorced"</span>,  </span>
<span id="cb3-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married-AF-spouse"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>, </span>
<span id="cb3-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married-civ-spouse"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>, </span>
<span id="cb3-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married-spouse-absent"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>, </span>
<span id="cb3-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Never-married"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not-married"</span>, </span>
<span id="cb3-40">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Separated"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divorced"</span>, </span>
<span id="cb3-41">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Widowed"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"widowed"</span>, </span>
<span id="cb3-42">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-43">    }</span>
<span id="cb3-44"></span>
<span id="cb3-45">doccupation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-46">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adm-clerical"</span>:  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clerical"</span>, </span>
<span id="cb3-47">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Armed-Forces"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,          </span>
<span id="cb3-48">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Craft-repair"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repair"</span>,         </span>
<span id="cb3-49">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exec-managerial"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"managerial"</span>,   </span>
<span id="cb3-50">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Farming-fishing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"farming"</span>,     </span>
<span id="cb3-51">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Handlers-cleaners"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cleaners"</span>,  </span>
<span id="cb3-52">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Machine-op-inspct"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repair"</span>,    </span>
<span id="cb3-53">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other-service"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"service"</span>,  </span>
<span id="cb3-54">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Priv-house-serv"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-55">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prof-specialty"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"specialty"</span>,</span>
<span id="cb3-56">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Protective-serv"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-57">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sales"</span>, </span>
<span id="cb3-58">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tech-support"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tech"</span>, </span>
<span id="cb3-59">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Transport-moving"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"moving"</span>,</span>
<span id="cb3-60">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-61">    }</span>
<span id="cb3-62"></span>
<span id="cb3-63">doccupation2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-64">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adm-clerical"</span>:  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, </span>
<span id="cb3-65">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Armed-Forces"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, </span>
<span id="cb3-66">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Craft-repair"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>,  </span>
<span id="cb3-67">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exec-managerial"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb3-68">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Farming-fishing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb3-69">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Handlers-cleaners"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb3-70">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Machine-op-inspct"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb3-71">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other-service"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb3-72">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Priv-house-serv"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, </span>
<span id="cb3-73">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prof-specialty"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, </span>
<span id="cb3-74">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Protective-serv"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>,</span>
<span id="cb3-75">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,  </span>
<span id="cb3-76">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tech-support"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb3-77">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Transport-moving"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>,  </span>
<span id="cb3-78">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-79">    }</span>
<span id="cb3-80"></span>
<span id="cb3-81">drelationship <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-82">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Husband"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"husband"</span>,  </span>
<span id="cb3-83">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not-in-family"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-family"</span>, </span>
<span id="cb3-84">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other-relative"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,  </span>
<span id="cb3-85">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Own-child"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"child"</span>,      </span>
<span id="cb3-86">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unmarried"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unmarried"</span>,  </span>
<span id="cb3-87">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wife"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wife"</span>, </span>
<span id="cb3-88">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-89">    }</span>
<span id="cb3-90"></span>
<span id="cb3-91">drace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-92">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amer-Indian-Eskimo"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eskimo"</span>,</span>
<span id="cb3-93">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asian-Pac-Islander"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"asian"</span>, </span>
<span id="cb3-94">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Black"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, </span>
<span id="cb3-95">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-96">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"White"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb3-97">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-98">    }</span>
<span id="cb3-99"></span>
<span id="cb3-100">dgender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-101">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>,</span>
<span id="cb3-102">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,</span>
<span id="cb3-103">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-104">    }</span></code></pre></div>
</div>
<p>Next we distinguish between categorical and continuous features. Categorical features are re-mapped to align with the groups defined above. For categorical features, we assign null values to a “missing” category instead of relying on an imputation rule. This allows us to check for possible patterns in the missing data later on. <code>capital-gain</code> and <code>capital-loss</code> are converted into binary indicators and <code>native-country</code> into US vs.&nbsp;non-US. Finally, we split the data into training and validation sets ensuring the same proportion of positive instances in each cut:</p>
<div id="cell-6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>,</span>
<span id="cb4-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-gain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-loss"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native-country"</span></span>
<span id="cb4-5">    ]</span>
<span id="cb4-6"></span>
<span id="cb4-7">continuous <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fnlwgt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hours-per-week"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"educational-num"</span></span>
<span id="cb4-9">    ]</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># workclass.</span></span>
<span id="cb4-12">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-13">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dworkclass)</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># marital-status.</span></span>
<span id="cb4-16">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-17">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dmarital)</span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># occupation.</span></span>
<span id="cb4-20">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-21">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(doccupation)</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># relationship.</span></span>
<span id="cb4-24">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-25">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(drelationship)</span>
<span id="cb4-26"></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># race.</span></span>
<span id="cb4-28">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-29">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(drace)</span>
<span id="cb4-30"></span>
<span id="cb4-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sex.</span></span>
<span id="cb4-32">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-33">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dgender)</span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># capital-gain: Convert to binary indicator. </span></span>
<span id="cb4-36">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-gain"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-gain"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-37"></span>
<span id="cb4-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># capital-loss: Convert to binary indicator. </span></span>
<span id="cb4-39">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-loss"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-loss"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-40"></span>
<span id="cb4-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Encode native-country.</span></span>
<span id="cb4-42">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native-country"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native-country"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"US"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"United-States"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>)</span>
<span id="cb4-43"></span>
<span id="cb4-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Encode response.</span></span>
<span id="cb4-45">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;50K"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-46"></span>
<span id="cb4-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create train and validation sets. </span></span>
<span id="cb4-48">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>]</span>
<span id="cb4-49">dft, dfv, yt, yv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(dftrain, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.125</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)</span>
<span id="cb4-50"></span>
<span id="cb4-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dft.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dft<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dfv.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dfv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-53"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"prop. yt : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dft<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"prop. yv : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dfv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dft.shape: (42736, 15)
dfv.shape: (6106, 15)
prop. yt : 0.2393
prop. yv : 0.2393</code></pre>
</div>
</div>
<p>With categorical features re-mapped, it is useful to look at the proportion of positive instances in each group per feature:</p>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-3">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb6-4">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb6-5">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb6-6">    ]</span>
<span id="cb6-7"></span>
<span id="cb6-8">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (ii, jj), col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> zip_longest(indices, categorical):</span>
<span id="cb6-11"></span>
<span id="cb6-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb6-13">        ax[ii, jj].remove()</span>
<span id="cb6-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-15">        gg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain.groupby(col, as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).agg(</span>
<span id="cb6-16">            leq50k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: v[v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].size),</span>
<span id="cb6-17">            gt50k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>)</span>
<span id="cb6-18">            ).sort_values(col, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-19">        </span>
<span id="cb6-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"education-num"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-gain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-loss"</span>]:</span>
<span id="cb6-21">            gg[col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gg[col].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb6-22"></span>
<span id="cb6-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>:</span>
<span id="cb6-24">            rot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb6-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-26">            rot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-27"></span>
<span id="cb6-28">        gg.plot.bar(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[ii, jj])</span>
<span id="cb6-29">        ax[ii, jj].set_title(col, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb6-30">        ax[ii, jj].set_xticklabels(gg[col].values, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rot)</span>
<span id="cb6-31">        ax[ii, jj].yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb6-32">        ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-33">        ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-34">        ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-35">        ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-36">        ax[ii, jj].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-37">        ax[ii, jj].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-38">        ax[ii, jj].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x-small"</span>)</span>
<span id="cb6-39">        ax[ii, jj].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb6-40">        ax[ii, jj].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb6-41"></span>
<span id="cb6-42">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>From the generated plot, we take-away the following:</p>
<ul>
<li><code>education-num</code>: Higher percentage of “&gt;50k” for levels &gt;= 13.</li>
<li><code>maritial-status</code>: Higher proportion of “&gt;50k” for married vs.&nbsp;all other groups.</li>
<li><code>sex</code>: Higher proportion of “&gt;50k” for Males vs.&nbsp;Females.</li>
<li><code>occupation</code>: Higher proportion of “&gt;50k” for managerial and specialty.</li>
</ul>
<p>A similar exhibit for continuous features gives us an idea of the distribution of values in each:</p>
<div id="cell-10" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb7-3"></span>
<span id="cb7-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> zip_longest(indices, continuous):</span>
<span id="cb7-7">    ax[ii].set_title(col, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb7-8">    ax[ii].hist(</span>
<span id="cb7-9">        dft[col], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span>, </span>
<span id="cb7-10">        edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb7-11">        )</span>
<span id="cb7-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#ax[ii].yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter("{x:,.0f}"))</span></span>
<span id="cb7-13">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-14">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-15">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-16">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-17">    ax[ii].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-18">    ax[ii].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax[ii].legend(loc="best", fancybox=True, framealpha=1, fontsize="x-small")</span></span>
<span id="cb7-20">    ax[ii].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb7-21">    ax[ii].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb7-22"></span>
<span id="cb7-23">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We are now in a position to create our pipelines. The first pipeline is created to support a logistic regression classifier. We initialize a <code>ColumnTransformer</code> instance, which gives us the ability to define separate preprocessing steps for different groups of columns (in our case, categorical vs.&nbsp;continuous). As the logistic regression classifier doesn’t support categorical features, we one-hot encode them. In addition, since the logistic regression classifier relies on gradient descent to estimate coefficients, continuous features are scaled using <code>RobustScaler</code> to help with convergence and missing values imputed using <code>IterativeImputer</code>. For the classifier, we use the elasticnet penalty, which is a blend of lasso and ridge penalties. We’ll determine the optimal weighting using grid search.</p>
<div id="cell-12" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LogisticRegression</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data pre-processing for LogisticRegression model.</span></span>
<span id="cb8-4">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression(</span>
<span id="cb8-5">    penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elasticnet"</span>, solver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"saga"</span>, max_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb8-6">    )</span>
<span id="cb8-7">continuous_transformer1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-8">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imputer"</span>, IterativeImputer()),</span>
<span id="cb8-9">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scaler"</span> , RobustScaler())</span>
<span id="cb8-10">    ])</span>
<span id="cb8-11">categorical_transformer1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-12">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"onehot"</span>, OneHotEncoder(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>, sparse_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, handle_unknown<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>))</span>
<span id="cb8-13">    ])</span>
<span id="cb8-14">preprocessor1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnTransformer(transformers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-15">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span> , continuous_transformer1, continuous),  </span>
<span id="cb8-16">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"categorical"</span>, categorical_transformer1, categorical)</span>
<span id="cb8-17">    ], remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span></span>
<span id="cb8-18">    )</span>
<span id="cb8-19">pipeline1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-20">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"preprocessor"</span>, preprocessor1),</span>
<span id="cb8-21">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier"</span>, lr)</span>
<span id="cb8-22">    ]).set_output(transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span>)</span></code></pre></div>
</div>
<p>Notice that <code>set_output</code> is affixed to <code>pipeline1</code> by specifying <code>transform="pandas"</code>. This was added in scikit-learn version 1.2, and allows intermediate and final datasets to be represented as Pandas DataFrames instead of Numpy arrays. I’ve found this to be particularly convenient, especially when inspecting the results of a transformation.</p>
<p>A different set of preprocessing steps is carried out for the HistGradientBoostingClassifier instance, which is functionally equivalent to lightgbm. Since HistGradientBoostingClassifier supports categorical features, it isn’t necessary to one-hot encode: We pass a list of columns that should be treated as nominal categorical features to the <code>categorical_features</code> parameter. Coming out of <code>ColumnTransformer</code>, categorical features are renamed with a leading <code>categorical__</code>, so it is easy to identify which columns to pass. As before, <code>IterativeImputer</code> is used to impute missing continuous values. Within <code>categorical_transformer2</code>, we pass <code>OrdinalEncoder</code> to convert non-numeric categories to integers, which can then be processed by HistGradientBoostingClassifier. Since HistGradientBoostingClassifier doesn’t rely on gradient descent, it isn’t necessary to include <code>RobustScaler</code>in <code>continuous_transformer2</code>.</p>
<div id="cell-14" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HistGradientBoostingClassifier</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data pre-processing for HistGradientBoostingClassifier model. Uses OrdinalEncoder</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instead of OneHotEncoder since categorical features are supported.     </span></span>
<span id="cb9-6">gb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HistGradientBoostingClassifier(</span>
<span id="cb9-7">    categorical_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"categorical__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> categorical]</span>
<span id="cb9-8">    )</span>
<span id="cb9-9">continuous_transformer2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-10">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imputer"</span>, IterativeImputer())</span>
<span id="cb9-11">    ])</span>
<span id="cb9-12">categorical_transformer2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-13">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"encoder"</span>, OrdinalEncoder())</span>
<span id="cb9-14">    ])</span>
<span id="cb9-15">preprocessor2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnTransformer(transformers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-16">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span> , continuous_transformer2, continuous), </span>
<span id="cb9-17">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"categorical"</span>, categorical_transformer2, categorical),</span>
<span id="cb9-18">    ], remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span></span>
<span id="cb9-19">    )</span>
<span id="cb9-20">pipeline2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-21">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"preprocessor"</span>, preprocessor2), </span>
<span id="cb9-22">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier"</span>, gb)</span>
<span id="cb9-23">    ]).set_output(transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span>)</span></code></pre></div>
</div>
<p>Instead og using <code>GridSearchCV</code>, we leverage <code>RandomizedSearchCV</code>. <code>GridSearchCV</code> evaluates a multi-dimensional array of hyperparameters, whereas <code>RandomizedSearchCV</code> samples from a pre-specified distribution a defined number of samples. For our logistic regression classifier, we sample uniformly from [0, 1] for <code>l1_ratio</code> and [0, 10] for the regularization parameter <code>C</code>.</p>
<div id="cell-16" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform</span>
<span id="cb10-3"></span>
<span id="cb10-4">RANDOM_STATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span></span>
<span id="cb10-5">verbosity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb10-6">n_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb10-7">scoring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span></span>
<span id="cb10-8">cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb10-9"></span>
<span id="cb10-10">param_grid1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb10-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__l1_ratio"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb10-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__C"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb10-13">    }</span>
<span id="cb10-14"></span>
<span id="cb10-15">mdl1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomizedSearchCV(</span>
<span id="cb10-16">    pipeline1, param_grid1, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scoring, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cv, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbosity, </span>
<span id="cb10-17">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RANDOM_STATE, n_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_iter</span>
<span id="cb10-18">    )</span>
<span id="cb10-19"></span>
<span id="cb10-20">mdl1.fit(dft.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), yt)</span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">best parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-23"></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get holdout scores for each fold to compare against other model.</span></span>
<span id="cb10-25">best_rank1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmin(mdl1.cv_results_[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rank_test_score"</span>])</span>
<span id="cb10-26">best_mdl_cv_scores1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-27">    mdl1.cv_results_[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"split</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_test_score"</span>][best_rank1] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(cv)</span>
<span id="cb10-28">    ]</span>
<span id="cb10-29"></span>
<span id="cb10-30"></span>
<span id="cb10-31">dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl1.predict_proba(dfv.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-32">dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred1"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-33"></span>
<span id="cb10-34">mdl1_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat1"</span>])</span>
<span id="cb10-35">mdl1_precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat1"</span>])</span>
<span id="cb10-36">mdl1_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recall_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat1"</span>])</span>
<span id="cb10-37"></span>
<span id="cb10-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">mdl1_acc      : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl1_precision: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1_precision<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl1_recall   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1_recall<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fitting 5 folds for each of 3 candidates, totalling 15 fits
[CV 1/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.841 total time=   2.3s
[CV 2/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.840 total time=   1.7s
[CV 3/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.843 total time=   2.6s
[CV 4/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.843 total time=   1.8s
[CV 5/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.850 total time=   1.7s
[CV 1/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.841 total time=   1.6s
[CV 2/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.840 total time=   1.5s
[CV 3/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.843 total time=   3.4s
[CV 4/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.843 total time=   1.6s
[CV 5/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.850 total time=   1.3s
[CV 1/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.841 total time=   1.7s
[CV 2/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.840 total time=   1.7s
[CV 3/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.843 total time=   2.3s
[CV 4/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.843 total time=   1.9s
[CV 5/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.850 total time=   1.7s

best parameters: {'classifier__C': 1.115284252761577, 'classifier__l1_ratio': 0.5667878644753359}

mdl1_acc      : 0.8435964624959057
mdl1_precision: 0.7184801381692574
mdl1_recall   : 0.5694729637234771</code></pre>
</div>
</div>
<p>We proceed analogously for HistGradientBoostingClassifier, but sample from different hyperparameters.</p>
<div id="cell-18" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2">RANDOM_STATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span></span>
<span id="cb12-3">scoring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span></span>
<span id="cb12-4">verbosity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb12-5">n_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb12-6">cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"></span>
<span id="cb12-9">param_grid2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb12-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__max_iter"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>],</span>
<span id="cb12-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__min_samples_leaf"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>],</span>
<span id="cb12-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__l2_regularization"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>),</span>
<span id="cb12-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__learning_rate"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>],</span>
<span id="cb12-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__max_leaf_nodes"</span>: [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>]</span>
<span id="cb12-15">    }</span>
<span id="cb12-16"></span>
<span id="cb12-17">mdl2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomizedSearchCV(</span>
<span id="cb12-18">    pipeline2, param_grid2, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scoring, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cv, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbosity, </span>
<span id="cb12-19">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RANDOM_STATE, n_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_iter</span>
<span id="cb12-20">    )</span>
<span id="cb12-21"></span>
<span id="cb12-22">mdl2.fit(dft.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), yt)</span>
<span id="cb12-23"></span>
<span id="cb12-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">best parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-25"></span>
<span id="cb12-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get holdout scores for each fold to compare against other model.</span></span>
<span id="cb12-27">best_rank2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmin(mdl2.cv_results_[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rank_test_score"</span>])</span>
<span id="cb12-28">best_mdl_cv_scores2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb12-29">    mdl2.cv_results_[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"split</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_test_score"</span>][best_rank2] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(cv)</span>
<span id="cb12-30">    ]</span>
<span id="cb12-31"></span>
<span id="cb12-32">dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred2"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl2.predict_proba(dfv.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-33">dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat2"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred2"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-34"></span>
<span id="cb12-35"></span>
<span id="cb12-36">mdl2_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat2"</span>])</span>
<span id="cb12-37">mdl2_precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat2"</span>])</span>
<span id="cb12-38">mdl2_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recall_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat2"</span>])</span>
<span id="cb12-39"></span>
<span id="cb12-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">mdl2_acc      : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-41"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl2_precision: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2_precision<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl2_recall   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2_recall<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fitting 5 folds for each of 3 candidates, totalling 15 fits
[CV 1/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.846 total time=   1.1s
[CV 2/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.848 total time=   1.5s
[CV 3/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.849 total time=   1.1s
[CV 4/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.849 total time=   0.9s
[CV 5/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.852 total time=   1.0s
[CV 1/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.845 total time=   0.6s
[CV 2/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.846 total time=   0.6s
[CV 3/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.849 total time=   0.6s
[CV 4/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.849 total time=   0.6s
[CV 5/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.854 total time=   0.6s
[CV 1/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.846 total time=   0.4s
[CV 2/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.848 total time=   0.5s
[CV 3/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.852 total time=   0.4s
[CV 4/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.850 total time=   0.4s
[CV 5/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.855 total time=   0.6s

best parameters: {'classifier__l2_regularization': 189.1538419557398, 'classifier__learning_rate': 0.1, 'classifier__max_iter': 100, 'classifier__max_leaf_nodes': 20, 'classifier__min_samples_leaf': 20}

mdl2_acc      : 0.8524402227317392
mdl2_precision: 0.7348993288590604
mdl2_recall   : 0.5995893223819302</code></pre>
</div>
</div>
<p>Notice that <code>mdl1</code> and <code>mdl2</code> expose <code>predict/predict_proba</code> methods, so we can generate predictions using the resulting <code>RandomizedSearchCV</code> object directly, and it will dispatch a call to the estimator associated with the hyperparameters that maximize accuracy.</p>
<p>Precision, recall and accuracy are close for each model. We can check if the difference between models is significant using the approach outlined <a href="https://scikit-learn.org/stable/auto_examples/model_selection/plot_grid_search_stats.html#comparing-two-models-frequentist-approach">here</a>:</p>
<div id="cell-20" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> t</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> corrected_std(differences, n_train, n_test):</span>
<span id="cb14-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Corrects standard deviation using Nadeau and Bengio's approach.</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-8">    kr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(differences)</span>
<span id="cb14-9">    corrected_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.var(differences, ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> kr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_train)</span>
<span id="cb14-10">    corrected_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(corrected_var)</span>
<span id="cb14-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(corrected_std)</span>
<span id="cb14-12"></span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_corrected_ttest(differences, df, n_train, n_test):</span>
<span id="cb14-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Computes right-tailed paired t-test with corrected variance.</span></span>
<span id="cb14-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-18">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(differences)</span>
<span id="cb14-19">    std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> corrected_std(differences, n_train, n_test)</span>
<span id="cb14-20">    t_stat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> std</span>
<span id="cb14-21">    p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.sf(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(t_stat), df)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right-tailed t-test</span></span>
<span id="cb14-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(t_stat, p_val)</span>
<span id="cb14-23"></span>
<span id="cb14-24"></span>
<span id="cb14-25">differences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(best_mdl_cv_scores2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.asarray(best_mdl_cv_scores1)</span>
<span id="cb14-26">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(differences)</span>
<span id="cb14-27">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-28">n_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (dft.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb14-29">n_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dft.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb14-30"></span>
<span id="cb14-31">t_stat, p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_corrected_ttest(differences, df, n_train, n_test)</span>
<span id="cb14-32"></span>
<span id="cb14-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"t-value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t_stat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-34"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"p-value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p_val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>t-value: 5.231
p-value: 0.003</code></pre>
</div>
</div>
<p>At a significance alpha level at p=0.05, the test concludes that HistGradientBoostingClassifier is significantly better than the LogisticRegression model.</p>
<p>Finally, we can overlay the histograms of model predictions by true class:</p>
<div id="cell-22" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">color0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span></span>
<span id="cb16-3">color1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6EA1D5"</span></span>
<span id="cb16-4">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.65</span></span>
<span id="cb16-5">n_bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb16-6"></span>
<span id="cb16-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LogisticRegression.</span></span>
<span id="cb16-10">yy0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[dfv.income<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred1"</span>].values</span>
<span id="cb16-11">yy1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[dfv.income<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred1"</span>].values</span>
<span id="cb16-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(</span>
<span id="cb16-13">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"LogisticRegression  (acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, </span>
<span id="cb16-14">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span></span>
<span id="cb16-15">    )</span>
<span id="cb16-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(</span>
<span id="cb16-17">    yy0, n_bins, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color0, </span>
<span id="cb16-18">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;=50K"</span></span>
<span id="cb16-19">    )</span>
<span id="cb16-20">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(</span>
<span id="cb16-21">    yy1, n_bins, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color1,</span>
<span id="cb16-22">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;50K"</span></span>
<span id="cb16-23">    )</span>
<span id="cb16-24">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-28">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-29">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-30">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_yticklabels([])</span>
<span id="cb16-31">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb16-32">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb16-33">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb16-34"></span>
<span id="cb16-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HistGradientBoostingClassifier.</span></span>
<span id="cb16-36">yy0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[dfv.income<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred2"</span>].values</span>
<span id="cb16-37">yy1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[dfv.income<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred2"</span>].values</span>
<span id="cb16-38">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(</span>
<span id="cb16-39">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HistGradientBoostingClassifier (acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, </span>
<span id="cb16-40">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span></span>
<span id="cb16-41">    )</span>
<span id="cb16-42">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(</span>
<span id="cb16-43">    yy0, n_bins, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color0, </span>
<span id="cb16-44">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;=50K"</span></span>
<span id="cb16-45">    )</span>
<span id="cb16-46">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(</span>
<span id="cb16-47">    yy1, n_bins, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color1,</span>
<span id="cb16-48">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;50K"</span></span>
<span id="cb16-49">    )</span>
<span id="cb16-50">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-51">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-52">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-53">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-54">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-55">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-56">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_yticklabels([])</span>
<span id="cb16-57">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb16-58">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb16-59">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb16-60"></span>
<span id="cb16-61">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines.html</guid>
  <pubDate>Wed, 28 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Expectation Maximization from Scratch in R</title>
  <link>https://www.jtrive.com/posts/em-from-scratch-r/em-from-scratch-r.html</link>
  <description><![CDATA[ 





<p>Lets create a dataset which appears to be a mixture of two separate distributions. Such a dataset can be created using the following code:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating simulated bimodal data observations.</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scipen=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9999</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">17.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>), </span>
<span id="cb1-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">175</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-8">    )</span></code></pre></div>
<p>Running <code>plot(density(x))</code> generates a plot of the kernel density estimate:</p>
<p><img src="https://www.jtrive.com/posts/em-from-scratch-r/em01.png" class="img-fluid"></p>
<p>Our goal is to fit a 2-component Gaussian Mixture Model (GMM) to a dataset consisting of <img src="https://latex.codecogs.com/png.latex?N"> observations using Expectation Maximization with parameters <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7Bk%7D,%20%5Csigma_%7Bk%7D,%20%5Cpi_%7Bk%7D"> where <img src="https://latex.codecogs.com/png.latex?k%20%5Cin%20%5B1,%202%5D">.</p>
<p>The probability density of a K-component GMM is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Cboldsymbol%7Bx%7D)%20=%20%5Csum_%7Bk=1%7D%5E%7BK%7D%5Cpi_%7Bk%7D%20%5Ccdot%20%5Cmathcal%7BN%7D(%5Cboldsymbol%7Bx%7D%7C%20%5Cmu_%7Bk%7D,%20%5Csigma%5E2_%7Bk%7D),%0A"></p>
<p>where in the 2 component case, <img src="https://latex.codecogs.com/png.latex?K=2"> (however, expressions will be in terms of <img src="https://latex.codecogs.com/png.latex?K"> for generality). From the density, an expression for the log-likelihood immediately follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7BLn%7D%5Chspace%7B.10em%7Df(X%7C%5Cpi,%20%5Cmu,%20%5Csigma)%20=%20%5Csum_%7Bj=1%7D%5E%7BN%7D%5Cmathrm%7BLn%7D%5Chspace%7B.10em%7D%20%5CBig%5B%5Csum_%7Bk=1%7D%5E%7BK%7D%20%5Cpi_%7Bk%7D%20%5Ccdot%5Cmathcal%7BN%7D(%5Cboldsymbol%7Bx%7D%7C%20%5Cmu_k,%20%5Csigma%5E2_k)%5CBig%5D.%0A"></p>
<p>In the log-likelihood, <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7Bk%7D">, <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7Bk%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cpi_%7Bk%7D"> represent the mean, standard deviation and mixture coefficient respectively for component <img src="https://latex.codecogs.com/png.latex?k">. The inner summation (indexed by <img src="https://latex.codecogs.com/png.latex?k">) iterates over mixture components while the outer summation (indexed by <img src="https://latex.codecogs.com/png.latex?j">) iterates over each observation in the data. Note that for each component <img src="https://latex.codecogs.com/png.latex?k">, <img src="https://latex.codecogs.com/png.latex?0%20%3C=%20%5Cpi_%7Bk%7D%20%3C=%201">, and for a <img src="https://latex.codecogs.com/png.latex?K">-component GMM, vectors <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cmu%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Csigma%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cpi%7D"> will each have length <img src="https://latex.codecogs.com/png.latex?K">.</p>
<p>Taking the derivative of the log-likelihood w.r.t. <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cmu%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Csigma%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cpi%7D">, setting equal to zero and re-arranging yields update expressions for the parameters of interest:</p>
<p>For the mean of component <img src="https://latex.codecogs.com/png.latex?k">, <img src="https://latex.codecogs.com/png.latex?%5Cmu%5E%7B'%7D_%7Bk%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmu%5E%7B'%7D_%7Bk%7D%20=%20%5Csum_%7Bj=1%7D%5E%7BN%7D%20%5Cfrac%7Bx_%7Bj%7D%20%5Ccdot%20%5Cpi_%7Bk%7D%20%20%5Ccdot%20%5Cmathcal%7BN%7D(x_%7Bj%7D%7C%20%5Cmu_%7Bk%7D,%20%5Csigma%5E2_%7Bk%7D)%7D%20%7B%5Cpi_%7Bk%7D%20%5Ccdot%20%5Cmathcal%7BN%7D(x_%7Bj%7D%7C%20%5Cmu_%7Bk%7D,%20%5Csigma%5E2_%7Bk%7D)%7D%0A"></p>
<p>For the standard deviation of component <img src="https://latex.codecogs.com/png.latex?k">, <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B'%7D_%7Bk%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma%5E%7B'%7D_%7Bk%7D%20=%20%20%5Csqrt%7B%5Csum_%7Bj=1%7D%5E%7BN%7D%20%5Cfrac%7B(x_%7Bj%7D%20-%20%5Cmu%5E%7B'%7D_%7Bk%7D)%5E%7B2%7D%20%5Ccdot%20%5Cpi_%7Bk%7D%20%5Ccdot%20%5Cmathcal%7BN%7D(x_%7Bj%7D%7C%20%5Cmu_%7Bk%7D,%20%5Csigma%5E2_r)%7D%20%7B%5Cpi_%7Bk%7D%20%5Ccdot%20%5Cmathcal%7BN%7D(x_%7Bj%7D%7C%20%5Cmu_k,%20%5Csigma%5E2_k)%7D%7D%0A"></p>
<p>For the mixture probability of component <img src="https://latex.codecogs.com/png.latex?k">, <img src="https://latex.codecogs.com/png.latex?%5Cpi_%7Bk%7D">, first note that the posterior probability of a single observation <img src="https://latex.codecogs.com/png.latex?x"> originating from component <img src="https://latex.codecogs.com/png.latex?k=z"> is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(z%7Cx)%20=%20%5Cfrac%7Bf(k=z)%20%5Ccdot%20f(x%7Ck=z)%7D%7B%5Csum%20f(k)%20%5Ccdot%20f(x%7Ck)%7D%20=%20%5Cfrac%7B%5Cpi_%7Bz%7D%20%5Ccdot%20%5Cmathcal%7BN%7D(x%7C%20%5Cmu_%7Bz%7D,%20%5Csigma%5E%7B2%7D_%7Bz%7D)%7D%7B%5Csum_%7Bk=1%7D%5E%7BK%7D%20%5Cpi_%7Bk%7D%20%5Ccdot%20%5Cmathcal%7BN%7D(x%7C%20%5Cmu_%7Bk%7D,%20%5Csigma%5E%7B2%7D_%7Bk%7D)%7D.%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cpi%5E%7B'%7D_%7Bk%7D"> is updated by aggregating the probabilities for component <img src="https://latex.codecogs.com/png.latex?k"> across all observations, then dividing by the total number of observations:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cpi%5E%7B'%7D_%7Bk%7D%20=%20%5Cfrac%7B1%7D%7BN%7D%5Csum_%7Bj=1%7D%5E%7BN%7D%20f(k%7Cx_%7Bj%7D)%20=%20%5Cfrac%7B1%7D%7BN%7D%5Csum_%7Bj=1%7D%5E%7BN%7D%20%5Cfrac%7B%5Cpi_%7Bk%7D%20%5Ccdot%20%5Cmathcal%7BN%7D(x_%7Bj%7D%7C%20%5Cmu%5E%7B'%7D_k,%20%5Csigma%5E%7B2*%7D_k)%7D%7B%5Csum_%7Br=1%7D%5EK%20%5Cpi_%7Br%7D%20%5Ccdot%20%5Cmathcal%7BN%7D(x_%7Bj%7D%7C%20%5Cmu%5E%7B'%7D_%7Br%7D,%20%5Csigma%5E%7B2'%7D_%7Br%7D)%7D%0A"></p>
<p>We can summarize Expectation Maximization as follows:</p>
<ol type="1">
<li><p>(E-step): Using current parameter values <img src="https://latex.codecogs.com/png.latex?(%5Cmu_%7Bk%7D,%20%5Csigma_%7Bk%7D,%20%5Cpi_%7Bk%7D)">, estimate the posterior probabilities of each mixture component <img src="https://latex.codecogs.com/png.latex?%5Cpi%5E%7B'%7D_%7Bk%7D">.</p></li>
<li><p>(M-step): Using updated posterior probabilities, re-estimate component means and standard deviations <img src="https://latex.codecogs.com/png.latex?%5Cmu%5E%7B'%7D_%7Bk%7D">, <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B'%7D_%7Bk%7D">.</p></li>
</ol>
<section id="implementation" class="level3">
<h3 class="anchored" data-anchor-id="implementation">Implementation</h3>
<p>The code that follows represents an implementation of the Expectation Maximization algorithm for a two-component Gaussian Mixture Model. The initial estimates of <img src="https://latex.codecogs.com/png.latex?%5Cmu">, <img src="https://latex.codecogs.com/png.latex?%5Csigma"> and <img src="https://latex.codecogs.com/png.latex?%5Cpi"> are obtained using k-means. We create a number of data structures to which parameter estimates and log-likelihood are saved at each iteration. Finally, parameter estimates are saved to the <code>paramsDF0</code> data.table for comparison with estimates from the mixtools library:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Implementation of the Expectation Maximization algorithm. </span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.table"</span>)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foreach"</span>)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scipen=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9999</span>)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate bimodal data to fit via GMM. </span></span>
<span id="cb2-8">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb2-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">17.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>),</span>
<span id="cb2-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">175</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-11">    )</span>
<span id="cb2-12"></span>
<span id="cb2-13">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of observations.</span></span>
<span id="cb2-14">r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of components in Gaussian Mixture Model.</span></span>
<span id="cb2-15">maxIter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Maximum number of EM iterations.</span></span>
<span id="cb2-16">tol <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-8</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Log-likelihood exceedance threshold.</span></span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use k-means to obtain initial parameter estimates.</span></span>
<span id="cb2-19">km <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kmeans</span>(x, r)</span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create data.table with original observations and cluster assignments. </span></span>
<span id="cb2-22">kmeansDF <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setorder</span>(</span>
<span id="cb2-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span>x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group=</span>km<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cluster, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>),</span>
<span id="cb2-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span></span>
<span id="cb2-25">    )</span>
<span id="cb2-26"></span>
<span id="cb2-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bind reference to initial values for rmu, rsd and rpi.</span></span>
<span id="cb2-28">rmu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> kmeansDF[,.(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x)), by<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x</span>
<span id="cb2-29">rsd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> kmeansDF[,.(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x)), by<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x</span>
<span id="cb2-30">rpi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> kmeansDF[,.N, by<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>N <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n</span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collect log-likelihood and updated parameter estimates at each iteration.</span></span>
<span id="cb2-33">llEM <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, maxIter)</span>
<span id="cb2-34">muEM <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> maxIter), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span>r)</span>
<span id="cb2-35">sdEM <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> maxIter), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span>r)</span>
<span id="cb2-36">piEM <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> maxIter), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span>r)</span>
<span id="cb2-37"></span>
<span id="cb2-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize muEM, sdEM and piEM.</span></span>
<span id="cb2-39">muEM[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> rmu</span>
<span id="cb2-40">sdEM[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> rsd</span>
<span id="cb2-41">piEM[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> rpi</span>
<span id="cb2-42"></span>
<span id="cb2-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iteration tracker.</span></span>
<span id="cb2-44">jj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-45"></span>
<span id="cb2-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expectation Maximization iteration.</span></span>
<span id="cb2-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All m-prefixed variables have dimension (n x r).</span></span>
<span id="cb2-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All r-prefixed variables have length r.</span></span>
<span id="cb2-49"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (jj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span>maxIter) {</span>
<span id="cb2-50"></span>
<span id="cb2-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expectation step. </span></span>
<span id="cb2-52">    mcomp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>r, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cbind"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb2-53">        rpi[ii] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(x, rmu[ii], rsd[ii])</span>
<span id="cb2-54">    }</span>
<span id="cb2-55">    </span>
<span id="cb2-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine likelihood contribution for each observation.</span></span>
<span id="cb2-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mcompSum is a vector of length n. </span></span>
<span id="cb2-58">    mcompSum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(mcomp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">MARGIN=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sum, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-59">    </span>
<span id="cb2-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute mixture probabilities for each observation. Summing across</span></span>
<span id="cb2-61">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># columns, each row will equal 1.0.</span></span>
<span id="cb2-62">    mpi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(mcomp), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cbind"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb2-63">        mcomp[,ii] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> mcompSum</span>
<span id="cb2-64">    }</span>
<span id="cb2-65">        </span>
<span id="cb2-66">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Maximization step.</span></span>
<span id="cb2-67">    rmu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>((<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> mpi) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(mpi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">MARGIN=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sum))</span>
<span id="cb2-68">    </span>
<span id="cb2-69">    rsd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(rmu), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb2-70">        denom <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(mpi[,ii][<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.finite</span>(mpi[,ii])], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-71">        numer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mpi[,ii] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> rmu[ii])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-72">        numer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(numer[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.finite</span>(numer)], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-73">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(numer <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> denom)</span>
<span id="cb2-74">    }</span>
<span id="cb2-75">    </span>
<span id="cb2-76">    rpi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(mpi), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb2-77">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(mpi[,ii][<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.finite</span>(mpi[,ii])], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n</span>
<span id="cb2-78">    }</span>
<span id="cb2-79">    </span>
<span id="cb2-80">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update llEM, muEM, sdEM and piEM.</span></span>
<span id="cb2-81">    llEM[jj] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(mcompSum)); muEM[jj,] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> rmu; sdEM[jj,] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> rsd; piEM[jj,] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> rpi</span>
<span id="cb2-82"></span>
<span id="cb2-83">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(</span>
<span id="cb2-84">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"["</span>, jj, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"] ll="</span>, llEM[jj], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" (dll="</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(llEM[jj] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> llEM[jj<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>]), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")."</span></span>
<span id="cb2-85">        )</span>
<span id="cb2-86">    </span>
<span id="cb2-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(llEM[jj] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> llEM[jj<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>tol) {</span>
<span id="cb2-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb2-89">    }</span>
<span id="cb2-90">    </span>
<span id="cb2-91">    jj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> jj <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-92">}</span>
<span id="cb2-93"></span>
<span id="cb2-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract last populated row from muEM, sdEM and piEM.</span></span>
<span id="cb2-95">paramsDF0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(</span>
<span id="cb2-96">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb2-97">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(</span>
<span id="cb2-98">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parameter=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(muEM[jj,])), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value=</span>muEM[jj,],</span>
<span id="cb2-99">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb2-100">            ),</span>
<span id="cb2-101">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(</span>
<span id="cb2-102">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parameter=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sd"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(sdEM[jj,])), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value=</span>sdEM[jj,],</span>
<span id="cb2-103">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb2-104">            ),</span>
<span id="cb2-105">         <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(</span>
<span id="cb2-106">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parameter=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">w=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(piEM[jj,])), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value=</span>piEM[jj,],</span>
<span id="cb2-107">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb2-108">            )</span>
<span id="cb2-109">        ), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-110">    )</span>
<span id="cb2-111"></span>
<span id="cb2-112">paramsDF0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dcast</span>(</span>
<span id="cb2-113">    paramsDF0, parameter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w_"</span>, w), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun.aggregate=</span>sum, </span>
<span id="cb2-114">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value.var=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span></span>
<span id="cb2-115">    )</span></code></pre></div>
<p>The code generates a status message at each iteration indicating the current log-likelihood estimate (<code>ll</code>) as well as the change in log-likelihood from the previous estimate (<code>dll</code>). Results are given below.</p>
<pre><code>[2] ll=-276.872839784171 (dll=276.872839784171).
[3] ll=-276.8390507688 (dll=0.0337890153707576).
[4] ll=-276.83590305353 (dll=0.0031477152705861).
[5] ll=-276.835432239165 (dll=0.000470814365030492).
[6] ll=-276.835356881754 (dll=0.0000753574105374355).
[7] ll=-276.835344544138 (dll=0.0000123376157148414).
[8] ll=-276.835342506099 (dll=0.00000203803961085214).
[9] ll=-276.835342168222 (dll=0.000000337876826961292).
[10] ll=-276.835342112125 (dll=0.0000000560970079277467).
[11] ll=-276.835342102806 (dll=0.00000000931919430513517).</code></pre>
<p><code>paramsDF0</code> reflects the final estimates of <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7Bi%7D">, <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7Bi%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cpi_%7Bi%7D">:</p>
<pre><code>&gt; paramsDF0
   parameter         w_1        w_2
1:      mean 181.2244438 81.7632674
2:        sd  30.6704024 16.0083545
3:         w   0.4325322  0.5674678</code></pre>
<p><br></p>
</section>
<section id="comparison-with-mixtools-library" class="level3">
<h3 class="anchored" data-anchor-id="comparison-with-mixtools-library">Comparison with mixtools Library</h3>
<p><em>mixtools</em> is a third-party R library used to estimate Gaussian Mixture Models. Using out data and initial estimates of <img src="https://latex.codecogs.com/png.latex?%5Cmu">, <img src="https://latex.codecogs.com/png.latex?%5Csigma"> and <img src="https://latex.codecogs.com/png.latex?%5Cpi">, let’s compare the results of our implementation vs.&nbsp;the <code>normalmixEM</code> function provided by mixtools:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.table"</span>)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mixtools"</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4">gmm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalmixEM</span>(</span>
<span id="cb5-5">    x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda=</span>piEM[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu=</span>muEM[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,],<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma=</span>sdEM[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]</span>
<span id="cb5-6">    )</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create data.table containing normalmixEM parameter estimates.</span></span>
<span id="cb5-9">paramsDF1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(</span>
<span id="cb5-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parameter=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb5-11">  )</span>
<span id="cb5-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (ii <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>r) {</span>
<span id="cb5-13">    paramsDF1[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"comp"</span>, ii)]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(gmm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mu[ii], gmm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sigma[ii], gmm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lambda[ii])</span>
<span id="cb5-14">}</span></code></pre></div>
<p>Let’s compare <code>paramsDF0</code> with <code>paramsDF1</code>:</p>
<pre><code>&gt; paramsDF0
   parameter        w_1         w_2
1:        mu 81.7632674 181.2244438
2:     sigma 16.0083545  30.6704024
3:        pi  0.5674678   0.4325322

&gt; paramsDF1
   parameter      comp1       comp2
1:        mu 81.7632740 181.2244778
2:     sigma 16.0083538  30.6704046
3:        pi  0.5674678   0.4325322</code></pre>
<p>We find the results to be almost identical.</p>
<p>Finally, we can create a density plot to illustrate the adequacy of the GMM fit to the data:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot comparing empirical data with estimated mixture model.</span></span>
<span id="cb7-2">exhibitPath <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/Users/i103455/Repos/Tutorials/Supporting/em2.png"</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">png</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file=</span>exhibitPath)</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GMM Estimate via EM"</span>)</span>
<span id="cb7-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xx =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb7-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yy =</span> rpi[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(xx, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span>rmu[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span>rsd[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> rpi[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(xx, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span>rmu[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span>rsd[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(xx, yy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev.off</span>()</span></code></pre></div>
<p>Which results in:</p>
<p><img src="https://www.jtrive.com/posts/em-from-scratch-r/em02.png" class="img-fluid"></p>
<p>We see that the model serves as a good representation of the underlying data.</p>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>One final note regarding Expectation Maximization estimates: This is taken from Christopher Bishop’s <em>Pattern Recognition and Machine Learning</em>, Chapter 9:</p>
<blockquote class="blockquote">
<p>A K-component mixture model will have a total of <img src="https://latex.codecogs.com/png.latex?K!"> equivalent solutions corresponding to the <img src="https://latex.codecogs.com/png.latex?K!"> ways of assigning <img src="https://latex.codecogs.com/png.latex?K"> sets of parameters to <img src="https://latex.codecogs.com/png.latex?K"> components. In other words, for any given point in the space of parameter values there will be a further <img src="https://latex.codecogs.com/png.latex?K!%20-%201"> additional points all of which give rise to exactly the same distribution. This problem is known as <em>identifiability</em>.</p>
</blockquote>
<p>This means that for certain datasets, the parameters estimates from our implementation may differ from those found via mixtools, but for the purposes of finding a good density model, the difference is irrelevant since any of the equivalent solutions is as good as any other. Just be sure to perform a visual adequacy assessment to ensure the differences in parameter estimates do indeed result in identical or nearly identical probability densities.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>R</category>
  <guid>https://www.jtrive.com/posts/em-from-scratch-r/em-from-scratch-r.html</guid>
  <pubDate>Mon, 05 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Understanding the Graph Convolutional Network Propogation Model</title>
  <link>https://www.jtrive.com/posts/gcn-prop-model/gcn-prop-model.html</link>
  <description><![CDATA[ 





<p>Convolutional Neural networks (CNNs) have been found to be very effective at tasks such as facial recognition, video analysis, anomaly detections and semantic parsing. An image can be considered a graph with a very regular structure (i.e., pixels are considered nodes, with edges connecting adjacent nodes). A natural idea is to extend convolutions to general graphs for tasks such as graph, node or edge classification. However, it is not immediately clear how one would go about extending the concept of convolutions in the context of CNNs to graphs.</p>
<p>In the Kipf and Welling paper, <a href="https://arxiv.org/pdf/1609.02907.pdf"><em>Semi-Supervised Classification with Graph Convolutional Networks</em></a>, the authors propose a method to approximate the spectral graph convolution via truncated Chebyshev polynomials, resulting in an efficient and scalable method to train graph neural networks. In this post, we walkthrough the graph convolutional network (GCN) propagation model, which we also implement in pytorch geometric. Thomas Kipf’s original PyTorch implementation is available <a href="https://github.com/tkipf/gcn">here</a>.</p>
<section id="gcn-propagation-model" class="level3">
<h3 class="anchored" data-anchor-id="gcn-propagation-model">GCN Propagation Model</h3>
<p>The GCN forward pass is presented as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AH%5E%7B(l+1)%7D%20=%20%5Csigma(%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DH%5E%7B(l)%7DW%5E%7B(l)%7D)%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7Bn%7D">: number of nodes in graph<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7Bc%7D">: length of feature vector for each node<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7Bf%7D">: size of projection layer<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BA%7D">: n-by-n adjacency matrix<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctilde%7BA%7D%7D">: n-by-n adjacency matrix with added self-connections<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctilde%7BD%7D%7D">: n-by-n degree matrix of <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctilde%7BA%7D%7D"><br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BH%5E%7B(l+1)%7D%7D">: n-by-c matrix of feature vectors for all nodes<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BW%5E%7B(l)%7D%7D">: c-by-f linear projection layer<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Csigma%7D">: non-linearity, such as ReLU</p>
<p>This becomes clear with an example. We create an undirected graph with 5 nodes:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.Graph()</span>
<span id="cb1-5"></span>
<span id="cb1-6">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-7">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-8">    ]</span>
<span id="cb1-9"></span>
<span id="cb1-10">G.add_edges_from(edges)</span>
<span id="cb1-11"></span>
<span id="cb1-12">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-13">pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.spring_layout(G, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">508</span>)</span>
<span id="cb1-14">nx.draw_networkx_nodes(G, pos, node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>, node_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span>
<span id="cb1-15">nx.draw_networkx_edges(G, pos, edgelist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>edges, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, edge_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"solid"</span>)</span>
<span id="cb1-16">nx.draw_networkx_labels(G, pos, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, font_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, font_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, font_family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sans-serif"</span>)</span>
<span id="cb1-17">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb1-18">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gcn-prop-model/gcn-prop-model_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img" alt="An undirected graph with 5 blue numbered nodes with 5 edges"></p>
<figcaption>5-node, 5-edge undirected graph</figcaption>
</figure>
</div>
</div>
</div>
<p>The elements of the adjacency matrix indicate whether pairs of vertices are connected in the graph. For the graph shown above, the adjacency matrix is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%7BA%7D%20=%0A%5Cbegin%7Bpmatrix%7D%0A0%20&amp;%201%20&amp;%201%20&amp;%201%20&amp;%201%20%5C%5C%0A1%20&amp;%200%20&amp;%200%20&amp;%200%20&amp;%201%20%5C%5C%0A1%20&amp;%200%20&amp;%200%20&amp;%200%20&amp;%200%20%5C%5C%0A1%20&amp;%200%20&amp;%200%20&amp;%200%20&amp;%200%20%5C%5C%0A1%20&amp;%201%20&amp;%200%20&amp;%200%20&amp;%200%0A%5Cend%7Bpmatrix%7D%0A"></p>
<p>The first row indicates the nodes adjacent to node 1. Since node 1 is connected to all other nodes, all but the first cell are set to 1 (no self connections in <img src="https://latex.codecogs.com/png.latex?A">).</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BA%7D%20=%20A%20+%20I">, where <img src="https://latex.codecogs.com/png.latex?I"> is the length-n identity matrix. This has the effect of adding self-connections to each node. We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%7B%5Ctilde%7BA%7D%7D%20=%0A%5Cbegin%7Bpmatrix%7D%0A1%20&amp;%201%20&amp;%201%20&amp;%201%20&amp;%201%20%5C%5C%0A1%20&amp;%201%20&amp;%200%20&amp;%200%20&amp;%201%20%5C%5C%0A1%20&amp;%200%20&amp;%201%20&amp;%200%20&amp;%200%20%5C%5C%0A1%20&amp;%200%20&amp;%200%20&amp;%201%20&amp;%200%20%5C%5C%0A1%20&amp;%201%20&amp;%200%20&amp;%200%20&amp;%201%0A%5Cend%7Bpmatrix%7D%0A"></p>
<p>After adding self-connections, the graph becomes:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.Graph()</span>
<span id="cb2-2"></span>
<span id="cb2-3">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-4">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb2-5">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb2-6">    ]</span>
<span id="cb2-7"></span>
<span id="cb2-8">G.add_edges_from(edges)</span>
<span id="cb2-9"></span>
<span id="cb2-10">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-11">pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.spring_layout(G, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">508</span>)</span>
<span id="cb2-12">nx.draw_networkx_nodes(G, pos, node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>, node_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span>
<span id="cb2-13">nx.draw_networkx_edges(G, pos, edgelist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>edges, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, edge_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"solid"</span>)</span>
<span id="cb2-14">nx.draw_networkx_labels(G, pos, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, font_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, font_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, font_family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sans-serif"</span>)</span>
<span id="cb2-15">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb2-16">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gcn-prop-model/gcn-prop-model_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img" alt="An undirected graph with 5 blue numbered nodes with added self-connections"></p>
<figcaption>5-node graph with added self-connections</figcaption>
</figure>
</div>
</div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D"> is a diagonal matrix, containing the row-wise sum of <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BA%7D"> for each entry:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%7B%5Ctilde%7BD%7D%7D%20=%0A%5Cbegin%7Bpmatrix%7D%0A5%20&amp;%200%20&amp;%200%20&amp;%200%20&amp;%200%20%5C%5C%0A0%20&amp;%202%20&amp;%200%20&amp;%200%20&amp;%200%20%5C%5C%0A0%20&amp;%200%20&amp;%202%20&amp;%200%20&amp;%200%20%5C%5C%0A0%20&amp;%200%20&amp;%200%20&amp;%202%20&amp;%200%20%5C%5C%0A0%20&amp;%200%20&amp;%200%20&amp;%200%20&amp;%203%0A%5Cend%7Bpmatrix%7D%0A"></p>
<p>To get to <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D">, each element of <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BA%7D"> is divided by <img src="https://latex.codecogs.com/png.latex?1%20/%20%5Csqrt%7Bd_%7Bi%7D%20d_%7Bj%7D%7D"> for entries in <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D">. This normalization ensures the largest eigenvalue = 1, and addresses the issue of exploding/vanishing gradients during training:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20=%0A%5Cbegin%7Bpmatrix%7D%0A%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B5%7D%5Ccdot%7B5%7D%7D%7D%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B5%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B5%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B5%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B5%7D%5Ccdot%7B3%7D%7D%7D%20%5C%5C%0A%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B2%7D%5Ccdot%7B5%7D%7D%7D%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B2%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%200%20&amp;%200%20&amp;%200%20%5C%5C%0A%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B2%7D%5Ccdot%7B5%7D%7D%7D%20&amp;%200%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B2%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%200%20&amp;%200%20%5C%5C%0A%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B2%7D%5Ccdot%7B5%7D%7D%7D%20&amp;%200%20&amp;%200%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B2%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%200%20%5C%5C%0A%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B3%7D%5Ccdot%7B5%7D%7D%7D%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B3%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%200%20&amp;%200%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B3%7D%5Ccdot%7B3%7D%7D%7D%20%5C%5C%0A%5Cend%7Bpmatrix%7D%0A"></p>
<p>Note that during training, <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D"> is only computed once since the values will not change.</p>
<p>Each node has an associated feature vector of length <img src="https://latex.codecogs.com/png.latex?c">. <img src="https://latex.codecogs.com/png.latex?H%5E%7B(l)%7D"> represents stacked feature vectors for all nodes, resulting in a matrix of dimension n-by-c.&nbsp; <img src="https://latex.codecogs.com/png.latex?H%5E%7B(0)%7D%20=%20X">, the original features.</p>
<p><img src="https://latex.codecogs.com/png.latex?W%5E%7B(l)%7D"> is the linear projection layer, which reduces the representation of each node from length c to length f.&nbsp;If we assume f = 64, <img src="https://latex.codecogs.com/png.latex?H%5E%7B(l+1)%7D"> becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AH%5E%7B(l+1)%7D%20=%20%5Csigma(%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DH%5E%7B(l)%7DW%5E%7B(l)%7D)%20%5Crightarrow%20%5Cmathrm%7BReLU%7D(n%20%5Ctimes%2064)%0A"></p>
<p>For a 2-layer GCN, the full propagation model for a node classification task is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Chat%7BA%7D%20&amp;=%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%5C%5C%0AZ%20&amp;=%20%5Cmathrm%7Bsoftmax%7D%5Cbig(%5Chat%7BA%7D%20%5Chspace%7B.30em%7D%5Cmathrm%7BReLU%7D(%5Chat%7BA%7DXW%5E%7B(0)%7D)%20%5Chspace%7B.30em%7D%20W%5E%7B(1)%7D%20%5Cbig)%0A%5Cend%7Balign*%7D%0A"></p>
</section>
<section id="derivation-of-propagation-model" class="level2">
<h2 class="anchored" data-anchor-id="derivation-of-propagation-model">Derivation of Propagation Model</h2>
<p>The authors begin with an expression to perform spectral convolutions on graphs:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_%7B%5Ctheta%7D%20%5Cstar%20x%20=%20U%20g_%7B%5Ctheta%7D%20U%5E%7BT%7D%20x,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?U"> is the matrix of eigenvectors of the normalized Laplacian <img src="https://latex.codecogs.com/png.latex?L%20=%20I_%7Bn%7D%20-%20D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20A%20D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D">, and <img src="https://latex.codecogs.com/png.latex?U%5E%7BT%7Dx"> represents the graph Fourier transform of <img src="https://latex.codecogs.com/png.latex?x">. However, this as expensive operation, since the spectral decomposition is <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(n%5E%7B3%7D)"> in practice. In addition, it isn’t immediately clear how one would go about incorporating this operation within the context of forward/back-propagation.</p>
<p>Citing a paper by <a href="https://arxiv.org/pdf/0912.3848.pdf">Hammond et. al</a>, they propose an approximation to <img src="https://latex.codecogs.com/png.latex?g_%7B%5Ctheta%7D%20%5Cstar%20x"> via a truncated expansion in terms of Chebyshev polynomials <img src="https://latex.codecogs.com/png.latex?T_%7Bk%7D(x)"> up to <img src="https://latex.codecogs.com/png.latex?K%5E%7Bth%7D"> order:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_%7B%5Ctheta%7D%20%5Cstar%20x%20%5Capprox%20%5Csum_%7Bk=0%7D%5E%7BK%7D%20%5Ctheta%5E%7B'%7D_%7Bk%7D%20T_%7Bk%7D(%5Ctilde%7BL%7D)x%20%5Chspace%7B.75em%7D(*),%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BL%7D%20=%20%5Cfrac%7B2%7D%7B%5Clambda_%7B%5Cmathrm%7Bmax%7D%7D%7DL%20-%20I_%7BN%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B'%7D"> is a vector of Chebyshev coefficients. Note that for the Chebyshev polynomial expansion, <img src="https://latex.codecogs.com/png.latex?T_%7B0%7D(x)%20=%201">, <img src="https://latex.codecogs.com/png.latex?T_%7B1%7D(x)%20=%20x"> and all other terms are recursively defined as <img src="https://latex.codecogs.com/png.latex?T_%7Bk%7D(x)%20=%202xT_%7Bk-1%7D(x)%20-%20T_%7Bk-2%7D(x)">.</p>
<p>By leveraging <img src="https://latex.codecogs.com/png.latex?%7B(*)%7D"> to approximate graph convolutions, the runtime complexity becomes linear in terms of the number of edges (<img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(%7C%5Cmathcal%7BE%7D%7C)"> instead of cubic in the number of nodes as is the case for the full spectral graph convolution.</p>
<p>From this point, the authors make three simplifications/assumptions which result in the propagation model introduced earlier:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AH%5E%7B(l+1)%7D%20=%20%5Csigma(%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DH%5E%7B(l)%7DW%5E%7B(l)%7D).%0A"></p>
<p>The first two simplifications are <img src="https://latex.codecogs.com/png.latex?K=1"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7B%5Cmathrm%7Bmax%7D%7D%20=%202">. Expanding <img src="https://latex.codecogs.com/png.latex?(%7B*%7D)"> with <img src="https://latex.codecogs.com/png.latex?K=1"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7B%5Cmathrm%7Bmax%7D%7D%20=%202"> results in:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_%7B%5Ctheta%7D%20%5Cstar%20x%20%5Capprox%20%5Ctheta%5E%7B'%7D_%7B0%7Dx%20+%20%5Ctheta%5E%7B'%7D_%7B1%7D(L%20-%20I_%7BN%7D)x%20=%20%5Ctheta%5E%7B'%7D_%7B0%7Dx%20-%20%5Ctheta%5E%7B'%7D_%7B1%7DD%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DAD%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7Dx%0A"></p>
<p>The third simplification sets <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20=%20%5Ctheta%5E%7B'%7D_%7B0%7D%20=%20-%5Ctheta%5E%7B'%7D_%7B1%7D">. This constrains the number of parameters to address overfitting and to minimize the number of multiplications per layer. Doing so results in:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_%7B%5Ctheta%7D%20%5Cstar%20x%20%5Capprox%20%5Ctheta%20%5Cbig(I_%7BN%7D%20+%20D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DAD%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Cbig)x.%0A"></p>
<p>To address the issue of exploding/vanishing gradients during training they apply a renormalization trick, essentially swapping <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?D"> with <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BA%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D">. This ensures eigenvalues are the the range [-1, 1]. We can show this is the case for our example using the adjacency matrix associated with our 5 node graph:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb3-4"></span>
<span id="cb3-5">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"></span>
<span id="cb3-8">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.Graph()</span>
<span id="cb3-9">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb3-10"></span>
<span id="cb3-11">G.add_edges_from(edges)</span>
<span id="cb3-12">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.adjacency_matrix(G).todense()</span>
<span id="cb3-13">I <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-14">D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(A, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check range of eigenvalues without renormalization.</span></span>
<span id="cb3-17">Dp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.inv(np.power(D, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>))</span>
<span id="cb3-18">evals0, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.eig(I <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Dp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Dp)</span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check range of eigenvalues after renormalization trick. </span></span>
<span id="cb3-21">Atilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> I</span>
<span id="cb3-22">Dtilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(Atilde, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-23">Dtildep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.inv(np.power(Dtilde, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>))</span>
<span id="cb3-24">evals1, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.eig(Dtildep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Atilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Dtildep)</span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">eigenvalues without renormalization: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>evals0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"eigenvalues with renormalization   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>evals1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
eigenvalues without renormalization: [0.19098 2.      1.30902 0.5     1.     ]
eigenvalues with renormalization   : [-0.22526  1.       0.59192  0.5      0.     ]</code></pre>
</div>
</div>
<p>By replacing <img src="https://latex.codecogs.com/png.latex?%5Cbig(I_%7BN%7D%20+%20D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DAD%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Cbig)"> with <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D">, we end up with:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AZ%20=%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%5Ctilde%7BA%7D%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DX%5CTheta,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5CTheta"> is a c-by-f matrix of filter parameters and <img src="https://latex.codecogs.com/png.latex?Z"> is the n-by-f convolved signal matrix.<br>
The final propagation model has nothing to do with the spectral decomposition: No eigenvectors/eigenvalues are actually computed. The approach was motivated by spectral convolutions on graphs, but is not a spectral method itself.</p>
<section id="pytorch-geometric-gcn-implementation" class="level3">
<h3 class="anchored" data-anchor-id="pytorch-geometric-gcn-implementation">PyTorch Geometric GCN Implementation</h3>
<p>In what follows, we demonstrate how to set up a 2-layer GCN for node classification using PyTorch Geometric and the Cora citation network.</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb5-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch_geometric.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Planetoid</span>
<span id="cb5-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch_geometric.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> T</span>
<span id="cb5-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch_geometric.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> to_networkx</span>
<span id="cb5-13"></span>
<span id="cb5-14">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda:0"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb5-15">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Planetoid(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/Cora'</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cora'</span>)</span>
<span id="cb5-16">split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T.RandomNodeSplit(num_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, num_test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span>)</span>
<span id="cb5-17">graph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split(dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-18"></span></code></pre></div>
</div>
</section>
<section id="distribution-of-classes-in-cora" class="level3">
<h3 class="anchored" data-anchor-id="distribution-of-classes-in-cora">Distribution of classes in Cora</h3>
<p>The Cora dataset is a citation network, where each node represents a paper belonging to one of the following 7 classes. Our goal is to predict the labels assigned to each node in the network:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">dclasses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb6-3">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Theory"</span>,</span>
<span id="cb6-4">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reinforcement_Learning"</span>, </span>
<span id="cb6-5">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Genetic_Algorithms"</span>,</span>
<span id="cb6-6">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Neural_Networks"</span>,</span>
<span id="cb6-7">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probabilistic_Methods"</span>,</span>
<span id="cb6-8">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Case_Based"</span>,</span>
<span id="cb6-9">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rule_Learning"</span></span>
<span id="cb6-10">    }</span>
<span id="cb6-11"></span>
<span id="cb6-12">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb6-13">    pd.DataFrame(graph.y.tolist()) </span>
<span id="cb6-14">    .groupby(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).size()</span>
<span id="cb6-15">    .rename({<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"size"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-16">    )</span>
<span id="cb6-17"></span>
<span id="cb6-18">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"desc"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dclasses)</span>
<span id="cb6-19">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prop"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb6-20">df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"desc"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prop"</span>]].head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">desc</th>
<th data-quarto-table-cell-role="th">n</th>
<th data-quarto-table-cell-role="th">prop</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>Theory</td>
<td>351</td>
<td>0.129616</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>Reinforcement_Learning</td>
<td>217</td>
<td>0.080133</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>Genetic_Algorithms</td>
<td>418</td>
<td>0.154357</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>Neural_Networks</td>
<td>818</td>
<td>0.302068</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>Probabilistic_Methods</td>
<td>426</td>
<td>0.157312</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>5</td>
<td>Case_Based</td>
<td>298</td>
<td>0.110044</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>6</td>
<td>Rule_Learning</td>
<td>180</td>
<td>0.066470</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="gcn-model" class="level3">
<h3 class="anchored" data-anchor-id="gcn-model">GCN Model</h3>
<p>Next we implement GCN using PyTorch Geometric. The original PyTorch implementation is available <a href="https://github.com/tkipf/pygcn">here</a>.</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch_geometric.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GCNConv</span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb7-5"></span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GCN(nn.Module):</span>
<span id="cb7-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_features, num_classes):</span>
<span id="cb7-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb7-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GCNConv(num_features, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb7-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GCNConv(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, num_classes)</span>
<span id="cb7-12"></span>
<span id="cb7-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb7-14">        x, edge_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.x, data.edge_index</span>
<span id="cb7-15">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1(x, edge_index)</span>
<span id="cb7-16">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(x)</span>
<span id="cb7-17">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2(x, edge_index)</span>
<span id="cb7-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(output)</span>
<span id="cb7-19"></span>
<span id="cb7-20"></span>
<span id="cb7-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_classifier(model, graph, optimizer, criterion, n_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb7-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Training loop.</span></span>
<span id="cb7-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb7-25">    tm, vm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> graph.train_mask, graph.val_mask</span>
<span id="cb7-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_epochs):</span>
<span id="cb7-27">        model.train()</span>
<span id="cb7-28">        optimizer.zero_grad()</span>
<span id="cb7-29">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(graph)</span>
<span id="cb7-30">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(output[tm], graph.y[tm])</span>
<span id="cb7-31">        loss.backward()</span>
<span id="cb7-32">        optimizer.step()</span>
<span id="cb7-33"></span>
<span id="cb7-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validate. </span></span>
<span id="cb7-35">        model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb7-36">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(graph).argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-37">        correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pred[vm] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> graph.y[vm]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-38">        acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> vm.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-39"></span>
<span id="cb7-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-41">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: train loss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, val. acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb7-42"></span>
<span id="cb7-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(model)</span></code></pre></div>
</div>
<p>Training our network:</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Capture activations from last hidden layer to re-create plot</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from paper.</span></span>
<span id="cb8-4">activations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_activation(name):</span>
<span id="cb8-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> hook(gcn, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, output):</span>
<span id="cb8-7">        activations[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.detach()</span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(hook)</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put graph on GPU if available.</span></span>
<span id="cb8-11">graph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> graph.to(device)</span>
<span id="cb8-12">gcn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GCN(num_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1433</span>, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>).to(device)</span>
<span id="cb8-13">gcn.conv2.register_forward_hook(get_activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conv2"</span>))</span>
<span id="cb8-14">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(gcn.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>)</span>
<span id="cb8-15">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb8-16">gcn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_classifier(gcn, graph, optimizer, criterion)</span>
<span id="cb8-17"></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute test accuracy.</span></span>
<span id="cb8-19">gcn.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb8-20">pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gcn(graph).argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-21">correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pred[graph.test_mask] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> graph.y[graph.test_mask]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb8-22">test_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> graph.test_mask.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb8-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Test accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 0: train loss=1.932, val. acc=0.303.
Epoch 10: train loss=0.377, val. acc=0.862.
Epoch 20: train loss=0.181, val. acc=0.867.
Epoch 30: train loss=0.119, val. acc=0.857.
Epoch 40: train loss=0.088, val. acc=0.852.
Epoch 50: train loss=0.069, val. acc=0.845.
Epoch 60: train loss=0.058, val. acc=0.847.
Epoch 70: train loss=0.050, val. acc=0.850.
Epoch 80: train loss=0.044, val. acc=0.855.
Epoch 90: train loss=0.040, val. acc=0.855.

Test accuracy: 0.893
</code></pre>
</div>
</div>
</section>
<section id="display-hidden-layer-activations-with-t-sne" class="level3">
<h3 class="anchored" data-anchor-id="display-hidden-layer-activations-with-t-sne">Display hidden layer activations with t-SNE</h3>
<p>Finally, we can display a lower dimensional representation of the final hidden layer node embeddings using t-SNE. The resulting plot looks similar to figure 1b from the original paper, but experimenting with the t-SNE perplexity parameter will probably get you even closer:</p>
<div id="cell-16" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.manifold <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TSNE</span>
<span id="cb10-2"></span>
<span id="cb10-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activations[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conv2"</span>].cpu().numpy()</span>
<span id="cb10-4">Xemb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TSNE(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>, init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'random'</span>, perplexity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>).fit_transform(X)</span>
<span id="cb10-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Xemb.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Xemb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-8">ax.scatter(Xemb[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], Xemb[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred.cpu(), alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>)</span>
<span id="cb10-9">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb10-10">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Xemb.shape: (2708, 2)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gcn-prop-model/gcn-prop-model_files/figure-html/cell-9-output-2.png" class="img-fluid figure-img" alt="Lower dimensional representation of the final hidden layer using t-SNE"></p>
<figcaption>Lower dimensional representation of the final hidden layer using t-SNE</figcaption>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/gcn-prop-model/gcn-prop-model.html</guid>
  <pubDate>Mon, 05 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Denoising Signals using the FFT</title>
  <link>https://www.jtrive.com/posts/fft-denoise/fft-denoise.html</link>
  <description><![CDATA[ 





<p>The Discrete Fourier Transform (DFT) turns a data vector into a sum of sine/cosine components. The DFT is a Fourier series on data instead of analytic functions. Why do we perform the DFT? Because the features typically of interest aren’t always obvious in the time domain. The Fast Fourier Transform (FFT) is an efficient method used to calculate the DFT. The naive implementation of DFT scales as <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(n%5E2)">, whereas FFT scales as <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(n%20%5Cmathrm%7Blog%7D(n))">.</p>
<p>Our original data is sampled at uniform intervals represented as <img src="https://latex.codecogs.com/png.latex?%5Bf_%7B0%7D,%20f_%7B1%7D,%20%5Cdots,%20f_%7Bn%7D%5D%5E%7BT%7D">, and we want to obtain a vector of Fourier coefficients <img src="https://latex.codecogs.com/png.latex?%5B%5Chat%7Bf%7D_%7B0%7D,%20%5Chat%7Bf%7D_%7B1%7D,%20%5Cdots,%20%5Chat%7Bf%7D_%7Bn%7D%5D%5E%7BT%7D">. In the second vector, <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7B0%7D"> represents how much of the lowest frequency is in the data, <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7B1%7D"> represents how much of the second lowest frequency, etc. The formula used to go from data to Fourier coefficients is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7Bf%7D_%7Bk%7D%20=%20%5Csum_%7Bj=0%7D%5E%7Bn-1%7D%20f_%7Bj%7De%5E%7Bi%202%5Cpi%20jk/n%7D.%0A"></p>
<p>In words, the <img src="https://latex.codecogs.com/png.latex?k%5E%7Bth%7D"> Fourier coefficient is obtained by taking the sum over all <img src="https://latex.codecogs.com/png.latex?j"> data points at the <img src="https://latex.codecogs.com/png.latex?j%5E%7Bth%7D"> frequency times the <img src="https://latex.codecogs.com/png.latex?k%5E%7Bth%7D"> frequency divided by <img src="https://latex.codecogs.com/png.latex?n">. We can see that this expression represents a sum of sin and cosine terms by recalling <img src="https://latex.codecogs.com/png.latex?e%5E%7Bin%7D%20=%20%5Cmathrm%7Bcos%7D(n)%20+%20i%5Cmathrm%7Bsin%7D(n)">. The <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bk%7D"> are complex numbers which contain phase and magnitude information. The magnitude of <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bk%7D"> tells us how much of the <img src="https://latex.codecogs.com/png.latex?k%5E%7Bth%7D"> mode is in the original data.</p>
<p>To go from Fourier coefficients back to data, the formula is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af_%7Bk%7D%20=%20%5Cfrac%7B1%7D%7Bn%7D%5CBig(%5Csum_%7Bj=0%7D%5E%7Bn-1%7D%20%5Chat%7Bf%7D_%7Bj%7De%5E%7Bi%202%5Cpi%20jk/n%7D%5CBig),%0A"></p>
<p>which represents the inverse FFT.</p>
<p>The DFT matrix can be represented in terms of the fundemental frequency for an interval with <img src="https://latex.codecogs.com/png.latex?n"> data points, defined as <img src="https://latex.codecogs.com/png.latex?%5Comega_%7Bn%7D%20=%20e%5E%7B-2%5Cpi%20i%20/%20n%7D">:</p>
$$ M =
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bpmatrix%7D%0A1%20&amp;%201%20&amp;%201%20&amp;%20%5Cdots%20&amp;%201%20%5C%5C%0A1%20&amp;%20%5Comega_%7Bn%7D%20&amp;%20%5Comega_%7Bn%7D%5E%7B2%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_%7Bn%7D%5E%7Bn-1%7D%20%5C%5C%0A1%20&amp;%20%5Comega_%7Bn%7D%5E%7B2%7D%20&amp;%20%5Comega_%7Bn%7D%5E%7B4%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_%7Bn%7D%5E%7B2(n-1)%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cvdots%20%5C%5C%0A1%20&amp;%20%5Comega_%7Bn%7D%5E%7Bn-1%7D%20&amp;%20%5Comega_%7Bn%7D%5E%7B2(n-1)%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_%7Bn%7D%5E%7B(n-1)%5E2%7D%0A%5Cend%7Bpmatrix%7D">
<p>$$</p>
<p><br></p>
<p>To obtain the Fourier coefficients, we multiply <img src="https://latex.codecogs.com/png.latex?M"> by <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7Bf%7D">, which yields a vector of complex coefficients, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Chat%7Bf%7D%7D">. Next we show how the FFT can be used to de-noise a signal.</p>
<section id="denoising-signals" class="level3">
<h3 class="anchored" data-anchor-id="denoising-signals">Denoising Signals</h3>
<p>This example, as well as much of the background, is taken from Steve Brunton’s FFT videos available <a href="https://youtu.be/jNC0jxb0OxE?si=H4JZGVU3-HB9PhCJ">here</a>. Assume you receive a dataset representing a discrete signal, and our goal is to identify the characteristic frequencies above a certain threshold. We then execute the following steps:</p>
<ol type="1">
<li>Fourier transform the data.</li>
<li>Identify the peaks in the frequency domain, and zero out everything below some threshold.</li>
<li>Run the inverse Fourier transform to recover the denoised signal.</li>
</ol>
<p>We create the original signal and add noise as follows:</p>
<div id="cell-2" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> math <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pi</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5">dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.001</span></span>
<span id="cb1-6">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dt)</span>
<span id="cb1-7">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(t)</span>
<span id="cb1-8">forig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sin(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sin(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t)</span>
<span id="cb1-9">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.random.randn(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(t))</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run FFT on f. Capture power spectrum.</span></span>
<span id="cb1-12">fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.fft.fft(f, n)</span>
<span id="cb1-13">psd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(fhat)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-axis for plotting.</span></span>
<span id="cb1-16">freq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.arange(n)      </span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter out noise using psd.</span></span>
<span id="cb1-19">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all freqs with power &gt; thresh. Zero out small Fourier coeffs.</span></span>
<span id="cb1-22">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> psd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> thresh</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inverse fft for filtered time signal.</span></span>
<span id="cb1-25">ffilt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.fft.ifft(indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> fhat) </span></code></pre></div>
</div>
<p>Next we create a 3-facet plot: The top facet represents <code>forig</code> overlaid on the noisy signal <code>f</code>. The second facet represents the power spectrum, and the third the reconstructed filtered signal.</p>
<div id="cell-4" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-2"></span>
<span id="cb2-3">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-4">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original and noise-added signals"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb2-5">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(t, f, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"noisy"</span>)</span>
<span id="cb2-6">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(t, forig, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clean"</span>)</span>
<span id="cb2-7">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlim(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], t[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-8">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend(fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Power spectrum"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb2-11">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(freq[:n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], psd[:n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb2-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frequency"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb2-13">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"power"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb2-14"></span>
<span id="cb2-15">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(t, ffilt, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filtered"</span>)</span>
<span id="cb2-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(t, forig, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original"</span>)</span>
<span id="cb2-17">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Filtered signal"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb2-18">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].legend(fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>)</span>
<span id="cb2-19">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_xlim(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], t[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb2-22">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb2-23">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb2-24"></span>
<span id="cb2-25">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/fft-denoise/fft-denoise_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img" alt="Original, power spectrum and filtered signal for generated signal with noise."></p>
<figcaption>Original, power spectrum and filtered signal for generated signal with noise.</figcaption>
</figure>
</div>
</div>
</div>
<p>This tells us that even though the original signal is noisy, much of the signal is at 50Hz and 120Hz (verified by running <code>np.where(psd[:n // 2]&gt;thresh)[0]</code>), or the frequencies with power value in excess of the black horizontal dashed line in the center facet. Overlaying the filtered and original signals in the bottom facet, we see they line up perfectly.</p>
</section>
<section id="filtering-an-audio-file" class="level3">
<h3 class="anchored" data-anchor-id="filtering-an-audio-file">Filtering an Audio File</h3>
<p>In practice, the signal of interest will not be generated from an analytic function. Typically we’ll have a signal, and need to identify the dominant frequencies for downstream analysis. In the code that follows, the frequency spectrum is generated for a signal of arbitrary origin, which can be extended to any time domain signal. The signal is filtered, then we approximate the original signal using only a small number of frequencies. The focus will be on an audio clip of a vintage telephone ringer, available <a href="https://mixkit.co/free-sound-effects/">here</a>.</p>
<div id="cell-7" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Code to read in a .wav file, perform FFT and generate filtered signal.</span></span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.fftpack <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fft, fftfreq</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.io.wavfile <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> read</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load .wav file. data has dimension nx2, with 2 representing</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the channels. We focus on the first channel only. </span></span>
<span id="cb3-8">censor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb3-9">fs, data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vintage-telephone-ringtone.wav"</span>)</span>
<span id="cb3-10">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)[:censor]</span>
<span id="cb3-11">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(s)</span>
<span id="cb3-12">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(n)</span>
<span id="cb3-13">sample_secs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(s) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> fs   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Duration of sample audio clip. </span></span>
<span id="cb3-14">dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> fs                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time in seconds between samples. </span></span>
<span id="cb3-15">fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fft(s)               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate Fourier coefficients.</span></span>
<span id="cb3-16">psd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(fhat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Power spectrum.</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-axis for plotting. Can also call fftfreq(s.shape[0], d=dt).</span></span>
<span id="cb3-19">freq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.arange(n) </span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retain frequencies with power above this threshold.</span></span>
<span id="cb3-22">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb3-23"></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all freqs with power &gt; thresh. Zero out small Fourier coeffs.</span></span>
<span id="cb3-25">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> psd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> thresh</span>
<span id="cb3-26">ffilt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.fft.ifft(indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> fhat) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inverse fft for filtered time signal.</span></span></code></pre></div>
</div>
<p>We then plot the original signal, power spectrum and filtered signal:</p>
<div id="cell-9" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-2">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original signal (first 2^16 samples,~1.5 secs)"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb4-3">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(t, s, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original"</span>)</span>
<span id="cb4-4">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlim(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], t[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb4-5"></span>
<span id="cb4-6">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Power spectrum"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb4-7">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(freq[:n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], psd[:n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb4-8">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].axhline(thresh, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>)</span>
<span id="cb4-9">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frequency"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb4-10">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"power"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb4-11"></span>
<span id="cb4-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Filtered signal with original"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb4-13">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(t, ffilt, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filtered"</span>)</span>
<span id="cb4-14">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(t, s, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original"</span>)</span>
<span id="cb4-15">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].legend(fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb4-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_xlim(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], t[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb4-19">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb4-20">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb4-21">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb4-22">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb4-23"></span>
<span id="cb4-24">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/fft-denoise/fft-denoise_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img" alt="Original, power spectrum and filtered signal for audio signal."></p>
<figcaption>Original, power spectrum and filtered signal for audio signal.</figcaption>
</figure>
</div>
</div>
</div>
<p>We set the threshold to retain only those frequencies with power in excess of 500. In the bottom facet, we see that by retaining only a small number of frequencies, we are able to capture a reasonable approximation to the original signal, especially away from the endpoints.</p>
<p>The filtered signal can be written to file as follows:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optionally export filtered audio.</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.io.wavfile <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> write</span>
<span id="cb5-3">write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filtered-telephone2.wav"</span>, fs, np.real(ffilt).astype(np.int16))</span></code></pre></div>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/fft-denoise/fft-denoise.html</guid>
  <pubDate>Thu, 01 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Gradient Descent for Logistic Regression</title>
  <link>https://www.jtrive.com/posts/logistic-regression-gd/logistic-regression-gd.html</link>
  <description><![CDATA[ 





<p>Within the GLM framework, model coefficients are estimated using iterative reweighted least squares (IRLS), sometimes referred to as Fisher Scoring. This works well, but becomes inefficient as the size of the dataset increases: IRLS relies on the matrix of second partial derivatives which is expensive to compute. Instead, we can estimate logistic regression coefficients using gradient descent, which only relies on the first derivative of the cost function. This is much more efficient to compute, and generally provides good estimates once features have been standardized.</p>
<p>Expression for linear predictions:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Az%20=%20%5Cboldsymbol%7BX%7D%20%5Cboldsymbol%7B%5Ctheta%7D%0A"></p>
<p>Expression for predicted probabilities:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7By%7D%20=%20%5Csigma(z)%20=%20%5Cfrac%7B1%7D%7B1%20+%20e%5E%7B-z%7D%7D%0A"></p>
<p>Gradient descent:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctheta_%7Bt%20+%201%7D%20:=%20%5Ctheta_%7Bt%7D%20-%20%5Ceta%20%5Cnabla%20L(%5Chat%7By%7D,%20y)%0A"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Ceta"> is the learning rate.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cnabla%20L"> represents the gradients of the loss function.</li>
</ul>
<p>Optimal parameters:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%7B%5Chat%7B%5Ctheta%7D%7D%20=%20%5Coperatorname*%7Bargmin%7D_%5Ctheta%20%5Cfrac%7B1%7D%7Bm%7D%20%5Csum_%7Bi=1%7D%5E%7Bm%7D%20L(f(x%5E%7B(i)%7D;%20%5Ctheta),%20y%5E%7B(i)%7D)%0A"></p>
<p>The loss function is used to determine how much predictions differs from labels. Here we use binary cross entropy loss:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AL(%5Chat%7By%7D,%20y)%20=%20-%5Cfrac%7B1%7D%7Bm%7D%20%5Csum_%7Bi=1%7D%5E%7Bm%7D%20y%20%5Ccdot%20%5Cmathrm%7Blog%7D(%5Chat%7By%7D)%20+%20(1%20-%20y)%20%5Ccdot%20%5Cmathrm%7Blog%7D(1%20-%20%5Chat%7By%7D),%0A"></p>
<p>which we obtain from the log-likelihood of a single observation assumed to follow a binomial distribution. We flip the sign (the leading <code>-</code>) in order to minimize the loss. Note that <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D%20=%20%5Csigma(z)">.</p>
<p>Expression for gradient of loss function:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cnabla%20L(%5Chat%7By%7D,%20y)%20=%20%5Cfrac%7B1%7D%7Bm%7D(%5Chat%7By%7D%20-%20y)x%5E%7BT%7D%0A"></p>
<p>We choose <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D"> that maximizes the log-probability of the true y labels in the training data given the observations <img src="https://latex.codecogs.com/png.latex?X">. The goal is to find the set of weights which minimize the loss function, averaged over all examples. For each variable <img src="https://latex.codecogs.com/png.latex?%5Ctheta_%7Bj%7D"> in <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D">, the gradient will have a component that tells us the slope w.r.t. that variable.</p>
<p>The breast cancer dataset is loaded from scikit-learn, the features are standardized and model coefficients estimated using gradient descent. Results are then compared with statsmodels coefficient estimates using the same data to ensure correctness.</p>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Load breast cancer dataset from scikit-learn. Standardize features.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_breast_cancer</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler</span>
<span id="cb1-10"></span>
<span id="cb1-11">data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_breast_cancer()</span>
<span id="cb1-12">X_data, y_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_loader.data, data_loader.target</span>
<span id="cb1-13">column_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_loader.feature_names</span>
<span id="cb1-14">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_data, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>column_names)</span>
<span id="cb1-15"></span>
<span id="cb1-16">keep_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean radius'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean texture'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean perimeter'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean area'</span>,</span>
<span id="cb1-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean smoothness'</span></span>
<span id="cb1-19">    ]</span>
<span id="cb1-20"></span>
<span id="cb1-21">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[keep_features].values</span>
<span id="cb1-22">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_data[:,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standardize features. </span></span>
<span id="cb1-25">sclr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler()</span>
<span id="cb1-26">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sclr.fit_transform(X)</span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add bias term.</span></span>
<span id="cb1-29">bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb1-30">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate([bias, X], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p><code>eta</code> represents the learning rate and is a hyperparameter. <code>num_epochs</code> can be set as desired. For this example, we haven’t incorporated early stopping logic, but this would be straightforward to implement. We initialize the weight vector <code>w</code> to all 0s. <code>w</code> has the same length as the number of features + 1 for the intercept term.</p>
<div id="cell-5" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">eta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span></span>
<span id="cb2-3">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span></span>
<span id="cb2-4">w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-5">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_epochs):</span>
<span id="cb2-8">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> w</span>
<span id="cb2-9">    ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>z))</span>
<span id="cb2-10">    L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.mean(y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(ypred) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ypred))</span>
<span id="cb2-11">    dL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(((ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]</span>
<span id="cb2-12">    loss.append(L)        </span>
<span id="cb2-13">    w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span>eta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dL</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"w: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>w<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>ravel()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>w: [ -0.4592425   22.09479813  -1.56463209 -14.7402888  -14.68918055
  -1.66460167]</code></pre>
</div>
</div>
<p>Estimating the coefficients using statsmodels yields:</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.formula.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> smf</span>
<span id="cb4-2"></span>
<span id="cb4-3">df2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:], columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>keep_features)</span>
<span id="cb4-4">df2[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb4-5">df2.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ii.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df2.columns]</span>
<span id="cb4-6">features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" + "</span>.join([ii <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df2.columns <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>])</span>
<span id="cb4-7">mdl_expr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target ~ "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> features</span>
<span id="cb4-8">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smf.logit(mdl_expr, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df2).fit()</span>
<span id="cb4-9">mdl.params</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Optimization terminated successfully.
         Current function value: 0.148702
         Iterations 10</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>Intercept          -0.459246
mean_radius        22.094852
mean_texture       -1.564632
mean_perimeter    -14.740317
mean_area         -14.689213
mean_smoothness    -1.664601
dtype: float64</code></pre>
</div>
</div>
<p>Which matches closely with the results produced via gradient descent.</p>



 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/logistic-regression-gd/logistic-regression-gd.html</guid>
  <pubDate>Thu, 01 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>The Elbow Method for Determining the Number of Clusters in K-Means</title>
  <link>https://www.jtrive.com/posts/elbow-method/elbow-method.html</link>
  <description><![CDATA[ 





<p>The elbow method is a heuristic used in determining the optimal number of clusters in a k-means clustering algorithm. It is called the elbow method because it involves plotting the explained variation as a function of the number of clusters, and picking the elbow of the curve as the number of clusters to use. This method is widely used because of its simplicity and effectiveness in practice.</p>
<p>The steps to create the elbow plot are provided below:</p>
<ol type="1">
<li><p>Run the k-means algorithm using your data for different k (say, 1-25).</p></li>
<li><p>For each k, calculate the sum of squared distances from each point to its assigned centroid. This metric is also known as the inertia of the k-means.</p></li>
<li><p>Plot SSE as a function of the number of clusters. The plot typically shows a rapid decrease in SSE as k increases initially because adding more clusters will naturally improve the fit.</p></li>
<li><p>As k continues to increase, the improvements in SSE will start to diminish. At some point, the gain in SSE reduction becomes marginal, creating an “elbow” in the plot. This point is considered to be a good trade-off between the complexity of the model (number of clusters) and the fit of the model. The idea is that adding more clusters beyond this point doesn’t provide substantial improvement in fitting the model to the data.</p></li>
</ol>
<p>The elbow method provides a simple and intuitive visualization to choose the best k, and it often works well in practice to find a reasonable number of clusters if the data has a clear grouping.</p>
<p>However, there are some limitations. The exact elbow point can sometimes be ambiguous or subjective, especially if the curve is gradual. In some datasets, especially those with clusters of varying density or size, the elbow method might not yield a clear point of inflection. This is pretty common in real-world datasets. Also, minimizing SSE might not be the best approach for choosing k. Other techniques should be evaluated in parallel, such as silhouette analysis.</p>
<p><br> In the following cells, the elbow method is demonstrated on dataset representing the sample mean and standard deviation of unemployment data for each of the 50 states:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"></span>
<span id="cb1-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/ea0f275a9ef010415392189e64c71fc3/raw/4bb56a71c5b597c16513c48183dde799ddf9ec51/unemp.csv"</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6">df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">state</th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">stddev</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>AL</td>
<td>6.644952</td>
<td>2.527530</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>AK</td>
<td>8.033173</td>
<td>1.464966</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>AZ</td>
<td>6.120673</td>
<td>1.743672</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>AR</td>
<td>6.474038</td>
<td>1.488008</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>CA</td>
<td>7.204087</td>
<td>1.833834</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>CO</td>
<td>5.383654</td>
<td>1.394852</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>CT</td>
<td>5.181731</td>
<td>1.630996</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>DE</td>
<td>5.185817</td>
<td>1.868010</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>FL</td>
<td>6.227163</td>
<td>1.863281</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>GA</td>
<td>5.685337</td>
<td>1.466855</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.cluster <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KMeans</span>
<span id="cb2-4"></span>
<span id="cb2-5">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use mean and stddev columns for clustering.</span></span>
<span id="cb2-8">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stddev"</span>]].values</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute SSE for each k. </span></span>
<span id="cb2-11">n_clust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>)</span>
<span id="cb2-12"></span>
<span id="cb2-13">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> n_clust:</span>
<span id="cb2-16"></span>
<span id="cb2-17">    kmeans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KMeans(n_clusters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>k, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>, n_init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>)</span>
<span id="cb2-18">    grps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kmeans.fit_predict(X)</span>
<span id="cb2-19">    results.append((k, kmeans.inertia_))</span>
<span id="cb2-20"></span>
<span id="cb2-21">results</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>[(1, 71.48395739420056),
 (2, 27.89336983415545),
 (3, 20.24188288137045),
 (4, 12.626365462154586),
 (5, 8.68912965898914),
 (6, 6.459331517502614),
 (7, 5.553744900882928),
 (8, 4.267127391718113),
 (9, 3.4187536239865084),
 (10, 3.066194952112686),
 (11, 2.695955805444958),
 (12, 2.3218932453872867),
 (13, 2.1421618770145803),
 (14, 2.0290844649980366),
 (15, 1.8714834948645003),
 (16, 1.7848062391719266),
 (17, 1.588261705328375),
 (18, 1.4404492654991405),
 (19, 1.2530374848818748),
 (20, 1.1906452777121082),
 (21, 0.9542369194221477),
 (22, 0.8924547058739023),
 (23, 0.7465084872875154),
 (24, 0.6827132125717246),
 (25, 0.5324000984155649)]</code></pre>
</div>
</div>
<p><br></p>
<p>We can then plot SSE as a function of the number of clusters:</p>
<div id="cell-5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate elbow plot.</span></span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb4-5"></span>
<span id="cb4-6">xx, yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>results)</span>
<span id="cb4-7"></span>
<span id="cb4-8">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-9">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k-Means SSE vs. number of clusters"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-10">ax.plot(xx, yy, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>)</span>
<span id="cb4-11">ax.axvline(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#222222"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb4-12">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-13">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SSE"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-14">ax.set_ylim(bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-15">ax.set_xlim(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-16">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb4-17">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb4-18">ax.get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x, p: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)))</span>
<span id="cb4-19">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb4-20">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb4-21">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-22"></span>
<span id="cb4-23">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/elbow-method/elbow-method_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Although subjective, selecting k=4 is reasonable (dashed vertical line). k=5 could also be justified, but there is little benefit using a k beyond 5 as SSE only marginally decreases.</p>
<p>Finally, we can plot the cluster assignments using the optimal k:</p>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2">kmeans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KMeans(n_clusters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>,  n_init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>)</span>
<span id="cb5-3">kmeans.fit(X)</span>
<span id="cb5-4">centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kmeans.cluster_centers_</span>
<span id="cb5-5">kclust <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kmeans.labels_</span>
<span id="cb5-6"></span>
<span id="cb5-7"></span>
<span id="cb5-8">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-9">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k-means cluster assignment with centroids, k=4"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>)</span>
<span id="cb5-10">ax.scatter(X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kclust, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gist_rainbow"</span>)</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot centroids as crosses.</span></span>
<span id="cb5-13">ax.scatter(centroids[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], centroids[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>)</span>
<span id="cb5-14">ax.set_xticks([])</span>
<span id="cb5-15">ax.set_yticks([])</span>
<span id="cb5-16">ax.set_xticklabels([])</span>
<span id="cb5-17">ax.set_yticklabels([])</span>
<span id="cb5-18"></span>
<span id="cb5-19">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/elbow-method/elbow-method_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/elbow-method/elbow-method.html</guid>
  <pubDate>Sun, 28 Jan 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Demonstration of Principal Component Analysis</title>
  <link>https://www.jtrive.com/posts/pca-from-scratch/pca-from-scratch.html</link>
  <description><![CDATA[ 





<p>Principal Component Analysis (PCA) is a statistical technique used in the field of data analysis and machine learning for dimensionality reduction while preserving as much of the data’s variation as possible. It’s particularly useful when dealing with high-dimensional data, helping to simplify the data without losing the underlying structure. These components are orthogonal (meaning they are statistically independent of one another), and are ordered so that the first few retain most of the variation present in all of the original variables. There are a number of uses for PCA, including:</p>
<ul>
<li><p><strong>Visualization</strong>: By reducing data to two or three principal components, PCA allows for the visualization of complex data in a 2D or 3D space.</p></li>
<li><p><strong>Noise Reduction</strong>: By eliminating components with low variance and retaining those with high variance, PCA can help in reducing noise in the dataset.</p></li>
<li><p><strong>Feature Extraction and Data Compression</strong>: PCA can help in extracting the most important features from the data, which can then be used for further analysis or machine learning modeling. It also helps in compressing the data by reducing the number of dimensions without losing significant information.</p></li>
<li><p><strong>Improving Model Performance</strong>: By reducing the dimensionality, PCA can lead to simpler models that are less prone to overfitting when training on datasets with a high number of features.</p></li>
</ul>
<p><br></p>
<p>There are some limitations to PCA, specifically:</p>
<ul>
<li><p><strong>Linear Assumptions</strong>: PCA assumes that the principal components are a linear combination of the original features, which may not always capture the structure of the data well, especially if the underlying relationships are non-linear.</p></li>
<li><p><strong>Sensitivity to Scaling</strong>: Since PCA is affected by the scale of the features, different results can be obtained if the scaling of the data changes.</p></li>
<li><p><strong>Data Interpretation</strong>: Interpretability of the principal components can be difficult since they are combinations of all original features.</p></li>
</ul>
<p><br></p>
<p>The spread of a dataset can be expressed in orthonormal vectors – the principal directions of the dataset. Orthonormal means that the vectors are orthogonal to each other (i.e.&nbsp;they have an angle of 90 degrees) and are of size 1. By sorting these vectors in order of importance (by looking at their relative contribution to the spread of the data as a whole), we can find the dimensions of the data which explain the most variance. We can then reduce the number of dimensions to the most important ones only. Finally, we can project our dataset onto these new dimensions, called the principal components, performing dimensionality reduction without losing much of the information present in the dataset.</p>
<p>In what follows, PCA is demonstrated from scratch using Numpy and the results compared with scikit-learn to show they are identical up to a sign.</p>
<p><br></p>
<section id="extracting-the-first-k-principal-components" class="level3">
<h3 class="anchored" data-anchor-id="extracting-the-first-k-principal-components">Extracting the first k Principal Components</h3>
<p>We start by 0-centering the data, then compute the Singular Value Decomposition (SVD) of the data matrix <img src="https://latex.codecogs.com/png.latex?A">, where rows of <img src="https://latex.codecogs.com/png.latex?A"> are assumed to be samples and columns the features. For any <img src="https://latex.codecogs.com/png.latex?m%20%5Ctimes%20n"> data matrix <img src="https://latex.codecogs.com/png.latex?A">, the SVD factors <img src="https://latex.codecogs.com/png.latex?A%20=%20U%20%5CSigma%20V%5E%7BT%7D"> where:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?U"> = an <img src="https://latex.codecogs.com/png.latex?m%20%5Ctimes%20m"> orthogonal matrix whose columns are the left singular vectors of <img src="https://latex.codecogs.com/png.latex?A">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?V"> = an <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> orthogonal matrix whose columns are the right singular vectors of <img src="https://latex.codecogs.com/png.latex?A">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5CSigma"> = is an <img src="https://latex.codecogs.com/png.latex?m%20%5Ctimes%20n"> diagonal matrix containing the singular values of <img src="https://latex.codecogs.com/png.latex?A"> in descending order along the diagonal. These values are non-negative and are the square roots of the eigenvalues of both <img src="https://latex.codecogs.com/png.latex?A%5E%7BT%7DA"> and <img src="https://latex.codecogs.com/png.latex?AA%5E%7BT%7D">.</p></li>
</ul>
<p>The remaining steps are shown in code below:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify the number of principal components to retain.</span></span>
<span id="cb1-10">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create random matrix with 100 samples and 50 features.</span></span>
<span id="cb1-13">Xinit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.5</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0-center columns in Xinit. Each column will now have mean 0. </span></span>
<span id="cb1-16">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xinit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Xinit.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute SVD of 0-centered data matrix X.</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># U : (100, 100) Columns represent left singular vectors.</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># VT: (50, 50) Rows represent right singular vectors.</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># S : (50,) Represents singular values of X. </span></span>
<span id="cb1-22">U, S, VT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(X)</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply dimensionality reduction (retain first k principal components).</span></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Xpca1 will have shape 100 x k. </span></span>
<span id="cb1-26">Xpca1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> VT[:k].T</span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Xpca1.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Xpca1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Xpca1.shape: (100, 5)</code></pre>
</div>
</div>
<p>This returns the top-5 principal components from the 0-centered data matrix <img src="https://latex.codecogs.com/png.latex?X">. This transformation can also be carried out in scikit-learn as follows:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.decomposition <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PCA</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Call pca.fit on 0-centered data matrix.</span></span>
<span id="cb3-5">pca <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PCA(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>k)</span>
<span id="cb3-6">pca.fit(X)</span>
<span id="cb3-7"></span>
<span id="cb3-8">Xpca2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pca.transform(X)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Xpca2.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Xpca2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-11"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Xpca2.shape: (100, 5)</code></pre>
</div>
</div>
<p>The first few rows of <code>Xpca1</code> and <code>Xpca2</code> can be compared. Notice that they are identical up to a sign:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">Xpca1[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, :]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>array([[ -1.0024489 ,  -8.45086232,  13.05495528, -32.18002702,   6.1897014 ],
       [ 38.32532794,   3.10016467, -34.9065906 ,  -4.45684708, -18.03986151],
       [  2.50382601,  29.88906322, -18.83018377,  -9.64833693, -18.46252148],
       [ -4.57804661,  -1.16308008,  22.67820152, -15.25819358, -12.15373192],
       [ -4.01382494,  -8.4219436 ,  18.33661249,   7.327393  ,  20.1264191 ],
       [ 15.97152692,   0.03394136, -17.74609475,  21.77608653, -23.06117564],
       [-19.18606004, -44.7392649 , -47.83180773,  -1.30574016, -33.77155819],
       [ 35.1510225 ,  -8.16265381,  21.78210602,  23.30058147,  26.5255693 ],
       [ 47.57005479, -39.33886869,   0.91133253,  10.09394219,   9.24710166],
       [-30.05011125,  13.09734398,  17.8311663 ,  13.25098519, -14.39827404]])</code></pre>
</div>
</div>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">Xpca2[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, :]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([[  1.0024489 ,  -8.45086232, -13.05495528,  32.18002702,  -6.1897014 ],
       [-38.32532794,   3.10016467,  34.9065906 ,   4.45684708,  18.03986151],
       [ -2.50382601,  29.88906322,  18.83018377,   9.64833693,  18.46252148],
       [  4.57804661,  -1.16308008, -22.67820152,  15.25819358,  12.15373192],
       [  4.01382494,  -8.4219436 , -18.33661249,  -7.327393  , -20.1264191 ],
       [-15.97152692,   0.03394136,  17.74609475, -21.77608653,  23.06117564],
       [ 19.18606004, -44.7392649 ,  47.83180773,   1.30574016,  33.77155819],
       [-35.1510225 ,  -8.16265381, -21.78210602, -23.30058147, -26.5255693 ],
       [-47.57005479, -39.33886869,  -0.91133253, -10.09394219,  -9.24710166],
       [ 30.05011125,  13.09734398, -17.8311663 , -13.25098519,  14.39827404]])</code></pre>
</div>
</div>
<p>The reason for the discrepancy is due to the fact that each singular vector is only uniquely determined up to sign, indeed in more generality it is only defined up to complex sign (i.e.&nbsp;up to multiplication by a complex number of modulus 1). For a deeper mathematical explanation of this, check out <a href="https://math.stackexchange.com/questions/1805191/calculating-svd-by-hand-resolving-sign-ambiguities-in-the-range-vectors/1805239#1805239">this</a> link.</p>
<p><br></p>
</section>
<section id="assessing-reconstruction-error" class="level3">
<h3 class="anchored" data-anchor-id="assessing-reconstruction-error">Assessing Reconstruction Error</h3>
<p>Once the principal components of a data matrix have been identified, we can get an idea of how well using k components approximates the original matrix. If we use all principal components, we should be able to recreate the data exactly. The objective is to identify some reduced number of components that captures enough variance in the original data while also eliminating redundant components. Thus, minimizing the reconstruction error is equivalent to maximizing the variance of the projected data. Using the <code>pca.inverse_transform</code> method, we can project our k-component matrix back into signal space (100 x 50 for our example), and compute the reconstruction error (the average difference between the original data matrix and our projected matrix):</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2">reconstruction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> jj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb9-5">    pca <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PCA(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>jj).fit(X)</span>
<span id="cb9-6">    Xpca <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pca.transform(X) </span>
<span id="cb9-7">    Xhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pca.inverse_transform(Xpca)</span>
<span id="cb9-8">    err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Xhat)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb9-9">    reconstruction_error.append((jj, err))</span></code></pre></div>
</div>
<p><br></p>
<p>We can then plot the recosntruction error as a function of the number of retained components:</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot reconstruction error as a function of k-components.</span></span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb10-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb10-5"></span>
<span id="cb10-6">xx, yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>reconstruction_error)</span>
<span id="cb10-7"></span>
<span id="cb10-8">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-9">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PCA reconstruction error vs. nbr. components"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb10-10">ax.plot(xx, yy, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>)</span>
<span id="cb10-11">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb10-12">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reconstruction error"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb10-13">ax.set_ylim(bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-14">ax.set_xlim(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-15">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb10-16">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb10-17">ax.get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x, p: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)))</span>
<span id="cb10-18">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb10-19">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb10-20">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-21"></span>
<span id="cb10-22">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/pca-from-scratch/pca-from-scratch_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>A few things to note about the reconstruction error curve:</p>
<ul>
<li><p>We started with random normal data, so there was no information in the original features to begin with. When applied to real-world data, you will typically see a sharp decrease in reconstruction error after some small set of k-components.</p></li>
<li><p>Notice when k = 50, the reconstruction error drops to 0. With 50 components, we are able to reproduce the original data exactly.</p></li>
</ul>
</section>
<section id="pca-loadings" class="level3">
<h3 class="anchored" data-anchor-id="pca-loadings">PCA Loadings</h3>
<p>PCA loadings are the coefficients of the linear combination of the original variables from which the principal components are constructed. From the scikit-learn’s <code>pca</code> output, we simply need to access the <code>pca.components_</code> attribute, the rows of which contain the eigenvectors associated with the first k principal components:</p>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb11-2"></span>
<span id="cb11-3">pca <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PCA(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb11-4">pca.fit(X)</span>
<span id="cb11-5"></span>
<span id="cb11-6">dfloadings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(pca.components_.T, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pc1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pc2"</span>]).sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pc1"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>)</span>
<span id="cb11-7">dfloadings.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">pc1</th>
<th data-quarto-table-cell-role="th">pc2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">27</td>
<td>0.367146</td>
<td>-0.153378</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">41</td>
<td>0.342124</td>
<td>0.050818</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">39</td>
<td>-0.302304</td>
<td>0.010788</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">34</td>
<td>-0.296221</td>
<td>-0.198985</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">45</td>
<td>0.260603</td>
<td>-0.155375</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">31</td>
<td>0.238631</td>
<td>-0.023786</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">21</td>
<td>0.198101</td>
<td>-0.186968</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">29</td>
<td>-0.191818</td>
<td>0.039887</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>0.191115</td>
<td>0.011552</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">37</td>
<td>0.173049</td>
<td>-0.032115</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The interpretation of this output is that the coefficient for column index 27 is .367146, and is the largest contributor to the score for each observation when applied to the original data.</p>
<p>We can show how the loadings are used to compute the PCA scores for the first sample in the dataset. Let’s find the first principal component of our original 0-centered data matrix <img src="https://latex.codecogs.com/png.latex?X">:</p>
<div id="cell-17" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2">pca <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PCA(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-3">Xpca <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pca.fit_transform(X)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(Xpca[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1.0024489]</code></pre>
</div>
</div>
<p>The value 1.0024489 is obtained by computing the dot product of the first principal component loading with the first row in <img src="https://latex.codecogs.com/png.latex?X">:</p>
<div id="cell-19" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2">np.dot(pca.components_.T.ravel(), X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>1.0024488966036473</code></pre>
</div>
</div>
</section>
<section id="loading-plot" class="level3">
<h3 class="anchored" data-anchor-id="loading-plot">Loading Plot</h3>
<p>PCA loading plots are visual tools used to interpret the results of PCA by showing how much each variable contributes to the principal components. These plots help in understanding the underlying structure of the data and in identifying which variables are most important in driving the differences between observations. They provide insight into the relationship between the variables and the principal components. In the next cell, we show how to create a loading plot for the iris dataset in scikit-learn.</p>
<div id="cell-21" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb16-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb16-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_iris</span>
<span id="cb16-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.decomposition <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PCA</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load iris data.</span></span>
<span id="cb16-8">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_iris()</span>
<span id="cb16-9">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>]</span>
<span id="cb16-10">feature_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature_names"</span>]</span>
<span id="cb16-11"></span>
<span id="cb16-12"></span>
<span id="cb16-13">pca <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PCA(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb16-14">pca.fit(X)</span>
<span id="cb16-15">loadings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pca.components_.T</span>
<span id="cb16-16"></span>
<span id="cb16-17"></span>
<span id="cb16-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create loading plot.</span></span>
<span id="cb16-19">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-20">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Iris dataset loading plot"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb16-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, feature <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(feature_names):</span>
<span id="cb16-22">    ax.arrow(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, loadings[ii, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], loadings[ii, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], head_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>, head_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span>)</span>
<span id="cb16-23">    ax.text(loadings[ii, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.05</span>, loadings[ii, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.05</span>, feature, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>)</span>
<span id="cb16-24"></span>
<span id="cb16-25">ax.set_xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>) </span>
<span id="cb16-26">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pc1"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb16-27">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pc2"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb16-28">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb16-29">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb16-30">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-31">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-32">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-33"></span>
<span id="cb16-34">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/pca-from-scratch/pca-from-scratch_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>In the direction of the first principal component, petal length has the largest effect, whereas sepal length is the dominant feature in the direction of the second principal component.</p>
</section>
<section id="using-pca-in-ml-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="using-pca-in-ml-pipeline">Using PCA in ML Pipeline</h3>
<p>How might we use PCA in a typical machine learning workflow?</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.decomposition <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PCA</span>
<span id="cb17-2"></span>
<span id="cb17-3">pca <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PCA(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>).fit(Xtrain)</span>
<span id="cb17-4">Xtrain_pca <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pca.transform(Xtrain)</span>
<span id="cb17-5">Xtest_pca <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pca.transform(Xtest)</span></code></pre></div>
<p>Xtrain and Xtest would then be used as the train and test sets as in any other machine learning setup. Note that we call <code>fit</code> on the training set, then only <code>transform</code> on the test set. This prevents information from the test set leaking into the training data. <code>Xtrain_pca</code> and <code>Xtest_pca</code> will have the same number of rows as <code>Xtrain</code> and <code>Xtest</code>, but will only have 5 features, which will be less than or equal to the number of features in <code>Xtrain</code> and <code>Xtest</code>.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/pca-from-scratch/pca-from-scratch.html</guid>
  <pubDate>Sun, 28 Jan 2024 06:00:00 GMT</pubDate>
</item>
</channel>
</rss>
