<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>The Pleasure of Finding Things Out: A blog by James Triveri</title>
<link>https://www.jtrive.com/#category=Python</link>
<atom:link href="https://www.jtrive.com/index-python.xml" rel="self" type="application/rss+xml"/>
<description>A technical blog by James Triveri&quot;</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Sun, 01 Sep 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>Introduction to Folium</title>
  <link>https://www.jtrive.com/posts/getting-started-with-folium/getting-started-with-folium.html</link>
  <description><![CDATA[ 





<p>Learning geospatial data science is crucial in today’s data-driven world for several reasons. Geospatial data science enables individuals to understand and analyze complex spatial phenomena, including natural disasters, urbanization, climate change, and environmental degradation. By gaining familiarity with geospatial analysis techniques, individuals can gain insights into spatial patterns, relationships and processes, which is essential for making informed decisions.</p>
<p>Moreover, geospatial data science provides valuable skills and knowledge that are highly relevant across various domains and industries. From urban planning and environmental management to public health and disaster response, proficiency in geospatial data science opens up diverse career opportunities and enhances professional development prospects.</p>
<p>Additionally, learning geospatial data science fosters critical thinking, problem-solving, and interdisciplinary collaboration skills. It requires learners to integrate spatial data from multiple sources, apply statistical and computational methods, and communicate findings effectively to diverse stakeholders.</p>
<p>Furthermore, as the availability and complexity of geospatial data continue to grow with advancements in technology and data collection methods, the demand for skilled geospatial data scientists is expected to rise. Therefore, investing in learning geospatial data science equips individuals with valuable skills that are not only relevant today but also increasingly essential for future career success.</p>
<section id="folium" class="level2">
<h2 class="anchored" data-anchor-id="folium">Folium</h2>
<p>Folium is a Python library used for visualizing geospatial data interactively on web maps. Leveraging the capabilities of Leaflet.js, Folium allows users to create maps directly within Python code, making it an accessible and powerful tool for geospatial visualization and analysis.</p>
<p>With Folium, users can create various types of interactive maps, including point maps, choropleth maps, heatmaps, and vector overlays, by simply specifying geographic coordinates and map styling options. The library provides intuitive APIs for customizing map features such as markers, popups, tooltips, legends, and map layers, enabling users to create visually appealing and informative maps with ease.</p>
<p>Folium integrates with other popular Python libraries such as Pandas and Matplotlib, allowing users to visualize geospatial data stored in DataFrame objects or plot data directly onto Folium maps. It also supports various tile providers and basemaps, enabling users to choose from a wide range of map styles and sources.</p>
</section>
<section id="creating-interactive-maps-in-folium" class="level2">
<h2 class="anchored" data-anchor-id="creating-interactive-maps-in-folium">Creating Interactive Maps in Folium</h2>
<p>Creating maps with folium is straightforward. We simply pass the latitude and longitude of the point of interest (POI) and specify a zoom level. We can then drop a marker on the point of interest, and interact with the map however we’d like.</p>
<p>We can get the latitude and longitude for a given POI by performing a google search. Latitude ranges from -90 to 90 degrees, longitude from -180 to 180 degrees. The latitude and longitude for the DMACC Ankeny campus is <strong>(41.5996, -93.6276)</strong>, which is <strong>(latitude, longitude)</strong>. Note that for US coordinates, the longitude will always be negative. An illustration is provided below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/getting-started-with-folium/lon-lat.png" class="img-fluid figure-img"></p>
<figcaption>img01</figcaption>
</figure>
</div>
<p>To illustrate, let’s render a map over the park I used to play at as a child (Durkin Park on the southwest side of Chicago). Note that zoom level provides more detail as the number gets larger. A zoom level of 4 would show the entire US; a zoom level of 17 would render roughly a city block:</p>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Latitude and longitude for Durkin Park, 84th &amp; Kolin Ave, Chicago IL. </span></span>
<span id="cb1-5">lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.739</span></span>
<span id="cb1-6">lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.729</span></span>
<span id="cb1-7">zoom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zoom)</span>
<span id="cb1-10">folium.Marker(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon]).add_to(m)</span>
<span id="cb1-11"></span>
<span id="cb1-12">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_cd856410cd725d4ba42a6a4f368b2615 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_cd856410cd725d4ba42a6a4f368b2615&quot; ></div>
        
</body>
<script>
    
    
            var map_cd856410cd725d4ba42a6a4f368b2615 = L.map(
                &quot;map_cd856410cd725d4ba42a6a4f368b2615&quot;,
                {
                    center: [41.739, -87.729],
                    crs: L.CRS.EPSG3857,
                    zoom: 18,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_f997475a2304f79bf56dc959368cd0e1 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_f997475a2304f79bf56dc959368cd0e1.addTo(map_cd856410cd725d4ba42a6a4f368b2615);
        
    
            var marker_b522f7453c8990c6b667046af3544d9b = L.marker(
                [41.739, -87.729],
                {}
            ).addTo(map_cd856410cd725d4ba42a6a4f368b2615);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p>A few things to note about the code used to render the map:</p>
<ul>
<li>We start by importing the folium library.</li>
<li>The lat/lon for Durkin Park was obtained by a simple google search.</li>
<li>I used a level 18 zoom but this is not necessary since the map is dynamic and can be resized.</li>
<li>To add the marker to the map, we call <code>.add_to(m)</code>.</li>
<li>We included <code>m</code> by itself in the last line of the cell in order for the map to render. Without doing this, the map would not display.</li>
</ul>
<p>We can change the color of the marker by passing an additional argument into <code>folium.Marker</code>. I’ll place a second marker in another park I used to visit when I was younger, Scottsdale Park. I’ll make this second marker red.</p>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Durkin Park coordinates.</span></span>
<span id="cb2-3">lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.739</span></span>
<span id="cb2-4">lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.729</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scottsdale Park coordinates. </span></span>
<span id="cb2-7">lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.7416</span></span>
<span id="cb2-8">lon1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.7356</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center map at midway point between parks.</span></span>
<span id="cb2-11">mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-12">mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lon1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify zoom level. </span></span>
<span id="cb2-15">zoom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize map.</span></span>
<span id="cb2-18">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zoom)</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Durkin Park marker.</span></span>
<span id="cb2-21">folium.Marker(</span>
<span id="cb2-22">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat0, lon0],</span>
<span id="cb2-23">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Durkin Park"</span>,</span>
<span id="cb2-24">    ).add_to(m)</span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Scottsdale Park marker.</span></span>
<span id="cb2-27">folium.Marker(</span>
<span id="cb2-28">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat1, lon1],</span>
<span id="cb2-29">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scottsdale Park"</span>,</span>
<span id="cb2-30">    icon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>folium.Icon(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb2-31">    ).add_to(m)</span>
<span id="cb2-32"></span>
<span id="cb2-33">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_0390f039fde0da559498446d2a3da9d7 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_0390f039fde0da559498446d2a3da9d7&quot; ></div>
        
</body>
<script>
    
    
            var map_0390f039fde0da559498446d2a3da9d7 = L.map(
                &quot;map_0390f039fde0da559498446d2a3da9d7&quot;,
                {
                    center: [41.7403, -87.73230000000001],
                    crs: L.CRS.EPSG3857,
                    zoom: 16,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_f1d08f23817f4ed4a0dd4bfe14113e0e = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_f1d08f23817f4ed4a0dd4bfe14113e0e.addTo(map_0390f039fde0da559498446d2a3da9d7);
        
    
            var marker_c032973fe2b2a8effe89ec7a2717ccbd = L.marker(
                [41.739, -87.729],
                {}
            ).addTo(map_0390f039fde0da559498446d2a3da9d7);
        
    
        var popup_c107a5eb06ec6e09c1eccb01c37e0e74 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_de4e4adcf06e31c7827c71082f2d2289 = $(`<div id=&quot;html_de4e4adcf06e31c7827c71082f2d2289&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Durkin Park</div>`)[0];
                popup_c107a5eb06ec6e09c1eccb01c37e0e74.setContent(html_de4e4adcf06e31c7827c71082f2d2289);
            
        

        marker_c032973fe2b2a8effe89ec7a2717ccbd.bindPopup(popup_c107a5eb06ec6e09c1eccb01c37e0e74)
        ;

        
    
    
            var marker_1b28327c0e9079b53748f4c286dc2087 = L.marker(
                [41.7416, -87.7356],
                {}
            ).addTo(map_0390f039fde0da559498446d2a3da9d7);
        
    
            var icon_8ea62c90f8270c29eed1843f1a4992ee = L.AwesomeMarkers.icon(
                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;red&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}
            );
            marker_1b28327c0e9079b53748f4c286dc2087.setIcon(icon_8ea62c90f8270c29eed1843f1a4992ee);
        
    
        var popup_0581c82e8ed1a0713081e31c89c96bd6 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_248ad0ab52deb5c75f5fdae23d1361df = $(`<div id=&quot;html_248ad0ab52deb5c75f5fdae23d1361df&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Scottsdale Park</div>`)[0];
                popup_0581c82e8ed1a0713081e31c89c96bd6.setContent(html_248ad0ab52deb5c75f5fdae23d1361df);
            
        

        marker_1b28327c0e9079b53748f4c286dc2087.bindPopup(popup_0581c82e8ed1a0713081e31c89c96bd6)
        ;

        
    
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>Notice that the <code>popup</code> argument was supplied to <code>folium.Marker</code>. Now when we click on the markers, whatever text we supply to <code>popup</code> will be shown on the map.</p>
<p>We can connect the markers in the map by using <code>folium.PolyLine</code>. We pass it a list of lat/lon pairs, and it draws a line connecting the points. Let’s connect the two parks with a green line:</p>
<div id="cell-7" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Durkin Park coordinates.</span></span>
<span id="cb3-3">lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.739</span></span>
<span id="cb3-4">lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.729</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scottsdale Park coordinates. </span></span>
<span id="cb3-7">lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.7416</span></span>
<span id="cb3-8">lon1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.7356</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center map at midway point between parks.</span></span>
<span id="cb3-11">mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-12">mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lon1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify zoom level. </span></span>
<span id="cb3-15">zoom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize map.</span></span>
<span id="cb3-18">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zoom)</span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Durkin Park marker.</span></span>
<span id="cb3-21">folium.Marker(</span>
<span id="cb3-22">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat0, lon0],</span>
<span id="cb3-23">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Durkin Park"</span>,</span>
<span id="cb3-24">    ).add_to(m)</span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Scottsdale Park marker.</span></span>
<span id="cb3-27">folium.Marker(</span>
<span id="cb3-28">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat1, lon1],</span>
<span id="cb3-29">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scottsdale Park"</span>,</span>
<span id="cb3-30">    icon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>folium.Icon(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb3-31">    ).add_to(m)</span>
<span id="cb3-32"></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect parks with green line. </span></span>
<span id="cb3-34">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(lat0, lon0), (lat1, lon1)]</span>
<span id="cb3-35">folium.PolyLine(points, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>).add_to(m)</span>
<span id="cb3-36"></span>
<span id="cb3-37">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_cafa663ffe5b0c2e73d28792b24f021e {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_cafa663ffe5b0c2e73d28792b24f021e&quot; ></div>
        
</body>
<script>
    
    
            var map_cafa663ffe5b0c2e73d28792b24f021e = L.map(
                &quot;map_cafa663ffe5b0c2e73d28792b24f021e&quot;,
                {
                    center: [41.7403, -87.73230000000001],
                    crs: L.CRS.EPSG3857,
                    zoom: 16,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_42b3d08d23fcc2959f842ccfa373dde5 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_42b3d08d23fcc2959f842ccfa373dde5.addTo(map_cafa663ffe5b0c2e73d28792b24f021e);
        
    
            var marker_77bd6738d2cb38080b88f816c6ba6b20 = L.marker(
                [41.739, -87.729],
                {}
            ).addTo(map_cafa663ffe5b0c2e73d28792b24f021e);
        
    
        var popup_19047bc0fd4d2f004e80a4454ad75688 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_f55c8512714a73977a02cac9e4163e0f = $(`<div id=&quot;html_f55c8512714a73977a02cac9e4163e0f&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Durkin Park</div>`)[0];
                popup_19047bc0fd4d2f004e80a4454ad75688.setContent(html_f55c8512714a73977a02cac9e4163e0f);
            
        

        marker_77bd6738d2cb38080b88f816c6ba6b20.bindPopup(popup_19047bc0fd4d2f004e80a4454ad75688)
        ;

        
    
    
            var marker_8b2c7c5f2ad62ddca9c5bdb1464ce8a5 = L.marker(
                [41.7416, -87.7356],
                {}
            ).addTo(map_cafa663ffe5b0c2e73d28792b24f021e);
        
    
            var icon_c5ba6488664b60741bf228ff07f59cab = L.AwesomeMarkers.icon(
                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;red&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}
            );
            marker_8b2c7c5f2ad62ddca9c5bdb1464ce8a5.setIcon(icon_c5ba6488664b60741bf228ff07f59cab);
        
    
        var popup_f321726ea51c2cb82179e934f2157f3a = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_7566338c12b173ed99dbf1c622a634c6 = $(`<div id=&quot;html_7566338c12b173ed99dbf1c622a634c6&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Scottsdale Park</div>`)[0];
                popup_f321726ea51c2cb82179e934f2157f3a.setContent(html_7566338c12b173ed99dbf1c622a634c6);
            
        

        marker_8b2c7c5f2ad62ddca9c5bdb1464ce8a5.bindPopup(popup_f321726ea51c2cb82179e934f2157f3a)
        ;

        
    
    
            var poly_line_8371564e57dc1a34e5b243b09f75579a = L.polyline(
                [[41.739, -87.729], [41.7416, -87.7356]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;green&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: false, &quot;fillColor&quot;: &quot;green&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_cafa663ffe5b0c2e73d28792b24f021e);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>One final point: We can replace the standard markers with circle markers by using <code>folium.CircleMarker</code>. <code>radius</code> controls the size of the markers and <code>color/fill_color</code> set the color of the marker:</p>
<div id="cell-9" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zoom)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Durkin Park circle marker.</span></span>
<span id="cb4-5">folium.CircleMarker(</span>
<span id="cb4-6">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat0, lon0], </span>
<span id="cb4-7">    radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, </span>
<span id="cb4-8">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Durkin Park"</span>,</span>
<span id="cb4-9">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb4-10">    fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb4-11">    fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-12">    fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-13">    ).add_to(m)</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Scottsdale Park marker.</span></span>
<span id="cb4-16">folium.CircleMarker(</span>
<span id="cb4-17">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat1, lon1], </span>
<span id="cb4-18">    radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, </span>
<span id="cb4-19">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scottsdale Park"</span>,</span>
<span id="cb4-20">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb4-21">    fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb4-22">    fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-23">    fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-24">    ).add_to(m)</span>
<span id="cb4-25"></span>
<span id="cb4-26"></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect parks with green line. </span></span>
<span id="cb4-28">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(lat0, lon0), (lat1, lon1)]</span>
<span id="cb4-29">folium.PolyLine(points, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>).add_to(m)</span>
<span id="cb4-30"></span>
<span id="cb4-31">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_2559a1f643f43870be214ea5397396a8 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_2559a1f643f43870be214ea5397396a8&quot; ></div>
        
</body>
<script>
    
    
            var map_2559a1f643f43870be214ea5397396a8 = L.map(
                &quot;map_2559a1f643f43870be214ea5397396a8&quot;,
                {
                    center: [41.7403, -87.73230000000001],
                    crs: L.CRS.EPSG3857,
                    zoom: 16,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_781212999bf028a93893216298447816 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_781212999bf028a93893216298447816.addTo(map_2559a1f643f43870be214ea5397396a8);
        
    
            var circle_marker_2e0b623e6946d0403ff93ea9bfa48fb4 = L.circleMarker(
                [41.739, -87.729],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 7, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_2559a1f643f43870be214ea5397396a8);
        
    
        var popup_0d4b11ff32b0b7a358aa081ee1fb3f05 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_a0507c36dfe912d29cb4607016727fb8 = $(`<div id=&quot;html_a0507c36dfe912d29cb4607016727fb8&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Durkin Park</div>`)[0];
                popup_0d4b11ff32b0b7a358aa081ee1fb3f05.setContent(html_a0507c36dfe912d29cb4607016727fb8);
            
        

        circle_marker_2e0b623e6946d0403ff93ea9bfa48fb4.bindPopup(popup_0d4b11ff32b0b7a358aa081ee1fb3f05)
        ;

        
    
    
            var circle_marker_c497bc67ad50d4b27b57dc7787f46bcc = L.circleMarker(
                [41.7416, -87.7356],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 7, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_2559a1f643f43870be214ea5397396a8);
        
    
        var popup_d54f4e6ff9baa4d0e25872e09b7ae160 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_f834993b2b3b49f946a6fc5bf12a6972 = $(`<div id=&quot;html_f834993b2b3b49f946a6fc5bf12a6972&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Scottsdale Park</div>`)[0];
                popup_d54f4e6ff9baa4d0e25872e09b7ae160.setContent(html_f834993b2b3b49f946a6fc5bf12a6972);
            
        

        circle_marker_c497bc67ad50d4b27b57dc7787f46bcc.bindPopup(popup_d54f4e6ff9baa4d0e25872e09b7ae160)
        ;

        
    
    
            var poly_line_0a7121955f355f8730616c216224bea5 = L.polyline(
                [[41.739, -87.729], [41.7416, -87.7356]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;green&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: false, &quot;fillColor&quot;: &quot;green&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_2559a1f643f43870be214ea5397396a8);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>The International Space Station (ISS) is a collaborative effort among multiple nations, serving as a hub for scientific research and international cooperation in space exploration. The ISS orbits the Earth at an astonishing speed of approximately 17,500 miles per hour, completing an orbit around the planet approximately every 90 minutes.</p>
<p>The <code>coords</code> list in the next cell represents the position as latitude-longitude pairs of the ISS sampled every minute for 20 minutes. We can render each of the 20 points as red circle markers connected by a red dashed line. Note that it is not necessary to call <code>folium.CircleMarker</code> 20 times: Use a for loop to iterate over the <code>coords</code> list.</p>
<div id="cell-11" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-3">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.4183</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">35.337</span>),</span>
<span id="cb5-4">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">49.3934</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.7562</span>),</span>
<span id="cb5-5">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">48.0881</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.4462</span>),</span>
<span id="cb5-6">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">46.5282</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">19.4374</span>),</span>
<span id="cb5-7">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44.7411</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.743</span>),</span>
<span id="cb5-8">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.7364</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.3267</span>),</span>
<span id="cb5-9">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.5727</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.2481</span>),</span>
<span id="cb5-10">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">38.2576</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.4505</span>),</span>
<span id="cb5-11">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">35.8123</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0896</span>),</span>
<span id="cb5-12">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">33.2554</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.3975</span>),</span>
<span id="cb5-13">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30.6031</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.4986</span>),</span>
<span id="cb5-14">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">27.8697</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.4178</span>),</span>
<span id="cb5-15">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.0674</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.1786</span>),</span>
<span id="cb5-16">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">22.197</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.8122</span>), </span>
<span id="cb5-17">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">19.2887</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.3195</span>),</span>
<span id="cb5-18">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">16.3407</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.7295</span>),</span>
<span id="cb5-19">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.3611</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">23.059</span>), </span>
<span id="cb5-20">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.3562</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.325</span>),</span>
<span id="cb5-21">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.3323</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">27.5427</span>), </span>
<span id="cb5-22">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.2953</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.7267</span>)</span>
<span id="cb5-23">    ]</span>
<span id="cb5-24"></span>
<span id="cb5-25"></span>
<span id="cb5-26">lats, lons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>coords)</span>
<span id="cb5-27">mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(lats) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lats)</span>
<span id="cb5-28">mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(lons) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lons)</span>
<span id="cb5-29"></span>
<span id="cb5-30">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb5-31"></span>
<span id="cb5-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> lat, lon <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> coords:</span>
<span id="cb5-33"></span>
<span id="cb5-34">    folium.CircleMarker(</span>
<span id="cb5-35">        location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], </span>
<span id="cb5-36">        radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb5-37">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb5-38">        fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb5-39">        fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-40">        fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-41">        ).add_to(m)</span>
<span id="cb5-42"></span>
<span id="cb5-43"></span>
<span id="cb5-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect coords with red dashed line.</span></span>
<span id="cb5-45">folium.PolyLine(coords, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, dash_array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span>).add_to(m)</span>
<span id="cb5-46"></span>
<span id="cb5-47">m</span>
<span id="cb5-48"></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_5019534892c9825414fcf011c574038c {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_5019534892c9825414fcf011c574038c&quot; ></div>
        
</body>
<script>
    
    
            var map_5019534892c9825414fcf011c574038c = L.map(
                &quot;map_5019534892c9825414fcf011c574038c&quot;,
                {
                    center: [30.325749999999992, 2.7175800000000025],
                    crs: L.CRS.EPSG3857,
                    zoom: 4,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_789127f332392bed4916c8c1b64cd430 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_789127f332392bed4916c8c1b64cd430.addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_dbd330c6e72dfeb9a8210d6ba98436a7 = L.circleMarker(
                [50.4183, -35.337],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_4cfefdcc9938b64218c3edad81d20bde = L.circleMarker(
                [49.3934, -29.7562],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_114ba3dd0f517b0009c35cab78c0c041 = L.circleMarker(
                [48.0881, -24.4462],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_1e74c6af3cb6b1d41f86cc71203e1209 = L.circleMarker(
                [46.5282, -19.4374],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_f161fc442366f125b395c8ee07f1413d = L.circleMarker(
                [44.7411, -14.743],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_2eca911684441980c5d4d83a41c1ec1d = L.circleMarker(
                [42.7364, -10.3267],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_7801676c154ce1baf2d308fa81e0520a = L.circleMarker(
                [40.5727, -6.2481],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_28ee765082c108a82ad0dbd9afbc0953 = L.circleMarker(
                [38.2576, -2.4505],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_5e4aa6ee3e0ae4f8edf83f62de22bcfa = L.circleMarker(
                [35.8123, 1.0896],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_c46c3726974cdb0e444a26e9747aa52f = L.circleMarker(
                [33.2554, 4.3975],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_e04702d6208c6754387cadfdb0f9c67e = L.circleMarker(
                [30.6031, 7.4986],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_bb16e9c9dc16027be099d3e3c6a2f5a8 = L.circleMarker(
                [27.8697, 10.4178],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_49c7e7325c142d2a55ed048a60f92498 = L.circleMarker(
                [25.0674, 13.1786],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_aac339f316801d5d0de40bebb1884446 = L.circleMarker(
                [22.197, 15.8122],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_3e3a5a2bf76661f27c49d5598bfb355a = L.circleMarker(
                [19.2887, 18.3195],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_7500983d1c39caf9f77426d7f8cc88ac = L.circleMarker(
                [16.3407, 20.7295],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_64d2f7ed370962fbf08de028c24ef35a = L.circleMarker(
                [13.3611, 23.059],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_ad436a27b49b6ed91634cff60a4e2f9b = L.circleMarker(
                [10.3562, 25.325],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_19b7e716bcd8c04d6de6542c9e4e6527 = L.circleMarker(
                [7.3323, 27.5427],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_836e3d69472ab2b9f29976f242b29b6e = L.circleMarker(
                [4.2953, 29.7267],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var poly_line_83bd5d8b950b32a1480d449f50f42764 = L.polyline(
                [[50.4183, -35.337], [49.3934, -29.7562], [48.0881, -24.4462], [46.5282, -19.4374], [44.7411, -14.743], [42.7364, -10.3267], [40.5727, -6.2481], [38.2576, -2.4505], [35.8123, 1.0896], [33.2554, 4.3975], [30.6031, 7.4986], [27.8697, 10.4178], [25.0674, 13.1786], [22.197, 15.8122], [19.2887, 18.3195], [16.3407, 20.7295], [13.3611, 23.059], [10.3562, 25.325], [7.3323, 27.5427], [4.2953, 29.7267]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: &quot;5&quot;, &quot;dashOffset&quot;: null, &quot;fill&quot;: false, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <category>Geospatial</category>
  <guid>https://www.jtrive.com/posts/getting-started-with-folium/getting-started-with-folium.html</guid>
  <pubDate>Sun, 01 Sep 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Geospatial Vector Data</title>
  <link>https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data.html</link>
  <description><![CDATA[ 





<p>Geospatial vector data is a way of representing geographic features in a digital format using points, lines, and polygons. Unlike raster data, which represents geographic data as a grid of cells or pixels, vector data represents features more precisely with distinct shapes and boundaries. Each vector feature can have associated attributes, such as names, types, or other descriptive information.</p>
<section id="types-of-geospatial-vector-data" class="level3">
<h3 class="anchored" data-anchor-id="types-of-geospatial-vector-data">Types of Geospatial Vector Data</h3>
<ul>
<li><p><strong>Points</strong>: Represent discrete locations such as cities, landmarks, or individual trees. Each point has a specific location defined by coordinates (e.g., latitude and longitude).</p></li>
<li><p><strong>Lines</strong> (or polylines): Represent linear features such as roads, rivers, or boundaries. Lines are composed of a series of connected points.</p></li>
<li><p><strong>Polygons</strong> (or multipolygons): Represent areas or shapes such as lakes, parks, or country borders. Polygons are defined by a series of points that create a closed shape.</p></li>
</ul>
<p>Shapefiles are one of the most common formats for vector data. They store points, lines, and polygons along with attribute information. The US Census Bureau makes a number of shapefiles available <a href="https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html">here</a>. In this notebook, we’ll walkthrough how to load shapefiles into GeoPandas, plotting the boundaries and create a choropleth map based on a second dataset (choropleth maps are those where the color of each shape is based on the value of an associated variable).</p>
<p>To start, download US state shapefile <em>cb_2018_us_state_500k.zip</em> from the <a href="https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html">United States Census Bureau boundary files page</a>. Under the <em>State</em> subheader, you will see three files:</p>
<ul>
<li><em>cb_2018_us_state_500k.zip</em></li>
<li><em>cb_2018_us_state_5m.zip</em></li>
<li><em>cb_2018_us_state_20m.zip</em></li>
</ul>
<p>The 500k files are the most detailed, but also the largest. The 20m files are the smallest, but at the cost of some dramatic simplification. The 5m files fall somewhere between the other two. We will work with the 500k files.</p>
<p>Once downloaded, the shapefile can be loaded into a GeoPandas DataFrame as follows:</p>
<div id="cell-2" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geopandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gpd</span>
<span id="cb1-5"></span>
<span id="cb1-6">shp_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cb_2018_us_state_500k.zip"</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">dfshp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(shp_path)</span>
<span id="cb1-9"></span>
<span id="cb1-10">dfshp.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">STATEFP</th>
<th data-quarto-table-cell-role="th">STATENS</th>
<th data-quarto-table-cell-role="th">AFFGEOID</th>
<th data-quarto-table-cell-role="th">GEOID</th>
<th data-quarto-table-cell-role="th">STUSPS</th>
<th data-quarto-table-cell-role="th">NAME</th>
<th data-quarto-table-cell-role="th">LSAD</th>
<th data-quarto-table-cell-role="th">ALAND</th>
<th data-quarto-table-cell-role="th">AWATER</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>28</td>
<td>01779790</td>
<td>0400000US28</td>
<td>28</td>
<td>MS</td>
<td>Mississippi</td>
<td>00</td>
<td>121533519481</td>
<td>3926919758</td>
<td>MULTIPOLYGON (((-88.50297 30.21523, -88.49176 ...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>37</td>
<td>01027616</td>
<td>0400000US37</td>
<td>37</td>
<td>NC</td>
<td>North Carolina</td>
<td>00</td>
<td>125923656064</td>
<td>13466071395</td>
<td>MULTIPOLYGON (((-75.72681 35.93584, -75.71827 ...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>40</td>
<td>01102857</td>
<td>0400000US40</td>
<td>40</td>
<td>OK</td>
<td>Oklahoma</td>
<td>00</td>
<td>177662925723</td>
<td>3374587997</td>
<td>POLYGON ((-103.00257 36.52659, -103.00219 36.6...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>51</td>
<td>01779803</td>
<td>0400000US51</td>
<td>51</td>
<td>VA</td>
<td>Virginia</td>
<td>00</td>
<td>102257717110</td>
<td>8528531774</td>
<td>MULTIPOLYGON (((-75.74241 37.80835, -75.74151 ...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>54</td>
<td>01779805</td>
<td>0400000US54</td>
<td>54</td>
<td>WV</td>
<td>West Virginia</td>
<td>00</td>
<td>62266474513</td>
<td>489028543</td>
<td>POLYGON ((-82.64320 38.16909, -82.64300 38.169...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>The geometry column is a special column in a GeoDataFrame that stores the geometric shapes associated with each row (in this case, the shapes in latitude-longitude pairs that define the boundary of each state). This column contains the vector data that defines the spatial features in the dataset. Some states have boundaries defined by a MULTIPOLYGON, such as Hawaii, whose boundary consists of multiple closed POLYGONS. If it isn’t already present, the geometry column needs to be defined.</p>
<p>We can plot the data present in the present in the shapefile by calling the GeoDataFrame’s <code>plot</code> method:</p>
<div id="cell-4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">dfshp.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Let’s zoom in and focus on a map of the lower 48 states only:</p>
<div id="cell-6" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">exclude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"American Samoa"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alaska"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hawaii"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Guam"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"United States Virgin Islands"</span>,</span>
<span id="cb3-3">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Commonwealth of the Northern Mariana Islands"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Puerto Rico"</span>]</span>
<span id="cb3-4"></span>
<span id="cb3-5">dfshp48 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfshp[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>dfshp.NAME.isin(exclude)].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">dfshp48.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>We can get a better view of the boundaries of each state by calling <code>boundary.plot</code>:</p>
<div id="cell-8" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">dfshp48.boundary.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>By default, the plots rendered via GeoPandas are smaller than we might like. We can increase the size of the rendered map, suppress ticklabels, change the boundary color and add a title as follows:</p>
<div id="cell-10" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-3"></span>
<span id="cb5-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U.S. Boundaries - Lower 48 States"</span>)</span>
<span id="cb5-7">dfshp48.boundary.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb5-10"></span>
<span id="cb5-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>To overlay the state name at the center of each state, use:</p>
<div id="cell-12" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-3">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U.S. Boundaries - Lower 48 States"</span>)</span>
<span id="cb6-4">dfshp48.boundary.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>)</span>
<span id="cb6-5">dfshp48.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: ax.annotate(x.NAME, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x.geometry.centroid.coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-6">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb6-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>In the shapefile, ALAND and AWATER represent the land and water area of each state in square meters. To create a choropleth map based on the natural log of AWATER, include the <code>column</code> argument to the <code>plot</code> method:</p>
<div id="cell-14" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute natural log of AWATER to get better separation by state.</span></span>
<span id="cb7-3">dfshp48[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_AWATER"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(dfshp48[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AWATER"</span>])</span>
<span id="cb7-4">dfshp48.plot(column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_AWATER"</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plasma"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>We can reformat the map as before, while also adding a legend to give context the difference in colors by state. Options for colormaps are available <a href="https://matplotlib.org/stable/users/explain/colors/colormaps.html">here</a>:</p>
<div id="cell-16" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-3">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ln(AWATER) - Lower 48 States"</span>)</span>
<span id="cb8-4">dfshp48.plot(</span>
<span id="cb8-5">    ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_AWATER"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>, </span>
<span id="cb8-6">    cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gist_rainbow"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.750</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb8-7">    legend_kwds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ln(AWATER)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orientation"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vertical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shrink"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>}</span>
<span id="cb8-8">    )</span>
<span id="cb8-9">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb8-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="congressional-district-shapefiles" class="level3">
<h3 class="anchored" data-anchor-id="congressional-district-shapefiles">Congressional District Shapefiles</h3>
<p>For variety, let’s download the Congressional District shapefile and plot the boundaries. It is available at the same link as above, and is identified as <em>cb_2018_us_cd116_500k.zip</em>. Reading the file into GeoPandas and displaying the first 5 rows yields:</p>
<div id="cell-18" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2">dfc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cb_2018_us_cd116_500k.zip"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dfc.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dfc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-5"></span>
<span id="cb9-6">dfc.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dfc.shape: (441, 9)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="62">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">STATEFP</th>
<th data-quarto-table-cell-role="th">CD116FP</th>
<th data-quarto-table-cell-role="th">AFFGEOID</th>
<th data-quarto-table-cell-role="th">GEOID</th>
<th data-quarto-table-cell-role="th">LSAD</th>
<th data-quarto-table-cell-role="th">CDSESSN</th>
<th data-quarto-table-cell-role="th">ALAND</th>
<th data-quarto-table-cell-role="th">AWATER</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>17</td>
<td>10</td>
<td>5001600US1710</td>
<td>1710</td>
<td>C2</td>
<td>116</td>
<td>777404163</td>
<td>31605644</td>
<td>POLYGON ((-88.19882 42.41557, -88.19860 42.415...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>47</td>
<td>06</td>
<td>5001600US4706</td>
<td>4706</td>
<td>C2</td>
<td>116</td>
<td>16770155959</td>
<td>324676580</td>
<td>POLYGON ((-87.15023 36.56770, -87.14962 36.568...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>48</td>
<td>06</td>
<td>5001600US4806</td>
<td>4806</td>
<td>C2</td>
<td>116</td>
<td>5564805243</td>
<td>255530191</td>
<td>POLYGON ((-97.38860 32.61731, -97.38856 32.618...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>48</td>
<td>07</td>
<td>5001600US4807</td>
<td>4807</td>
<td>C2</td>
<td>116</td>
<td>419784487</td>
<td>3069802</td>
<td>POLYGON ((-95.77383 29.87515, -95.76962 29.875...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>48</td>
<td>26</td>
<td>5001600US4826</td>
<td>4826</td>
<td>C2</td>
<td>116</td>
<td>2349987793</td>
<td>191353567</td>
<td>POLYGON ((-97.39826 32.99996, -97.39792 33.013...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We again display the boundaries:</p>
<div id="cell-20" class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2">dfc.boundary.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We’d like to focus on the lower 48 states again, but this time the shapefile doesn’t have a NAME column. How should we proceed?</p>
<p>One approach is to define a bounding box that encloses the lower 48 states, then filter the shapefile to retain only those congressional districts whose geometry intersects the bounding box. GeoPandas provides coordinate based indexing with the <code>cx</code> indexer, which slices using a bounding box. Geometries in the GeoSeries or GeoDataFrame that intersect the bounding box will be returned.</p>
<p>For the lower 48 states bounding box, we’ll use <strong>(-125, 24.6), (-65, 50)</strong>, southwest to northeast. We also include a circle marker at the center of each congressional district:</p>
<div id="cell-22" class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2">xmin, ymin, xmax, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.6</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb12-3">dfc48 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfc.cx[xmin:xmax, ymin:ymax]</span>
<span id="cb12-4"></span>
<span id="cb12-5"></span>
<span id="cb12-6"></span>
<span id="cb12-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-8">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"US Congressional Districts, 116th Congress - Lower 48 States"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb12-9">dfc48.boundary.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>)</span>
<span id="cb12-10">dfc48.geometry.centroid.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb12-11">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb12-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\jtriv\AppData\Local\Temp\ipykernel_8996\3296541533.py:9: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.

  dfc48.geometry.centroid.plot(ax=ax, markersize=6, color="red")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-12-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="geojson" class="level3">
<h3 class="anchored" data-anchor-id="geojson">GeoJSON</h3>
<p>Working with GeoJSON is much the same as working with shapefiles, one difference being that with GeoJSON, vector data is contained within a single file as opposed to an archive of multiple file types. See <a href="https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json">here</a> for an example.</p>
<p>But once read into GeoPandas, we work with it the same way. We can load US state boundary files as GeoJSON from GitHub via:</p>
<div id="cell-24" class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2">dfstate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json"</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4">dfstate.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="81">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">density</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>01</td>
<td>Alabama</td>
<td>94.650</td>
<td>POLYGON ((-87.35930 35.00118, -85.60667 34.984...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>02</td>
<td>Alaska</td>
<td>1.264</td>
<td>MULTIPOLYGON (((-131.60202 55.11798, -131.5691...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>04</td>
<td>Arizona</td>
<td>57.050</td>
<td>POLYGON ((-109.04250 37.00026, -109.04798 31.3...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>05</td>
<td>Arkansas</td>
<td>56.430</td>
<td>POLYGON ((-94.47384 36.50186, -90.15254 36.496...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>06</td>
<td>California</td>
<td>241.700</td>
<td>POLYGON ((-123.23326 42.00619, -122.37885 42.0...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="82">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2">dfstate.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <category>Geospatial</category>
  <guid>https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data.html</guid>
  <pubDate>Sat, 17 Aug 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Querying SQL Server from Pandas</title>
  <link>https://www.jtrive.com/posts/sqlserver-from-python/sqlserver-from-python.html</link>
  <description><![CDATA[ 





<p>If you research how to connect to a database from Python, many examples use the pyodbc library, which, aptly named, creates a connection to any ODBC-compatible database. However, connections with pyodbc itself are uni-directional: Data can be retrieved, but it cannot be uploaded into the database. To allow for simple, bi-directional database transactions, we use pyodbc along with <a href="https://www.sqlalchemy.org/">sqlalchemy</a>, a Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL. With pyodbc and sqlalchemy together, it becomes possible to retrieve and upload data from Pandas DataFrames with relative ease. Let’s assume we’re interested in connecting to a SQL Server database on some server. A connection using sqlalchemy is created as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Creating a database connection with sqlalchemy. </span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlalchemy</span>
<span id="cb1-6"></span>
<span id="cb1-7">DRIVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQL Server"</span></span>
<span id="cb1-8">SERVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SERVER"</span></span>
<span id="cb1-9">DATABASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATABASE"</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create connection uri.</span></span>
<span id="cb1-12">conn_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mssql+pyodbc://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>SERVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATABASE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?driver=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DRIVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize connection.</span></span>
<span id="cb1-15">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  sqlalchemy.create_engine(conn_uri)</span></code></pre></div>
<p>A few points to highlight:</p>
<ul>
<li><p><code>conn_uri</code> is a string that contains information needed to connect to our database. The prefix <code>mssql+pyodbc://</code> indicates that we’re targeting a SQL Server database via the pyodbc connector. Also, if we weren’t using Windows authentication, or were working with a different RDBMS, it would be necessary to change <code>conn_uri</code>. For example, an Oracle connection uri would be specified as <code>oracle://[USERNAME]:[PASSWORD]@[DATABASE]</code>.</p></li>
<li><p>Also in <code>conn_uri</code>, within the format substitution, whitespace in <code>DRIVER</code> is replaced with <code>+</code>. This is consistent with how whitespace is encoded for web addresses.</p></li>
</ul>
<p>Next, to query the French Motor Third-Party Liability Claims sample dataset in the table <em>SAMPLE_FREMTPL</em>, use the <code>read_sql</code> function. I’ve included the connection initialization logic for convenience:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Reading database data into Pandas DataFrame.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlalchemy</span>
<span id="cb2-6"></span>
<span id="cb2-7">DRIVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQL Server"</span></span>
<span id="cb2-8">SERVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SERVER"</span></span>
<span id="cb2-9">DATABASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATABASE"</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create connection uri.</span></span>
<span id="cb2-12">conn_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mssql+pyodbc://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>SERVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATABASE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?driver=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DRIVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize connection.</span></span>
<span id="cb2-15">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  sqlalchemy.create_engine(conn_uri)</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create query. </span></span>
<span id="cb2-18">SQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM SAMPLE_TABLE"</span></span>
<span id="cb2-19"></span>
<span id="cb2-20">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(SQL, con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>conn)</span></code></pre></div>
<p>Instead of passing a query to <code>pd.read_sql</code>, the tablename could have been provided. <code>pd.read_sql</code> is convenience wrapper around <code>read_sql_table</code> and <code>read_sql_query</code> which will delegate to the specific function depending on the input (dispatches <code>read_sql_table</code> if input is a tablename, <code>read_sql_query</code> if input is a query). Refer to the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html#pandas.read_sql">documentation</a> for more information.</p>
<p>Let’s assume SAMPLE_TABLE represents the French Motor Third-Party Liability Claims dataset available <a href="https://www.kaggle.com/datasets/floser/french-motor-claims-datasets-fremtpl2freq">here</a>. Inspecting the first 10 records of the dataset yields:</p>
<pre><code>  IDPOL CLAIMNB  EXPOSURE AREA  VEHPOWER VEHAGE  DRIVAGE  BONUSMALUS VEHBRAND     VEHGAS  DENSITY REGION
0  1290       1   0.66000  'B'         7      0       28          60    'B12'  'Regular'       52  'R72'
1  1292       1   0.12000  'B'         7      0       28          60    'B12'  'Regular'       52  'R72'
2  1295       1   0.08000  'E'         5      0       36          50    'B12'  'Regular'     3274  'R11'
3  1296       1   0.50000  'E'         5      0       36          50    'B12'  'Regular'     3274  'R11'
4  1297       1   0.20000  'E'         5      0       36          50    'B12'  'Regular'     3274  'R11'
5  1299       1   0.74000  'D'         6      0       76          50    'B12'  'Regular'      543  'R91'
6  1301       1   0.05000  'D'         6      0       76          50    'B12'  'Regular'      543  'R91'
7  1303       1   0.03000  'B'        11      0       39          50    'B12'   'Diesel'       55  'R52'
8  1304       1   0.76000  'B'        11      0       39          50    'B12'   'Diesel'       55  'R52'
9  1306       1   0.49000  'E'        10      0       38          50    'B12'  'Regular'     2715  'R93'</code></pre>
<section id="iterative-data-retrieval" class="level3">
<h3 class="anchored" data-anchor-id="iterative-data-retrieval">Iterative Data Retrieval</h3>
<p>When working with large datasets, it may be inefficient to retrieve the entire dataset in a single pass. Pandas provides functionality to retrieve data in <code>chunksize</code>-record blocks, which can result in significant speedups. In the following example, the same French Motor Third-Party Liability Claims sample dataset is retrieved in 20,000-record blocks. The only change in the call to <code>read_sql</code> is the inclusion of <code>chunksize</code>, which specifies the maximum number of records to retrieve for a given iteration. We assume <code>conn</code> has already been initialized:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Using `read_sql`'s *chunksize* parameter for iterative retrieval.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-4">CHUNKSIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span></span>
<span id="cb4-5">SQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM SAMPLE_TABLE"</span></span>
<span id="cb4-6">dfiter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(SQL, con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>conn, chunksize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CHUNKSIZE)</span>
<span id="cb4-7">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([dd <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dd <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dfiter])</span></code></pre></div>
<ul>
<li><code>CHUNKSIZE</code> specifies the maximum number of records to retrieve at each iteration.</li>
<li><code>dfiter</code> is a reference to the data targeted in our query. <code>dfiter</code> is not a DataFrame, rather it is a generator, a Python object which makes it easy to create iterators. Generators yield values lazily, so they are particularly memory efficient.</li>
<li><code>df = pd.concat([dd for dd in dfiter])</code> can be decomposed into two parts: First, <code>[dd for dd in dfiter]</code> is a <em>list comprehension</em>, a very powerful tool that works similar to a flattened for loop. If we bound <code>[dd for dd in dfiter]</code> to a variable directly, the result would be a list of 34 DataFrames, each having no more than 20,000 records. Second, <code>pd.concat</code> takes the list of DataFrames, and performs a row-wise concatenation of each DataFrame, resulting in a single DataFrame with 678,013 records. <code>pd.concat</code> is akin to the SQL <code>UNION</code> operator. The final result, <code>df</code>, is a DataFrame having 678,013 rows and 12 columns.</li>
</ul>
</section>
<section id="exporting-results-to-file" class="level3">
<h3 class="anchored" data-anchor-id="exporting-results-to-file">Exporting Results to File</h3>
<p>Instead of reading the data into memory, it may be necessary to retrieve the dataset, then write the results to file for later analysis. This can be accomplished in an iterative fashion so that no more than <code>CHUNKSIZE</code> records are in-memory at any point in time. Results will be saved to .csv in a file named <code>"FREMTPL.csv"</code> in 100,000 record blocks:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Writing queried results to file. </span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb5-5"></span>
<span id="cb5-6">CHUNKSIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span></span>
<span id="cb5-7">CSV_PATH  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FREMTPL.csv"</span></span>
<span id="cb5-8">SQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM SAMPLE_TABLE"</span></span>
<span id="cb5-9"></span>
<span id="cb5-10">dfiter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(SQL, conn, chunksize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CHUNKSIZE)</span>
<span id="cb5-11"></span>
<span id="cb5-12">t_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb5-13">trkr, nbrrecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(CSV_PATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fcsv:</span>
<span id="cb5-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dfiter:</span>
<span id="cb5-17">        fcsv.write(df.to_csv(header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nbrrecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>))</span>
<span id="cb5-18">        nbrrecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieved records </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>((trkr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CHUNKSIZE) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbrrecs))</span>
<span id="cb5-20">        trkr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-21"></span>
<span id="cb5-22">t_tot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t_i</span>
<span id="cb5-23">retrieval_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nbrrecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> t_tot</span>
<span id="cb5-24"></span>
<span id="cb5-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb5-26">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Retrieved </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbrrecs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> records in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t_tot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>retrieval_rate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> recs/sec.)."</span></span>
<span id="cb5-27">    )</span></code></pre></div>
<p>Executing the code above produces the following output:</p>
<pre><code>Retrieved records 1-100000
Retrieved records 100001-200000
Retrieved records 200001-300000
Retrieved records 300001-400000
Retrieved records 400001-500000
Retrieved records 500001-600000
Retrieved records 600001-678013
Retrieved 678013 records in 20 seconds (33370 recs/sec.).</code></pre>
</section>
<section id="exporting-data" class="level3">
<h3 class="anchored" data-anchor-id="exporting-data">Exporting Data</h3>
<p>In order to export a DataFrame into a database, we leverage the DataFrame’s <code>to_sql</code> method. We provide the name of the table we wish to upload data into, along with a connection object, and what action to take if the table already exists. <code>if_exists</code> can be one of:</p>
<ul>
<li><p>“fail”: Raise a <code>ValueError</code>.</p></li>
<li><p>“replace”: Drop the table before inserting new values.</p></li>
<li><p>“append”: Insert new values to the existing table.</p></li>
</ul>
<p>As a simple transformation, we determine aggregate EXPOSURE by AREA, append a timestamp, then export the result as “SAMPLE_AREA_SUMM”. If the table exists, we want the query to fail:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Summary of aggregate EXPOSURE by AREA based on the French Motor Third-Party </span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Liability Claims sample dataset.</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute aggregate EXPOSURE by AREA.</span></span>
<span id="cb7-8">dfsumm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AREA"</span>, as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EXPOSURE"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append timestamp.</span></span>
<span id="cb7-11">timestamp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %H:%M:%S.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-12">dfsumm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TIMESTAMP"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timestamp</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export results.</span></span>
<span id="cb7-15">dfsumm.to_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SAMPLE_AREA_SUMM"</span>, con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>conn, if_exists<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fail"</span>)</span></code></pre></div>
<p>If the table already exists, an error like the following will be generated:</p>
<pre><code>ValueError: Table 'SAMPLE_AREA_SUMM' already exists.</code></pre>
<p>Otherwise, no output will be generated.</p>
</section>
<section id="writing-queried-data-to-compressed-format" class="level3">
<h3 class="anchored" data-anchor-id="writing-queried-data-to-compressed-format">Writing Queried Data to Compressed Format</h3>
<p>Next we demonstrate how data can be queried iteratively and written directly to a compressed file format. This is especially useful when working with very large datasets, or when the data exceeds available system resources. Another reason to save datasets in compressed format is that Pandas can read compressed files just as easily as csvs. Once read into memory, the dataset will expand to the full uncompressed size, but by writing data to compressed format we reduce our overall storage footprint. Here’s the code to do it:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlalchemy</span>
<span id="cb9-5"></span>
<span id="cb9-6">DRIVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQL Server"</span></span>
<span id="cb9-7">SERVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SERVER"</span></span>
<span id="cb9-8">DATABASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATABASE"</span></span>
<span id="cb9-9">CHUNKSIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span></span>
<span id="cb9-10">DATA_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"COMPRESSED-SAMPLE-TABLE.csv.gz"</span></span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create connection uri.</span></span>
<span id="cb9-13">conn_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mssql+pyodbc://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>SERVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATABASE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?driver=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DRIVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize connection.</span></span>
<span id="cb9-16">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  sqlalchemy.create_engine(conn_uri)</span>
<span id="cb9-17">SQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM SAMPLE_TABLE"</span></span>
<span id="cb9-18">dfiter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(SQL, con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>conn, chunksize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CHUNKSIZE)</span>
<span id="cb9-19"></span>
<span id="cb9-20">t_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb9-21">trkr, nbrrecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(DATA_PATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fgz:</span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dfiter:</span>
<span id="cb9-24">        fgz.write(df.to_csv(header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nbrrecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>).encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>))</span>
<span id="cb9-25">        nbrrecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieved records </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>((trkr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CHUNKSIZE) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbrrecs))</span>
<span id="cb9-27">        trkr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-28"></span>
<span id="cb9-29">t_tot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t_i</span>
<span id="cb9-30">retrieval_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nbrrecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> t_tot</span>
<span id="cb9-31"></span>
<span id="cb9-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb9-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieved </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> records in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> recs/sec.)."</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(</span>
<span id="cb9-34">        nbrrecs, t_tot, retrieval_rate</span>
<span id="cb9-35">        )</span>
<span id="cb9-36">    ) </span></code></pre></div>
<p>The only expression requiring explanation is within <code>df.to_csv</code>, where <code>header=nbrrecs==0</code> is specified. This ensures that headers are written for the first batch of records only, and ignored for subsequent batches (100,000 record chunks are read in at each iteration).</p>
<p>To read the compressed file back into Pandas, use the <code>pd.read_csv</code> function specifying the compression type (in this example we used “gzip” - other options are “zip”, “bz2” or “xz”):</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">In [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]: df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(DATA_PATH, compression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gzip"</span>)</span>
<span id="cb10-2">In [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]: df.shape</span>
<span id="cb10-3">Out[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]: (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">678013</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>


</section>

 ]]></description>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/sqlserver-from-python/sqlserver-from-python.html</guid>
  <pubDate>Sat, 01 Jun 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Hyperparameter Search and Classifier Threshold Selection</title>
  <link>https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding.html</link>
  <description><![CDATA[ 





<p>The following notebook demonstrates how to use <code>GridSearchCV</code> to identify optimal hyperparameters for a given model and metric, and alternatives for selecting a classifier threshold in scikit-learn.</p>
<p>First we load the breast cancer dataset. We will forgo any pre-processing, but create separate train and validation sets:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_breast_cancer</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-8"></span>
<span id="cb1-9">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-10">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-11">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-12">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_breast_cancer()</span>
<span id="cb1-15">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>]</span>
<span id="cb1-16">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create train, validation and test splits. </span></span>
<span id="cb1-20">Xtrain, Xvalid, ytrain, yvalid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.20</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Xtrain.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Xtrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Xvalid.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Xvalid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Xtrain.shape: (455, 30)
Xvalid.shape: (114, 30)</code></pre>
</div>
</div>
<section id="hyperparameter-search" class="level2">
<h2 class="anchored" data-anchor-id="hyperparameter-search">Hyperparameter Search</h2>
<p>A random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting (see documentation <a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#sklearn-ensemble-randomforestclassifier">here</a>).</p>
<p>The <code>RandomForestClassifier</code> takes a number of hyperparameters. It can be difficult to determine which values to set these to manually, so instead we can perform a cross-validated grid search over a number of candidate values to determine which hyperparmeter combination is best for our data and specified metric. <code>GridSearchCV</code>is part of scikit-learn, and is a method used to find the best possible configuration of hyperparameters for optimal performance. It works as follows:</p>
<ol type="1">
<li><p><strong>Define a parameter grid</strong>: The grid is a dictionary that maps parameter names to the values that should be tested. These parameters are specific to the model you are working to optimize.</p></li>
<li><p><strong>Specify a model</strong>: Choose a model that you want to optimize using <code>GridSearchCV</code>. This model is not trained yet; it’s just passed in with it’s default parameters.</p></li>
<li><p><strong>Cross-validation setup</strong>: <code>GridSearchCV</code> uses cross-validation to evaluate each combination of parameter values provided in the grid. You need to specify the number of folds (splits) for the cross-validation process (this is the <code>cv</code> parameter). Common choices are 5 or 10 folds, depending on the size of your dataset and how thorough you want the search to be.</p></li>
<li><p><strong>Search Execution</strong>: With the parameter grid, model, and cross-validation setup, <code>GridSearchCV</code> systematically works through multiple combinations of parameter sets, cross-validating as it goes to determine which configuration gives the best performance based on a score function. The performance is often measured using metrics like accuracy, precision or recall for classification problems or mean squared error for regression problems.</p></li>
<li><p><strong>Results:</strong> Finally, <code>GridSearchCV</code> provides the best parameters, allowing you to understand which parameters work best for your model. Additionally, it can provide other results like the score for each parameter combination, allowing for deeper analysis of how different parameter values impact model performance.</p></li>
</ol>
<p><br></p>
<p>The documentation for <code>GridSearchCV</code> is available <a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html#sklearn.model_selection.GridSearchCV">here</a>.</p>
<p><br></p>
<p>In the next cell, we assess the following <code>RandomForestClassifier</code> hyperparameters:</p>
<ul>
<li><code>n_estimators</code>: [100, 150, 250]</li>
<li><code>min_samples_leaf</code>: [2, 3, 4]</li>
<li><code>ccp_alpha</code>: [0, .1, .2, .3]</li>
</ul>
<p>For the metric, recall is used since the cost of a false negative is high (not detecting breast cancer). This means the hyperparameter combination with the maximum average recall over the k-folds will be selected as the best parameter set.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Example using GridSearchCV to identify optimal hyperparameters w.r.t. recall.</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Note that within GridSearchCV, cv represents the number of folds for </span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">k-Fold cross validation.</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GridSearchCV</span>
<span id="cb3-8"></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create parameter grid as dictionary.</span></span>
<span id="cb3-11">param_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_estimators"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>],</span>
<span id="cb3-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min_samples_leaf"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb3-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ccp_alpha"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span>]</span>
<span id="cb3-15">    }</span>
<span id="cb3-16"></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pass model and param_grid into GridSearchCV.</span></span>
<span id="cb3-19">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GridSearchCV(</span>
<span id="cb3-20">    RandomForestClassifier(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>), </span>
<span id="cb3-21">    param_grid, </span>
<span id="cb3-22">    scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"recall"</span>, </span>
<span id="cb3-23">    cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb3-24">    )</span>
<span id="cb3-25">    </span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit model on training set. This can take a while depending on the number of </span></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hyperparameter combinations in param_grid.</span></span>
<span id="cb3-28">mdl.fit(Xtrain, ytrain)</span>
<span id="cb3-29"></span>
<span id="cb3-30"></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print optimal parameters.</span></span>
<span id="cb3-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"best parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-33"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>best parameters: {'ccp_alpha': 0, 'min_samples_leaf': 4, 'n_estimators': 100}</code></pre>
</div>
</div>
<p><br></p>
<p>For random forests, boosting models and other tree-based ensemble methods, we can obtain a summary of the relative importance of each of the input features. This is available in the <code>mdl.best_estimator_.feature_importances_</code> attribute. We can plot feature importances in decreasing order as follows:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2">imp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.best_estimator_.feature_importances_</span>
<span id="cb5-3"></span>
<span id="cb5-4">rf_imp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(imp, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature_names"</span>]).sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-7">rf_imp.plot.bar(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb5-8">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomForestClassifier feature importances"</span>)</span>
<span id="cb5-9">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean decrease in impurity"</span>)</span>
<span id="cb5-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>In terms of mean decrease in impurity, the top 7 features are assigned the highest importance, with the remaining features deemed not as relevant. For more information on how feature importance is calculated, see <a href="https://scikit-learn.org/stable/auto_examples/ensemble/plot_forest_importances.html">here</a>.</p>
<p><br></p>
<p>The resulting <code>mdl</code> object can be used to make predictions on the validation set (<code>mdl</code> exposes the <code>RandomForestClassifier</code> with optimal hyperparameters set). We use <code>mdl.predict_proba</code> to get probabilities on [0, 1], with values closer to 1 representing positive predicted instances of breast cancer on the validation set:</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict_proba(Xvalid)[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb6-3"></span>
<span id="cb6-4">ypred</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([0.005     , 0.82743637, 0.97088095, 0.        , 0.        , 1.        , 0.98020202, 0.67380556, 0.        , 0.99333333, 0.9975    , 0.30048576, 0.9528113 , 0.99666667, 0.04102381, 0.99444444, 1.        , 0.828226  , 0.        , 0.        , 0.97916667, 1.        , 0.99607143, 0.90425163, 0.        , 0.02844156, 0.99333333, 0.98183333, 0.9975    , 0.08869769, 0.97369841, 0.        , 1.        , 0.71100866, 0.96022727, 0.        , 0.71200885, 0.06103175, 0.005     , 0.99490476, 0.1644127 , 0.        , 0.23646934, 1.        , 0.57680164, 0.64901715, 0.9975    , 0.61790818, 0.95509668, 0.99383333, 0.04570455, 0.97575758, 1.        , 0.47115815, 0.92422619, 0.77371415, 0.        , 1.        , 0.26198657, 0.        , 0.28206638, 0.95216162, 0.98761905, 0.99464286, 0.98704762, 0.85579351, 0.10036905, 0.00222222, 0.98011905, 0.99857143, 0.92285967, 0.95180556, 0.97546947, 0.84433189, 0.005     , 0.99833333, 0.83616339, 1.        , 0.9955    , 1.        , 0.99833333, 1.        ,
       0.86399315, 0.9807381 , 0.        , 0.99833333, 0.9975    , 0.        , 0.98733333, 0.96822727, 0.23980827, 0.7914127 , 0.        , 0.98133333, 1.        , 1.        , 0.89251019, 0.9498226 , 0.18943254, 0.83494391, 0.9975    , 1.        , 0.77079113, 0.99722222, 0.30208297, 1.        , 0.92111977, 0.99428571, 0.91936508, 0.47118074, 0.98467172, 0.006     , 0.05750305, 0.96954978])</code></pre>
</div>
</div>
<p>Note that scikit-learn <code>predict_proba</code> outputs an nx2 dimensional array, where the first column represents the probability of class 0 and the second column the probability of class 1 (has breast cancer). Each row will sum to 1. We will work with the probabilities of the class we’re interested in analyzing, so we extract only the values from the positive class (the second column), that’s why we call <code>mdl.predict_proba(Xvalid)[:,1]</code>.</p>
<p><br></p>
<section id="threshold-selection" class="level3">
<h3 class="anchored" data-anchor-id="threshold-selection">Threshold Selection</h3>
<p>In order to master machine learning, it is necessary to learn a variety of minor concepts that underpin these systems. One such concept is setting the optimal classification threshold.</p>
<p>By default, for probabilistic classifiers scikit-learn uses a threshold of .50 to distinguish between positive and negative class instances. The predicted classes are obtained by calling <code>mdl.predict</code>. Here’s a side by side comparison of the model predicted probabilities and predicted classes:</p>
<div id="cell-12" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted probabilities.</span></span>
<span id="cb8-3">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict_proba(Xvalid)[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted classes.</span></span>
<span id="cb8-7">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict(Xvalid).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine probabilities and predicted class labels.</span></span>
<span id="cb8-11">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate([ypred, yhat], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-12"></span>
<span id="cb8-13">preds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([[0.005     , 0.        ],
       [0.82743637, 1.        ],
       [0.97088095, 1.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [1.        , 1.        ],
       [0.98020202, 1.        ],
       [0.67380556, 1.        ],
       [0.        , 0.        ],
       [0.99333333, 1.        ],
       [0.9975    , 1.        ],
       [0.30048576, 0.        ],
       [0.9528113 , 1.        ],
       [0.99666667, 1.        ],
       [0.04102381, 0.        ],
       [0.99444444, 1.        ],
       [1.        , 1.        ],
       [0.828226  , 1.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.97916667, 1.        ],
       [1.        , 1.        ],
       [0.99607143, 1.        ],
       [0.90425163, 1.        ],
       [0.        , 0.        ],
       [0.02844156, 0.        ],
       [0.99333333, 1.        ],
       [0.98183333, 1.        ],
       [0.9975    , 1.        ],
       [0.08869769, 0.        ],
       [0.97369841, 1.        ],
       [0.        , 0.        ],
       [1.        , 1.        ],
       [0.71100866, 1.        ],
       [0.96022727, 1.        ],
       [0.        , 0.        ],
       [0.71200885, 1.        ],
       [0.06103175, 0.        ],
       [0.005     , 0.        ],
       [0.99490476, 1.        ],
       [0.1644127 , 0.        ],
       [0.        , 0.        ],
       [0.23646934, 0.        ],
       [1.        , 1.        ],
       [0.57680164, 1.        ],
       [0.64901715, 1.        ],
       [0.9975    , 1.        ],
       [0.61790818, 1.        ],
       [0.95509668, 1.        ],
       [0.99383333, 1.        ],
       [0.04570455, 0.        ],
       [0.97575758, 1.        ],
       [1.        , 1.        ],
       [0.47115815, 0.        ],
       [0.92422619, 1.        ],
       [0.77371415, 1.        ],
       [0.        , 0.        ],
       [1.        , 1.        ],
       [0.26198657, 0.        ],
       [0.        , 0.        ],
       [0.28206638, 0.        ],
       [0.95216162, 1.        ],
       [0.98761905, 1.        ],
       [0.99464286, 1.        ],
       [0.98704762, 1.        ],
       [0.85579351, 1.        ],
       [0.10036905, 0.        ],
       [0.00222222, 0.        ],
       [0.98011905, 1.        ],
       [0.99857143, 1.        ],
       [0.92285967, 1.        ],
       [0.95180556, 1.        ],
       [0.97546947, 1.        ],
       [0.84433189, 1.        ],
       [0.005     , 0.        ],
       [0.99833333, 1.        ],
       [0.83616339, 1.        ],
       [1.        , 1.        ],
       [0.9955    , 1.        ],
       [1.        , 1.        ],
       [0.99833333, 1.        ],
       [1.        , 1.        ],
       [0.86399315, 1.        ],
       [0.9807381 , 1.        ],
       [0.        , 0.        ],
       [0.99833333, 1.        ],
       [0.9975    , 1.        ],
       [0.        , 0.        ],
       [0.98733333, 1.        ],
       [0.96822727, 1.        ],
       [0.23980827, 0.        ],
       [0.7914127 , 1.        ],
       [0.        , 0.        ],
       [0.98133333, 1.        ],
       [1.        , 1.        ],
       [1.        , 1.        ],
       [0.89251019, 1.        ],
       [0.9498226 , 1.        ],
       [0.18943254, 0.        ],
       [0.83494391, 1.        ],
       [0.9975    , 1.        ],
       [1.        , 1.        ],
       [0.77079113, 1.        ],
       [0.99722222, 1.        ],
       [0.30208297, 0.        ],
       [1.        , 1.        ],
       [0.92111977, 1.        ],
       [0.99428571, 1.        ],
       [0.91936508, 1.        ],
       [0.47118074, 0.        ],
       [0.98467172, 1.        ],
       [0.006     , 0.        ],
       [0.05750305, 0.        ],
       [0.96954978, 1.        ]])</code></pre>
</div>
</div>
<p>Notice that when the probability is less that 0.50, the predicted class is 0. When the predicted probability is greater than 0.50, the predicted class is 1. For certain applications, the 0.50 threshold might make sense, for example when your target is balanced or close to balanced (when the number of 0s and 1s in the training set is approximately equal). But for unbalanced datasets, using the default threshold can give misleading results. In what follows, we walkthrough a few approaches that can be used to assess the optimal discrimination theshold for a classifier.</p>
</section>
<section id="use-0.50" class="level3">
<h3 class="anchored" data-anchor-id="use-0.50">1. Use 0.50</h3>
<p>The first approach is the most straightforward: Just use the default scikit-learn threshold of .50. This makes sense when your classes are balanced, but will give misleading results when classes are imbalanced.</p>
<p><br></p>
</section>
<section id="use-1---the-proportion-of-positive-instances-in-the-training-data" class="level3">
<h3 class="anchored" data-anchor-id="use-1---the-proportion-of-positive-instances-in-the-training-data">2. Use 1 - the proportion of positive instances in the training data</h3>
<p>If we look at the number of positives (1s) vs.&nbsp;total samples in our training set, we have:</p>
<div id="cell-16" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Proportion of positives in training set: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ytrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ytrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Proportion of positives in training set: 0.62</code></pre>
</div>
</div>
<p>We see that 62% of the samples belong to class 1. This is usually not the case. In many classification scenarios, we’re dealing with 10%, 5% or even less than 1% of samples belonging to the positive class.</p>
<p>To illustrate the approach, since 62% percent of the observations belong to the positive class, we would use a threshold of <strong>1 - .62 = .38</strong>. The predicted class labels are then created using the following code:</p>
<div id="cell-18" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating predicted classes based on adjusted classifier threshold. </span></span>
<span id="cb12-3">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.38</span></span>
<span id="cb12-4"></span>
<span id="cb12-5">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thresh, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Now any sample with a predicted probability less than or equal to .38 will be assigned to class 0, and samples with predicted probability greater than .38 are assigned to the positive class.</p>
<p>If we’re dealing with a highly imbalanced dataset with only 1% positive instances, we would use <strong>1 - .01 = .99</strong> as the threshold using this method.</p>
<p><br></p>
</section>
<section id="use-best-f1-score" class="level3">
<h3 class="anchored" data-anchor-id="use-best-f1-score">3. Use best f1-score</h3>
<p>The f1-score is the geometric average of precision and recall. We can compute precision and recall for a number of different thresholds then select the threshold that maximizes the f1-score. This is a suitable approach if your classification task weighs precision and recall equally. Although this isn’t the case for our breast cancer classifier (we want to maximize recall since the cost of a false negative is high), the approach is demonstrated in the next cell:</p>
<div id="cell-20" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> precision_recall_curve</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get precision and recall for various thresholds.</span></span>
<span id="cb13-5">p, r, thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(yvalid, ypred)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute f1-score for each threshold.</span></span>
<span id="cb13-8">f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify threshold that maximizes f1-score.</span></span>
<span id="cb13-11">best_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thresh[np.argmax(f1)]</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Threshold using optimal f1-score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>best_thresh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Threshold using optimal f1-score: 0.471.</code></pre>
</div>
</div>
<p>Using this method, we would set the discrimination threshold to <strong>.471</strong>, and would obtain the predicted class labels the same way as before:</p>
<div id="cell-22" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.471</span></span>
<span id="cb15-3"></span>
<span id="cb15-4">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thresh, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p><br></p>
</section>
<section id="inspection-of-roc-curve" class="level3">
<h3 class="anchored" data-anchor-id="inspection-of-roc-curve">4. Inspection of ROC curve</h3>
<p>The Receiver Operating Characteristic (ROC) curve plots the true positive rate (TPR) against the false positive rate (FPR) at various classification thresholds. Typically we’re interested in using a threshold that maximizes TPR while minimizing FPR, which is the point (0, 1). The curve starts with a threshold of 1 at the far left and decreases towards 0 as the x-axis increases.</p>
<p>We can plot the ROC curve in scikit-learn using the code below. Note that <code>ypred</code> are predicted probabilities and <code>yvalid</code> are class labels (1s or 0s).</p>
<div id="cell-24" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RocCurveDisplay</span>
<span id="cb16-3"></span>
<span id="cb16-4">roc_disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RocCurveDisplay.from_predictions(</span>
<span id="cb16-5">    yvalid, ypred, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomForestClassifier"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#191964"</span></span>
<span id="cb16-6">    )</span>
<span id="cb16-7">roc_disp.ax_.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ROC curve"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb16-8">roc_disp.ax_.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Using approach 4, the optimal threshold would be somewhere between .70-.80, which is much higher than what is indicated using the other methods so far. Ultimately it is up to you to determine which threshold makes the most sense, but intuitively, a threshold of .70-.80 seems too high when the prevalence of the positive class in the training data is 62%.</p>
<p><br></p>
</section>
<section id="inspection-of-the-precision-recall-curve" class="level3">
<h3 class="anchored" data-anchor-id="inspection-of-the-precision-recall-curve">5. Inspection of the precision-recall curve</h3>
<p>The precision-recall curve is a graphical representation used in binary classification to evaluate the performance of a classification model at different probability thresholds. This curve shows the trade-off between precision and recall for a number of different thresholds. The curve plots recall on the x-axis and precision on the y-axis.</p>
<p>The curve starts from the rightmost part of the graph. As the threshold for classifying positive instances decreases, recall increases, and precision can either increase or decrease, but typically it decreases because the model starts to classify more instances as positive, including both true positives and false positives.</p>
<p>The top-right corner of the graph (high precision, high recall) represents the ideal point, where the classifier perfectly identifies all positive cases with no false positives. Generally, we’d like to select a threshold that corresponds to a point closest to top-right corner of the graph.</p>
<p>We can plot the precision-recall curve in scikit-learn using the code below. Note that <code>ypred</code> are predicted probabilities and <code>yvalid</code> are class labels (1s or 0s).</p>
<div id="cell-27" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PrecisionRecallDisplay</span>
<span id="cb17-3"></span>
<span id="cb17-4">pr_disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PrecisionRecallDisplay.from_predictions(</span>
<span id="cb17-5">    yvalid, ypred, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomForestClassifier"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#CD0066"</span></span>
<span id="cb17-6">    )</span>
<span id="cb17-7">pr_disp.ax_.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Precision-Recall curve"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb17-8">pr_disp.ax_.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb17-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Based on the plot, would want to select the threshold that corresponds to a recall of about .95, since this is close to the point (1, 1). This can be determined using the following code:</p>
<div id="cell-29" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> precision_recall_curve</span>
<span id="cb18-3"></span>
<span id="cb18-4">p, r, thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(yvalid, ypred)</span>
<span id="cb18-5"></span>
<span id="cb18-6">best_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thresh[np.where(r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Selected threshold using precision-recall curve: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>best_thresh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Selected threshold using precision-recall curve: 0.674.</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="inspection-of-precision-and-recall-as-a-function-of-threshold" class="level3">
<h3 class="anchored" data-anchor-id="inspection-of-precision-and-recall-as-a-function-of-threshold">6. Inspection of precision and recall as a function of threshold</h3>
<p>It is also possible to plot precision and recall as two separate series against threshold on the x-axis. The goal is to identify a point where precision and recall intersect. Using this approach may be suitable in some scenarios.</p>
<div id="cell-31" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> precision_recall_curve</span>
<span id="cb20-3"></span>
<span id="cb20-4">p, r, thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(yvalid, ypred)</span>
<span id="cb20-5">p, r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], r[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb20-6"></span>
<span id="cb20-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-8">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"precision &amp; recall vs. threshold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb20-9">ax.plot(thresh, p, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"precision"</span>)</span>
<span id="cb20-10">ax.plot(thresh, r, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"recall"</span>)</span>
<span id="cb20-11">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"threshold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb20-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax.set_xticks(np.arange(tmax+1))</span></span>
<span id="cb20-13">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb20-14">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb20-15">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb20-16">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb20-17">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-18">ax.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb20-19"></span>
<span id="cb20-20">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The precision and recall series intersect right after .60, therefore method #5 would set the threshold to roughly .60.</p>
<p><br></p>
</section>
<section id="assessing-a-classifier" class="level3">
<h3 class="anchored" data-anchor-id="assessing-a-classifier">Assessing a Classifier</h3>
<p>Once a threshold has been selected, the predictive power of the classifier can be assessed. To do this, we will look at the confusion matrix as well as the <code>sklearn.metrics.classification_report</code>. Note that both diagnostics require actual and predicted labels. Once we’ve settled on a threshold, model assessment is performed comparing actual vs.&nbsp;predicted labels. In what follows, the 0.471 threshold obtained from method #3 will be used as the classification threshold.</p>
<p>Technically, once we’ve decided on a threshold, we should then assess the performance of the model on a separate test set. However, for the purposes of demonstration, we are going to re-use the validation set.</p>
<p>We start by creating the confusion matrix:</p>
<div id="cell-33" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"></span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ConfusionMatrixDisplay</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine predicted classes using the .471 threshold.</span></span>
<span id="cb21-5">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.471</span></span>
<span id="cb21-6">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thresh, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-7"></span>
<span id="cb21-8">cm_disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfusionMatrixDisplay.from_predictions(yvalid, yhat, colorbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb21-9">cm_disp.ax_.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mm confusion matrix (thresh=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>thresh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb21-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The output indicates:</p>
<ul>
<li>There are 76 True Positives (TP).</li>
<li>There are 34 True Negatives (TN).</li>
<li>There are 4 False Positives (FP).</li>
<li>There are 0 False Negatives (FN).</li>
</ul>
<p><br></p>
<p>Next we inspect the classification report. This also takes actual and predicted labels, and returns a summary of common classifier metrics:</p>
<div id="cell-35" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"></span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(classification_report(yvalid, yhat))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              precision    recall  f1-score   support

           0       1.00      0.89      0.94        38
           1       0.95      1.00      0.97        76

    accuracy                           0.96       114
   macro avg       0.97      0.95      0.96       114
weighted avg       0.97      0.96      0.96       114
</code></pre>
</div>
</div>
<p>Overall this is very good performance.</p>


</section>
</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding.html</guid>
  <pubDate>Sun, 28 Apr 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Using the Singular Value Decomposition for Image Compression</title>
  <link>https://www.jtrive.com/posts/svd-image-compression/svd-image-compression.html</link>
  <description><![CDATA[ 





<p>The Singular Value Decomposition (SVD) is a mathematical technique used in linear algebra to decompose a matrix into three other matrices. Specifically, for any <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> matrix <img src="https://latex.codecogs.com/png.latex?X">, the SVD is a factorization of the form</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AX%20=%20U%20%5CSigma%20V%5E%7B*%7D,%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?X"> is <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20m">.</li>
<li><img src="https://latex.codecogs.com/png.latex?U"> is <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> (unitary with orthonormal columns; columns = <em>left signular vectors</em>).</li>
<li><img src="https://latex.codecogs.com/png.latex?V"> is <img src="https://latex.codecogs.com/png.latex?m%20%5Ctimes%20m"> (unitary with orthonormal columns; columns = <em>right signular vectors</em>).</li>
<li><img src="https://latex.codecogs.com/png.latex?%5CSigma"> is <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> with real non-negative entries along the diagonal (<em>singular values</em>). The singular values are the square roots of the eigenvalues of <img src="https://latex.codecogs.com/png.latex?A%5E%7BT%7DA"> or <img src="https://latex.codecogs.com/png.latex?AA%5E%7BT%7D">.</li>
<li>When <img src="https://latex.codecogs.com/png.latex?n%20%5Cgeq%20m">, <img src="https://latex.codecogs.com/png.latex?%5CSigma"> has at most <img src="https://latex.codecogs.com/png.latex?m"> non-zero elements on the diagonal.</li>
<li>Rank of <img src="https://latex.codecogs.com/png.latex?X"> = number of non-zero singular values.</li>
</ul>
<p><strong>In numpy:</strong></p>
<ul>
<li>The rows of <img src="https://latex.codecogs.com/png.latex?V%5E%7BT%7D"> represent the eigenvectors of <img src="https://latex.codecogs.com/png.latex?X%5E%7BT%7DX">.</li>
<li>The columns of <img src="https://latex.codecogs.com/png.latex?U"> represent the eigenvectors of <img src="https://latex.codecogs.com/png.latex?XX%5E%7BT%7D">.</li>
<li>The eigenvalues are <img src="https://latex.codecogs.com/png.latex?%5CSigma%5E%7B2%7D">.</li>
</ul>
<p><br></p>
<p>The SVD provides a systematic way to determine a low-dimensional approximation to high-dimensional data in terms of dominant patterns. This technique is data-driven in that patterns are discovered purely from data, without the addition of expert knowledge or intuition.</p>
<p>If <img src="https://latex.codecogs.com/png.latex?X"> is self-adjoint, (<img src="https://latex.codecogs.com/png.latex?X%20=%20X%5E%7B*%7D">), then the singular values of <img src="https://latex.codecogs.com/png.latex?X"> are equal to the absolute values of the eigenvalues of <img src="https://latex.codecogs.com/png.latex?X">. In Numpy, we compute the SVD as follows:</p>
<div id="cd0b94d7-62f8-4321-9b34-57ff2f4cf24f" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-5">U, S, Vt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(X, full_matrices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-6">Uhat, Shat, Vhatt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(X, full_matrices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">full_matrices=True:"</span>)</span>
<span id="cb1-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"U.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>U<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"S.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>S<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Vt.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Vt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">full_matrices=False:"</span>)</span>
<span id="cb1-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Uhat.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Uhat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Shat.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Shat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Vhatt.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Vhatt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">S:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>S<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Shat:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Shat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
full_matrices=True:
U.shape: (5, 5).
S.shape: (3,).
Vt.shape: (3, 3).

full_matrices=False:
Uhat.shape: (5, 3).
Shat.shape: (3,).
Vhatt.shape: (3, 3).

S:
[2.13628638 0.91901978 0.39330927].

Shat:
[2.13628638 0.91901978 0.39330927].
</code></pre>
</div>
</div>
<section id="matrix-approximation" class="level3">
<h3 class="anchored" data-anchor-id="matrix-approximation">Matrix Approximation</h3>
<p>Perhaps the most useful and defining property of the SVD is that it provides an optimal low-rank approximation to a matrix <img src="https://latex.codecogs.com/png.latex?X">. The Eckhart-Young theorem states that the optimal rank-<img src="https://latex.codecogs.com/png.latex?r"> approximation to <img src="https://latex.codecogs.com/png.latex?X"> in a least-squares sense is given by the rank-<img src="https://latex.codecogs.com/png.latex?r"> SVD truncation <img src="https://latex.codecogs.com/png.latex?%5Ctilde%20X">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderset%7B%5Ctilde%20X,%20%5Chspace%7B.25em%7D%20%5Cmathrm%7Bs.t.%7D%20%5Chspace%7B.25em%7D%5Cmathrm%7Brank%7D(%5Ctilde%20X)=r%7D%7B%5Cmathrm%7Bargmin%7D%7D%20%7C%7C%20X%20-%20%5Ctilde%20X%7C%7C_%7BF%7D%20=%20%5Ctilde%20U%20%5Ctilde%20%5CSigma%20%5Ctilde%20V%5E%7B*%7D,%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctilde%20U,%20%5Ctilde%20V"> represent the first <img src="https://latex.codecogs.com/png.latex?r"> leading columns of <img src="https://latex.codecogs.com/png.latex?U,%20V">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctilde%20%5CSigma"> represents the leading <img src="https://latex.codecogs.com/png.latex?r%20%5Ctimes%20r"> sub-block of <img src="https://latex.codecogs.com/png.latex?%5CSigma">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%7C%7C%5Ccdot%7C%7C_%7BF%7D"> represents the Frobenius norm.</li>
</ul>
<p><br></p>
<p>Because <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is diagonal, the rank-<img src="https://latex.codecogs.com/png.latex?r"> SVD approximation is given by the sum of <img src="https://latex.codecogs.com/png.latex?r"> distinct rank-1 matrices:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctilde%20X%20=%20%5Csum_%7Bk=1%7D%5E%7Br%7D%20%5Csigma_%7Bk%7D%20%5Cboldsymbol%7Bu%7D_%7Bk%7D%20%5Cboldsymbol%7Bv%7D_%7Bk%7D%5E%7B*%7D%20=%20%5Csigma_%7B1%7D%20%5Cboldsymbol%7Bu%7D_%7B1%7D%20%5Cboldsymbol%7Bv%7D_%7B1%7D%5E%7B*%7D%20+%20%5Csigma_%7B2%7D%20%5Cboldsymbol%7Bu%7D_%7B2%7D%20%5Cboldsymbol%7Bv%7D_%7B2%7D%5E%7B*%7D%20+%20%5Ccdots%20+%20%5Csigma_%7Br%7D%20%5Cboldsymbol%7Bu%7D_%7Br%7D%20%5Cboldsymbol%7Bv%7D_%7Br%7D%5E%7B*%7D%0A"></p>
<p>The truncated SVD basis <img src="https://latex.codecogs.com/png.latex?%5Ctilde%20U"> provides a coordinate transformation from the high-dimensional original matrix into a lower dimensional representation.</p>
<p>For truncation values <img src="https://latex.codecogs.com/png.latex?r"> that are smaller than the number of non-zero singular values (i.e., the rank of <img src="https://latex.codecogs.com/png.latex?X">), the truncated SVD only approximates <img src="https://latex.codecogs.com/png.latex?X">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctilde%20X%20%5Capprox%20%5Ctilde%20U%20%5Ctilde%20%5CSigma%20%5Ctilde%20V%5E%7B*%7D%0A"></p>
<p>If we choose the truncation value to keep all non-zero singular values, then <img src="https://latex.codecogs.com/png.latex?%5Ctilde%20X%20=%20%5Ctilde%20U%20%5Ctilde%20%5CSigma%20%5Ctilde%20V%5E%7B*%7D"> is exact.</p>
<p><br></p>
</section>
<section id="example-image-compression" class="level3">
<h3 class="anchored" data-anchor-id="example-image-compression">Example: Image Compression</h3>
<p>For the next example, we use an alternate cover photo from the Allman Brothers 1971 release <em>At the Fillmore East</em>, shown in color and grayscale side-by-side. We’ll work with the grayscale image going forward since it limits us to two dimensions:</p>
<div id="29d7c238-458a-40af-b6ac-643d5bed18d4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage.color <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rgb2gray</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3-D RGB image. </span></span>
<span id="cb3-8">imgrgb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> io.imread(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fillmore.jpg"</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2-D grayscale image.</span></span>
<span id="cb3-11">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rgb2gray(imgrgb)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make grayscale image symmetric. </span></span>
<span id="cb3-14">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, :<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>]</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"img.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18"></span>
<span id="cb3-19">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># figsize=(8, 4))</span></span>
<span id="cb3-20"></span>
<span id="cb3-21">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].imshow(imgrgb)</span>
<span id="cb3-22">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb3-23">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_axis_off()</span>
<span id="cb3-24"></span>
<span id="cb3-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].imshow(img, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.gray)</span>
<span id="cb3-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grayscale"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb3-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_axis_off()</span>
<span id="cb3-28"></span>
<span id="cb3-29">plt.show()</span>
<span id="cb3-30"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>img.shape: (800, 800)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/svd-image-compression/svd-image-compression_files/figure-html/cell-3-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Next we generate successive rank-<img src="https://latex.codecogs.com/png.latex?r"> approximations of the original image, showing the storage requirement of each rank-<img src="https://latex.codecogs.com/png.latex?r"> approximation.</p>
<div id="2f6aa96d-6aba-41da-a425-8669be640a79" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grayscale image.</span></span>
<span id="cb5-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run SVD on grayscale image X. </span></span>
<span id="cb5-6">U, S, Vt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(X, full_matrices<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert signular values array to full matrix. </span></span>
<span id="cb5-9">S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(S) </span>
<span id="cb5-10"></span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rank-r approximations to evaluate. </span></span>
<span id="cb5-13">ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,]<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># len(S)]</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matplotlib indices. </span></span>
<span id="cb5-16">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb5-17"></span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of values associated with original image.</span></span>
<span id="cb5-20">total_nbr_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(X.shape)</span>
<span id="cb5-21"></span>
<span id="cb5-22">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb5-23"></span>
<span id="cb5-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r, (ii, jj) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ranks, indices):</span>
<span id="cb5-25">    </span>
<span id="cb5-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute rank-r approximation of X.</span></span>
<span id="cb5-27">    Xr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U[:, :r] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> S[:r, :r] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Vt[:r, :]</span>
<span id="cb5-28"></span>
<span id="cb5-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute storage or rank-r approximation vs. full image.</span></span>
<span id="cb5-30">    rank_r_nbr_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(U[:, :r].shape) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.prod(Vt[:r, :].shape)</span>
<span id="cb5-31">    rank_r_storage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rank_r_nbr_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_nbr_vals</span>
<span id="cb5-32"></span>
<span id="cb5-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display rank-r approximation.</span></span>
<span id="cb5-34">    ax[ii, jj].imshow(Xr, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.gray)</span>
<span id="cb5-35">    ax[ii, jj].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"r=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>r<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (storage=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rank_r_storage<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2%}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb5-36">    ax[ii, jj].set_axis_off()</span>
<span id="cb5-37"></span>
<span id="cb5-38">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/svd-image-compression/svd-image-compression_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>A rank-100 approximation provides a decent representation of the original. At rank-200, there is virtually no difference between the original and the approximation. In practice, we could store <code>U[:, :200], S[:200, :200]</code> and <code>Vt[:200, :]</code> separately, then compute the matrix product prior to rendering the image. Doing so reduces the storage requirements by a factor of 2.</p>
<p>We can plot the magnitude of the singular values along with the cumulative proportion to assess how much variation in the original image is captured for a given rank-<img src="https://latex.codecogs.com/png.latex?r"> approximation:</p>
<div id="1fa20662-a86e-47af-aad1-9accea3b555a" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(S)</span>
<span id="cb6-3"></span>
<span id="cb6-4">ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ranks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>]</span>
<span id="cb6-5"></span>
<span id="cb6-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb6-7">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].semilogy(s, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-8">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"Singular value,  $\sigma_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{r}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>)</span>
<span id="cb6-9">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$r$"</span>)</span>
<span id="cb6-10">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-11">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-13">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-14">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-15">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-17"></span>
<span id="cb6-18">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(np.cumsum(s) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(s), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-19">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"cumulative sum"</span>)</span>
<span id="cb6-20">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$r$"</span>)</span>
<span id="cb6-21">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-22">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-23">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-24">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-28"></span>
<span id="cb6-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ranks:</span>
<span id="cb6-30">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(s[:r]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(s)</span>
<span id="cb6-31">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].scatter(r, y, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb6-32">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].annotate(</span>
<span id="cb6-33">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$r=$"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(r), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(r, y), </span>
<span id="cb6-34">    xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset points"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, </span>
<span id="cb6-35">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, </span>
<span id="cb6-36">    )</span>
<span id="cb6-37"></span>
<span id="cb6-38">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/svd-image-compression/svd-image-compression_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>The rank-100 approximation accounts for ~60% of the cumulative sum of singular values. By rank-200, the approximation is closer to 80%. For completeness, we also show that a rank-800 approximation is able to recover the original image fully, since it is using all singular values and vectors (the original grayscale image was 800 x 800). The benefit of using SVD for image compression lies in its ability to prioritize and retain the most significant features of the image data, while excluding less significant features. <br></p>
<p>Note that much of this analysis is based on Chapter 1 of Steve Brunton’s <em>Data-Driven Science and Engineering</em>, which is an excellent resource for practicing Data Scientists. Be sure to pickup your own copy, as the second edition was recently released.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/svd-image-compression/svd-image-compression.html</guid>
  <pubDate>Sun, 28 Apr 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Estimating Logistic Regression coefficients From Scratch in Python</title>
  <link>https://www.jtrive.com/posts/logistic-regression-python/logistic-regression-python.html</link>
  <description><![CDATA[ 





<p>In this post, I’ll demonstrate how to estimate the coefficients of a logistic regression model using the Fisher Scoring algorithm in Python. These estimates will be compared with statsmodels coefficients to ensure consistency.</p>
<p>In a generalized linear model (GLM), the response may have any distribution from the exponential family. Rather than assuming the mean is a linear function of the explanatory variables, we assume that a function of the mean, or the link function, is a linear function of the explanatory variables.</p>
<p>Logistic regression is used for modeling data with a categorical response. Although it’s possible to model multinomial data using logistic regression, in this post our analysis will be limited to models targeting a dichotomous response, where the outcome can be classified as ‘Yes/No’ or ‘1/0’.</p>
<p>The logistic regression model is a GLM whose canonical link is the logit, or log-odds:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7BLn%7D%20%5Cbig(%5Cfrac%7B%5Cpi_%7Bi%7D%7D%7B1%20-%20%5Cpi_%7Bi%7D%7D%20%5Cbig)%20=%20%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%0A"></p>
<p>for <img src="https://latex.codecogs.com/png.latex?i%20=%20(1,%20%5Cldots%20,%20n)">.</p>
<p>Solving the logit for <img src="https://latex.codecogs.com/png.latex?%5Cpi_%7Bi%7D">, which is a stand-in for the predicted probability associated with observation <img src="https://latex.codecogs.com/png.latex?x_%7Bi%7D">, yields</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cpi_%7Bi%7D%20=%20%5Cfrac%20%7Be%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%7B1%20+%20e%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%20=%20%5Cfrac%20%7B1%7D%7B1%20+%20e%5E%7B-(%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D)%7D%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?-%5Cinfty%20%3C%20x_%7Bi%7D%20%3C%20%5Cinfty"> and <img src="https://latex.codecogs.com/png.latex?0%20%3C%20%5Cpi_%7Bi%20%7D%3C%201">.</p>
<section id="parameter-estimation" class="level3">
<h3 class="anchored" data-anchor-id="parameter-estimation">Parameter Estimation</h3>
<p>Maximum Likelihood Estimation can be used to determine the parameters of a Logistic Regression model, which entails finding the set of parameters for which the probability of the observed data is greatest. The objective is to estimate the <img src="https://latex.codecogs.com/png.latex?p%20+%201"> unknown <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B0%7D,%20%5Cldots%20,%5Cbeta_%7Bp%7D">.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?Y_%7Bi%7D"> represent independent, dichotomous response values for each of <img src="https://latex.codecogs.com/png.latex?n"> observations, where <img src="https://latex.codecogs.com/png.latex?Y_i=1"> denotes a success and <img src="https://latex.codecogs.com/png.latex?Y_i=0"> denotes a failure. The density function of a single observation <img src="https://latex.codecogs.com/png.latex?Y_i"> is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(y_%7Bi%7D)%20=%20%5Cpi_%7Bi%7D%5E%7By_%7Bi%7D%7D(1-%5Cpi_%7Bi%7D)%5E%7B1-y_%7Bi%7D%7D,%0A"></p>
<p>and the corresponding likelihood function is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AL(%5Cbeta)%20=%20%5Cprod_%7Bi=1%7D%5E%7Bn%7D%20%5Cpi_%7Bi%7D%5E%7By_%7Bi%7D%7D(1-%5Cpi_%7Bi%7D)%5E%7B1-y_%7Bi%7D%7D.%0A"></p>
<p>Taking the natural log of the maximum likelihood estimate results in the log-likelihood function:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Al(%5Cbeta)%20&amp;=%20%5Cmathrm%7BLn%7D(L(%5Cbeta))%20=%20%5Cmathrm%7BLn%7D%20%5CBig(%5Cprod_%7Bi=1%7D%5E%7Bn%7D%20%5Cpi_%7Bi%7D%5E%7By_%7Bi%7D%7D(1-%5Cpi_%7Bi%7D)%5E%7B1-y_%7Bi%7D%7D%20%5CBig)%0A=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7D%20%5Ccdot%20%5Cmathrm%7BLn%7D(%5Cpi_%7Bi%7D)%20+%20(1-y_%7Bi%7D)%20%5Ccdot%20%5Cmathrm%7BLn%7D(1-%5Cpi_%7Bi%7D)%5C%5C%0A&amp;=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7D%20%5Ccdot%20%5Cmathrm%7BLn%7D%20%5CBig(%5Cfrac%20%7Be%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%7B1%20+%20e%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%20%5CBig)%20+%20(1%20-%20y_%7Bi%7D)%20%5Ccdot%20%5Cmathrm%7BLn%7D%20%5CBig(%5Cfrac%20%7B1%7D%7B1%20+%20e%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%20%5CBig)%5C%5C%0A&amp;=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7D(%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D)%20-%20%5Cmathrm%7BLn%7D(1%20+%20e%5E%7B%5Cbeta_%7B0%7D%20+%20%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D)%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>The first-order partial derivatives of the log-likelihood are calculated and set to zero for each <img src="https://latex.codecogs.com/png.latex?k%20=%200,%201,%20%5Cldots,%20p"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%20%7B%5Cpartial%20l(%5Cbeta)%7D%7B%5Cpartial%20%5Cbeta_%7Bk%7D%7D%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7Dx_%7Bik%7D%20-%20%5Cpi_%7Bi%7Dx_%7Bik%7D%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_%7Bik%7D(y_%7Bi%7D%20-%20%5Cpi_%7Bi%7D)%20=%200,%0A"></p>
<p>which can be represented in matrix notation as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%20%7B%5Cpartial%20l(%5Cbeta)%7D%7B%5Cpartial%20%5Cbeta%7D%20=%20X%5E%7BT%7D(y%20-%20%5Cpi),%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?X%5E%7BT%7D"> is a (p + 1)-by-n matrix and <img src="https://latex.codecogs.com/png.latex?(y%20-%20%5Cpi)"> an n-by-1 vector.</p>
<p>The vector of first-order partial derivatives of the log-likelihood function is referred to as the score function and is typically represented as <img src="https://latex.codecogs.com/png.latex?U">.</p>
<p>These (p+1) equations are solved simultaneously to obtain the parameter estimates <img src="https://latex.codecogs.com/png.latex?%5Chat%5Cbeta_%7B0%7D,%20%5Cldots%20,%5Chat%5Cbeta_%7Bp%7D">.</p>
<p>Each solution specifies a critical-point which will be either a maximum or a minimum. The critical point will be a maximum if the matrix of second partial derivatives is negative definite (which means every element on the diagonal of the matrix is less than zero).</p>
<p>The matrix of second partial derivatives is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta_%7Bk%7D%7D%7B%5Cpartial%20%5Cbeta_%7Bk%7D%7D%5E%7BT%7D%7D%20=%20-%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_%7Bik%7D%5Cpi_%7Bi%7D(1-%5Cpi_%7Bi%7D)%7Bx_%7Bik%7D%7D%5E%7BT%7D,%0A"></p>
<p>represented in matrix form as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20=%20-X%5E%7BT%7DWX,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?W"> is an n-by-n diagonal matrix of weights with each element equal to <img src="https://latex.codecogs.com/png.latex?%5Cpi_%7Bi%7D(1%20-%20%5Cpi_%7Bi%7D)"> for logistic regression models (in general, the weights matrix <img src="https://latex.codecogs.com/png.latex?W"> will have entries inversely proportional to the variance of the response).</p>
<p>Since no closed-form solution exists for determining logistic regression model coefficients, iterative techniques must be employed.</p>
</section>
<section id="fitting-the-model" class="level3">
<h3 class="anchored" data-anchor-id="fitting-the-model">Fitting the Model</h3>
<p>Two distinct but related iterative methods can be utilized in determining model coefficients: the Newton-Raphson method and Fisher Scoring. The Newton-Raphson method relies on the matrix of second partial derivatives, also known as the Hessian. The Newton-Raphson update expression is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbeta%5E%7B(t+1)%7D%20=%20%5Cbeta%5E%7B(t)%7D%20-%20(H%5E%7B(t)%7D)%5E%7B-1%7DU%5E%7B(t)%7D,%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t+1)%7D"> = the vector of updated coefficient estimates.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t)%7D"> = the vector of coefficient estimates from the previous iteration.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?(H%5E%7B(t)%7D)%5E%7B-1%7D"> = the inverse of the Hessian, <img src="https://latex.codecogs.com/png.latex?%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)%5E%7B-1%7D">.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?U%5E%7B(t)%7D"> = the vector of first-order partial derivatives of the log-likelihood function, <img src="https://latex.codecogs.com/png.latex?X%5E%7BT%7D(y%20-%20%5Cpi)">.</li>
</ul>
<p>The Newton-Raphson method starts with an initial guess for the solution, and obtains a second guess by approximating the function to be maximized in a neighborhood of the initial guess by a second-degree polynomial, and then finding the location of that polynomial’s maximum value. This process continues until it converges to the actual solution. The convergence of <img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7Bt%7D"> to <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cbeta%7D"> is usually fast, with adequate convergence frequently realized after fewer than 50 iterations.</p>
<p>An alternative method, <em>Fisher Scoring</em>, utilizes the expected information <img src="https://latex.codecogs.com/png.latex?-E%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)">. Let <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D"> serve as a stand-in for the expected value of the information:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BI%7D%20=%20-E%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig).%0A"></p>
<p>The Fisher scoring update step replaces <img src="https://latex.codecogs.com/png.latex?-H%5E%7B(t)%7D"> from Newton-Raphson with <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D%5E%7B(t)%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cbeta%5E%7B(t+1)%7D%20&amp;=%20%5Cbeta%5E%7B(t)%7D%20+%20(%5Cmathcal%7BI%7D%5E%7B(t)%7D)%5E%7B-1%7DU%5E%7B(t)%7D%5C%5C%0A&amp;=%20%5Cbeta%5E%7B(t)%7D%20+%20(X%5E%7BT%7DWX)%5E%7B-1%7DX%5E%7BT%7D(y%20-%20%5Cpi)%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t+1)%7D"> = the vector of updated coefficient estimates.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(t)%7D"> = the vector of coefficient estimates from the previous iteration.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?(%5Cmathcal%7BI%7D%5E%7B(t)%7D)%5E%7B-1%7D"> = the inverse of the expected information matrix, <img src="https://latex.codecogs.com/png.latex?-E%20%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)%5E%7B-1%7D">.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?U%5E%7B(t)%7D"> = the vector of first-order partial derivatives of the log-likelihood function, <img src="https://latex.codecogs.com/png.latex?X%5E%7BT%7D(y%20-%20%5Cpi)">.</li>
</ul>
<p>For GLMs with a canonical link (of which employing the logit for logistic regression is an example), the observed and expected information are the same. When the response follows an exponential family distribution, and the canonical link function is employed, observed and expected information coincide so that Fisher scoring and Newton-Raphson are identical.</p>
<p>When the canonical link is used, the second partial derivatives of the log-likelihood do not depend on the observation <img src="https://latex.codecogs.com/png.latex?y_i">, and therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20=%20E%20%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20%5CBig).%0A"></p>
<p>Fisher scoring has the advantage that it produces the asymptotic covariance matrix as a by-product.</p>
<p>To summarize:</p>
<ul>
<li>The <em>Hessian</em> is the matrix of second partial derivatives of the log-likelihood with respect to the parameters, <img src="https://latex.codecogs.com/png.latex?H%20=%20%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D">.</li>
<li>The <em>observed information</em> is <img src="https://latex.codecogs.com/png.latex?-%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D">.<br>
</li>
<li>The <em>expected information</em> is <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BI%7D%20=%20E%5CBig(-%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)">.</li>
<li>The <em>asymptotic covariance matrix</em> is <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BVar%7D(%5Chat%7B%5Cbeta%7D)%20=%20E%5CBig(-%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)%5E%7B-1%7D%20=%20(X%5E%7BT%7DWX)%5E%7B-1%7D">.</li>
</ul>
<p>For models employing a canonical link function:</p>
<ul>
<li>The observed and expected information are the same, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20=%20E%5CBig(%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)">.</li>
<li><img src="https://latex.codecogs.com/png.latex?H%20=%20-%5Cmathcal%7BI%7D">, or <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%20=%20E%5CBig(-%5Cfrac%7B%5Cpartial%5E%7B2%7D%20l(%5Cbeta)%7D%7B%7B%5Cpartial%20%5Cbeta%7D%7B%5Cpartial%20%5Cbeta%7D%5E%7BT%7D%7D%5CBig)">.</li>
<li>The Newton-Raphson and Fisher Scoring algorithms yield identical results.</li>
</ul>
</section>
<section id="fisher-scoring-implementation" class="level3">
<h3 class="anchored" data-anchor-id="fisher-scoring-implementation">Fisher Scoring Implementation</h3>
<p>The data used for our sample calculation can be obtained <a href="https://gist.githubusercontent.com/jtrive84/835514a76f7afd552c999e4d9134baa8/raw/6dac51b80f892ef051174a46766eb53c7b609ebd/Challenger.csv">here</a>. The data represents O-Ring failures in the 23 pre-Challenger space shuttle missions. TEMPERATURE will serve as the single explanatory variable which will be used to predict O_RING_FAILURE, which is 1 if a failure occurred, 0 otherwise.</p>
<p>Once the parameters have been determined, the model estimate of the probability of success for a given observation can be calculated with:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%5Cpi_%7Bi%7D%20=%20%5Cfrac%20%7Be%5E%7B%5Chat%5Cbeta_%7B0%7D%20+%20%5Chat%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Chat%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%7B1%20+%20e%5E%7B%5Chat%5Cbeta_%7B0%7D%20+%20%5Chat%5Cbeta_%7B1%7Dx_%7Bi1%7D%20+%20%5Cldots%20+%20%5Chat%5Cbeta_%7Bp%7Dx_%7Bip%7D%7D%7D%0A"></p>
<p>In the following code, we define a single function, <code>get_params</code>, which returns the estimated model coefficients as a (p+1)-by-1 array. In addition, the function returns the number of scoring iterations, fitted values and the variance-covariance matrix for the estimated parameters.</p>
<div id="cell-2" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> estimate_lr_params(X, y, epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.001</span>):</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Estimate logistic regression coefficients using Fisher Scoring.Iteration </span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ceases once changes between elements in coefficient matrix across</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    consecutive iterations is less than epsilon.</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - design_matrix      `X` : n-by-(p+1)                                </span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - response_vector    `y` : n-by-1                                   </span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - probability_vector `p` : n-by-1                                   </span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - weights_matrix     `W` : n-by-n                                    </span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - epsilon                : threshold above which iteration continues</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - n                      : Number of observations                        </span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - (p + 1)                : Number of parameters (+1 for intercept term) </span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - U: First derivative of log-likelihood with respect to                </span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           each beta_i, i.e. "Score Function" = X^T * (y - p)        </span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           </span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - I: Second derivative of log-likelihood with respect to               </span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           each beta_i, i.e. "Information Matrix" = (X^T * W * X)      </span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                                                           </span></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - X^T*W*X results in a (p + 1)-by-(p + 1) matrix.                          </span></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - X^T(y - p) results in a (p+1)-by-1 matrix.                            </span></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - (X^T*W*X)^-1 * X^T(y - p) results in a (p + 1)-by-1 matrix.     </span></span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dict of model results        </span></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sigmoid(v): </span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>v)))</span>
<span id="cb1-35">    </span>
<span id="cb1-36"></span>
<span id="cb1-37">    betas0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-38">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigmoid(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> betas0)</span>
<span id="cb1-39">    W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag((p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p)).ravel())</span>
<span id="cb1-40">    I <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X</span>
<span id="cb1-41">    U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p)</span>
<span id="cb1-42"></span>
<span id="cb1-43">    n_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-44">    </span>
<span id="cb1-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb1-46">        n_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>        </span>
<span id="cb1-47">        betas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> betas0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.linalg.inv(I) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U</span>
<span id="cb1-48">        betas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> betas.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-49"></span>
<span id="cb1-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(betas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> betas0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> epsilon):</span>
<span id="cb1-51">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb1-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-53">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigmoid(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> betas)</span>
<span id="cb1-54">            W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag((p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p)).ravel())</span>
<span id="cb1-55">            I <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X</span>
<span id="cb1-56">            U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p)</span>
<span id="cb1-57">            betas0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> betas</span>
<span id="cb1-58"></span>
<span id="cb1-59">    dresults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-60">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"params"</span>: betas.ravel(),</span>
<span id="cb1-61">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred"</span>: sigmoid(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> betas),</span>
<span id="cb1-62">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"V"</span>: np.linalg.inv(I),</span>
<span id="cb1-63">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_iter"</span>: n_iter</span>
<span id="cb1-64">        }</span>
<span id="cb1-65"></span>
<span id="cb1-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(dresults)</span>
<span id="cb1-67"></span>
<span id="cb1-68"></span></code></pre></div>
</div>
<p>We read in the Challenger dataset, partition the data into the design matrix and response vector, which are then passed to <code>estimate_lr_params</code>:</p>
<div id="cell-4" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-3"></span>
<span id="cb2-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/835514a76f7afd552c999e4d9134baa8/raw/6dac51b80f892ef051174a46766eb53c7b609ebd/Challenger.csv"</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6">X0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TEMPERATURE"</span>]].values</span>
<span id="cb2-7">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate([np.ones(X0.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), X0], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-8">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"O_RING_FAILURE"</span>]].values</span>
<span id="cb2-9"></span>
<span id="cb2-10">dresults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> estimate_lr_params(X, y)</span>
<span id="cb2-11"></span>
<span id="cb2-12">dresults</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>{'params': array([15.04290163, -0.23216274]),
 'ypred': array([[0.43049313],
        [0.22996826],
        [0.27362106],
        [0.32209405],
        [0.37472428],
        [0.1580491 ],
        [0.12954602],
        [0.22996826],
        [0.85931657],
        [0.60268105],
        [0.22996826],
        [0.04454055],
        [0.37472428],
        [0.93924781],
        [0.37472428],
        [0.08554356],
        [0.22996826],
        [0.02270329],
        [0.06904407],
        [0.03564141],
        [0.08554356],
        [0.06904407],
        [0.82884484]]),
 'V': array([[ 5.44406534e+01, -7.96333573e-01],
        [-7.96333573e-01,  1.17143602e-02]]),
 'n_iter': 5}</code></pre>
</div>
</div>
<p><code>estimate_lr_params</code> returns a dictionary consisting of the following keys:</p>
<ul>
<li><code>"params"</code>: Estimated parameters.</li>
<li><code>"ypred"</code>: Fitted values.<br>
</li>
<li><code>"V"</code>: Variance-covariance matrix of the parameter estimates.<br>
</li>
<li><code>"n_iter"</code>: Number of Fisher scoring iterations.</li>
</ul>
<p>For the Challenger dataset, our implementation of Fisher scoring results in a model with <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Cbeta_%7B0%7D%20=%2015.0429"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Cbeta_%7B1%7D%20=%20-0.2322">. In order to predict new probabilities of O-Ring Failure based on temperature, we use:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Cpi%7D%20=%20%5Cfrac%20%7B1%7D%7B1%20+%20e%5E%7B-(15.0429%20-0.2322%20%5Ctimes%20%5Cmathrm%7BTEMPERATURE%7D)%7D%7D.%0A"></p>
<p>Negative coefficients correspond to features that are negatively associated with the probability of a positive outcome, with the reverse being true for positive coefficients.</p>
<p>Lets compare the results of our implementation against the estimates produced by statsmodels:</p>
<div id="cell-6" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.formula.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> smf</span>
<span id="cb4-3"></span>
<span id="cb4-4">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smf.logit(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"O_RING_FAILURE ~ TEMPERATURE"</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df).fit()</span>
<span id="cb4-5"></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">mdl.params:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl.cov_params():</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>cov_params()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl.predict(df):</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>predict(df)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Optimization terminated successfully.
         Current function value: 0.441635
         Iterations 7

mdl.params:
Intercept      15.042902
TEMPERATURE    -0.232163
dtype: float64

mdl.cov_params():
             Intercept  TEMPERATURE
Intercept    54.444275    -0.796387
TEMPERATURE  -0.796387     0.011715

mdl.predict(df):
0     0.430493
1     0.229968
2     0.273621
3     0.322094
4     0.374724
5     0.158049
6     0.129546
7     0.229968
8     0.859317
9     0.602681
10    0.229968
11    0.044541
12    0.374724
13    0.939248
14    0.374724
15    0.085544
16    0.229968
17    0.022703
18    0.069044
19    0.035641
20    0.085544
21    0.069044
22    0.828845
dtype: float64
</code></pre>
</div>
</div>
<p>The values produced using the statsmodels align closely with the results from <code>estimate_lr_params</code>.</p>
<p>A feature of logistic regression models is that the predictions preserve the data’s marginal probabilities. If you aggregate the fitted values from the model, the total will equal the number of positive outcomes in the original target vector:</p>
<div id="cell-8" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># estimate_lr_params.</span></span>
<span id="cb6-3">dresults[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>7.000000000274647</code></pre>
</div>
</div>
<div id="cell-9" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># statsmodels.</span></span>
<span id="cb8-3">mdl.predict(df).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>7.0000000000000036</code></pre>
</div>
</div>
<p>We have 7 positive instances in our dataset, and the total probability aggregates to 7 in both sets of predictions.</p>


</section>

 ]]></description>
  <category>Statistical Modeling</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/logistic-regression-python/logistic-regression-python.html</guid>
  <pubDate>Sat, 16 Mar 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Assessing Model Goodness-of-Fit in Python with Scipy</title>
  <link>https://www.jtrive.com/posts/gof-python-scipy/gof-python-scipy.html</link>
  <description><![CDATA[ 





<p>This article explores techniques that can be used to assess how well a model fits a dataset. Specifically, we’ll demonstrate how to produce the following visualizations:</p>
<ul>
<li>Q-Q Plot: Compares two probability distributions by plotting their quantiles against each other.<br>
</li>
<li>P-P Plot: Compares two cumulative distribution functions against each other.<br>
</li>
<li>Histogram: Plot density histogram with parametric distribution overlay.</li>
</ul>
<p>In addition, the following tests will be introduced:</p>
<ul>
<li>Kolmogorov-Smirnov: Test the equality of continuous, one-dimensional probability distributions.<br>
</li>
<li>Anderson-Darling: Test whether a given sample is drawn from a given probability distribution.<br>
</li>
<li>Shapiro-Wilk: Test the null hypothesis that the data is drawn from a normal distribution.</li>
</ul>
<p>The same dataset will be used throughout the post, provided below:</p>
<div id="cell-2" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb1-6"></span>
<span id="cb1-7">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9">dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray([</span>
<span id="cb1-10">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">62.55976</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.71019</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.67025</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">35.43758</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.65457</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">21.55292</span>, </span>
<span id="cb1-11">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.26359</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.33537</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.43599</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.66612</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.45701</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.39694</span>, </span>
<span id="cb1-12">     <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">55.1221</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.50901</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.61822</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.10305</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.21494</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.25862</span>,  </span>
<span id="cb1-13">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.54446</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.48212</span>,  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.34573</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">21.47846</span>,   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0777</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">26.48881</span>, </span>
<span id="cb1-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.68764</span>,  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.49631</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.58039</span>,  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.59111</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">23.08169</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">19.09755</span>, </span>
<span id="cb1-15">   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">21.35046</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.24064</span>,  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.16365</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">37.43091</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.48556</span>,    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.6263</span>,  </span>
<span id="cb1-16">    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">31.14471</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.75287</span>,  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">46.8529</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.26814</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.41045</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.11071</span>, </span>
<span id="cb1-17">   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30.46438</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.22195</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">31.83203</span>,  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.09629</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">52.06456</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.30986</span>, </span>
<span id="cb1-18">   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.62359</span>,   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.86882</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.77073</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">31.17838</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">22.04998</span></span>
<span id="cb1-19">    ])</span></code></pre></div>
</div>
<p>The task is to assess how well our data fits a normal distribution parameterized with mean and variance computed using:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cbar%7Bx%7D%20&amp;=%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_%7Bi%7D%20%5C%5C%0As%5E%7B2%7D%20&amp;=%20%5Cfrac%7B1%7D%7Bn-1%7D%5Csum_%7Bi=1%7D%5E%7Bn%7D%20(x_%7Bi%7D%20-%20%5Cbar%7Bx%7D)%5E2%0A%5Cend%7Balign*%7D%0A"></p>
<p>Keep in mind that although we’re testing how well othe data can be approximated by a normal distribution, many of the tests we highlight (with the exception of Shapiro-Wilk) can assess the quality of fit for many different parametric models.</p>
<p>We begin with visual assessments of goodness-of-fit.</p>
<section id="q-q-plot" class="level3">
<h3 class="anchored" data-anchor-id="q-q-plot">Q-Q Plot</h3>
<p>The Q-Q plot compares two probability distributions by plotting their quantiles against each other. We compare standard normal quantiles (x-axis) against the empirical quantiles from the dataset of interest (y-axis). If the two distributions are similar, the points in the Q-Q plot will approximately lie on a straight line. There isn’t a hard and fast rule to determine how much deviation from the straight line is too much, but if the distributions are very different, it will be readily apparent in the Q-Q plot. We can construct a Q-Q plot from scratch using matplotlib as follows:</p>
<div id="cell-4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Generate qq-plot comparing data against standard normal distribution.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">line_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span></span>
<span id="cb2-6">dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(dat)</span>
<span id="cb2-7">cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dat.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat.size</span>
<span id="cb2-8">ndist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-9">theo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ndist.ppf(cdf)</span>
<span id="cb2-10"></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove observations containing Inf.</span></span>
<span id="cb2-13">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>[tt <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(theo, dat) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.Inf <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.Inf <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tt])</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Obtain coefficients for best fit regression line.</span></span>
<span id="cb2-16">b1, b0, _, _, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.linregress(x, y)</span>
<span id="cb2-17">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b0 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> x]</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine upper and lower axis bounds.</span></span>
<span id="cb2-20">xmin, xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(x), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x)</span>
<span id="cb2-21">ymin, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-22"></span>
<span id="cb2-23">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-24">ax.set_title(</span>
<span id="cb2-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q-Q Plot: Data vs. Standard Normal Distribution"</span>,</span>
<span id="cb2-26">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb2-27">    )</span>
<span id="cb2-28">ax.scatter(x, y, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb2-29">ax.plot(x, yhat, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>line_color, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>)</span>
<span id="cb2-30">ax.set_xlim(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xmin, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xmax)</span>
<span id="cb2-31">ax.set_ylim(bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ymin, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ymax)</span>
<span id="cb2-32">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empirical Quantiles"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>)</span>
<span id="cb2-33">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standard Normal Quantiles"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>)</span>
<span id="cb2-34">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb2-35">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb2-36">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb2-37">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb2-38">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb2-39">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb2-40">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gof-python-scipy/gof-python-scipy_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The points seem to mostly follow a straight line, but there are observations that deviate from strict linearity. However, there’s nothing here that disqualifies our dataset from being modeled with normal distribution.</p>
</section>
<section id="p-p-plot" class="level3">
<h3 class="anchored" data-anchor-id="p-p-plot">P-P Plot</h3>
<p>The P-P plot compares two cumulative distribution functions against each other. To produce a P-P plot, we plot the theoretical percentiles (x-axis) against empirical percentiles (y-axis), so that each axis ranges from 0-1. The line of comparison is the 45 degree line running from (0,0) to (1,1). The distributions are equal if and only if the plot falls on this line: any deviation indicates a difference between the distributions. The code to generate a P-P plot is provided below:</p>
<div id="cell-6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Create P-P plot, which compares theoretical normal percentiles (x-axis) against </span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">empirical percentiles (y-axis).</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-5">dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(dat)</span>
<span id="cb3-6">dat_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.mean()</span>
<span id="cb3-7">dat_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.std(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standardize dat.</span></span>
<span id="cb3-10">sdat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dat_mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat_std</span>
<span id="cb3-11">cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dat.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat.size</span>
<span id="cb3-12">ndist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-13">theo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ndist.cdf(sdat)</span>
<span id="cb3-14">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theo, cdf</span>
<span id="cb3-15"></span>
<span id="cb3-16">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-17">ax.set_title(</span>
<span id="cb3-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P-P Plot: Empricial CDF vs. Standard Normal CDF"</span>,</span>
<span id="cb3-19">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb3-20">    )</span>
<span id="cb3-21"></span>
<span id="cb3-22">ax.scatter(x, y, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb3-23">ax.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>line_color, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>)</span>
<span id="cb3-24">ax.set_xlim(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-25">ax.set_ylim(bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-26">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empirical Cumulative Distribution"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>)</span>
<span id="cb3-27">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standard Normal Distribution"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>)</span>
<span id="cb3-28">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb3-29">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb3-30">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb3-31">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb3-32">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb3-33">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb3-34">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gof-python-scipy/gof-python-scipy_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Although the observations follow the linear trend in general, the data overall appear somewhat above the reference line <img src="https://latex.codecogs.com/png.latex?y=x">. This may be attributable to the mean of <code>dat</code> being greater than 0. However, this doesn’t eliminate the possibility of our data representing a sample from a normal population. We expect some deviation from the expected normal percentiles, which we see in the P-P plot.</p>
</section>
<section id="histogram-with-parametric-overlay" class="level3">
<h3 class="anchored" data-anchor-id="histogram-with-parametric-overlay">Histogram with Parametric Overlay</h3>
<p>For the next diagnostic we create a histogram which represents the density of the empirical data overlaid with a parameterized normal distribution.</p>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Plot histogram with best-fit normal distribution overlay.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-4">dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dat_mean, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dat_std)</span>
<span id="cb4-5">xdist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(dat.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), dat.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>)</span>
<span id="cb4-6">ydist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dist.pdf(xdist)</span>
<span id="cb4-7"></span>
<span id="cb4-8">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-9">ax.set_title(</span>
<span id="cb4-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empirical Data w/ Parametric Overlay"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>,</span>
<span id="cb4-11">    loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb4-12">    )</span>
<span id="cb4-13">ax.hist(</span>
<span id="cb4-14">    dat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span>, </span>
<span id="cb4-15">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb4-16">    )</span>
<span id="cb4-17"></span>
<span id="cb4-18">ax.plot(xdist, ydist, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.75</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb4-19">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb4-20">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb4-21">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb4-22">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb4-23">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb4-24">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb4-25">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-26">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-27">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gof-python-scipy/gof-python-scipy_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The data appear to follow a pattern roughly the shape outlined by a best-fit normal density.</p>
</section>
<section id="kolmogorov-smirnov-test" class="level3">
<h3 class="anchored" data-anchor-id="kolmogorov-smirnov-test">Kolmogorov-Smirnov Test</h3>
<p>The Kolmogorov-Smirnov Test is different than the previous set of visualizations in that it produces a metric used to assess the level of agreement between target and reference distributions, but a visual diagnostic can be obtained as well.</p>
<p>Suppose that we have a set of empirical data that we assume originates from some distribution <img src="https://latex.codecogs.com/png.latex?F">. The Kolmogorov-Smirnov statistic is used to test:</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?H_%7B0%7D"> : the samples come from <img src="https://latex.codecogs.com/png.latex?F"></p>
</blockquote>
<p>against:</p>
<blockquote class="blockquote">
<p><img src="https://latex.codecogs.com/png.latex?H_%7B1%7D"> : The samples do not come from <img src="https://latex.codecogs.com/png.latex?F"></p>
</blockquote>
<p>The test compares the empirical distribution function of the data, <img src="https://latex.codecogs.com/png.latex?F_%7Bobs%7D">, with the cumulative distribution function associated with the null hypothesis, <img src="https://latex.codecogs.com/png.latex?F_%7Bexp%7D"> (the expected CDF).</p>
<p>The Kolmogorov-Smirnov statistic is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AD_%7Bn%7D%20=%20max%7CF_%7Bexp%7D(x)%20-%20F_%7Bobs%7D(x)%7C.%0A"></p>
<p>Assuming the data are ordered such that <img src="https://latex.codecogs.com/png.latex?x_%7B1%7D"> represents the the minimum value in the dataset and <img src="https://latex.codecogs.com/png.latex?x_%7Bn%7D"> the maximum value, the empirical CDF can be represented as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AF_%7Bobs%7D(x_%7Bi%7D)%20=%20%5Cfrac%7Bi%7D%7Bn%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?n"> is the number of observations in the dataset.</p>
<p>For each observation, compute the absolute differences between <img src="https://latex.codecogs.com/png.latex?F_%7Bexp%7D(x)"> and <img src="https://latex.codecogs.com/png.latex?F_%7Bobs%7D(x)">. The Kolmogorov-Smirnov statistic <img src="https://latex.codecogs.com/png.latex?D_%7Bn%7D"> is the maximum value from the vector of absolute differences. This value represents the maximum absolute distance between the expected and observed distribution functions. <img src="https://latex.codecogs.com/png.latex?D_%7Bn%7D"> is then compared to a table of critical values to assess whether to reject or fail to reject <img src="https://latex.codecogs.com/png.latex?H_%7B0%7D">.</p>
<p>Before computing the statistic, we first demonstrate how to generate the one-sample Kolmogorov-Smirnov comparison plot:</p>
<div id="cell-11" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Kolmogorov-Smirnov test visualization.</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-4">dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(dat)</span>
<span id="cb5-5">dat_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.mean()</span>
<span id="cb5-6">dat_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.std(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-7">sdat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dat_mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat_std</span>
<span id="cb5-8">cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dat.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat.size</span>
<span id="cb5-9">dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate Kolmogorov-Smirnov comparison plot.</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y0 : Values from reference distribution.</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y1 : Values from empirical distribution.</span></span>
<span id="cb5-14">ecdfpairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(sdat, cdf)</span>
<span id="cb5-15">ecdfpairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ii <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ecdfpairs <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.Inf <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.Inf <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ii]</span>
<span id="cb5-16">x, y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ecdfpairs)</span>
<span id="cb5-17">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(x, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb5-18">y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dist.cdf(x)</span>
<span id="cb5-19">y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(y1, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb5-20"></span>
<span id="cb5-21">absdiffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y0)</span>
<span id="cb5-22">indx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argwhere(absdiffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> absdiffs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()).ravel()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-23">xann, y0ann, y1ann  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x[indx], y0[indx], y1[indx]</span>
<span id="cb5-24">ypoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (y1ann <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y0ann) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-25">xy, xyp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (xann, ypoint), (xann <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span>, ypoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>)</span>
<span id="cb5-26"></span>
<span id="cb5-27">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-28">xmin, xmax, ymin, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(x), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-29">ax.set_title(</span>
<span id="cb5-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kolmogorov-Smirnov Illustration"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb5-31">    loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span></span>
<span id="cb5-32">    )</span>
<span id="cb5-33">ax.set_xlim(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xmin, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xmax)</span>
<span id="cb5-34">ax.set_ylim(bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ymin, top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ymax)</span>
<span id="cb5-35">ax.plot(x, y0, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reference CDF"</span>)</span>
<span id="cb5-36">ax.step(x, y1, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f33455"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, where<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pre"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empirical CDF"</span>)</span>
<span id="cb5-37">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb5-38">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb5-39">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CDF"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb5-40">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb5-41">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb5-42">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb5-43">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-44">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-45">plt.annotate(</span>
<span id="cb5-46">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maximum Absolute Distance"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xy, xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>xyp,</span>
<span id="cb5-47">    arrowprops<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(facecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, shrink<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>, headwidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.5</span>)</span>
<span id="cb5-48">    )</span>
<span id="cb5-49">ax.legend(</span>
<span id="cb5-50">    frameon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper left"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-51">    )</span>
<span id="cb5-52">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gof-python-scipy/gof-python-scipy_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The Kolmogorov-Smirnov statistic is computed as the greatest absolute distance between the empirical and expected CDFs. Computing the statistic is straightforward:</p>
<div id="cell-13" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(dat)</span>
<span id="cb6-3">cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dat.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat.size</span>
<span id="cb6-4">dat_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.mean()</span>
<span id="cb6-5">dat_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.std(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameterized expected normal distribution.</span></span>
<span id="cb6-8">expnorm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dat_mean, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dat_std)</span>
<span id="cb6-9">expcdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expnorm.cdf(dat)</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute difference between datcdf and expcdf.</span></span>
<span id="cb6-12">absdiffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> expcdf)</span>
<span id="cb6-13">D0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> absdiffs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb6-14"></span>
<span id="cb6-15">D0</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>0.07194182492411011</code></pre>
</div>
</div>
<p>We can compare our value of <img src="https://latex.codecogs.com/png.latex?D"> with the value obtained from <code>scipy.stats.kstest</code>, which takes as arguments the empirical dataset and a callable representing the CDF of the expected distribution, and returns the D-statistic as well as the p-value associated with the computed D-statistic (note that critical values depend on the number of observations). The manually computed result is given by <code>D0</code>, the result returned from <code>scipy.stats.kstest</code> by <code>D1</code>:</p>
<div id="cell-15" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2">dat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(dat)</span>
<span id="cb8-3">cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dat.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dat.size</span>
<span id="cb8-4">dat_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.mean()</span>
<span id="cb8-5">dat_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dat.std(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameterized expected normal distribution.</span></span>
<span id="cb8-8">expnorm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dat_mean, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dat_std)</span>
<span id="cb8-9">expcdf  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expnorm.cdf(dat)</span>
<span id="cb8-10">absdiffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> expcdf)</span>
<span id="cb8-11">D0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> absdiffs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb8-12">D1, p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.kstest(dat, expnorm.cdf)</span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Our D         : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>D0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.8}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Scipy kstest D: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>D1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.8}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"kstest p-value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.8}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Our D         : 0.071941825
Scipy kstest D: 0.071941825
kstest p-value: 0.92828027</code></pre>
</div>
</div>
<p>The p-value (the second element of the 2-tuple returned by <code>scipy.stats.kstest</code>) is 0.9283. How should this result be interpreted?</p>
<p>For the one-sample Kolmogorov-Smirnov test, the null hypothesis is that the distributions are the same. Thus, the lower the p-value the greater the statistical evidence you have to reject the null hypothesis and conclude the distributions are different. <em>The test only lets you speak of your confidence that the distributions are different, not the same, since the test is designed to find the probability of Type I error</em>. Therefore, if <img src="https://latex.codecogs.com/png.latex?D"> is less than the critical value, we do not reject the null hypothesis (corresponds to a large p-value). If <img src="https://latex.codecogs.com/png.latex?D"> is greater than the critical value, we reject the null hypothesis (corresponds to a small p-value).</p>
<p>Given our p-value of 0.9326, we do not have sufficient evidence to reject the null hypothesis that the distributions are the same.</p>
</section>
<section id="the-anderson-darling-test" class="level3">
<h3 class="anchored" data-anchor-id="the-anderson-darling-test">The Anderson-Darling Test</h3>
<p>The Anderson-Darling test tests the null hypothesis that a sample is drawn from a population that follows a particular distribution. It makes use of the fact that when given a hypothesized underlying distribution and assuming the data is a sample from this distribution, the CDF of the data can be assumed to follow a uniform distribution. The statistic itself can be expressed as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AA%5E%7B2%7D%20&amp;=%20-n%20-%20S,%20%5Chspace%7B2mm%7D%20%5Ctext%7Bwhere%7D%20%5C%5C%0AS%20&amp;=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Cfrac%7B2i-1%7D%7Bn%7D%20%5CBig%5BLn(F(y_%7Bi%7D))%20+%20Ln(1%20-%20F(y_%7Bn+1-i%7D))%20%5CBig%5D%0A%5Cend%7Balign*%7D%0A"></p>
<p>The function <code>scipy.stats.anderson</code> takes as arguments the empirical dataset and a distribution to test against (one of “norm”, “expon”, “logistic”, “gumbel”, “gumbel_l” or “gumbel_rexponential”), and returns the Anderson-Darling test statistic, the critical values for the specified distribution and the significance levels associated with the critical values. For example, to test whether our dataset follows a normal distribution, we run the following:</p>
<div id="cell-17" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform Anderson-Darling test.</span></span>
<span id="cb10-3">A, crit, sig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.anderson(dat, dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"norm"</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"A   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>A<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"crit: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>crit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"sig : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sig<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>A   : 0.22442637404651578
crit: [0.54  0.615 0.738 0.861 1.024]
sig : [15.  10.   5.   2.5  1. ]</code></pre>
</div>
</div>
<p>According to the <a href="https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.anderson.html"><code>scipy.stats.anderson</code> documentation</a>, if the returned statistic is larger than the critical values, then for the corresponding significance level the null hypothesis (that the data come from the chosen distribution) can be rejected. Since our statistic 0.224426 is smaller than all critical values, we do not have sufficient evidence to reject the null hypothesis that the data come from a normal distribution.</p>
<p>A table of Anderson-Darling critical values can be found <a href="https://gist.github.com/jtrive84/8e856c402236e9b16f5bf5c165c7df7d/raw/a36497e47dba1f4bbeef95416524aa1efd033d58/AndersonDarling.pdf">here</a>.</p>
</section>
<section id="shapiro-wilk-test" class="level3">
<h3 class="anchored" data-anchor-id="shapiro-wilk-test">Shapiro-Wilk Test</h3>
<p>The Shapiro-Wilk test null hypothesis is that the sample is drawn from a normally distributed population. The function <code>scipy.stats.shapiro</code> takes the empirical dataset as it’s sole argument, and similar to <code>scipy.stats.kstest</code> returns a 2-tuple containing the test statistic and p-value.</p>
<div id="cell-19" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform Shapiro-Wilk test.</span></span>
<span id="cb12-3">W, p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.shapiro(dat)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"W: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>W<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"p: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>W: 0.9804516434669495
p: 0.5324737429618835</code></pre>
</div>
</div>
<p>If the p-value is less than the chosen alpha level, then the null hypothesis is rejected, and there is evidence that the data tested are not normally distributed. If the p-value is greater than the chosen alpha level, then the null hypothesis that the data came from a normally distributed population can not be rejected (e.g., for an alpha level of 0.05, a data set with a p-value of 0.05 rejects the null hypothesis that the data are from a normally distributed population). Our p-value is 0.532, so we cannot reject the null hypothesis.</p>
<p>A table of Shapiro-Wilk critical values can be downloaded <a href="https://gist.github.com/jtrive84/8e856c402236e9b16f5bf5c165c7df7d/raw/c403acff7af1837c03d9f16d0300b291546b7a3d/ShapiroWilk.pdf">here</a>.</p>


</section>

 ]]></description>
  <category>Statistical Modeling</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/gof-python-scipy/gof-python-scipy.html</guid>
  <pubDate>Sat, 02 Mar 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Backpropagation for Fully-Connected Neural Networks</title>
  <link>https://www.jtrive.com/posts/backprop-python/backprop-python.html</link>
  <description><![CDATA[ 





<p>Backpropagation is a key algorithm used in training fully connected neural networks, also known as feed-forward neural networks. In this algorithm, the network’s output error is propagated backward, layer by layer, to adjust the weights of connections between neurons.</p>
<p><img src="https://www.jtrive.com/posts/backprop-python/fc.png" class="img-fluid"></p>
<p>The process starts by comparing the network’s output to the desired output, calculating the error. Then, starting from the output layer and moving backward, the algorithm computes the gradients of the error with respect to each weight in the network using the chain rule of calculus. These gradients indicate how much each weight contributes to the error.</p>
<p>Next, the weights are updated using gradient descent, where they are adjusted in the direction that minimizes the error. This adjustment is proportional to the gradient and a predefined learning rate, ensuring the network converges towards a solution. Backpropagation continues iteratively over the training data until the network’s performance reaches a satisfactory level or a predetermined number of iterations is reached.</p>
<p>Overall, backpropagation efficiently adjusts the weights of a fully connected network, enabling it to learn complex relationships between input and output data through iterative optimization of the network’s parameters.</p>
<p>In what follows, we walkthrough the mathematics and pseudocode required to train a 2-layer fully connected network for a classification task.</p>
<section id="forward-pass" class="level3">
<h3 class="anchored" data-anchor-id="forward-pass">Forward Pass</h3>
<p>In the following, superscripts represent the layer associated with each variable:</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?X%20=%20A%5E%7B(0)%7D">: Input data having dimension n-by-f, where n is the number of samples and f the number of features. For a batch of 32 MNIST samples, <img src="https://latex.codecogs.com/png.latex?X"> would have dimension (32, 784).</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?y">: Target variable. classifying a single digit from MINST, a vector populated with 0s and 1s indicating the ground truth label for the sample (8 or not 8). Has the same length as the first dimension of <img src="https://latex.codecogs.com/png.latex?X">.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?W%5E%7B(l)%7D">: Trainable weights. Projects previous layer activations to lower dimensional representation. Again referring to the first set of weights for a batch of 32 MNIST samples, <img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D">’s first dimension will match the second dimension of the activations from the previous layer (784), and <img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D">’s second dimension will be some lower dimension, say 256. <img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D"> will therefore have dimension (784, 256).</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?b%5E%7B(l)%7D">: Bias term, a one-dimensional vector associated with each hidden layer having length equal to the second dimension of the hidden layer. <img src="https://latex.codecogs.com/png.latex?b%5E%7B(1)%7D"> will have dimension (256,).</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(l)%7D%20=%20A%5E%7B(l-1)%7D%20W%5E%7B(l)%7D%20+%20b%5E%7B(l)%7D">: Output of layer <img src="https://latex.codecogs.com/png.latex?l">, which is the matrix product of the previous layer activations <img src="https://latex.codecogs.com/png.latex?A%5E%7B(l-1)%7D"> and current layer weights (plus bias term).</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?A%5E%7B(l)%7D%20=%20%5Csigma(Z%5E%7B(l)%7D)">: Activations associated with layer <img src="https://latex.codecogs.com/png.latex?l">. Passes <img src="https://latex.codecogs.com/png.latex?Z%5E%7B(l)%7D"> through a non-linearity such as sigmoid or ReLU.</p></li>
</ul>
<p>More concretely, assume a 2-layer fully-connected neural network with one hidden layer of size 256, through which a dataset of dimension 32-by-784 is passed to predict whether each of the 32 images is an 8 or not. The forward pass looks like:</p>
<ul>
<li>Randomly initialize <img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D"> (784x256), <img src="https://latex.codecogs.com/png.latex?W%5E%7B(2)%7D"> (256x1), <img src="https://latex.codecogs.com/png.latex?b%5E%7B(1)%7D"> (256x1) and <img src="https://latex.codecogs.com/png.latex?b%5E%7B(2)%7D"> (1x1)</li>
<li><img src="https://latex.codecogs.com/png.latex?X%20=%20A%5E%7B(0)%7D%5Chspace%7B.75em%7D"> (32x784)</li>
<li><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(1)%7D%20=%20A%5E%7B(0)%7D%20W%5E%7B(1)%7D%20+%20b%5E%7B(1)%7D%5Chspace%7B.75em%7D"> (32x256)</li>
<li><img src="https://latex.codecogs.com/png.latex?A%5E%7B1%7D%20=%20%5Csigma(Z%5E%7B(1)%7D)%5Chspace%7B.75em%7D"> (32x256)</li>
<li><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(2)%7D%20=%20A%5E%7B(1)%7D%20W%5E%7B(2)%7D%20+%20b%5E%7B(2)%7D%5Chspace%7B.75em%7D"> (32x1)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D%20=%20A%5E%7B(2)%7D%20=%20%5Csigma(Z%5E%7B(2)%7D)%5Chspace%7B.75em%7D"> (32x1)</li>
</ul>
<p>The final output, <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D">, represents the probability that each sample is the number 8 or not.</p>
<p>With the actual labels <img src="https://latex.codecogs.com/png.latex?y"> and our predicted probabilities <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D">, we can define our loss function, the cross-entropy loss for binary classification:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%20=%20-%5Cfrac%7B1%7D%7Bn%7D%5Cbig(y%20%5Ctimes%20%5Cmathrm%7Blog%7D(%5Chat%7By%7D)%20-%20(1%20-%20y)%5Ctimes%20%5Cmathrm%7Blog%7D(1%20-%20%5Chat%7By%7D)%5Cbig)%0A"></p>
</section>
<section id="backward-pass-backpropagation" class="level3">
<h3 class="anchored" data-anchor-id="backward-pass-backpropagation">Backward Pass (Backpropagation)</h3>
<p>The goal of backpropagation is to compute the partial derivatives of the loss function <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D"> with respect to any weight <img src="https://latex.codecogs.com/png.latex?W"> or <img src="https://latex.codecogs.com/png.latex?b"> in the network. In order to update our weights, we need to take derivatives of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D"> w.r.t. <img src="https://latex.codecogs.com/png.latex?W"> and <img src="https://latex.codecogs.com/png.latex?b">, then update <img src="https://latex.codecogs.com/png.latex?W"> and <img src="https://latex.codecogs.com/png.latex?b"> using the derivatives. Backpropagation starts by taking the derivative of the loss function. We first compute the derivatives of the loss function w.r.t. <img src="https://latex.codecogs.com/png.latex?W%5E%7B(2)%7D"> and <img src="https://latex.codecogs.com/png.latex?b%5E%7B(2)%7D">. Here we make use of the chain rule:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Once we have <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D">, <img src="https://latex.codecogs.com/png.latex?W%5E%7B(2)%7D"> and <img src="https://latex.codecogs.com/png.latex?b%5E%7B(2)%7D"> are updated as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AW%5E%7B(2)%7D%20&amp;:=%20W%5E%7B(2)%7D%20-%20%5Calpha%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%5C%5C%0Ab%5E%7B(2)%7D%20&amp;:=%20b%5E%7B(2)%7D%20-%20%5Calpha%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>for some learning rate <img src="https://latex.codecogs.com/png.latex?%5Calpha">. This holds for all layers. For given layer <img src="https://latex.codecogs.com/png.latex?i">, the update rule for <img src="https://latex.codecogs.com/png.latex?W%5E%7B(i)%7D"> and <img src="https://latex.codecogs.com/png.latex?b%5E%7B(i)%7D"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AW%5E%7B(i)%7D%20&amp;:=%20W%5E%7B(i)%7D%20-%20%5Calpha%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(i)%7D%7D%5C%5C%0Ab%5E%7B(i)%7D%20&amp;:=%20b%5E%7B(i)%7D%20-%20%5Calpha%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(i)%7D%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>Let’s start with unpacking <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D">. The first entry on the r.h.s., <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D">, represents the derivative of the loss function w.r.t. <img src="https://latex.codecogs.com/png.latex?A%5E%7B(2)%7D%20=%20%5Chat%7By%7D">, which is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20=%20-%5Cfrac%7By%7D%7BA%5E%7B(2)%7D%7D%20+%20%5Cfrac%7B1%20-%20y%7D%7B1%20-%20A%5E%7B(2)%7D%7D.%0A"></p>
<p>The second term on the r.h.s., <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D">, is the derivative of the sigmoid activation (<img src="https://latex.codecogs.com/png.latex?A%5E%7B(2)%7D%20=%20%5Csigma(Z%5E%7B(2)%7D)">). The derivative of the sigmoid function is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%5Csigma%7D%7Bdx%7D%20=%20%5Csigma(x)(1-%5Csigma(x)),%0A"></p>
<p>therefore <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D"> is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20=%20A%5E%7B(2)%7D(1%20-%20A%5E%7B(2)%7D).%0A"></p>
<p>For the third term on the r.h.s., <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D">, recall that <img src="https://latex.codecogs.com/png.latex?Z%5E%7B(2)%7D%20=%20A%5E%7B(1)%7D%20W%5E%7B(2)%7D%20+%20b%5E%7B(2)%7D">. Therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%20=%20A%5E%7B(1)%7D.%0A"></p>
<p>Finally, we have</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%5C%5C%0A&amp;=%20%5CBig(-%5Cfrac%7By%7D%7BA%5E%7B(2)%7D%7D%20+%20%5Cfrac%7B1%20-%20y%7D%7B1%20-%20A%5E%7B(2)%7D%7D%5CBig)%20%5Ccdot%20%5Cbig(A%5E%7B(2)%7D(1%20-%20A%5E%7B(2)%7D)%5Cbig)%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D%5Cbig)%5C%5C%0A&amp;=%20(A%5E%7B(2)%7D%20-%20y)%20%5Ccdot%20A%5E%7B(1)%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>As a notational convenience, we define <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20=%20(A%5E%7B(2)%7D%20-%20y).%0A"></p>
<p>This way, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D"> can be expressed as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(2)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20A%5E%7B(1)%7D.%0A"></p>
<p>We proceed in a similar fashion for <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%5C%5C%0A&amp;=%20(A%5E%7B(2)%7D%20-%20y),%0A%5Cend%7Balign*%7D%0A"></p>
<p>since <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20b%5E%7B(2)%7D%7D%20=%201">.</p>
<p>For the first layer we re-use many of these calculations, but for new terms on the r.h.s., we employ the chain rule in the same way. For reference, restate the terms from the forward pass:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AA%5E%7B(0)%7D%20&amp;=%20X%5C%5C%0AZ%5E%7B(1)%7D%20&amp;=%20A%5E%7B(0)%7D%20W%5E%7B(1)%7D%20+%20b%5E%7B(1)%7D%5C%5C%0AA%5E%7B1%7D%20&amp;=%20%5Csigma(Z%5E%7B(1)%7D)%5C%5C%0AZ%5E%7B(2)%7D%20&amp;=%20A%5E%7B(1)%7D%20W%5E%7B(2)%7D%20+%20b%5E%7B(2)%7D%5C%5C%0AA%5E%7B(2)%7D%20&amp;=%20%5Chat%7By%7D%20=%20%5Csigma(Z%5E%7B(2)%7D)%0A%5Cend%7Balign*%7D%0A"></p>
<p>We next consider <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Considering each term on the r.h.s:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20&amp;=%20(A%5E%7B(2)%7D%20-%20y)%5C%5C%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20&amp;=%20W%5E%7B(2)%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20&amp;=%20%5Csigma(Z%5E%7B(1)%7D)%20(1%20-%20%5Csigma(Z%5E%7B(1)%7D))%20=%20A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5C%5C%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%20&amp;=%20A%5E%7B(0)%7D%20=%20X%0A%5Cend%7Balign*%7D%0A"></p>
<p>Resulting in:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%20&amp;=%20(A%5E%7B(2)%7D%20-%20y)%20%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig)%20%5Ccdot%20A%5E%7B(0)%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig)%20%5Ccdot%20A%5E%7B(0)%7D%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>As before, we define <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D"> as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig),%0A"></p>
<p>which allows us to write <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D"> as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20W%5E%7B(1)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20A%5E%7B(0)%7D.%0A"></p>
<p>Similarly for <img src="https://latex.codecogs.com/png.latex?b%5E%7B(1)%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D%20&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>Considering each term on the r.h.s:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20&amp;=%20(A%5E%7B(2)%7D%20-%20y)%5C%5C%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20&amp;=%20W%5E%7B(2)%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%20A%5E%7B(1)%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%20&amp;=%20%5Csigma(Z%5E%7B(1)%7D)%20(1%20-%20%5Csigma(Z%5E%7B(1)%7D))%20=%20A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5C%5C%0A%5Cfrac%7B%5Cpartial%20Z%5E%7B(1)%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D%20&amp;=%201%0A%5Cend%7Balign*%7D%0A"></p>
<p>Therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20b%5E%7B(1)%7D%7D%20&amp;=%20(A%5E%7B(2)%7D%20-%20y)%20%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig)%20%5Ccdot%201%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20W%5E%7B(2)%7D%20%5Ccdot%20%5Cbig(A%5E%7B(1)%7D(1%20-%20A%5E%7B(1)%7D)%5Cbig)%5C%5C%0A&amp;=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(1)%7D%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>To complete the backpropagation algorithm, it is necessary to define <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20A%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20A%5E%7B(2)%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%7B%5Cpartial%20A%5E%7B(1)%7D%7D%20=%20%5Cfrac%7B%5Cpartial%20%5Cmathcal%7BL%7D%7D%7B%5Cpartial%20Z%5E%7B(2)%7D%7D%20%5Ccdot%20W%5E%7B(2)%7D.%0A"></p>
<p>Assume <img src="https://latex.codecogs.com/png.latex?X"> is a 32x784 batch of MNIST images, and our network has one hidden layer of size 256. Our task is to identify which digit 0-9 a sample most closely resembles. We first declare a number of functions, then implement the forward and backward passes along with weights update.</p>
<div id="b0bf5cc5" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sigmoid(X):</span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute the sigmoid activation for the input.</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>X))</span>
<span id="cb1-10"></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sigmoid_dev(X):</span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The analytical derivative of sigmoid function at X.</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sigmoid(X) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sigmoid(X))</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> softmax(scores):</span>
<span id="cb1-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute softmax scores given the raw output from the model.</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns softmax probabilities (N, num_classes).</span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-24">    numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> scores.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span>
<span id="cb1-25">    denom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numer.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdims<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.divide(numer, denom)</span>
<span id="cb1-27"></span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cross_entropy_loss(ypred, yactual):</span>
<span id="cb1-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute Cross-Entropy Loss based on prediction of the network and labels</span></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-33">    yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(yactual)</span>
<span id="cb1-34">    ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ypred[np.arange(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(yactual)), yactual]</span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.mean(np.log(ypred))</span>
<span id="cb1-36"></span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_accuracy(ypred, yactual):</span>
<span id="cb1-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute the accuracy of current batch.</span></span>
<span id="cb1-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-42">    yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(yactual)</span>
<span id="cb1-43">    yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(ypred, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> yhat).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div id="83a0efc0" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stand in for batch of 32 MNIST images. </span></span>
<span id="cb2-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>))</span>
<span id="cb2-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape labels to 32 x 10. </span></span>
<span id="cb2-7">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb2-8">Y[np.arange(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), y] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 10)</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate.</span></span>
<span id="cb2-11">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span> </span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize weights.</span></span>
<span id="cb2-14">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb2-15">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-16">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span>
<span id="cb2-17">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass.</span></span>
<span id="cb2-20">Z1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 256)</span></span>
<span id="cb2-21">A1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigmoid(Z1)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 256)</span></span>
<span id="cb2-22">Z2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b2  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 10)</span></span>
<span id="cb2-23">A2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(Z2)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 10)</span></span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss and accuracy.</span></span>
<span id="cb2-26">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy_loss(A2, y)</span>
<span id="cb2-27">accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_accuracy(A2, y)</span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backward pass.</span></span>
<span id="cb2-30">dZ2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Y                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 10)</span></span>
<span id="cb2-31">dW2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (A1.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dZ2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (256, 10)</span></span>
<span id="cb2-32">db2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dZ2, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (10,)</span></span>
<span id="cb2-33">dA1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dZ2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W2.T                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 256)</span></span>
<span id="cb2-34">dZ1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.multiply(dA1, sigmoid_dev(Z1)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (32, 256)</span></span>
<span id="cb2-35">dW1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> dZ1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (784, 256)</span></span>
<span id="cb2-36">db1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dZ1, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (256,)</span></span>
<span id="cb2-37"></span>
<span id="cb2-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update weights.</span></span>
<span id="cb2-39">W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dW2</span>
<span id="cb2-40">b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> db2</span>
<span id="cb2-41">W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dW1</span>
<span id="cb2-42">b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> db1</span></code></pre></div>
</div>
<p>The code starting with the forward pass would be iterated over a set of batches for a pre-determined number of epochs. The final weights would then be used for inference.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/backprop-python/backprop-python.html</guid>
  <pubDate>Wed, 28 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating scikit-learn Pipelines</title>
  <link>https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines.html</link>
  <description><![CDATA[ 





<p>Within scikit-learn, pipelines allow for the consolidation of all data preprocessing steps along with a final estimator using a single interface. The pipeline object can then be passed into a grid search routine to identify optimal hyperparameters. According to the documentation, the purpose of the pipeline is to assemble several steps that can be cross-validated together while setting different parameters. In this post, we’ll demonstrate how to utilize pipelines to preprocess the adult income data set and fit two classifiers to determine whether a given observation has an income in excess of $50,000 given the set of associated features. We first read in the data and inspect the first few records:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> zip_longest</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.ticker <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MaxNLocator</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sklearn</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.compose <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ColumnTransformer</span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.experimental <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> enable_iterative_imputer</span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.impute <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IterativeImputer</span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb1-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OneHotEncoder, OrdinalEncoder, RobustScaler</span>
<span id="cb1-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb1-20">    accuracy_score, f1_score, precision_score, recall_score, roc_auc_score, </span>
<span id="cb1-21">    confusion_matrix, precision_recall_curve, roc_curve</span>
<span id="cb1-22">    )</span>
<span id="cb1-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomizedSearchCV, train_test_split</span>
<span id="cb1-24"></span>
<span id="cb1-25">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb1-26">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-27">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-28">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb1-29"></span>
<span id="cb1-30">train_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/13d05ace37948cac9583a9ab1f2def31/raw/3dc5bc9e0b573c1039abc20f816321e570aae69c/adult.csv"</span></span>
<span id="cb1-31">dftrain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(train_path)</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dftrain.head())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   age  workclass  fnlwgt     education  educational-num      marital-status         occupation relationship   race  gender  capital-gain  capital-loss  hours-per-week native-country income
0   25    Private  226802          11th                7       Never-married  Machine-op-inspct    Own-child  Black    Male             0             0              40  United-States  &lt;=50K
1   38    Private   89814       HS-grad                9  Married-civ-spouse    Farming-fishing      Husband  White    Male             0             0              50  United-States  &lt;=50K
2   28  Local-gov  336951    Assoc-acdm               12  Married-civ-spouse    Protective-serv      Husband  White    Male             0             0              40  United-States   &gt;50K
3   44    Private  160323  Some-college               10  Married-civ-spouse  Machine-op-inspct      Husband  Black    Male          7688             0              40  United-States   &gt;50K
4   18          ?  103497  Some-college               10       Never-married                  ?    Own-child  White  Female             0             0              30  United-States  &lt;=50K</code></pre>
</div>
</div>
<p>After loading the dataset, the first task is to get an idea of the frequency of different groups within categorical features. In the next cell, a dictionary is created for each categorical feature which remaps groups to ensure a reasonable number of observations in each:</p>
<div id="cell-4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">dworkclass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Federal-gov"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gov"</span>,</span>
<span id="cb3-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Local-gov"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gov"</span>,          </span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Never-worked"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,    </span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Private"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"private"</span>,</span>
<span id="cb3-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Self-emp-inc"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Self-emp-not-inc"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, </span>
<span id="cb3-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"State-gov"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gov"</span>, </span>
<span id="cb3-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Without-pay"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-12">    }</span>
<span id="cb3-13"></span>
<span id="cb3-14">deducation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Preschool"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-hs"</span>,        </span>
<span id="cb3-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1st-4th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-hs"</span>,     </span>
<span id="cb3-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5th-6th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-hs"</span>,  </span>
<span id="cb3-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7th-8th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-hs"</span>,  </span>
<span id="cb3-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs"</span>,         </span>
<span id="cb3-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs"</span>,               </span>
<span id="cb3-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"11th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs"</span>,            </span>
<span id="cb3-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12th"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs"</span>,                 </span>
<span id="cb3-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HS-grad"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hs-grad"</span>,</span>
<span id="cb3-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prof-school"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-college"</span>,</span>
<span id="cb3-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Some-college"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-college"</span>,</span>
<span id="cb3-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Assoc-acdm"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-college"</span>, </span>
<span id="cb3-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Assoc-voc"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-college"</span>,   </span>
<span id="cb3-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bachelors"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bachelors"</span>,    </span>
<span id="cb3-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Masters"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"masters"</span>,    </span>
<span id="cb3-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Doctorate"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phd"</span>,   </span>
<span id="cb3-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-32">    }</span>
<span id="cb3-33"></span>
<span id="cb3-34">dmarital <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Divorced"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divorced"</span>,  </span>
<span id="cb3-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married-AF-spouse"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>, </span>
<span id="cb3-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married-civ-spouse"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>, </span>
<span id="cb3-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Married-spouse-absent"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"married"</span>, </span>
<span id="cb3-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Never-married"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not-married"</span>, </span>
<span id="cb3-40">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Separated"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divorced"</span>, </span>
<span id="cb3-41">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Widowed"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"widowed"</span>, </span>
<span id="cb3-42">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-43">    }</span>
<span id="cb3-44"></span>
<span id="cb3-45">doccupation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-46">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adm-clerical"</span>:  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clerical"</span>, </span>
<span id="cb3-47">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Armed-Forces"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,          </span>
<span id="cb3-48">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Craft-repair"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repair"</span>,         </span>
<span id="cb3-49">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exec-managerial"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"managerial"</span>,   </span>
<span id="cb3-50">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Farming-fishing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"farming"</span>,     </span>
<span id="cb3-51">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Handlers-cleaners"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cleaners"</span>,  </span>
<span id="cb3-52">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Machine-op-inspct"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repair"</span>,    </span>
<span id="cb3-53">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other-service"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"service"</span>,  </span>
<span id="cb3-54">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Priv-house-serv"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-55">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prof-specialty"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"specialty"</span>,</span>
<span id="cb3-56">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Protective-serv"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-57">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sales"</span>, </span>
<span id="cb3-58">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tech-support"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tech"</span>, </span>
<span id="cb3-59">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Transport-moving"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"moving"</span>,</span>
<span id="cb3-60">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-61">    }</span>
<span id="cb3-62"></span>
<span id="cb3-63">doccupation2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-64">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adm-clerical"</span>:  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, </span>
<span id="cb3-65">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Armed-Forces"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, </span>
<span id="cb3-66">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Craft-repair"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>,  </span>
<span id="cb3-67">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exec-managerial"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb3-68">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Farming-fishing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb3-69">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Handlers-cleaners"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb3-70">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Machine-op-inspct"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb3-71">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other-service"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb3-72">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Priv-house-serv"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, </span>
<span id="cb3-73">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prof-specialty"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>, </span>
<span id="cb3-74">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Protective-serv"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>,</span>
<span id="cb3-75">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,  </span>
<span id="cb3-76">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tech-support"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb3-77">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Transport-moving"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>,  </span>
<span id="cb3-78">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-79">    }</span>
<span id="cb3-80"></span>
<span id="cb3-81">drelationship <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-82">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Husband"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"husband"</span>,  </span>
<span id="cb3-83">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not-in-family"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no-family"</span>, </span>
<span id="cb3-84">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other-relative"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,  </span>
<span id="cb3-85">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Own-child"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"child"</span>,      </span>
<span id="cb3-86">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unmarried"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unmarried"</span>,  </span>
<span id="cb3-87">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wife"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wife"</span>, </span>
<span id="cb3-88">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-89">    }</span>
<span id="cb3-90"></span>
<span id="cb3-91">drace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-92">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amer-Indian-Eskimo"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eskimo"</span>,</span>
<span id="cb3-93">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asian-Pac-Islander"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"asian"</span>, </span>
<span id="cb3-94">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Black"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, </span>
<span id="cb3-95">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>,</span>
<span id="cb3-96">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"White"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb3-97">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-98">    }</span>
<span id="cb3-99"></span>
<span id="cb3-100">dgender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-101">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>,</span>
<span id="cb3-102">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,</span>
<span id="cb3-103">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span></span>
<span id="cb3-104">    }</span></code></pre></div>
</div>
<p>Next we distinguish between categorical and continuous features. Categorical features are re-mapped to align with the groups defined above. For categorical features, we assign null values to a “missing” category instead of relying on an imputation rule. This allows us to check for possible patterns in the missing data later on. <code>capital-gain</code> and <code>capital-loss</code> are converted into binary indicators and <code>native-country</code> into US vs.&nbsp;non-US. Finally, we split the data into training and validation sets ensuring the same proportion of positive instances in each cut:</p>
<div id="cell-6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>,</span>
<span id="cb4-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-gain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-loss"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native-country"</span></span>
<span id="cb4-5">    ]</span>
<span id="cb4-6"></span>
<span id="cb4-7">continuous <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fnlwgt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hours-per-week"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"educational-num"</span></span>
<span id="cb4-9">    ]</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># workclass.</span></span>
<span id="cb4-12">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-13">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"workclass"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dworkclass)</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># marital-status.</span></span>
<span id="cb4-16">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-17">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"marital-status"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dmarital)</span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># occupation.</span></span>
<span id="cb4-20">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-21">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(doccupation)</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># relationship.</span></span>
<span id="cb4-24">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-25">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relationship"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(drelationship)</span>
<span id="cb4-26"></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># race.</span></span>
<span id="cb4-28">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-29">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"race"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(drace)</span>
<span id="cb4-30"></span>
<span id="cb4-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sex.</span></span>
<span id="cb4-32">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>].fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"missing"</span>)</span>
<span id="cb4-33">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dgender)</span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># capital-gain: Convert to binary indicator. </span></span>
<span id="cb4-36">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-gain"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-gain"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-37"></span>
<span id="cb4-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># capital-loss: Convert to binary indicator. </span></span>
<span id="cb4-39">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-loss"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-loss"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-40"></span>
<span id="cb4-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Encode native-country.</span></span>
<span id="cb4-42">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native-country"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native-country"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"US"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"United-States"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"other"</span>)</span>
<span id="cb4-43"></span>
<span id="cb4-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Encode response.</span></span>
<span id="cb4-45">dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;50K"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-46"></span>
<span id="cb4-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create train and validation sets. </span></span>
<span id="cb4-48">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>]</span>
<span id="cb4-49">dft, dfv, yt, yv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(dftrain, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.125</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)</span>
<span id="cb4-50"></span>
<span id="cb4-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dft.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dft<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dfv.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dfv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-53"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"prop. yt : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dft<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"prop. yv : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dfv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dft.shape: (42736, 15)
dfv.shape: (6106, 15)
prop. yt : 0.2393
prop. yv : 0.2393</code></pre>
</div>
</div>
<p>With categorical features re-mapped, it is useful to look at the proportion of positive instances in each group per feature:</p>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-3">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb6-4">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb6-5">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb6-6">    ]</span>
<span id="cb6-7"></span>
<span id="cb6-8">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (ii, jj), col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> zip_longest(indices, categorical):</span>
<span id="cb6-11"></span>
<span id="cb6-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb6-13">        ax[ii, jj].remove()</span>
<span id="cb6-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-15">        gg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dftrain.groupby(col, as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).agg(</span>
<span id="cb6-16">            leq50k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: v[v<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].size),</span>
<span id="cb6-17">            gt50k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>)</span>
<span id="cb6-18">            ).sort_values(col, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-19">        </span>
<span id="cb6-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"education-num"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-gain"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capital-loss"</span>]:</span>
<span id="cb6-21">            gg[col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gg[col].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb6-22"></span>
<span id="cb6-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>:</span>
<span id="cb6-24">            rot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb6-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-26">            rot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-27"></span>
<span id="cb6-28">        gg.plot.bar(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax[ii, jj])</span>
<span id="cb6-29">        ax[ii, jj].set_title(col, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb6-30">        ax[ii, jj].set_xticklabels(gg[col].values, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rot)</span>
<span id="cb6-31">        ax[ii, jj].yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb6-32">        ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-33">        ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-34">        ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-35">        ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-36">        ax[ii, jj].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-37">        ax[ii, jj].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-38">        ax[ii, jj].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x-small"</span>)</span>
<span id="cb6-39">        ax[ii, jj].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb6-40">        ax[ii, jj].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb6-41"></span>
<span id="cb6-42">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>From the generated plot, we take-away the following:</p>
<ul>
<li><code>education-num</code>: Higher percentage of “&gt;50k” for levels &gt;= 13.</li>
<li><code>maritial-status</code>: Higher proportion of “&gt;50k” for married vs.&nbsp;all other groups.</li>
<li><code>sex</code>: Higher proportion of “&gt;50k” for Males vs.&nbsp;Females.</li>
<li><code>occupation</code>: Higher proportion of “&gt;50k” for managerial and specialty.</li>
</ul>
<p>A similar exhibit for continuous features gives us an idea of the distribution of values in each:</p>
<div id="cell-10" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb7-3"></span>
<span id="cb7-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> zip_longest(indices, continuous):</span>
<span id="cb7-7">    ax[ii].set_title(col, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb7-8">    ax[ii].hist(</span>
<span id="cb7-9">        dft[col], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span>, </span>
<span id="cb7-10">        edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb7-11">        )</span>
<span id="cb7-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#ax[ii].yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter("{x:,.0f}"))</span></span>
<span id="cb7-13">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-14">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-15">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-16">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb7-17">    ax[ii].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-18">    ax[ii].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax[ii].legend(loc="best", fancybox=True, framealpha=1, fontsize="x-small")</span></span>
<span id="cb7-20">    ax[ii].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb7-21">    ax[ii].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb7-22"></span>
<span id="cb7-23">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We are now in a position to create our pipelines. The first pipeline is created to support a logistic regression classifier. We initialize a <code>ColumnTransformer</code> instance, which gives us the ability to define separate preprocessing steps for different groups of columns (in our case, categorical vs.&nbsp;continuous). As the logistic regression classifier doesn’t support categorical features, we one-hot encode them. In addition, since the logistic regression classifier relies on gradient descent to estimate coefficients, continuous features are scaled using <code>RobustScaler</code> to help with convergence and missing values imputed using <code>IterativeImputer</code>. For the classifier, we use the elasticnet penalty, which is a blend of lasso and ridge penalties. We’ll determine the optimal weighting using grid search.</p>
<div id="cell-12" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LogisticRegression</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data pre-processing for LogisticRegression model.</span></span>
<span id="cb8-4">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression(</span>
<span id="cb8-5">    penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elasticnet"</span>, solver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"saga"</span>, max_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb8-6">    )</span>
<span id="cb8-7">continuous_transformer1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-8">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imputer"</span>, IterativeImputer()),</span>
<span id="cb8-9">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scaler"</span> , RobustScaler())</span>
<span id="cb8-10">    ])</span>
<span id="cb8-11">categorical_transformer1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-12">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"onehot"</span>, OneHotEncoder(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>, sparse_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, handle_unknown<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>))</span>
<span id="cb8-13">    ])</span>
<span id="cb8-14">preprocessor1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnTransformer(transformers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-15">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span> , continuous_transformer1, continuous),  </span>
<span id="cb8-16">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"categorical"</span>, categorical_transformer1, categorical)</span>
<span id="cb8-17">    ], remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span></span>
<span id="cb8-18">    )</span>
<span id="cb8-19">pipeline1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb8-20">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"preprocessor"</span>, preprocessor1),</span>
<span id="cb8-21">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier"</span>, lr)</span>
<span id="cb8-22">    ]).set_output(transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span>)</span></code></pre></div>
</div>
<p>Notice that <code>set_output</code> is affixed to <code>pipeline1</code> by specifying <code>transform="pandas"</code>. This was added in scikit-learn version 1.2, and allows intermediate and final datasets to be represented as Pandas DataFrames instead of Numpy arrays. I’ve found this to be particularly convenient, especially when inspecting the results of a transformation.</p>
<p>A different set of preprocessing steps is carried out for the HistGradientBoostingClassifier instance, which is functionally equivalent to lightgbm. Since HistGradientBoostingClassifier supports categorical features, it isn’t necessary to one-hot encode: We pass a list of columns that should be treated as nominal categorical features to the <code>categorical_features</code> parameter. Coming out of <code>ColumnTransformer</code>, categorical features are renamed with a leading <code>categorical__</code>, so it is easy to identify which columns to pass. As before, <code>IterativeImputer</code> is used to impute missing continuous values. Within <code>categorical_transformer2</code>, we pass <code>OrdinalEncoder</code> to convert non-numeric categories to integers, which can then be processed by HistGradientBoostingClassifier. Since HistGradientBoostingClassifier doesn’t rely on gradient descent, it isn’t necessary to include <code>RobustScaler</code>in <code>continuous_transformer2</code>.</p>
<div id="cell-14" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HistGradientBoostingClassifier</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data pre-processing for HistGradientBoostingClassifier model. Uses OrdinalEncoder</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instead of OneHotEncoder since categorical features are supported.     </span></span>
<span id="cb9-6">gb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HistGradientBoostingClassifier(</span>
<span id="cb9-7">    categorical_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"categorical__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> categorical]</span>
<span id="cb9-8">    )</span>
<span id="cb9-9">continuous_transformer2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-10">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imputer"</span>, IterativeImputer())</span>
<span id="cb9-11">    ])</span>
<span id="cb9-12">categorical_transformer2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-13">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"encoder"</span>, OrdinalEncoder())</span>
<span id="cb9-14">    ])</span>
<span id="cb9-15">preprocessor2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnTransformer(transformers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-16">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span> , continuous_transformer2, continuous), </span>
<span id="cb9-17">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"categorical"</span>, categorical_transformer2, categorical),</span>
<span id="cb9-18">    ], remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span></span>
<span id="cb9-19">    )</span>
<span id="cb9-20">pipeline2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-21">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"preprocessor"</span>, preprocessor2), </span>
<span id="cb9-22">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier"</span>, gb)</span>
<span id="cb9-23">    ]).set_output(transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span>)</span></code></pre></div>
</div>
<p>Instead og using <code>GridSearchCV</code>, we leverage <code>RandomizedSearchCV</code>. <code>GridSearchCV</code> evaluates a multi-dimensional array of hyperparameters, whereas <code>RandomizedSearchCV</code> samples from a pre-specified distribution a defined number of samples. For our logistic regression classifier, we sample uniformly from [0, 1] for <code>l1_ratio</code> and [0, 10] for the regularization parameter <code>C</code>.</p>
<div id="cell-16" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform</span>
<span id="cb10-3"></span>
<span id="cb10-4">RANDOM_STATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span></span>
<span id="cb10-5">verbosity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb10-6">n_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb10-7">scoring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span></span>
<span id="cb10-8">cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb10-9"></span>
<span id="cb10-10">param_grid1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb10-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__l1_ratio"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb10-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__C"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb10-13">    }</span>
<span id="cb10-14"></span>
<span id="cb10-15">mdl1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomizedSearchCV(</span>
<span id="cb10-16">    pipeline1, param_grid1, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scoring, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cv, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbosity, </span>
<span id="cb10-17">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RANDOM_STATE, n_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_iter</span>
<span id="cb10-18">    )</span>
<span id="cb10-19"></span>
<span id="cb10-20">mdl1.fit(dft.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), yt)</span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">best parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-23"></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get holdout scores for each fold to compare against other model.</span></span>
<span id="cb10-25">best_rank1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmin(mdl1.cv_results_[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rank_test_score"</span>])</span>
<span id="cb10-26">best_mdl_cv_scores1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-27">    mdl1.cv_results_[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"split</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_test_score"</span>][best_rank1] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(cv)</span>
<span id="cb10-28">    ]</span>
<span id="cb10-29"></span>
<span id="cb10-30"></span>
<span id="cb10-31">dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl1.predict_proba(dfv.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-32">dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred1"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-33"></span>
<span id="cb10-34">mdl1_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat1"</span>])</span>
<span id="cb10-35">mdl1_precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat1"</span>])</span>
<span id="cb10-36">mdl1_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recall_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat1"</span>])</span>
<span id="cb10-37"></span>
<span id="cb10-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">mdl1_acc      : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl1_precision: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1_precision<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl1_recall   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1_recall<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fitting 5 folds for each of 3 candidates, totalling 15 fits
[CV 1/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.841 total time=   2.3s
[CV 2/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.840 total time=   1.7s
[CV 3/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.843 total time=   2.6s
[CV 4/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.843 total time=   1.8s
[CV 5/5] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915;, score=0.850 total time=   1.7s
[CV 1/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.841 total time=   1.6s
[CV 2/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.840 total time=   1.5s
[CV 3/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.843 total time=   3.4s
[CV 4/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.843 total time=   1.6s
[CV 5/5] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359;, score=0.850 total time=   1.3s
[CV 1/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.841 total time=   1.7s
[CV 2/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.840 total time=   1.7s
[CV 3/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.843 total time=   2.3s
[CV 4/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.843 total time=   1.9s
[CV 5/5] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002;, score=0.850 total time=   1.7s

best parameters: {'classifier__C': 1.115284252761577, 'classifier__l1_ratio': 0.5667878644753359}

mdl1_acc      : 0.8435964624959057
mdl1_precision: 0.7184801381692574
mdl1_recall   : 0.5694729637234771</code></pre>
</div>
</div>
<p>We proceed analogously for HistGradientBoostingClassifier, but sample from different hyperparameters.</p>
<div id="cell-18" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2">RANDOM_STATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span></span>
<span id="cb12-3">scoring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span></span>
<span id="cb12-4">verbosity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb12-5">n_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb12-6">cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"></span>
<span id="cb12-9">param_grid2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb12-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__max_iter"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>],</span>
<span id="cb12-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__min_samples_leaf"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>],</span>
<span id="cb12-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__l2_regularization"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>),</span>
<span id="cb12-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__learning_rate"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>],</span>
<span id="cb12-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__max_leaf_nodes"</span>: [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>]</span>
<span id="cb12-15">    }</span>
<span id="cb12-16"></span>
<span id="cb12-17">mdl2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomizedSearchCV(</span>
<span id="cb12-18">    pipeline2, param_grid2, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scoring, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cv, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>verbosity, </span>
<span id="cb12-19">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RANDOM_STATE, n_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_iter</span>
<span id="cb12-20">    )</span>
<span id="cb12-21"></span>
<span id="cb12-22">mdl2.fit(dft.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), yt)</span>
<span id="cb12-23"></span>
<span id="cb12-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">best parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-25"></span>
<span id="cb12-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get holdout scores for each fold to compare against other model.</span></span>
<span id="cb12-27">best_rank2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmin(mdl2.cv_results_[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rank_test_score"</span>])</span>
<span id="cb12-28">best_mdl_cv_scores2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb12-29">    mdl2.cv_results_[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"split</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_test_score"</span>][best_rank2] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(cv)</span>
<span id="cb12-30">    ]</span>
<span id="cb12-31"></span>
<span id="cb12-32">dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred2"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl2.predict_proba(dfv.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-33">dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat2"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred2"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-34"></span>
<span id="cb12-35"></span>
<span id="cb12-36">mdl2_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat2"</span>])</span>
<span id="cb12-37">mdl2_precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat2"</span>])</span>
<span id="cb12-38">mdl2_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recall_score(dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income"</span>], dfv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yhat2"</span>])</span>
<span id="cb12-39"></span>
<span id="cb12-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">mdl2_acc      : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-41"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl2_precision: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2_precision<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mdl2_recall   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2_recall<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fitting 5 folds for each of 3 candidates, totalling 15 fits
[CV 1/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.846 total time=   1.1s
[CV 2/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.848 total time=   1.5s
[CV 3/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.849 total time=   1.1s
[CV 4/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.849 total time=   0.9s
[CV 5/5] END classifier__l2_regularization=811.5660497752214, classifier__learning_rate=0.25, classifier__max_iter=500, classifier__max_leaf_nodes=None, classifier__min_samples_leaf=50;, score=0.852 total time=   1.0s
[CV 1/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.845 total time=   0.6s
[CV 2/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.846 total time=   0.6s
[CV 3/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.849 total time=   0.6s
[CV 4/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.849 total time=   0.6s
[CV 5/5] END classifier__l2_regularization=138.5495352566758, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=50, classifier__min_samples_leaf=10;, score=0.854 total time=   0.6s
[CV 1/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.846 total time=   0.4s
[CV 2/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.848 total time=   0.5s
[CV 3/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.852 total time=   0.4s
[CV 4/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.850 total time=   0.4s
[CV 5/5] END classifier__l2_regularization=189.1538419557398, classifier__learning_rate=0.1, classifier__max_iter=100, classifier__max_leaf_nodes=20, classifier__min_samples_leaf=20;, score=0.855 total time=   0.6s

best parameters: {'classifier__l2_regularization': 189.1538419557398, 'classifier__learning_rate': 0.1, 'classifier__max_iter': 100, 'classifier__max_leaf_nodes': 20, 'classifier__min_samples_leaf': 20}

mdl2_acc      : 0.8524402227317392
mdl2_precision: 0.7348993288590604
mdl2_recall   : 0.5995893223819302</code></pre>
</div>
</div>
<p>Notice that <code>mdl1</code> and <code>mdl2</code> expose <code>predict/predict_proba</code> methods, so we can generate predictions using the resulting <code>RandomizedSearchCV</code> object directly, and it will dispatch a call to the estimator associated with the hyperparameters that maximize accuracy.</p>
<p>Precision, recall and accuracy are close for each model. We can check if the difference between models is significant using the approach outlined <a href="https://scikit-learn.org/stable/auto_examples/model_selection/plot_grid_search_stats.html#comparing-two-models-frequentist-approach">here</a>:</p>
<div id="cell-20" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> t</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> corrected_std(differences, n_train, n_test):</span>
<span id="cb14-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Corrects standard deviation using Nadeau and Bengio's approach.</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-8">    kr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(differences)</span>
<span id="cb14-9">    corrected_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.var(differences, ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> kr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_train)</span>
<span id="cb14-10">    corrected_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(corrected_var)</span>
<span id="cb14-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(corrected_std)</span>
<span id="cb14-12"></span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_corrected_ttest(differences, df, n_train, n_test):</span>
<span id="cb14-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Computes right-tailed paired t-test with corrected variance.</span></span>
<span id="cb14-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-18">    mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(differences)</span>
<span id="cb14-19">    std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> corrected_std(differences, n_train, n_test)</span>
<span id="cb14-20">    t_stat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> std</span>
<span id="cb14-21">    p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.sf(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(t_stat), df)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># right-tailed t-test</span></span>
<span id="cb14-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(t_stat, p_val)</span>
<span id="cb14-23"></span>
<span id="cb14-24"></span>
<span id="cb14-25">differences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(best_mdl_cv_scores2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.asarray(best_mdl_cv_scores1)</span>
<span id="cb14-26">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(differences)</span>
<span id="cb14-27">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb14-28">n_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (dft.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) </span>
<span id="cb14-29">n_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dft.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb14-30"></span>
<span id="cb14-31">t_stat, p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_corrected_ttest(differences, df, n_train, n_test)</span>
<span id="cb14-32"></span>
<span id="cb14-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"t-value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t_stat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-34"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"p-value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p_val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>t-value: 5.231
p-value: 0.003</code></pre>
</div>
</div>
<p>At a significance alpha level at p=0.05, the test concludes that HistGradientBoostingClassifier is significantly better than the LogisticRegression model.</p>
<p>Finally, we can overlay the histograms of model predictions by true class:</p>
<div id="cell-22" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">color0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span></span>
<span id="cb16-3">color1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6EA1D5"</span></span>
<span id="cb16-4">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.65</span></span>
<span id="cb16-5">n_bins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb16-6"></span>
<span id="cb16-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LogisticRegression.</span></span>
<span id="cb16-10">yy0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[dfv.income<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred1"</span>].values</span>
<span id="cb16-11">yy1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[dfv.income<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred1"</span>].values</span>
<span id="cb16-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(</span>
<span id="cb16-13">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"LogisticRegression  (acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl1_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, </span>
<span id="cb16-14">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span></span>
<span id="cb16-15">    )</span>
<span id="cb16-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(</span>
<span id="cb16-17">    yy0, n_bins, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color0, </span>
<span id="cb16-18">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;=50K"</span></span>
<span id="cb16-19">    )</span>
<span id="cb16-20">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(</span>
<span id="cb16-21">    yy1, n_bins, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color1,</span>
<span id="cb16-22">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;50K"</span></span>
<span id="cb16-23">    )</span>
<span id="cb16-24">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-28">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-29">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-30">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_yticklabels([])</span>
<span id="cb16-31">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb16-32">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb16-33">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb16-34"></span>
<span id="cb16-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HistGradientBoostingClassifier.</span></span>
<span id="cb16-36">yy0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[dfv.income<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred2"</span>].values</span>
<span id="cb16-37">yy1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfv[dfv.income<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ypred2"</span>].values</span>
<span id="cb16-38">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(</span>
<span id="cb16-39">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HistGradientBoostingClassifier (acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl2_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, </span>
<span id="cb16-40">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span></span>
<span id="cb16-41">    )</span>
<span id="cb16-42">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(</span>
<span id="cb16-43">    yy0, n_bins, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color0, </span>
<span id="cb16-44">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;=50K"</span></span>
<span id="cb16-45">    )</span>
<span id="cb16-46">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].hist(</span>
<span id="cb16-47">    yy1, n_bins, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alpha, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color1,</span>
<span id="cb16-48">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;50K"</span></span>
<span id="cb16-49">    )</span>
<span id="cb16-50">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-51">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-52">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-53">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb16-54">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-55">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb16-56">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_yticklabels([])</span>
<span id="cb16-57">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"best"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb16-58">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb16-59">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb16-60"></span>
<span id="cb16-61">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/sklearn-pipelines/sklearn-pipelines.html</guid>
  <pubDate>Wed, 28 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Shared Data Parallel Processing in Python</title>
  <link>https://www.jtrive.com/posts/shared-parallel-python/shared-parallel-python.html</link>
  <description><![CDATA[ 





<p>The Python multiprocessing library exposes an interface that simplifies distributing tasks to multiple cores. The <code>multiprocessing.Pool</code> class provides access to a pool of worker processes to which jobs can be submitted. It supports asynchronous results with timeouts and callbacks and has a parallel map implementation. Leveraging <code>multiprocessing.Pool</code> is straightforward. To demonstrate, we will solve Project Euler Problem #14 in a distributed fashion. The problem states:</p>
<pre><code>The following iterative sequence is defined for the set of positive integers:

n -&gt;    n/2 (n is even)
n -&gt; 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following sequence:

13 -&gt; 40 -&gt; 20 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1

It can be seen that this sequence (starting at 13 and finishing at 1) contains 
10 terms. Although it has not been proved yet (Collatz Problem), it is thought 
that all starting numbers finish at 1.

Which starting number, under one million, produces the longest chain?

NOTE: Once the chain starts the terms are allowed to go above one million.</code></pre>
<p>To start, we define two functions: <code>collatz_test</code> and <code>chain_length</code>. <code>collatz_test</code> contains the logic that either divides the input by 2 (if even) or multiplies it by 3 and adds 1 (if odd). <code>chain_length</code> returns a tuple consisting of the initial integer along with the length of the collatz chain:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> collatz_test(n):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If n is even, return (n/2), else return (3n+1).</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>((n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-6"></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> chain_length(n):</span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return the length of the collatz chain along</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with the input value n.</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb2-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb2-15">    cntr, tstint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n</span>
<span id="cb2-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> tstint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb2-17">        cntr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-18">        tstint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collatz_test(tstint)</span>
<span id="cb2-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(n, cntr)</span></code></pre></div>
<p>One thing to keep in mind when using the multiprocessing library is that instances of the Pool and Process classes can only be initialized after the <code>if __name__ == "__main__"</code> statement, and as a consequence Pool cannot be called from within an interactive Python session.</p>
<p>Next we present our declarations from earlier along with the distributed logic, which sets up <code>chain_length</code> parallel dispatch:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Parallel solution to Project Euler Problem # 14.</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing</span>
<span id="cb3-5"></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> collatz_test(n):</span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If n is even, return (n/2), else return (3n+1).</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>((n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-12"></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> chain_length(n):</span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return the length of the collatz chain along</span></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with the input value `n`.</span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: </span>
<span id="cb3-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-21">    cntr, tstint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n</span>
<span id="cb3-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> tstint<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-23">        cntr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-24">        tstint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> collatz_test(tstint)</span>
<span id="cb3-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(n, cntr)</span>
<span id="cb3-26"></span>
<span id="cb3-27"></span>
<span id="cb3-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb3-29"></span>
<span id="cb3-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize array of values to test.</span></span>
<span id="cb3-31">    arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiprocessing.Array(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>))</span>
<span id="cb3-32">    pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiprocessing.Pool()</span>
<span id="cb3-33">    all_lengths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pool.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(chain_length, arr, chunksize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb3-34">    pool.close()</span>
<span id="cb3-35">    pool.join()</span>
<span id="cb3-36"></span>
<span id="cb3-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search for longest chain.</span></span>
<span id="cb3-38">    longest_chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>((i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_lengths), key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<p>We first declare our sequence of test values as <code>multiprocessing.Array</code>, which prevents the same 1,000,000 element sequence from being replicated in each process (only an issue on Windows, where there is no fork system call). Instead, the array will be created once, and all processes will have access to it. The “L” typecode is from the array module in the Python Standard Library, which indicates the datatype of the elements contained in the sequence. We initialize the Pool instance, then call its map method, which works similarly to the builtin map function, only in parallel. Within <code>pool.map</code>, We set <code>chunksize=1000</code> due to the following commentary in multiprocessing’s documentation:</p>
<blockquote class="blockquote">
<p>For very long iterables using a large value for chunksize can make the job complete much faster than using the default value of 1.</p>
</blockquote>
<p>Upon execution, we find that 837,799 produces the longest sequence, and it is of length 524. By distributing the tasks to four cores, the script completes in 25 seconds, whereas the sequential implementation requires approx. 55 seconds. This disparity would only grow as the range of evaluation increases from 1M to 5M or 10M.</p>
<p>For more information on the multiprocessing module, be sure to check out the documentation. In addition, the Python Standard Library includes the <code>concurrent.futures</code> module, which exposes an even higher-level interface that facilitates both thread and process-based parallelism via Executor objects.</p>



 ]]></description>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/shared-parallel-python/shared-parallel-python.html</guid>
  <pubDate>Sat, 24 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>A PDF Harvester in 25 Lines of Python</title>
  <link>https://www.jtrive.com/posts/pdf-harvester-python/pdf-harvester-python.html</link>
  <description><![CDATA[ 





<p>The goal of this article is to develop a utility that handles the following:</p>
<ol type="1">
<li>Retrieve HTML from a webpage.<br>
</li>
<li>Parse the HTML and extract all references to embedded PDF links.<br>
</li>
<li>For each PDF link, download the document and save it locally.</li>
</ol>
<p>Plenty of 3rd-party libraries can query and retrieve a webpage’s links. However, the purpose of this post is to highlight the fact that by combining elements of the Python Standard Library with the Requests package, we can roll our own, and learn something while we’re at it.</p>
<section id="step-i-acquire-html" class="level3">
<h3 class="anchored" data-anchor-id="step-i-acquire-html">Step I: Acquire HTML</h3>
<p>This is straightforward using requests. Let’s query the Singular Value Decomposition page on Wikipedia:</p>
<div id="cell-3" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-2"></span>
<span id="cb1-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/wiki/Singular_value_decomposition"</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instruct requests object to return HTML as plain text.</span></span>
<span id="cb1-6">html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url).text</span>
<span id="cb1-7"></span>
<span id="cb1-8">html[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>'&lt;!DOCTYPE html&gt;\n&lt;html class="client-nojs vector-fe'</code></pre>
</div>
</div>
<p>The HTML has been obtained. Next we’ll identify and extract references to all embedded PDF links.</p>
</section>
<section id="step-ii-extract-pdf-urls-from-html" class="level3">
<h3 class="anchored" data-anchor-id="step-ii-extract-pdf-urls-from-html">Step II: Extract PDF URLs from HTML</h3>
<p>A cursory review of the HTML from webpages with embedded PDF links revealed the following:</p>
<ul>
<li>Valid PDF URLs will in almost always be embedded within an <code>href</code> tag.<br>
</li>
<li>Valid PDF URLs will in all cases be preceded by <code>http</code> or <code>https</code>.<br>
</li>
<li>Valid PDF URLs will in all cases be enclosed by a trailing <code>&gt;</code>.<br>
</li>
<li>Valid PDF URLs cannot contain whitespace.</li>
</ul>
<p>After some trial and error, the following regular expression was found to have acceptable performance for our test cases:</p>
<pre><code>"(?=href=).*(https?://\S+.pdf).*?&gt;"</code></pre>
<p>An excellent site to practice building and testing regular expressions is <a href="https://pythex.org/">Pythex</a> . The app allows you to construct regular expressions and determine how they match against the target text. I find myself using it on a regular basis.</p>
<p>Here is the logic associated with steps I and II combined:</p>
<div id="cell-5" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb4-4"></span>
<span id="cb4-5">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/wiki/Singular_value_decomposition"</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instruct requests object to return HTML as plain text.</span></span>
<span id="cb4-8">html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url).text</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search html and compile PDF URLs in a list.</span></span>
<span id="cb4-11">pdf_links <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"(?=href=).*(https?://\S+.pdf).*?&gt;"</span>, html)</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> link <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pdf_links:</span>
<span id="cb4-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(link)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>http://www.wou.edu/~beavers/Talks/Willamette1106.pdf
http://www.alterlab.org/research/highlights/pone.0078913_Highlight.pdf
http://math.mit.edu/~edelman/publications/distribution_of_a_scaled.pdf
http://files.grouplens.org/papers/webKDD00.pdf
https://stanford.edu/~rezab/papers/dimsum.pdf
http://faculty.missouri.edu/uhlmannj/UC-SIMAX-Final.pdf</code></pre>
</div>
</div>
<p>Note that the regular expression is prepended with an <code>r</code> when passed to <code>re.findall</code>. This instructs Python to interpret what follows as a raw string and to ignore escape sequences.</p>
<p><code>re.findall</code> returns a list of matches extracted from the source text. In our case, it returns a list of URLs referencing the PDF documents found on the page.</p>
<p>For the last step we need to retrieve the documents associated with our collection of links and write them to file locally. We introduce another module from the Python Standard Library, <code>os.path</code>, which facilitates the partitioning of absolute filepaths into components in order to retain filenames when saving documents to file.</p>
<p>For example, consider the following url:</p>
<pre><code>https://stanford.edu/~rezab/papers/dimsum.pdf</code></pre>
<p>To capture <em>dimsum.pdf</em>, we pass the absolute URL to <code>os.path.split</code>, which returns a tuple of everything preceding the filename as the first element, along with the filename and extension as the second element:</p>
<div id="cell-7" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb7-3"></span>
<span id="cb7-4">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://stanford.edu/~rezab/papers/dimsum.pdf"</span></span>
<span id="cb7-5">os.path.split(url)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>('https://stanford.edu/~rezab/papers', 'dimsum.pdf')</code></pre>
</div>
</div>
<p>This will be used to preserve the filename of the documents we save locally.</p>
</section>
<section id="step-iii-write-pdfs-to-file" class="level3">
<h3 class="anchored" data-anchor-id="step-iii-write-pdfs-to-file">Step III: Write PDFs to File</h3>
<p>This step differs from the initial HTML retrieval in that we need to request the content as bytes, not text. By calling <code>requests.get(url).content</code>, we’re accessing the raw bytes that comprise the PDF, then writing those bytes to file. Here’s the logic for the third and final step:</p>
<div id="cell-9" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb9-4"></span>
<span id="cb9-5">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://en.wikipedia.org/wiki/Singular_value_decomposition"</span></span>
<span id="cb9-6">html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url).text</span>
<span id="cb9-7">pdf_links <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"(?=href=).*(https?://\S+.pdf).*?&gt;"</span>, html)</span>
<span id="cb9-8"></span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Request PDF content and write to file for all entries.</span></span>
<span id="cb9-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pdf <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pdf_links:</span>
<span id="cb9-12"></span>
<span id="cb9-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get filename from url for naming file locally.</span></span>
<span id="cb9-14">    pdf_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.split(pdf)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].strip()</span>
<span id="cb9-15">    </span>
<span id="cb9-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb9-17">        r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(pdf).content</span>
<span id="cb9-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(pdf_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f: </span>
<span id="cb9-19">            f.write(r)</span>
<span id="cb9-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb9-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unable to download </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pdf_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb9-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb9-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Saved </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pdf_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Saved Willamette1106.pdf.
Saved pone.0078913_Highlight.pdf.
Saved distribution_of_a_scaled.pdf.
Saved webKDD00.pdf.
Saved dimsum.pdf.
Unable to download UC-SIMAX-Final.pdf.</code></pre>
</div>
</div>
<p>Notice that we surround <code>with open(pdfname, "wb")...</code> in a try-except block: This handles situations that would prevent our code from downloading a document, such as broken redirects or invalid links.</p>
<p>All-in we end up with 16 lines of code excluding comments. We next present the full implementation of the PDF Harvester after a little reorganization:</p>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os.path</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb11-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb11-5"></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> pdf_harvester(url):</span>
<span id="cb11-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Retrieve URLs html and extract references to PDFs. Download PDFs, </span></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    writing to current working directory. </span></span>
<span id="cb11-11"></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    url: str</span></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Web address to serach for PDF links.</span></span>
<span id="cb11-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-17">    html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url).text</span>
<span id="cb11-18">    pdf_links <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"(?=href=).*(https?://\S+.pdf).*?&gt;"</span>, html)</span>
<span id="cb11-19"></span>
<span id="cb11-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pdf <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pdf_links:</span>
<span id="cb11-21">        </span>
<span id="cb11-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get filename from url for naming file locally.</span></span>
<span id="cb11-23">        pdf_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.split(pdf)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].strip()</span>
<span id="cb11-24"></span>
<span id="cb11-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb11-26">            r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(pdf).content</span>
<span id="cb11-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(pdf_name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f: </span>
<span id="cb11-28">                f.write(r)</span>
<span id="cb11-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span>:</span>
<span id="cb11-30">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unable to download </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pdf_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb11-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb11-32">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Saved </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pdf_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/pdf-harvester-python/pdf-harvester-python.html</guid>
  <pubDate>Tue, 20 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Online Mean and Variance Update without Full Recalculation</title>
  <link>https://www.jtrive.com/posts/online-updates/online-updates.html</link>
  <description><![CDATA[ 





<p>Imagine you are responsible for maintaining the mean and variance of a dataset that is frequently updated. For small-to-moderately sized datasets, much thought might not be given to the method used for recalculation. However, with datasets consisting of hundreds of billions or trillions of observations, full recomputation of the mean and variance at each refresh may require significant computational resources that may not be available.</p>
<p>Fortunately it isn’t necessary to perform a full recalculation of mean and variance when accounting for new observations. Recall that for a sequence of <img src="https://latex.codecogs.com/png.latex?n"> observations <img src="https://latex.codecogs.com/png.latex?x_%7B1%7D,%20%5Cdots%20x_%7Bn%7D"> the sample mean <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7Bn%7D"> and variance <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7Bn%7D%5E%7B2%7D"> are given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%20%20%20%20%20%20%20%5Cmu_%7Bn%7D%20&amp;=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_%7Bi%7D%20%5C%5C%0A%5Csigma_%7Bn%7D%5E%7B2%7D%20&amp;=%20%5Cfrac%7B1%7D%7Bn-1%7D%5Csum_%7Bi=1%7D%5E%7Bn%7D%20(x_%7Bi%7D%20-%20%5Cmu_%7Bn%7D)%5E%7B2%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>A new observation <img src="https://latex.codecogs.com/png.latex?x_%7Bn+1%7D"> becomes available. To calculate the updated mean <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7Bn+1%7D"> and variance <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7Bn+1%7D%5E%7B2%7D"> in light of this new observation without requiring full recalculation, we can use the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmu_%7Bn+1%7D%20&amp;=%20%5Cfrac%7B1%7D%7Bn+1%7D(n%5Cmu_%7Bn%7D%20+%20x_%7Bn+1%7D)%20%5C%5C%0A%5Csigma_%7Bn+1%7D%5E%7B2%7D%20&amp;=%20%5Cfrac%7Bn%7D%7Bn+1%7D%5Csigma_%7Bn%7D%5E%7B2%7D%20+%20%5Cfrac%7B1%7D%7Bn%7D(x_%7Bn+1%7D%20-%20%5Cmu_%7Bn+1%7D)%5E%7B2%7D%0A%5Cend%7Balign*%7D%0A"></p>
<section id="demonstration" class="level3">
<h3 class="anchored" data-anchor-id="demonstration">Demonstration</h3>
<p>Consider the following values:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A1154%5Chspace%7B2mm%7D717%5Chspace%7B2mm%7D958%5Chspace%7B2mm%7D1476%5Chspace%7B2mm%7D889%5Chspace%7B2mm%7D1414%5Chspace%7B2mm%7D1364%5Chspace%7B2mm%7D1047%0A"></p>
<p>The mean and variance for the observations:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%20%20%20%20%20%20%20%5Cmu_%7B8%7D%20&amp;%5Capprox%201127.38%20%5C%5C%0A%5Csigma_%7B8%7D%5E%7B2%7D%20&amp;%5Capprox%2065096.48%0A%5Cend%7Balign*%7D%0A"></p>
<p>A new value, <img src="https://latex.codecogs.com/png.latex?1251"> becomes available. Full recalculation of mean and variance yields:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%20%20%20%20%20%20%20%5Cmu_%7B8%7D%20&amp;%5Capprox%20%5Cmathbf%7B1141.11%7D%20%5C%5C%0A%5Csigma_%7B8%7D%5E%7B2%7D%20&amp;%5Capprox%20%5Cmathbf%7B59372.99%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>The mean and variance calculated using online update results in:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cmu_%7B9%7D%20&amp;=%20%5Cfrac%7B1%7D%7B9%7D(8(1127.38)%20+%201251)%20%5Capprox%20%5Cmathbf%7B1141.11%7D%20%5C%5C%0A%5Csigma_%7B9%7D%5E%7B2%7D%20&amp;=%20%5Cfrac%7B8%7D%7B9%7D%20(65096.48)%20+%20%5Cfrac%7B1%7D%7B8%7D(1251%20-%201141.11)%5E%7B2%7D%20%5Capprox%20%5Cmathbf%7B59372.99%7D,%0A%5Cend%7Balign*%7D%0A"></p>
<p>confirming agreement between the two approaches.</p>
<p>Note that the variance returned using the online update formula is the population variance. In order to return the updated unbiased sample variance, we need to multiply the variance returned by the online update formula by <img src="https://latex.codecogs.com/png.latex?(n+1)/n">, where <img src="https://latex.codecogs.com/png.latex?n"> represents the length of the original array excluding the new observation. Thus, the updated sample variance after accounting for the new value is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0As_%7Bn+1%7D%5E%7B2%7D%20&amp;=%20%5Cfrac%7Bn+1%7D%7Bn%7D%5Cbig(%5Cfrac%7Bn%7D%7Bn+1%7D%5Csigma_%7Bn%7D%5E%7B2%7D%20+%20%5Cfrac%7B1%7D%7Bn%7D(x_%7Bn+1%7D%20-%20%5Cmu_%7Bn+1%7D)%5E%7B2%7D%5Cbig)%20%5C%5C%0As_%7B9%7D%5E%7B2%7D%20%20%20&amp;=%20%5Cfrac%7B9%7D%7B8%7D(59372.99)%20%5Capprox%2066794.61%0A%5Cend%7Balign*%7D%0A"></p>
</section>
<section id="implementation" class="level3">
<h3 class="anchored" data-anchor-id="implementation">Implementation</h3>
<p>A straightforward implementation in Python to handle online mean and variance updates, incorporating Bessel’s correction to return the unbiased sample variance is provided below:</p>
<div id="cell-2" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> online_mean(mean_init, n, new_obs):</span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return updated mean in light of new observation without</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    full recalculation.</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>((n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> mean_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> new_obs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-11"></span>
<span id="cb1-12"></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> online_variance(var_init, mean_new, n, new_obs):</span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return updated variance in light of new observation without</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    full recalculation. Includes Bessel's correction to return</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    unbiased sample variance. </span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ((n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (((n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> var_init) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (((new_obs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean_new)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n))</span>
<span id="cb1-21"></span>
<span id="cb1-22"></span>
<span id="cb1-23"></span>
<span id="cb1-24"></span>
<span id="cb1-25">a0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1154</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">717</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">958</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1476</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">889</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1414</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1364</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1047</span>])</span>
<span id="cb1-26"></span>
<span id="cb1-27">a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1154</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">717</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">958</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1476</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">889</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1414</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1364</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1047</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1251</span>])</span>
<span id="cb1-28"></span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original mean and variance.</span></span>
<span id="cb1-31">mean0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a0.mean()    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1127.38</span></span>
<span id="cb1-32">variance0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a0.var() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 65096.48</span></span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Full recalculation mean and variance with new observation.</span></span>
<span id="cb1-35">mean1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a1.mean()    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1141.11</span></span>
<span id="cb1-36">variance1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a1.var(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 59372.99</span></span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Online update of mean and variance with bias correction.</span></span>
<span id="cb1-39">mean2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> online_mean(mean0, a0.size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1251</span>)                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1141.11</span></span>
<span id="cb1-40">variance2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> online_variance(variance0, mean2, a0.size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1251</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 66794.61</span></span>
<span id="cb1-41"></span>
<span id="cb1-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Full recalculation mean    : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-43"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Full recalculation variance: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>variance1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-44"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Online calculation mean    : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mean2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-45"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Online calculation variance: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>variance2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Full recalculation mean    : 1,141.11111
Full recalculation variance: 66,794.61111
Online calculation mean    : 1,141.11111
Online calculation variance: 66,794.61111</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Statistical Modeling</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/online-updates/online-updates.html</guid>
  <pubDate>Sun, 18 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Accessing C Library Functions from Python</title>
  <link>https://www.jtrive.com/posts/c-libs-python/c-libs-python.html</link>
  <description><![CDATA[ 





<p>ctypes is part of the Python standard library which provides C compatible data types and allows calling functions in shared libraries. It can be used to wrap libraries written in compiled languages from Python.</p>
<p>In this post, we’ll demonstrate how to call functions written in C from Python using ctypes. The functions take as input an array of normal variates with specified mean and variance, then compute the normal CDF for each input array element. The sample code also demonstrates how to link to the C math library during compilation.</p>
<section id="normal-cdf" class="level3">
<h3 class="anchored" data-anchor-id="normal-cdf">Normal CDF</h3>
<p>Our goal is to be able to call a C-implemented normal cumulative distribution function (CDF) from Python, which takes as input a value <img src="https://latex.codecogs.com/png.latex?x">, mean <img src="https://latex.codecogs.com/png.latex?%5Cmu">, standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csigma"> and returns the corresponding CDF of <img src="https://latex.codecogs.com/png.latex?x"> (which ranges from 0 to 1). In addition, a second function that populates an array of evaluated normal quantiles for a given input array will be created.</p>
<p>The standard C math library doesn’t expose a subroutine to calcuate the normal CDF directly, but it does expose the error function <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Berf%7D"> and the complementary error function <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Berfc%7D">. <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Berf%7D"> is defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Berf%7D(x)%20=%20%5Cfrac%7B2%7D%7B%5Csqrt%7B%5Cpi%7D%7D%5Cint_%7B0%7D%5E%7Bx%7D%20%20e%5E%7B-t%5E%7B2%7D%7Ddt,%0A"></p>
<p>and <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Berfc%7D"> is the complement of <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Berf%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7Berfc%7D(x)%20=%201%20-%20%5Cmathrm%7Berf%7D(x).%0A"></p>
<p>Recall that the normal probability density function (PDF) is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x%7C%20%5Cmu,%5Csigma)%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%20%5Cpi%20%5Csigma%5E%7B2%7D%7D%7D%20e%5E%7B-%5Cfrac%7B(x-%5Cmu)%5E%7B2%7D%7D%7B2%5Csigma%5E%7B2%7D%7D%7D.%0A"></p>
<p>Given the similarity between <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Berf%7D"> and the normal PDF, it’s possible to use <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Berf%7D"> to calculate any normal quantiles of interest. Let <img src="https://latex.codecogs.com/png.latex?%5CPhi(x)"> represent the normal CDF evaluated at <img src="https://latex.codecogs.com/png.latex?x">. <img src="https://latex.codecogs.com/png.latex?%5CPhi(x)"> can be obtained using the following identity:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5CPhi(x)&amp;=%5Cfrac%7B1%7D%7B%5Csqrt%7B2%20%5Cpi%7D%7D%5Cint_%7B-%5Cinfty%7D%5E%7Bx%7D%20e%5E%7B%5Cfrac%7B-t%5E%7B2%7D%7D%7B2%7D%7Ddt%20%5C%5C%0A&amp;=%5Cfrac%7B1%7D%7B2%7D%5CBig%5B1%20+%20%5Cmathrm%7Berf%7D%20%5CBig(%5Cfrac%7Bx%7D%7B%5Csqrt%7B2%7D%7D%5CBig)%5CBig%5D%20%5C%5C%0A&amp;=%5Cfrac%7B1%7D%7B2%7D%5CBig%5B%5Cmathrm%7Berfc%7D%20%5CBig(-%5Cfrac%7Bx%7D%7B%5Csqrt%7B2%7D%7D%5CBig)%5CBig%5D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>When <img src="https://latex.codecogs.com/png.latex?x"> is large, <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Berfc%7D"> should be used in place of <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Berf%7D">.</p>
<p>One final point: The identity relating the normal CDF and $: returns quantiles from the standard normal distribution which has zero mean and unit variance. To transform a normal distribution with arbitrary mean and variance into standard form, we use the familiar transformation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Az%20=%20%5Cfrac%7Bx%20-%20%5Cmu%7D%7B%5Csigma%7D.%0A"></p>
<p>We can then evaluate <img src="https://latex.codecogs.com/png.latex?z"> to obtain the corresponding normal quantile. We’ll use this point in our implementation as well.</p>
<p>### C Implementation</p>
<p>The actual implementation of our normal CDF computator will consist of a single .c file <em>norm.c</em>. What follows are the contents of <em>norm.c</em>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Determine the Normal CDF of x given mean `mu`</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">and standard deviation `sigma`.</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `x`     =&gt; value for which the normal CDF will be determined</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `mu`    =&gt; mean of the corresponding normal distribution</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `sigma` =&gt; standard deviation of the corresponding normal distribution</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*/</span></span>
<span id="cb1-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;math.h&gt;</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> norm_cdf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> cdf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// variable to hold result</span></span>
<span id="cb1-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// transformation to standard normal</span></span>
<span id="cb1-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> SQRT_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4142135623730951</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-17">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-18"></span>
<span id="cb1-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// if x &gt; 3, call erfc; otherwise call erf </span></span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-21">        cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> erfc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span> z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> SQRT_2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-24">        cdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> erf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> SQRT_2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>    </span>
<span id="cb1-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>cdf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-27"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-28"></span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*</span></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">For a given array of arbitrary normal variates, calculate </span></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">the corresponding quantiles using `norm_cdf`.</span></span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `mu`           =&gt; mean of the corresponding normal distribution</span></span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `sigma`        =&gt; standard deviation of the corresponding normal distribution</span></span>
<span id="cb1-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `n`            =&gt; the length of input_array/output_array</span></span>
<span id="cb1-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `input_array`  =&gt; array of inputs (doubles)</span></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `output_array` =&gt; array of computed normal CDFs</span></span>
<span id="cb1-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*/</span></span>
<span id="cb1-40"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> cdf_array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb1-41">                 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> input_array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> output_array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-42"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-43">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-44"></span>
<span id="cb1-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// For each element of input_array, call norm.</span></span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-47"></span>
<span id="cb1-48">        output_array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm_cdf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>input_array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-49"></span>
<span id="cb1-50">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>    </span>
<span id="cb1-51"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Our ultimate goal is to create a shared library that contains the C functions <code>norm_cdf</code> and <code>cdf_array</code> which can be accessed using ctypes and called from within Python. The first step is to compile <em>norm.c</em> into an object file. For gcc, the -c flag is used to compile a source file into an object file:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> gcc <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-Wall</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-fPIC</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-lm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> norm.c    </span></code></pre></div>
<p>The <code>-lm</code> flag precludes us from having to include the full path and name of the C math library. Upon completion, the object file <em>norm.o</em> will be output to the same directory in which <em>norm.c</em> resides.</p>
<p>In the next step we create the shared library. Linux shared libraries have <em>.so</em> extensions. The following command creates <em>norm.so</em> in the same directory as <em>norm.c</em> and <em>norm.o</em>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> gcc <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-shared</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> norm.so norm.o  </span></code></pre></div>
<p>Brief aside: If we had a collection of files that we wanted to compile into a single shared library, we’d list them one after the other. If instead of <em>norm.o</em> we had <em>norm1.o, norm2.o and norm3.o</em>, the command would become:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> gcc <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-shared</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> norm.so norm1.o norm2.o norm3.o</span></code></pre></div>
<p>Doing so would also produce a single <em>norm.so</em> file in the working directory, same as the command referencing a single object file.</p>
</section>
<section id="calling-c-functions-from-python" class="level2">
<h2 class="anchored" data-anchor-id="calling-c-functions-from-python">Calling C Functions from Python</h2>
<p>Prior to calling our C functions from Python, we need to specify the parameter and return types of <code>norm_cdf</code> and <code>cdf_array</code>. In addition, we need to coerce any Python data types that are passed to the library functions into C-compatible data types. This is demonstrated below, with each section commented to make it easier to follow along. This is a Python file named as <em>norm_main.py</em>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env python</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">norm_main.py</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Calls 2 functions from the compiled C library `norm.so`:</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    [+] double norm(double x, double mu, double sigma)</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    [+] void cdf_array(double mu, double sigma, int n,</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                     double* input_array, double* output_array)</span></span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ctypes</span>
<span id="cb5-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> norm</span>
<span id="cb5-16"></span>
<span id="cb5-17">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Provide full path to shared library.</span></span>
<span id="cb5-20">LIB_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"norm.so"</span></span>
<span id="cb5-21"></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bind reference to shared library `norm.so`.</span></span>
<span id="cb5-23">normlib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctypes.cdll.LoadLibrary(LIB_PATH)</span>
<span id="cb5-24"></span>
<span id="cb5-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify argument datatypes for norm_cdf and cdf_array.</span></span>
<span id="cb5-26">normlib.norm_cdf.argtypes  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-27">    ctypes.c_double, ctypes.c_double, ctypes.c_double</span>
<span id="cb5-28">    ]</span>
<span id="cb5-29">    </span>
<span id="cb5-30">normlib.cdf_array.argtypes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-31">    ctypes.c_double, ctypes.c_double, ctypes.c_int,</span>
<span id="cb5-32">    ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double)</span>
<span id="cb5-33">    ]</span>
<span id="cb5-34"></span>
<span id="cb5-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify return datatypes for norm_cdf and cdf_array (cdf_array declared as void).</span></span>
<span id="cb5-36">normlib.norm_cdf.restype  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctypes.c_double</span>
<span id="cb5-37">normlib.cdf_array.restype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb5-38"></span>
<span id="cb5-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use scipy.stats to generate 10 standard normal random variates. This will </span></span>
<span id="cb5-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be `input_arr`. We also initialize `output_arr` to all zeros, and set the </span></span>
<span id="cb5-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed in numpy for reproducibility.</span></span>
<span id="cb5-42">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb5-43">mu, sigma, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb5-44">input_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm.rvs(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb5-45">output_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(n, np.float_)</span>
<span id="cb5-46"></span>
<span id="cb5-47"></span>
<span id="cb5-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize ctypes-compatible versions of mu, sigma, n, input_arr and output_arr.</span></span>
<span id="cb5-49">ct_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctypes.c_double(mu)</span>
<span id="cb5-50">ct_sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctypes.c_double(sigma)</span>
<span id="cb5-51">ct_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctypes.c_int(n)</span>
<span id="cb5-52">ct_input_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ctypeslib.as_ctypes(input_arr)</span>
<span id="cb5-53">ct_output_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ctypeslib.as_ctypes(output_arr)</span>
<span id="cb5-54"></span>
<span id="cb5-55"></span>
<span id="cb5-56"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Normal variates w/ mean </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and standard deviation </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sigma<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>input_arr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-57"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Output_arr before passing to cdf_array:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output_arr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-58"></span>
<span id="cb5-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Call `normlib.cdf_array` from C library.</span></span>
<span id="cb5-60">normlib.cdf_array(ct_mu, ct_sigma, ct_n, ct_input_arr, ct_output_arr)</span>
<span id="cb5-61"></span>
<span id="cb5-62"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Output_arr after passing to cdf_array:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>output_arr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-63"></span>
<span id="cb5-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare results returned by cdf_array to scipy's norm.cdf.</span></span>
<span id="cb5-65">spcdfs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm.cdf(input_arr, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma)</span>
<span id="cb5-66"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">scipy-evaluated CDFs:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>spcdfs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>To summarize, we read in <em>norm.so</em>, specify the parameter and return data types for the library functions, then call <code>cdf_array</code>. In the last few lines, we compare the output of <code>cdf_array</code> with <code>norm.cdf</code> from scipy.stats, and find the results to be identical.</p>
<p>Note that we are not copying data, but simply passing pointers to the data from Python to C. In C, the data pointed to is operated on, which means we do not need to pass any data back. This explains why <code>cdf_array</code>’s return type is void.</p>
<p>Also note that calculating normal CDFs for a sequence of normal variates can be accomplished more efficiently using Scipy. This particular example was chosen to demonstrate non-trival ctypes extensibility, but the example itself should be considered a demonstration of the method, not an optimal approach for computing normal CDFs.</p>
<p>The following terminal capture verifies that CDFs calculated with cdf_array and scipy are the same:</p>
<p><img src="https://www.jtrive.com/posts/c-libs-python/normc01.png" class="img-fluid"></p>
<p>Finally, we compare CDFs for normal variates generated from a non-standard normal distribution. The only change we need to make in <em>norm_main.py</em> is to update mu and sigma. Setting mu=2.5 and sigma=5 yields:</p>
<p><img src="https://www.jtrive.com/posts/c-libs-python/normc02.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/c-libs-python/c-libs-python.html</guid>
  <pubDate>Thu, 08 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Using Dijkstra’s Algorithm to Find All Shortest Paths in a Graph</title>
  <link>https://www.jtrive.com/posts/dijkstras-shortest-paths/dijkstras-shortest-paths.html</link>
  <description><![CDATA[ 





<p>I always had trouble spelling <em>Dijkstra</em> correctly until someone pointed out “It’s just D, followed by <em>i-j-k</em>, then stra”. Once it was pointed out that <em>i-j-k</em> is represented sequentially in alphabetical order, spelling <em>Dijkstra</em> becomes trival - almost fun!</p>
<p><em>Dijkstra’s algorithm</em> is one of the most well-known and studied graph algorithms for finding the shortest path between a set of vertices. For a specified starting node, the algorithm finds the shortest path between the source vertex and all other vertices in the graph. Dijkstra’s cannot handle graphs with negative edge weights: For graphs with negative weight edges, Floyd-Warshall or Bellman Ford can be used. But for graphs with positive edge weights, Dijkstra’s has better worst case performance than more general alternatives (O((n + m)log(n)) for Dijkstra vs.&nbsp;O(mn) for Bellman-Ford and O(n^3) for Floyd-Warshall).</p>
<p>However, Dijkstra’s only returns a single shortest path. In many cases a single shortest path is enough. But there are plenty of applications in which knowledge of alternate minimum weight paths can be useful. If a graph has multiple shortest paths, it is necessary to add supplementary logic to identify and return all such paths. The modified routine to return all shortest paths from graph G is described below:</p>
<ol type="1">
<li><p>Run Dijkstra’s starting from start node <strong>a</strong>. Returns shortest path and distance to every node from vertex <strong>a</strong>.</p></li>
<li><p>Run Dijkstra’s starting from end node <strong>f</strong>. Returns shortest path and distance to every node from vertex <strong>f</strong>.</p></li>
<li><p>Let <code>dist_a2f</code> = A shortest path from vertex <strong>a</strong> to vertex <strong>f</strong>.</p></li>
<li><p>For (u, v) in G.edges:</p>
<p>Let <code>w_uv</code> = Weight of edge (u, v).</p>
<p>Let <code>dist_a2u</code> = Distance from start vertex <strong>a</strong> to vertex u.</p>
<p>Let <code>dist_f2v</code> = Distance from end vertex <strong>f</strong> to vertex v.</p>
<p>If <code>dist_a2u</code> + <code>w_uv</code> + <code>dist_f2v</code> == <code>dist_a2f</code>:</p>
<p>Then edge (u, v) is on some minimal weight path.</p></li>
</ol>
<p>Lets use networkx to create a graph with multiple shortest paths:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create network with multiple minimal weight paths.</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb1-5"></span>
<span id="cb1-6">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">518</span></span>
<span id="cb1-7">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.Graph()</span>
<span id="cb1-8"></span>
<span id="cb1-9">G.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-10">G.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-11">G.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb1-12">G.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-13">G.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-14">G.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-15">G.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb1-16">G.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb1-17">G.add_edge(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-18"></span>
<span id="cb1-19">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(u, v) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (u, v, d) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> G.edges(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)]</span>
<span id="cb1-20"></span>
<span id="cb1-21">color_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> g <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> G:</span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>:</span>
<span id="cb1-24">        color_map.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>)</span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> g<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>:</span>
<span id="cb1-26">        color_map.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb1-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-28">        color_map.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span>
<span id="cb1-29"></span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># edge weight labels.</span></span>
<span id="cb1-32">edge_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.get_edge_attributes(G, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>)</span>
<span id="cb1-33"></span>
<span id="cb1-34"></span>
<span id="cb1-35">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-36">pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.spring_layout(G, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed)</span>
<span id="cb1-37">nx.draw_networkx_nodes(G, pos, node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, node_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color_map)</span>
<span id="cb1-38">nx.draw_networkx_edges(G, pos, edgelist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>edges, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, edge_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"solid"</span>)</span>
<span id="cb1-39">nx.draw_networkx_labels(G, pos, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, font_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, font_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, font_family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sans-serif"</span>)</span>
<span id="cb1-40">nx.draw_networkx_edge_labels(G, pos, edge_labels, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-41">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb1-42">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/dijkstras-shortest-paths/dijkstras-shortest-paths_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>G has three shortest paths of weight/distance 12:</p>
<ul>
<li><code>a - c - f</code></li>
<li><code>a - b - c - f</code></li>
<li><code>a - c - d - e - f</code></li>
</ul>
<p>Running <code>single_source_dijkstra</code> from networkx returns the distance to each vertex in a graph from a specified starting vertex (in our example, vertex a). <code>single_source_dijkstra</code> returns two dictionaries: The first stores distances to each vertex; the second stores the shortest path from the start node to all other vertices (<code>d2v0</code> and <code>p2v0</code> in the code below):</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">d2v0, p2v0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.single_source_dijkstra(G, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"d2v0: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>d2v0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"p2v0: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p2v0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>d2v0: {'a': 0, 'b': 4, 'c': 6, 'd': 7, 'e': 10, 'f': 12}
p2v0: {'a': ['a'], 'b': ['a', 'b'], 'c': ['a', 'c'], 'd': ['a', 'c', 'd'], 'f': ['a', 'c', 'f'], 'e': ['a', 'c', 'd', 'e']}</code></pre>
</div>
</div>
<p><code>single_source_dijkstra</code> only returns <code>a - c - f</code>. To also identify <code>a - b - c - f</code> and <code>a - c - d - e - f</code>, we implement the steps from our pseudocode:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Idenitfy all shortests paths in graph G.</span></span>
<span id="cb4-3">all_shortest_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># d2v: Distance to vertex (from start node a).</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p2v: Shortest path to vertext (from start node a).</span></span>
<span id="cb4-7">d2v0, p2v0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.single_source_dijkstra(G, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span>
<span id="cb4-8">d2v1, p2v1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.single_source_dijkstra(G, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>)</span>
<span id="cb4-9">all_shortest_paths.add(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p2v0[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>]))</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through all edges. Check for additional shortest paths. </span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distance of a shortest path from a to f. </span></span>
<span id="cb4-14">dist_a2f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d2v0[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>]</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> u, v, dw <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> G.edges(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb4-17">    </span>
<span id="cb4-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get weight of current edge spanning (u, v)</span></span>
<span id="cb4-19">    w_uv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dw[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>]</span>
<span id="cb4-20">    </span>
<span id="cb4-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get distance from start vertex to u.</span></span>
<span id="cb4-22">    dist_a2u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d2v0[u]</span>
<span id="cb4-23">    </span>
<span id="cb4-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get distance from end vertex to v.</span></span>
<span id="cb4-25">    dist_f2v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d2v1[v]</span>
<span id="cb4-26">    </span>
<span id="cb4-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> dist_a2u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w_uv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dist_f2v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> dist_a2f:</span>
<span id="cb4-28">        </span>
<span id="cb4-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Edge uv is on some minimal weight path. Append to all_shortest_paths.</span></span>
<span id="cb4-30">        pp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p2v0[u] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p2v1[v][::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb4-31">        all_shortest_paths.add(pp)</span></code></pre></div>
</div>
<p>Shortest paths are stored in a set of ordered tuples, with each tuple representing the vertices of some path of minimum weight. Printing the contents of all_shortest_paths yields:</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">all_shortest_paths</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{('a', 'b', 'c', 'f'), ('a', 'c', 'd', 'e', 'f'), ('a', 'c', 'f')}</code></pre>
</div>
</div>
<p>The time complexity for two separate invocations of Dijkstra’s is 2 * O((n + m)log(n)), and O(m + n) to iterate through the adjacency list checking for intermediate edges falling on a path of minimum weight.</p>



 ]]></description>
  <category>Statistical Modeling</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/dijkstras-shortest-paths/dijkstras-shortest-paths.html</guid>
  <pubDate>Mon, 05 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Understanding the Graph Convolutional Network Propogation Model</title>
  <link>https://www.jtrive.com/posts/gcn-prop-model/gcn-prop-model.html</link>
  <description><![CDATA[ 





<p>Convolutional Neural networks (CNNs) have been found to be very effective at tasks such as facial recognition, video analysis, anomaly detections and semantic parsing. An image can be considered a graph with a very regular structure (i.e., pixels are considered nodes, with edges connecting adjacent nodes). A natural idea is to extend convolutions to general graphs for tasks such as graph, node or edge classification. However, it is not immediately clear how one would go about extending the concept of convolutions in the context of CNNs to graphs.</p>
<p>In the Kipf and Welling paper, <a href="https://arxiv.org/pdf/1609.02907.pdf"><em>Semi-Supervised Classification with Graph Convolutional Networks</em></a>, the authors propose a method to approximate the spectral graph convolution via truncated Chebyshev polynomials, resulting in an efficient and scalable method to train graph neural networks. In this post, we walkthrough the graph convolutional network (GCN) propagation model, which we also implement in pytorch geometric. Thomas Kipf’s original PyTorch implementation is available <a href="https://github.com/tkipf/gcn">here</a>.</p>
<section id="gcn-propagation-model" class="level3">
<h3 class="anchored" data-anchor-id="gcn-propagation-model">GCN Propagation Model</h3>
<p>The GCN forward pass is presented as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AH%5E%7B(l+1)%7D%20=%20%5Csigma(%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DH%5E%7B(l)%7DW%5E%7B(l)%7D)%0A"></p>
<p>Where: - <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7Bn%7D">: number of nodes in graph<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7Bc%7D">: length of feature vector for each node<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7Bf%7D">: size of projection layer<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BA%7D">: n-by-n adjacency matrix<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctilde%7BA%7D%7D">: n-by-n adjacency matrix with added self-connections<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctilde%7BD%7D%7D">: n-by-n degree matrix of <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctilde%7BA%7D%7D"><br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BH%5E%7B(l+1)%7D%7D">: n-by-c matrix of feature vectors for all nodes<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7BW%5E%7B(l)%7D%7D">: c-by-f linear projection layer<br>
- <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Csigma%7D">: non-linearity, such as ReLU</p>
<p>This becomes clear with an example. We create an undirected graph with 5 nodes:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.Graph()</span>
<span id="cb1-5"></span>
<span id="cb1-6">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-7">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-8">    ]</span>
<span id="cb1-9"></span>
<span id="cb1-10">G.add_edges_from(edges)</span>
<span id="cb1-11"></span>
<span id="cb1-12">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-13">pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.spring_layout(G, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">508</span>)</span>
<span id="cb1-14">nx.draw_networkx_nodes(G, pos, node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>, node_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span>
<span id="cb1-15">nx.draw_networkx_edges(G, pos, edgelist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>edges, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, edge_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"solid"</span>)</span>
<span id="cb1-16">nx.draw_networkx_labels(G, pos, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, font_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, font_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, font_family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sans-serif"</span>)</span>
<span id="cb1-17">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb1-18">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gcn-prop-model/gcn-prop-model_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img" alt="An undirected graph with 5 blue numbered nodes with 5 edges"></p>
<figcaption>5-node, 5-edge undirected graph</figcaption>
</figure>
</div>
</div>
</div>
<p>The elements of the adjacency matrix indicate whether pairs of vertices are connected in the graph. For the graph shown above, the adjacency matrix is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%7BA%7D%20=%0A%5Cbegin%7Bpmatrix%7D%0A0%20&amp;%201%20&amp;%201%20&amp;%201%20&amp;%201%20%5C%5C%0A1%20&amp;%200%20&amp;%200%20&amp;%200%20&amp;%201%20%5C%5C%0A1%20&amp;%200%20&amp;%200%20&amp;%200%20&amp;%200%20%5C%5C%0A1%20&amp;%200%20&amp;%200%20&amp;%200%20&amp;%200%20%5C%5C%0A1%20&amp;%201%20&amp;%200%20&amp;%200%20&amp;%200%0A%5Cend%7Bpmatrix%7D%0A"></p>
<p>The first row indicates the nodes adjacent to node 1. Since node 1 is connected to all other nodes, all but the first cell are set to 1 (no self connections in <img src="https://latex.codecogs.com/png.latex?A">).</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BA%7D%20=%20A%20+%20I">, where <img src="https://latex.codecogs.com/png.latex?I"> is the length-n identity matrix. This has the effect of adding self-connections to each node. We have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%7B%5Ctilde%7BA%7D%7D%20=%0A%5Cbegin%7Bpmatrix%7D%0A1%20&amp;%201%20&amp;%201%20&amp;%201%20&amp;%201%20%5C%5C%0A1%20&amp;%201%20&amp;%200%20&amp;%200%20&amp;%201%20%5C%5C%0A1%20&amp;%200%20&amp;%201%20&amp;%200%20&amp;%200%20%5C%5C%0A1%20&amp;%200%20&amp;%200%20&amp;%201%20&amp;%200%20%5C%5C%0A1%20&amp;%201%20&amp;%200%20&amp;%200%20&amp;%201%0A%5Cend%7Bpmatrix%7D%0A"></p>
<p>After adding self-connections, the graph becomes:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.Graph()</span>
<span id="cb2-2"></span>
<span id="cb2-3">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-4">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb2-5">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb2-6">    ]</span>
<span id="cb2-7"></span>
<span id="cb2-8">G.add_edges_from(edges)</span>
<span id="cb2-9"></span>
<span id="cb2-10">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-11">pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.spring_layout(G, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">508</span>)</span>
<span id="cb2-12">nx.draw_networkx_nodes(G, pos, node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>, node_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span>
<span id="cb2-13">nx.draw_networkx_edges(G, pos, edgelist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>edges, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, edge_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"solid"</span>)</span>
<span id="cb2-14">nx.draw_networkx_labels(G, pos, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, font_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, font_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, font_family<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sans-serif"</span>)</span>
<span id="cb2-15">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb2-16">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gcn-prop-model/gcn-prop-model_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img" alt="An undirected graph with 5 blue numbered nodes with added self-connections"></p>
<figcaption>5-node graph with added self-connections</figcaption>
</figure>
</div>
</div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D"> is a diagonal matrix, containing the row-wise sum of <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BA%7D"> for each entry:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%7B%5Ctilde%7BD%7D%7D%20=%0A%5Cbegin%7Bpmatrix%7D%0A5%20&amp;%200%20&amp;%200%20&amp;%200%20&amp;%200%20%5C%5C%0A0%20&amp;%202%20&amp;%200%20&amp;%200%20&amp;%200%20%5C%5C%0A0%20&amp;%200%20&amp;%202%20&amp;%200%20&amp;%200%20%5C%5C%0A0%20&amp;%200%20&amp;%200%20&amp;%202%20&amp;%200%20%5C%5C%0A0%20&amp;%200%20&amp;%200%20&amp;%200%20&amp;%203%0A%5Cend%7Bpmatrix%7D%0A"></p>
<p>To get to <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D">, each element of <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BA%7D"> is divided by <img src="https://latex.codecogs.com/png.latex?1%20/%20%5Csqrt%7Bd_%7Bi%7D%20d_%7Bj%7D%7D"> for entries in <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D">. This normalization ensures the largest eigenvalue = 1, and addresses the issue of exploding/vanishing gradients during training:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20=%0A%5Cbegin%7Bpmatrix%7D%0A%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B5%7D%5Ccdot%7B5%7D%7D%7D%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B5%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B5%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B5%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B5%7D%5Ccdot%7B3%7D%7D%7D%20%5C%5C%0A%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B2%7D%5Ccdot%7B5%7D%7D%7D%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B2%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%200%20&amp;%200%20&amp;%200%20%5C%5C%0A%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B2%7D%5Ccdot%7B5%7D%7D%7D%20&amp;%200%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B2%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%200%20&amp;%200%20%5C%5C%0A%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B2%7D%5Ccdot%7B5%7D%7D%7D%20&amp;%200%20&amp;%200%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B2%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%200%20%5C%5C%0A%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B3%7D%5Ccdot%7B5%7D%7D%7D%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B3%7D%5Ccdot%7B2%7D%7D%7D%20&amp;%200%20&amp;%200%20&amp;%20%5Cfrac%7B1%7D%7B%5Csqrt%7B%7B3%7D%5Ccdot%7B3%7D%7D%7D%20%5C%5C%0A%5Cend%7Bpmatrix%7D%0A"></p>
<p>Note that during training, <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D"> is only computed once since the values will not change.</p>
<p>Each node has an associated feature vector of length <img src="https://latex.codecogs.com/png.latex?c">. <img src="https://latex.codecogs.com/png.latex?H%5E%7B(l)%7D"> represents stacked feature vectors for all nodes, resulting in a matrix of dimension n-by-c.&nbsp; <img src="https://latex.codecogs.com/png.latex?H%5E%7B(0)%7D%20=%20X">, the original features.</p>
<p><img src="https://latex.codecogs.com/png.latex?W%5E%7B(l)%7D"> is the linear projection layer, which reduces the representation of each node from length c to length f.&nbsp;If we assume f = 64, <img src="https://latex.codecogs.com/png.latex?H%5E%7B(l+1)%7D"> becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AH%5E%7B(l+1)%7D%20=%20%5Csigma(%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DH%5E%7B(l)%7DW%5E%7B(l)%7D)%20%5Crightarrow%20%5Cmathrm%7BReLU%7D(n%20%5Ctimes%2064)%0A"></p>
<p>For a 2-layer GCN, the full propagation model for a node classification task is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Chat%7BA%7D%20&amp;=%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%5C%5C%0AZ%20&amp;=%20%5Cmathrm%7Bsoftmax%7D%5Cbig(%5Chat%7BA%7D%20%5Chspace%7B.30em%7D%5Cmathrm%7BReLU%7D(%5Chat%7BA%7DXW%5E%7B(0)%7D)%20%5Chspace%7B.30em%7D%20W%5E%7B(1)%7D%20%5Cbig)%0A%5Cend%7Balign*%7D%0A"></p>
</section>
<section id="derivation-of-propagation-model" class="level2">
<h2 class="anchored" data-anchor-id="derivation-of-propagation-model">Derivation of Propagation Model</h2>
<p>The authors begin with an expression to perform spectral convolutions on graphs:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_%7B%5Ctheta%7D%20%5Cstar%20x%20=%20U%20g_%7B%5Ctheta%7D%20U%5E%7BT%7D%20x,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?U"> is the matrix of eigenvectors of the normalized Laplacian <img src="https://latex.codecogs.com/png.latex?L%20=%20I_%7Bn%7D%20-%20D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20A%20D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D">, and <img src="https://latex.codecogs.com/png.latex?U%5E%7BT%7Dx"> represents the graph Fourier transform of <img src="https://latex.codecogs.com/png.latex?x">. However, this as expensive operation, since the spectral decomposition is <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(n%5E%7B3%7D)"> in practice. In addition, it isn’t immediately clear how one would go about incorporating this operation within the context of forward/back-propagation.</p>
<p>Citing a paper by <a href="https://arxiv.org/pdf/0912.3848.pdf">Hammond et. al</a>, they propose an approximation to <img src="https://latex.codecogs.com/png.latex?g_%7B%5Ctheta%7D%20%5Cstar%20x"> via a truncated expansion in terms of Chebyshev polynomials <img src="https://latex.codecogs.com/png.latex?T_%7Bk%7D(x)"> up to <img src="https://latex.codecogs.com/png.latex?K%5E%7Bth%7D"> order:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_%7B%5Ctheta%7D%20%5Cstar%20x%20%5Capprox%20%5Csum_%7Bk=0%7D%5E%7BK%7D%20%5Ctheta%5E%7B'%7D_%7Bk%7D%20T_%7Bk%7D(%5Ctilde%7BL%7D)x%20%5Chspace%7B.75em%7D(*),%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BL%7D%20=%20%5Cfrac%7B2%7D%7B%5Clambda_%7B%5Cmathrm%7Bmax%7D%7D%7DL%20-%20I_%7BN%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B'%7D"> is a vector of Chebyshev coefficients. Note that for the Chebyshev polynomial expansion, <img src="https://latex.codecogs.com/png.latex?T_%7B0%7D(x)%20=%201">, <img src="https://latex.codecogs.com/png.latex?T_%7B1%7D(x)%20=%20x"> and all other terms are recursively defined as <img src="https://latex.codecogs.com/png.latex?T_%7Bk%7D(x)%20=%202xT_%7Bk-1%7D(x)%20-%20T_%7Bk-2%7D(x)">.</p>
<p>By leveraging <img src="https://latex.codecogs.com/png.latex?%7B(*)%7D"> to approximate graph convolutions, the runtime complexity becomes linear in terms of the number of edges (<img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(%7C%5Cmathcal%7BE%7D%7C)"> instead of cubic in the number of nodes as is the case for the full spectral graph convolution.</p>
<p>From this point, the authors make three simplifications/assumptions which result in the propagation model introduced earlier:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AH%5E%7B(l+1)%7D%20=%20%5Csigma(%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DH%5E%7B(l)%7DW%5E%7B(l)%7D).%0A"></p>
<p>The first two simplifications are <img src="https://latex.codecogs.com/png.latex?K=1"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7B%5Cmathrm%7Bmax%7D%7D%20=%202">. Expanding <img src="https://latex.codecogs.com/png.latex?(%7B*%7D)"> with <img src="https://latex.codecogs.com/png.latex?K=1"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7B%5Cmathrm%7Bmax%7D%7D%20=%202"> results in:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_%7B%5Ctheta%7D%20%5Cstar%20x%20%5Capprox%20%5Ctheta%5E%7B'%7D_%7B0%7Dx%20+%20%5Ctheta%5E%7B'%7D_%7B1%7D(L%20-%20I_%7BN%7D)x%20=%20%5Ctheta%5E%7B'%7D_%7B0%7Dx%20-%20%5Ctheta%5E%7B'%7D_%7B1%7DD%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DAD%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7Dx%0A"></p>
<p>The third simplification sets <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20=%20%5Ctheta%5E%7B'%7D_%7B0%7D%20=%20-%5Ctheta%5E%7B'%7D_%7B1%7D">. This constrains the number of parameters to address overfitting and to minimize the number of multiplications per layer. Doing so results in:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ag_%7B%5Ctheta%7D%20%5Cstar%20x%20%5Capprox%20%5Ctheta%20%5Cbig(I_%7BN%7D%20+%20D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DAD%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Cbig)x.%0A"></p>
<p>To address the issue of exploding/vanishing gradients during training they apply a renormalization trick, essentially swapping <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?D"> with <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BA%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D">. This ensures eigenvalues are the the range [-1, 1]. We can show this is the case for our example using the adjacency matrix associated with our 5 node graph:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb3-4"></span>
<span id="cb3-5">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"></span>
<span id="cb3-8">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.Graph()</span>
<span id="cb3-9">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb3-10"></span>
<span id="cb3-11">G.add_edges_from(edges)</span>
<span id="cb3-12">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.adjacency_matrix(G).todense()</span>
<span id="cb3-13">I <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-14">D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(A, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check range of eigenvalues without renormalization.</span></span>
<span id="cb3-17">Dp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.inv(np.power(D, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>))</span>
<span id="cb3-18">evals0, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.eig(I <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Dp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Dp)</span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check range of eigenvalues after renormalization trick. </span></span>
<span id="cb3-21">Atilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> I</span>
<span id="cb3-22">Dtilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(Atilde, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-23">Dtildep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.inv(np.power(Dtilde, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>))</span>
<span id="cb3-24">evals1, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.eig(Dtildep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Atilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Dtildep)</span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">eigenvalues without renormalization: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>evals0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"eigenvalues with renormalization   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>evals1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
eigenvalues without renormalization: [0.19098 2.      1.30902 0.5     1.     ]
eigenvalues with renormalization   : [-0.22526  1.       0.59192  0.5      0.     ]</code></pre>
</div>
</div>
<p>By replacing <img src="https://latex.codecogs.com/png.latex?%5Cbig(I_%7BN%7D%20+%20D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DAD%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Cbig)"> with <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ctilde%7BA%7D%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D">, we end up with:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AZ%20=%20%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%5Ctilde%7BA%7D%5Ctilde%7BD%7D%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7DX%5CTheta,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5CTheta"> is a c-by-f matrix of filter parameters and <img src="https://latex.codecogs.com/png.latex?Z"> is the n-by-f convolved signal matrix.<br>
The final propagation model has nothing to do with the spectral decomposition: No eigenvectors/eigenvalues are actually computed. The approach was motivated by spectral convolutions on graphs, but is not a spectral method itself.</p>
<section id="pytorch-geometric-gcn-implementation" class="level3">
<h3 class="anchored" data-anchor-id="pytorch-geometric-gcn-implementation">PyTorch Geometric GCN Implementation</h3>
<p>In what follows, we demonstrate how to set up a 2-layer GCN for node classification using PyTorch Geometric and the Cora citation network.</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb5-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch_geometric.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Planetoid</span>
<span id="cb5-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch_geometric.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> T</span>
<span id="cb5-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch_geometric.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> to_networkx</span>
<span id="cb5-13"></span>
<span id="cb5-14">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda:0"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb5-15">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Planetoid(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/Cora'</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cora'</span>)</span>
<span id="cb5-16">split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T.RandomNodeSplit(num_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, num_test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.10</span>)</span>
<span id="cb5-17">graph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split(dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-18"></span></code></pre></div>
</div>
</section>
<section id="distribution-of-classes-in-cora" class="level3">
<h3 class="anchored" data-anchor-id="distribution-of-classes-in-cora">Distribution of classes in Cora</h3>
<p>The Cora dataset is a citation network, where each node represents a paper belonging to one of the following 7 classes. Our goal is to predict the labels assigned to each node in the network:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">dclasses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb6-3">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Theory"</span>,</span>
<span id="cb6-4">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reinforcement_Learning"</span>, </span>
<span id="cb6-5">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Genetic_Algorithms"</span>,</span>
<span id="cb6-6">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Neural_Networks"</span>,</span>
<span id="cb6-7">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probabilistic_Methods"</span>,</span>
<span id="cb6-8">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Case_Based"</span>,</span>
<span id="cb6-9">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rule_Learning"</span></span>
<span id="cb6-10">    }</span>
<span id="cb6-11"></span>
<span id="cb6-12">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb6-13">    pd.DataFrame(graph.y.tolist()) </span>
<span id="cb6-14">    .groupby(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).size()</span>
<span id="cb6-15">    .rename({<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"size"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-16">    )</span>
<span id="cb6-17"></span>
<span id="cb6-18">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"desc"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dclasses)</span>
<span id="cb6-19">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prop"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb6-20">df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"desc"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prop"</span>]].head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">desc</th>
<th data-quarto-table-cell-role="th">n</th>
<th data-quarto-table-cell-role="th">prop</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>Theory</td>
<td>351</td>
<td>0.129616</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>Reinforcement_Learning</td>
<td>217</td>
<td>0.080133</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>Genetic_Algorithms</td>
<td>418</td>
<td>0.154357</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>Neural_Networks</td>
<td>818</td>
<td>0.302068</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>Probabilistic_Methods</td>
<td>426</td>
<td>0.157312</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>5</td>
<td>Case_Based</td>
<td>298</td>
<td>0.110044</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>6</td>
<td>Rule_Learning</td>
<td>180</td>
<td>0.066470</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="gcn-model" class="level3">
<h3 class="anchored" data-anchor-id="gcn-model">GCN Model</h3>
<p>Next we implement GCN using PyTorch Geometric. The original PyTorch implementation is available <a href="https://github.com/tkipf/pygcn">here</a>.</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch_geometric.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GCNConv</span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb7-5"></span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GCN(nn.Module):</span>
<span id="cb7-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_features, num_classes):</span>
<span id="cb7-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb7-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GCNConv(num_features, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb7-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GCNConv(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, num_classes)</span>
<span id="cb7-12"></span>
<span id="cb7-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb7-14">        x, edge_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.x, data.edge_index</span>
<span id="cb7-15">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1(x, edge_index)</span>
<span id="cb7-16">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(x)</span>
<span id="cb7-17">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2(x, edge_index)</span>
<span id="cb7-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(output)</span>
<span id="cb7-19"></span>
<span id="cb7-20"></span>
<span id="cb7-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_classifier(model, graph, optimizer, criterion, n_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb7-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Training loop.</span></span>
<span id="cb7-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb7-25">    tm, vm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> graph.train_mask, graph.val_mask</span>
<span id="cb7-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_epochs):</span>
<span id="cb7-27">        model.train()</span>
<span id="cb7-28">        optimizer.zero_grad()</span>
<span id="cb7-29">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(graph)</span>
<span id="cb7-30">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(output[tm], graph.y[tm])</span>
<span id="cb7-31">        loss.backward()</span>
<span id="cb7-32">        optimizer.step()</span>
<span id="cb7-33"></span>
<span id="cb7-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validate. </span></span>
<span id="cb7-35">        model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb7-36">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(graph).argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-37">        correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pred[vm] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> graph.y[vm]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-38">        acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> vm.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-39"></span>
<span id="cb7-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-41">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: train loss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, val. acc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb7-42"></span>
<span id="cb7-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(model)</span></code></pre></div>
</div>
<p>Training our network:</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Capture activations from last hidden layer to re-create plot</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from paper.</span></span>
<span id="cb8-4">activations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_activation(name):</span>
<span id="cb8-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> hook(gcn, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>, output):</span>
<span id="cb8-7">        activations[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output.detach()</span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(hook)</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put graph on GPU if available.</span></span>
<span id="cb8-11">graph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> graph.to(device)</span>
<span id="cb8-12">gcn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GCN(num_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1433</span>, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>).to(device)</span>
<span id="cb8-13">gcn.conv2.register_forward_hook(get_activation(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conv2"</span>))</span>
<span id="cb8-14">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(gcn.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>)</span>
<span id="cb8-15">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb8-16">gcn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_classifier(gcn, graph, optimizer, criterion)</span>
<span id="cb8-17"></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute test accuracy.</span></span>
<span id="cb8-19">gcn.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb8-20">pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gcn(graph).argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-21">correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pred[graph.test_mask] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> graph.y[graph.test_mask]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb8-22">test_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> graph.test_mask.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb8-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Test accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 0: train loss=1.932, val. acc=0.303.
Epoch 10: train loss=0.377, val. acc=0.862.
Epoch 20: train loss=0.181, val. acc=0.867.
Epoch 30: train loss=0.119, val. acc=0.857.
Epoch 40: train loss=0.088, val. acc=0.852.
Epoch 50: train loss=0.069, val. acc=0.845.
Epoch 60: train loss=0.058, val. acc=0.847.
Epoch 70: train loss=0.050, val. acc=0.850.
Epoch 80: train loss=0.044, val. acc=0.855.
Epoch 90: train loss=0.040, val. acc=0.855.

Test accuracy: 0.893
</code></pre>
</div>
</div>
</section>
<section id="display-hidden-layer-activations-with-t-sne" class="level3">
<h3 class="anchored" data-anchor-id="display-hidden-layer-activations-with-t-sne">Display hidden layer activations with t-SNE</h3>
<p>Finally, we can display a lower dimensional representation of the final hidden layer node embeddings using t-SNE. The resulting plot looks similar to figure 1b from the original paper, but experimenting with the t-SNE perplexity parameter will probably get you even closer:</p>
<div id="cell-16" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.manifold <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TSNE</span>
<span id="cb10-2"></span>
<span id="cb10-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> activations[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conv2"</span>].cpu().numpy()</span>
<span id="cb10-4">Xemb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TSNE(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>, init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'random'</span>, perplexity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>).fit_transform(X)</span>
<span id="cb10-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Xemb.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Xemb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-8">ax.scatter(Xemb[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], Xemb[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred.cpu(), alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>)</span>
<span id="cb10-9">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb10-10">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Xemb.shape: (2708, 2)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gcn-prop-model/gcn-prop-model_files/figure-html/cell-9-output-2.png" class="img-fluid figure-img" alt="Lower dimensional representation of the final hidden layer using t-SNE"></p>
<figcaption>Lower dimensional representation of the final hidden layer using t-SNE</figcaption>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/gcn-prop-model/gcn-prop-model.html</guid>
  <pubDate>Mon, 05 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Bayesian Linear Regression via Gibbs Sampling</title>
  <link>https://www.jtrive.com/posts/gibbs-sampling-linear-regression/gibbs-sampling-linear-regression.html</link>
  <description><![CDATA[ 





<p>Markov Chain Monte Carlo (MCMC) methods can be used to estimate the parameters of linear regression models. In this post, the distributional forms and algorithms associated with two Gibbs sampling approaches are outlined: the full conditionals approach and the composition method.</p>
<p>The dataset used in what follows is available <a href="https://gist.github.com/jtrive84/96757393423b2599c7d5da361fdf024b/raw/82000835b7c3b70dcf21a9ab43c59db700b78136/Refrigerator.csv">here</a> and represents refrigerator price as a function of a number of features. The objective is to estimate PRICE as a function of ECOST, FSIZE, SHELVES and FEATURES, where:</p>
<ul>
<li><strong>PRICE</strong>: Response, cost of refrigerator.<br>
</li>
<li><strong>FSIZE</strong>: Size of freezer compartment.<br>
</li>
<li><strong>ECOST</strong>: Annual energy cost to operate refrigerator.<br>
</li>
<li><strong>SHELVES</strong>: Number of shelves.</li>
<li><strong>FEATURES</strong>: Number of features.</li>
</ul>
<section id="i.-the-full-conditionals-method" class="level3">
<h3 class="anchored" data-anchor-id="i.-the-full-conditionals-method">I. The Full Conditionals Method</h3>
<p>First determine the joint kernel, which is the product of the likelihood and all prior distributions. The joint kernel will be proportional to the posterior distribution:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0Af(%5Cbeta,%20%5Csigma%5E%7B2%7D%7CX,%20y)%20&amp;%5Cpropto%20f(y%7CX,%20%5Cbeta,%20%5Csigma%5E%7B2%7D)%20%5Ctimes%20f(%5Cbeta)%20%5Ctimes%20f(%5Csigma%5E%7B2%7D).%0A%5Cend%7Balign%7D%0A"></p>
<p><br></p>
<p>The likelihood, <img src="https://latex.codecogs.com/png.latex?f(y%7CX,%20%5Cbeta,%20%5Csigma%5E%7B2%7D)">, is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0Ay%7CX,%20%5Cbeta,%20%5Csigma%5E%7B2%7D%20&amp;%5Csim%20%5Cmathcal%7BN%7D(X%5Cbeta,%20%5Csigma%5E%7B2%7DI)%5C%5C%0A&amp;=%20%5Cprod_%7Bi=1%7D%5E%7Bn%7D%20f(y_%7Bi%7D%7Cx_%7Bi%7D,%20%5Cbeta,%20%5Csigma%5E%7B2%7D)%20%5C%5C%0A&amp;=%20(2%5Cpi%5Csigma%5E%7B2%7D)%5E%7B-n/2%7D%20%5Cmathrm%7Bexp%7D%5CBig%5C%7B%5Cfrac%7B1%7D%7B2%5Csigma%5E%7B2%7D%7D%5Csum_%7Bi=1%7D%5E%7Bn%7D%20(y_%7Bi%7D%20-%20%5Cbeta%5E%7BT%7Dx_%7Bi%7D)%5E%7B2%7D%5CBig%5C%7D%5C%5C%0A&amp;=%20(2%5Cpi%5Csigma%5E%7B2%7D)%5E%7B-n/2%7D%5Cmathrm%7Bexp%7D%5CBig%5C%7B-%5Cfrac%7B1%7D%7B2%5Csigma%5E%7B2%7D%7D(y-X%5Cbeta)%5E%7BT%7D(y-X%5Cbeta)%5CBig%5C%7D%0A%5Cend%7Balign%7D%0A"> <br></p>
<p>For the parameter vector <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> we assume an improper uniform prior over the real line. For the variance, we assume a uniform prior over the real line for <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Blog%7D(%5Csigma%5E%7B2%7D)">. If we transform the uniform prior on <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7Blog%7D(%5Csigma%5E%7B2%7D)"> into a density for <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D">, we obtain <img src="https://latex.codecogs.com/png.latex?f(%5Csigma%5E%7B2%7D)%20%5Cpropto%201/%5Csigma%5E%7B2%7D">. This is a common reference prior for the variance used within the context of Bayesian linear regression.</p>
<p>Since the prior distribution for the parameter vector <img src="https://latex.codecogs.com/png.latex?f(%5Cbeta)"> can be treated as a multiplicative constant which can be ignored, the expression for the posterior reduces to:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0Af(%5Cbeta,%20%5Csigma%5E%7B2%7D%7CX,%20y)%20&amp;%5Cpropto%20%5Cfrac%7B1%7D%7B%5Csigma%5E%7B2%7D%7D%20%5Ctimes%20(2%5Cpi%5Csigma%5E%7B2%7D)%5E%7B-n/2%7D%5Cmathrm%7Bexp%7D%5CBig%5C%7B-%5Cfrac%7B1%7D%7B2%5Csigma%5E%7B2%7D%7D(y-X%5Cbeta)%5E%7BT%7D(y-X%5Cbeta)%5CBig%5C%7D%5C%5C%0A&amp;%5Cpropto%20(%5Csigma%5E%7B2%7D)%5E%7B-(n/2%20+%201)%7D%5Cmathrm%7Bexp%7D%5CBig%5C%7B-%5Cfrac%7B1%7D%7B2%5Csigma%5E%7B2%7D%7D(y-X%5Cbeta)%5E%7BT%7D(y-X%5Cbeta)%5CBig%5C%7D.%5C%5C%0A%5Cend%7Balign%7D%0A"></p>
<p>Note that posterior distribution is asymptotically equivalent to the expression for the model likelihood.</p>
<p>Gibbs sampling requires identifying the full conditional distribution for each parameter, holding all other parameters constant. To find the full conditional distribution for <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, select only the terms from the joint kernel that include <img src="https://latex.codecogs.com/png.latex?%5Cbeta">. Doing so results in:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Cbeta%7CX,%20y,%20%5Csigma%5E%7B2%7D)%20%5Cpropto%20%5Cmathrm%7Bexp%7D%5CBig%5C%7B-%5Cfrac%7B1%7D%7B2%5Csigma%5E%7B2%7D%7D(y-X%5Cbeta)%5E%7BT%7D(y-X%5Cbeta)%5CBig%5C%7D%0A"> <br></p>
<p>After distributing the transpose, removing multiplicative constants and performing a bit of reorganization, we arrive at:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Cbeta%7CX,%20y,%20%5Csigma%5E%7B2%7D)%20%5Cpropto%20%5Cmathrm%7Bexp%7D%5CBig%5C%7B-%5Cfrac%7B1%7D%7B2%5Csigma%5E%7B2%7D%7D%5B%5Cbeta%5E%7BT%7DX%5E%7BT%7DX%5Cbeta%20-%202%5Cbeta%5E%7BT%7DX%5E%7BT%7Dy%5D%5CBig%5C%7D.%5C%5C%0A"></p>
<p>Upon completing the square, we find the distribution for <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> to be normal with mean <img src="https://latex.codecogs.com/png.latex?(X%5E%7BT%7DX)%5E%7B-1%7DX%5E%7BT%7Dy%5Chspace%7B.25em%7D"> and variance <img src="https://latex.codecogs.com/png.latex?%5Chspace%7B.25em%7D%5Csigma%5E%7B2%7D(X%5E%7BT%7DX)%5E%7B-1%7D">.</p>
<p>For <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D">, with <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> assumed fixed, we obtain:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Csigma%5E%7B2%7D%7CX,%20y,%20%5Cbeta)%20%5Cpropto%20(%5Csigma%5E%7B2%7D)%5E%7B-(n/2%20+%201)%7D%5Cmathrm%7Bexp%7D%5CBig%5C%7B-%5Cfrac%7B%5Cmathrm%7BSSR%7D%7D%7B2%5Csigma%5E%7B2%7D%7D%5CBig%5C%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BSSR%7D"> represents the sum of squared residuals under the specified value of <img src="https://latex.codecogs.com/png.latex?%5Cbeta">. This is proportional to an inverse gamma distribution with <img src="https://latex.codecogs.com/png.latex?a%20=%20n/2"> and <img src="https://latex.codecogs.com/png.latex?b%20=%20%5Cmathrm%7BSSR%7D/2">.</p>
<section id="full-conditionals-approach-for-sampling-from-the-posterior-distribution" class="level4">
<h4 class="anchored" data-anchor-id="full-conditionals-approach-for-sampling-from-the-posterior-distribution">Full Conditionals Approach for Sampling from the Posterior Distribution:</h4>
<ol type="1">
<li><p>Establish starting values for <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7Bp%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D">. We use <img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(0)%7D%20=%20%5Chat%5Cbeta_%7Bols%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Csigma_%7B0%7D%5E%7B2%7D%20=%20%5Cmathrm%7BSSR%7D%20/%20(n%20-%20p)"></p></li>
<li><p>Sample <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7Bp%7D"> from multivariate normal distribution with <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D"> fixed.</p></li>
<li><p>Sample <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D"> from inverse gamma distribution with <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7Bp%7D"> fixed.</p></li>
</ol>
<p>In the code below, we run the sampler for 10,000 iterations, discarding the first 1,000 samples.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">The full conditionals Gibbs sampling method. </span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    PRICE ~ "ECOST" + "FSIZE" + "SHELVES" + "FEATURES"</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> math <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqrt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np </span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cholesky</span>
<span id="cb1-13"></span>
<span id="cb1-14">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-15">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-16">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb1-17">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-18"></span>
<span id="cb1-19"></span>
<span id="cb1-20">data_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.github.com/jtrive84/96757393423b2599c7d5da361fdf024b/raw/82000835b7c3b70dcf21a9ab43c59db700b78136/Refrigerator.csv"</span></span>
<span id="cb1-21"></span>
<span id="cb1-22">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(data_url)</span>
<span id="cb1-23"></span>
<span id="cb1-24">variates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ECOST"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FSIZE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SHELVES"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FEATURES"</span>]</span>
<span id="cb1-25">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[variates].values</span>
<span id="cb1-26">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PRICE"</span>].values.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-27">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate([np.ones(y.size).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), X], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-28"></span>
<span id="cb1-29">n, p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.shape</span>
<span id="cb1-30">M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb1-31">burnin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb1-32">prng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.RandomState(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize arrays to hold posterior samples.</span></span>
<span id="cb1-35">betas, sigma2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros([M, p]), np.ones(M)</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize parameter arrays and compute covariance matrix.</span></span>
<span id="cb1-38">b_ols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.inv(X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y</span>
<span id="cb1-39">V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.inv(X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X)</span>
<span id="cb1-40">sigma2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> b_ols).T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> b_ols) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p)).item()</span>
<span id="cb1-41">betas[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b_ols.T</span>
<span id="cb1-42"></span>
<span id="cb1-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gibbs sampling from full conditionals. At each iteration, p independent </span></span>
<span id="cb1-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standard normal random variates are sampled, which are transformed into </span></span>
<span id="cb1-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a draw from a multivariate normal density with mean betas[i, :] and </span></span>
<span id="cb1-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># covariance V. </span></span>
<span id="cb1-47"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, M):</span>
<span id="cb1-48">    </span>
<span id="cb1-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample from full conditional distribution for betas.</span></span>
<span id="cb1-50">    betas[ii,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b_ols.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> prng.randn(p).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> cholesky(sigma2[ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> V)</span>
<span id="cb1-51">    </span>
<span id="cb1-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample from full conditional distribution for variance. </span></span>
<span id="cb1-53">    sigma2[ii] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.invgamma.rvs(</span>
<span id="cb1-54">        a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n, </span>
<span id="cb1-55">        scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> betas[ii,:].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> betas[ii,:].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))).item(),</span>
<span id="cb1-56">        random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prng</span>
<span id="cb1-57">        )</span>
<span id="cb1-58"></span>
<span id="cb1-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove burnin samples.</span></span>
<span id="cb1-60">betas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> betas[burnin:,:]</span>
<span id="cb1-61">sigma2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigma2[burnin:]</span></code></pre></div>
</div>
<p>Traceplots can be produced to visualize sampling variability across iterations:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine beta and sigma2 arrays to create traceplots. </span></span>
<span id="cb2-2">varnames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intercept"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> variates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma2"</span>]</span>
<span id="cb2-3">Xall1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.hstack([betas, sigma2.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb2-4"></span>
<span id="cb2-5">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb2-6"></span>
<span id="cb2-7">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> indx, (varname, (ii, jj)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(varnames, indices)):</span>
<span id="cb2-10">    </span>
<span id="cb2-11">    ax[ii, jj].set_title(varname, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb2-12">    ax[ii, jj].plot(Xall1[:,indx], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span>
<span id="cb2-13">    ax[ii, jj].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb2-14">    ax[ii, jj].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-15">    ax[ii, jj].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-16">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb2-17">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb2-18">    ax[ii, jj].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb2-19">    ax[ii, jj].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb2-20">    ax[ii, jj].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb2-21">    ax[ii, jj].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb2-22"></span>
<span id="cb2-23">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Traceplots: Full Conditionals Approach"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-24">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gibbs-sampling-linear-regression/gibbs-sampling-linear-regression_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img" alt="Traceplot for each feature in model using full conditionals approach"></p>
<figcaption>Traceplot for each feature in model using full conditionals approach</figcaption>
</figure>
</div>
</div>
</div>
<p>Histograms for each parameter can be generated from the posterior samples:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create histograms from posterior samples with overlaid ols estimates.</span></span>
<span id="cb3-2">hist_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff7595"</span></span>
<span id="cb3-3">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb3-4"></span>
<span id="cb3-5">plt_ols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(b_ols.ravel(), sigma2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb3-6"></span>
<span id="cb3-7">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> indx, (varname, (ii, jj)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(varnames, indices)):</span>
<span id="cb3-10">    </span>
<span id="cb3-11">    ax[ii, jj].set_title(varname, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb3-12">    ax[ii, jj].hist(</span>
<span id="cb3-13">        Xall1[:,indx], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hist_color, </span>
<span id="cb3-14">        edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb3-15">        )</span>
<span id="cb3-16">    label0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \sigma_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{0}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{2}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> indx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \beta_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{OLS}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span> </span>
<span id="cb3-17">    label1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \sigma_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{MCMC}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{2}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> indx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \beta_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{MCMC}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span> </span>
<span id="cb3-18">    ax[ii,jj].axvline(plt_ols[indx], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>label0)</span>
<span id="cb3-19">    ax[ii,jj].axvline(Xall1[:,indx].mean(), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>label1)</span>
<span id="cb3-20">    ax[ii, jj].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb3-21">    ax[ii,jj].set_yticklabels([])</span>
<span id="cb3-22">    ax[ii, jj].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-23">    ax[ii, jj].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-24">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb3-25">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb3-26">    ax[ii, jj].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb3-27">    ax[ii, jj].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb3-28">    ax[ii, jj].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb3-29">    ax[ii, jj].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb3-30">    ax[ii,jj].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x-small"</span>)</span>
<span id="cb3-31"></span>
<span id="cb3-32">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histograms: Full Conditionals Approach"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-33">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gibbs-sampling-linear-regression/gibbs-sampling-linear-regression_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img" alt="Histogram for each feature using full conditionals approach"></p>
<figcaption>Histogram for each feature using full conditionals approach</figcaption>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="ii.-composition-method" class="level3">
<h3 class="anchored" data-anchor-id="ii.-composition-method">II. Composition Method</h3>
<p>The composition method can also be used to generate posterior samples for <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D">. Using this approach, the posterior distribution is decomposed into 1) the conditional distribution for <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> given <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D"> and 2) the marginal distribution for <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Cbeta,%20%5Csigma%5E%7B2%7D%7C%20X,%20y)%20%5Cpropto%20f(%5Cbeta%7C%5Csigma%5E%7B2%7D,%20X,%20y)%20%5Ctimes%20f(%5Csigma%5E%7B2%7D%7CX,%20y)%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?f(%5Csigma%5E%7B2%7D%7CX,%20y)"> is an inverse gamma distribution with <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%20(n%20-%20p)%20/%202"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20=%20(n%20-%20p)%20%5Ctimes%20%5Cmathrm%7BSSR%7D%20/%202">, where <img src="https://latex.codecogs.com/png.latex?n"> is the number of observations in the dataset and <img src="https://latex.codecogs.com/png.latex?p"> the number of predictors in <img src="https://latex.codecogs.com/png.latex?X">. <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BSSR%7D"> represents the sum of squared residuals obtained from the OLS estimate.</p>
<p>As before, the conditional distribution for <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, <img src="https://latex.codecogs.com/png.latex?f(%5Cbeta%7C%5Csigma%5E%7B2%7D,%20X,%20y)">, is multivariate normal with mean <img src="https://latex.codecogs.com/png.latex?(X%5E%7BT%7DX)%5E%7B-1%7DX%5E%7BT%7Dy"> and variance <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D(X%5E%7BT%7DX)%5E%7B-1%7D">.</p>
<p>The composition method is faster than the full conditionals method since we can draw all samples from <img src="https://latex.codecogs.com/png.latex?f(%5Csigma%5E%7B2%7D%7CX,%20y)"> upfront.</p>
<section id="composition-method-approach-for-sampling-from-the-posterior-distribution" class="level4">
<h4 class="anchored" data-anchor-id="composition-method-approach-for-sampling-from-the-posterior-distribution">Composition Method Approach for Sampling from the Posterior Distribution:</h4>
<ol type="1">
<li><p>Compute <img src="https://latex.codecogs.com/png.latex?%5Chat%20%5Cbeta"> via OLS and <img src="https://latex.codecogs.com/png.latex?V%20=%20(X%5E%7BT%7DX)%5E%7B-1%7D">.</p></li>
<li><p>Compute <img src="https://latex.codecogs.com/png.latex?SSR%20=%20%5Cfrac%7B1%7D%7Bn%20-%20p%7D(y%20-%20X%5Chat%20%5Cbeta)%5E%7BT%7D(y%20-%20X%5Chat%20%5Cbeta)">.</p></li>
<li><p>Draw <img src="https://latex.codecogs.com/png.latex?m"> samples from <img src="https://latex.codecogs.com/png.latex?IG%5Cbig(%5Cfrac%7Bn%20-%20p%7D%7B2%7D,%20%5Cfrac%7B(n%20-%20p)%20%5Ctimes%20%5Cmathrm%7BSSR%7D%7D%7B2%7D%5Cbig)">.</p></li>
<li><p>For <img src="https://latex.codecogs.com/png.latex?i%20=%201,%20%5Ccdots,%20m">: Draw <img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(i)%7D"> from <img src="https://latex.codecogs.com/png.latex?f(%5Cbeta%7C%5Csigma%5E%7B2(i)%7D,%20X,%20y)">: <img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B(i)%7D%20%5Csim%20%5Cmathcal%7BN%7D(%5Chat%20%5Cbeta,%20%5Csigma%5E%7B2(i)%7DV)">.</p></li>
</ol>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Drawing posterior samples using the composition method.</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    PRICE ~ "ECOST" + "FSIZE" + "SHELVES" + "FEATURES"</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-6"></span>
<span id="cb4-7">n, p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.shape</span>
<span id="cb4-8">M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb4-9">burnin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb4-10">prng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.RandomState(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize betas to hold posterior samples.</span></span>
<span id="cb4-13">betas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros([M, p])</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute OLS estimate, V and SSR. </span></span>
<span id="cb4-16">b_ols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.inv(X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y</span>
<span id="cb4-17">V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.inv(X.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X)</span>
<span id="cb4-18">SSR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> b_ols).T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> b_ols) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p)</span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw M samples from marginal distribution for sigma2.</span></span>
<span id="cb4-21">sigma2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stats.invgamma.rvs(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p), scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SSR, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>M, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prng)</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate sequence of beta draws for each value in sigma2.</span></span>
<span id="cb4-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(M):</span>
<span id="cb4-25">    betas[ii,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b_ols.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> prng.randn(p).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> cholesky(sigma2[ii] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> V)</span>
<span id="cb4-26"></span></code></pre></div>
</div>
<p>As before, we produce traceplots for each variable and <img src="https://latex.codecogs.com/png.latex?sigma%5E2">:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">varnames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intercept"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> variates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma2"</span>]</span>
<span id="cb5-2">Xall2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.hstack([betas, sigma2.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb5-3"></span>
<span id="cb5-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb5-5"></span>
<span id="cb5-6">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> indx, (varname, (ii, jj)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(varnames, indices)):</span>
<span id="cb5-9">    </span>
<span id="cb5-10">    ax[ii, jj].set_title(varname, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb5-11">    ax[ii, jj].plot(Xall2[:,indx], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span>
<span id="cb5-12">    ax[ii, jj].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb5-13">    ax[ii, jj].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb5-14">    ax[ii, jj].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb5-15">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb5-16">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb5-17">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb5-18">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb5-19">    ax[ii, jj].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb5-20">    ax[ii, jj].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb5-21">    ax[ii, jj].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb5-22">    ax[ii, jj].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb5-23"></span>
<span id="cb5-24">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Traceplots: Composition Method"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb5-25">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gibbs-sampling-linear-regression/gibbs-sampling-linear-regression_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img" alt="Traceplot for each feature in model using composition method"></p>
<figcaption>Traceplot for each feature in model using composition method</figcaption>
</figure>
</div>
</div>
</div>
<p>As well as histograms:</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">hist_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff7595"</span></span>
<span id="cb6-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb6-3"></span>
<span id="cb6-4">plt_ols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(b_ols.ravel(), sigma2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb6-5"></span>
<span id="cb6-6">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> indx, (varname, (ii, jj)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(varnames, indices)):</span>
<span id="cb6-9">    </span>
<span id="cb6-10">    ax[ii, jj].set_title(varname, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb6-11">    ax[ii, jj].hist(</span>
<span id="cb6-12">        Xall2[:,indx], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hist_color, </span>
<span id="cb6-13">        edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb6-14">        )</span>
<span id="cb6-15">    label0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \sigma_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{0}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{2}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> indx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \beta_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{OLS}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span> </span>
<span id="cb6-16">    label1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \sigma_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{MCMC}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{2}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> indx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \beta_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{MCMC}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span> </span>
<span id="cb6-17">    ax[ii,jj].axvline(plt_ols[indx], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>label0)</span>
<span id="cb6-18">    ax[ii,jj].axvline(Xall2[:,indx].mean(), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>label1)</span>
<span id="cb6-19">    ax[ii, jj].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb6-20">    ax[ii,jj].set_yticklabels([])</span>
<span id="cb6-21">    ax[ii, jj].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb6-22">    ax[ii, jj].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb6-23">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-24">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb6-25">    ax[ii, jj].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-26">    ax[ii, jj].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-27">    ax[ii, jj].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb6-28">    ax[ii, jj].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb6-29">    ax[ii,jj].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x-small"</span>)</span>
<span id="cb6-30"></span>
<span id="cb6-31">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histograms: Composition Method"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb6-32">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gibbs-sampling-linear-regression/gibbs-sampling-linear-regression_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img" alt="Histogram for each feature using composition method"></p>
<figcaption>Histogram for each feature using composition method</figcaption>
</figure>
</div>
</div>
</div>
<p>Posterior percentiles from the full conditionals approach and composition method can be compared:</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Comparing posterior percentiles for full conditionals and composition approaches.</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-4"></span>
<span id="cb7-5">peval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>]</span>
<span id="cb7-6">pcols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> peval]</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> indx, varname <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(varnames):</span>
<span id="cb7-9">    </span>
<span id="cb7-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine percentiles generated via full-conditionals.</span></span>
<span id="cb7-11">    df1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb7-12">        np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(np.percentile(Xall1[:, indx], q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>peval), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb7-13">        columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pcols,index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>varname<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: conditionals"</span>]</span>
<span id="cb7-14">        )</span>
<span id="cb7-15">    </span>
<span id="cb7-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine percentiles generated via composition method.</span></span>
<span id="cb7-17">    df2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb7-18">        np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(np.percentile(Xall2[:, indx], q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>peval), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb7-19">        columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pcols, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>varname<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: composition"</span>]</span>
<span id="cb7-20">        )</span>
<span id="cb7-21">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df1, df2])</span>
<span id="cb7-22">    display(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1%</th>
<th data-quarto-table-cell-role="th">5%</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">95%</th>
<th data-quarto-table-cell-role="th">99%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">intercept: conditionals</td>
<td>-25.01</td>
<td>51.28</td>
<td>150.96</td>
<td>221.28</td>
<td>289.90</td>
<td>386.74</td>
<td>464.17</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">intercept: composition</td>
<td>-21.44</td>
<td>50.76</td>
<td>152.43</td>
<td>221.71</td>
<td>288.77</td>
<td>387.09</td>
<td>461.41</td>
</tr>
</tbody>
</table>

</div>
</div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1%</th>
<th data-quarto-table-cell-role="th">5%</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">95%</th>
<th data-quarto-table-cell-role="th">99%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ECOST: conditionals</td>
<td>-10.34</td>
<td>-8.41</td>
<td>-5.77</td>
<td>-4.0</td>
<td>-2.20</td>
<td>0.39</td>
<td>2.62</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ECOST: composition</td>
<td>-10.20</td>
<td>-8.34</td>
<td>-5.76</td>
<td>-4.0</td>
<td>-2.21</td>
<td>0.38</td>
<td>2.28</td>
</tr>
</tbody>
</table>

</div>
</div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1%</th>
<th data-quarto-table-cell-role="th">5%</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">95%</th>
<th data-quarto-table-cell-role="th">99%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">FSIZE: conditionals</td>
<td>38.83</td>
<td>58.12</td>
<td>85.95</td>
<td>103.97</td>
<td>121.74</td>
<td>148.78</td>
<td>169.22</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">FSIZE: composition</td>
<td>39.05</td>
<td>57.93</td>
<td>85.41</td>
<td>103.99</td>
<td>122.53</td>
<td>148.96</td>
<td>168.51</td>
</tr>
</tbody>
</table>

</div>
</div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1%</th>
<th data-quarto-table-cell-role="th">5%</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">95%</th>
<th data-quarto-table-cell-role="th">99%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">SHELVES: conditionals</td>
<td>-2.56</td>
<td>5.70</td>
<td>17.33</td>
<td>25.19</td>
<td>32.86</td>
<td>44.09</td>
<td>52.25</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">SHELVES: composition</td>
<td>-2.71</td>
<td>5.68</td>
<td>17.42</td>
<td>24.81</td>
<td>32.72</td>
<td>44.32</td>
<td>52.66</td>
</tr>
</tbody>
</table>

</div>
</div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1%</th>
<th data-quarto-table-cell-role="th">5%</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">95%</th>
<th data-quarto-table-cell-role="th">99%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">FEATURES: conditionals</td>
<td>11.87</td>
<td>15.60</td>
<td>21.25</td>
<td>24.87</td>
<td>28.68</td>
<td>34.11</td>
<td>38.15</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">FEATURES: composition</td>
<td>11.79</td>
<td>15.68</td>
<td>21.13</td>
<td>24.86</td>
<td>28.46</td>
<td>33.87</td>
<td>37.89</td>
</tr>
</tbody>
</table>

</div>
</div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1%</th>
<th data-quarto-table-cell-role="th">5%</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">95%</th>
<th data-quarto-table-cell-role="th">99%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">sigma2: conditionals</td>
<td>3209.36</td>
<td>3706.92</td>
<td>4620.93</td>
<td>5465.36</td>
<td>6527.58</td>
<td>8570.83</td>
<td>10609.79</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">sigma2: composition</td>
<td>3194.00</td>
<td>3691.71</td>
<td>4649.74</td>
<td>5467.54</td>
<td>6490.48</td>
<td>8482.73</td>
<td>10295.27</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="posterior-predictive-samples" class="level3">
<h3 class="anchored" data-anchor-id="posterior-predictive-samples">Posterior Predictive Samples</h3>
<p>For a new set of predictors <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BX%7D">, we may be interested in quantifying the variability in the price estimate given our model. This can be accomplished by sampling from the posterior predictive distribution, <img src="https://latex.codecogs.com/png.latex?f(%5Ctilde%7By%7D%7Cy)">. If <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D"> were known exactly, the distribution for <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7By%7D"> would be completely specified as <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D(%5Ctilde%7BX%7D%5Cbeta,%20%5Csigma%5E%7B2%7DI)">. But since we have only estimates of <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D">, we need to sample from the posterior predictive distribution <img src="https://latex.codecogs.com/png.latex?f(%5Ctilde%7By%7D%7Cy)"> as follows:</p>
<ol type="1">
<li>For <img src="https://latex.codecogs.com/png.latex?i%20=%201,%20%5Ccdots,%20n">: Draw <img src="https://latex.codecogs.com/png.latex?(%5Cbeta%5E%7B(i)%7D,%20%5Csigma%5E%7B2(i)%7D)"> from posterior samples.</li>
<li>Draw <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7By%7D%5E%7B(i)%7D%20%5Csim%20%5Cmathcal%7BN%7D(%5Ctilde%7BX%7D%5Cbeta%5E%7B(i)%7D,%20%5Csigma%5E%7B2%7B(i)%7D%7DI)">.</li>
</ol>
<p>The code that follows generates 5000 posterior predictive samples for a new set of predictors.</p>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generating posterior predictive samples for a new set of predictors.</span></span>
<span id="cb8-3"></span>
<span id="cb8-4">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb8-5">Xnew <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>]</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine which 5000 parameter sets to use for sampling.</span></span>
<span id="cb8-8">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prng.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(Xall2.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb8-9">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Xall2[indices,:]</span>
<span id="cb8-10">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb8-13">    beta, v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params[ii, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], params[ii, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb8-14">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(beta, Xnew)</span>
<span id="cb8-15">    y_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prng.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sqrt(v))</span>
<span id="cb8-16">    samples.append(y_ii)</span>
<span id="cb8-17"></span>
<span id="cb8-18">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(samples)</span></code></pre></div>
</div>
<p>Viewing the histogram of posterior predictive samples:</p>
<div id="cell-18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">hist_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff7595"</span></span>
<span id="cb9-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb9-3">ax.set_title(</span>
<span id="cb9-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior predictive samples for new predictors"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb9-5">    )</span>
<span id="cb9-6">ax.hist(</span>
<span id="cb9-7">    samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hist_color, </span>
<span id="cb9-8">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb9-9">    )</span>
<span id="cb9-10">label0, label1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{y}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{OLS}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat y_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{MCMC}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span> </span>
<span id="cb9-11">ax.axvline(np.dot(b_ols.T, Xnew), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>label0)</span>
<span id="cb9-12">ax.axvline(samples.mean(), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>label1)</span>
<span id="cb9-13">ax.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb9-14">ax.set_yticklabels([])</span>
<span id="cb9-15">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb9-16">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb9-17">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb9-18">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb9-19">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb9-20">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb9-21">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb9-22">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb9-23">ax.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb9-24">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gibbs-sampling-linear-regression/gibbs-sampling-linear-regression_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img" alt="Histogram of posterior predictive samples"></p>
<figcaption>Histogram of posterior predictive samples</figcaption>
</figure>
</div>
</div>
</div>
<p>Finally, percentiles of the posterior predictive samples:</p>
<div id="cell-20" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2">peval <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>]</span>
<span id="cb10-3">pcols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> peval]</span>
<span id="cb10-4"></span>
<span id="cb10-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb10-6">    np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(np.percentile(samples, q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>peval), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb10-7">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pcols,index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posterior predictive samples"</span>]</span>
<span id="cb10-8">    )</span>
<span id="cb10-9">df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1%</th>
<th data-quarto-table-cell-role="th">5%</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">95%</th>
<th data-quarto-table-cell-role="th">99%</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">posterior predictive samples</td>
<td>464.64</td>
<td>530.08</td>
<td>613.37</td>
<td>673.32</td>
<td>731.45</td>
<td>813.15</td>
<td>883.41</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>


</section>

 ]]></description>
  <category>Statistical Modeling</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/gibbs-sampling-linear-regression/gibbs-sampling-linear-regression.html</guid>
  <pubDate>Mon, 05 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Bessel’s Correction</title>
  <link>https://www.jtrive.com/posts/bessels-correction/bessels-correction.html</link>
  <description><![CDATA[ 





<p>Bessel’s correction is the use of <img src="https://latex.codecogs.com/png.latex?n-1"> instead of <img src="https://latex.codecogs.com/png.latex?n"> in the sample variance formula where <img src="https://latex.codecogs.com/png.latex?n"> is the number of observations in a sample. This method corrects the bias in the estimation of the population variance.</p>
<p>Recall that <em>bias</em> is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7BBias%7D(%5Ctheta)%20=%20E%5B%5Chat%7B%5Ctheta%7D%5D%20-%20%5Ctheta,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> represents the actual parameter value, and <img src="https://latex.codecogs.com/png.latex?E%5B%5Chat%7B%5Ctheta%7D%5D"> is an estimator of the parameter <img src="https://latex.codecogs.com/png.latex?%5Ctheta">. A desirable property of an estimator is that its expected value equals the parameter being estimated, or <img src="https://latex.codecogs.com/png.latex?E%5B%5Chat%7B%5Ctheta%7D%5D%20=%20%5Ctheta">. When this occurs, the estimator is said to be <em>unbiased</em>. Let <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D"> represent the population variance, given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Csigma%7D%5E%7B2%7D%20=%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5E%7Bn%7D(Y_%7Bi%7D%20-%20%5Cbar%7BY%7D)%5E%7B2%7D.%0A"></p>
<p>To show that <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Csigma%7D%5E%7B2%7D"> is a biased estimator for <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D">, let <img src="https://latex.codecogs.com/png.latex?Y_%7B1%7D,%20Y_%7B2%7D,%20%5Ccdots,%20Y_%7Bn%7D"> be a random sample with <img src="https://latex.codecogs.com/png.latex?E%5BY_%7Bi%7D%5D%20=%20%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?Var%5BY_%7Bi%7D%5D%20=%20%5Csigma%5E%7B2%7D">. First, note that</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bi=1%7D%5E%7Bn%7D(Y_%7Bi%7D%20-%20%5Cbar%7BY%7D)%5E%7B2%7D%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7DY_%7Bi%7D%5E%7B2%7D%20-%20n%5Cbar%7BY%7D%5E%7B2%7D,%0A"></p>
<p>and as a result</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%5CBig%5B%5Csum_%7Bi=1%7D%5E%7Bn%7D(Y_%7Bi%7D%20-%20%5Cbar%7BY%7D)%5E%7B2%7D%5CBig%5D%20=%20E%5CBig(%5Csum_%7Bi=1%7D%5E%7Bn%7DY_%7Bi%7D%5E%7B2%7D%5CBig)%20-%20nE(%5Cbar%7BY%7D%5E%7B2%7D)%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7DE(Y_%7Bi%7D%5E%7B2%7D)%20-%20nE(%5Cbar%7BY%7D%5E%7B2%7D).%0A"></p>
<p>Rearranging the familiar expression for variance yields</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%5BY%5E%7B2%7D%5D%20=%20Var%5BY%5D%20+%20E%5BY%5D%5E%7B2%7D%20=%20%5Csigma%5E%7B2%7D%20+%20%5Cmu%5E%7B2%7D,%0A"></p>
<p>and similarly,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AVar%5B%5Cbar%7BY%7D%5D%20+%20E%5B%5Cbar%7BY%7D%5D%5E%7B2%7D%20=%20%5Csigma%5E%7B2%7D/n%20+%20%5Cmu%5E%7B2%7D.%0A"></p>
<p>Therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AE%5CBig%5B%5Csum_%7Bi=1%7D%5E%7Bn%7D(Y_%7Bi%7D-%5Cbar%7BY%7D)%5E%7B2%7D%5CBig%5D%20&amp;=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%5Csigma%5E%7B2%7D+%5Cmu%5E%7B2%7D-n%5CBig(%5Cfrac%7B%5Csigma%5E%7B2%7D%7D%7Bn%7D%20+%20%5Cmu%5E%7B2%7D%5CBig)%20%5C%5C%0A&amp;=n(%5Csigma%5E%7B2%7D%20+%20%5Cmu%5E%7B2%7D)%20-%20n%5CBig(%5Cfrac%7B%5Csigma%5E%7B2%7D%7D%7Bn%7D%20+%20%5Cmu%5E%7B2%7D%5CBig)%20%5C%5C%0A&amp;=n%5Csigma%5E%7B2%7D%20-%20%5Csigma%5E%7B2%7D%20=%20(n-1)%5Csigma%5E%7B2%7D.%0A%5Cend%7Balign*%7D%0A"></p>
<p>Thus,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%5B%5Chat%7B%5Csigma%7D%5E%7B2%7D%5D%20=%20%5Cfrac%7B1%7D%7Bn%7DE%5CBig%5B%5Csum_%7Bi=1%7D%5E%7Bn%7D(Y_%7Bi%7D%20-%20%5Cbar%7BY%7D)%5E%7B2%7D%5CBig%5D%20=%20%5Cfrac%7B1%7D%7Bn%7D(n-1)%5Csigma%5E%7B2%7D%20=%20%5CBig(%5Cfrac%7Bn-1%7D%7Bn%7D%5CBig)%5Csigma%5E%7B2%7D,%0A"></p>
<p>and we conclude that <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D"> is biased since <img src="https://latex.codecogs.com/png.latex?E%5B%5Chat%7B%5Csigma%7D%5E%7B2%7D%5D%20%5Cne%20%5Csigma%5E%7B2%7D">. We now consider the sample variance <img src="https://latex.codecogs.com/png.latex?S%5E%7B2%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%5BS%5E%7B2%7D%5D%20=%20%5Cfrac%7B1%7D%7Bn-1%7DE%5CBig%5B%5Csum_%7Bi=1%7D%5E%7Bn%7D(Y_%7Bi%7D%20-%20%5Cbar%7BY%7D)%5E%7B2%7D%5CBig%5D%20=%20%5Cfrac%7B1%7D%7Bn-1%7D(n-1)%5Csigma%5E%7B2%7D%20=%20%5Csigma%5E%7B2%7D,%0A"></p>
<p>and since <img src="https://latex.codecogs.com/png.latex?E%5BS%5E%7B2%7D%5D%20=%20%5Csigma%5E%7B2%7D">, we conclude that <img src="https://latex.codecogs.com/png.latex?S%5E%7B2%7D"> is an unbiased estimator for <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D">.</p>
<section id="demonstration" class="level3">
<h3 class="anchored" data-anchor-id="demonstration">Demonstration</h3>
<p>An important property of an unbiased estimator of a population parameter is that if the sample statistic is evaluated for every possible sample and the average computed, the mean over all samples will exactly equal the population parameter. For a given population with mean <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and variance <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D">, if the sample variance (division by <img src="https://latex.codecogs.com/png.latex?(n%E2%88%921)">) is computed for all possible permutations of the dataset, the average of the sample variances will exactly equal <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D">. This also demonstrates (indirectly) that division by <img src="https://latex.codecogs.com/png.latex?n"> would consistently underestimate the population variance.</p>
<p>We now attempt to verify this property on the following dataset:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A7,%209,%2010,%2012,%2015%0A"></p>
<p>The Python itertools module exposes a collection of efficient iterators that stream values on-demand based on various starting and/or stopping conditions. For example, the <code>permutations</code> implementation takes as arguments an iterable and the length of the permutation <code>r</code>. It returns all <code>r</code>-length permutations of elements from the iterable (itertools also exposes a <code>combinations</code> function that does the same for all r-length combinations). The <code>product</code> function generates the cartesian product of the specified iterables, and takes an optional <code>repeat</code> argument. From the <a href="https://docs.python.org/3/library/itertools.html#itertools.product">documentation</a>:</p>
<blockquote class="blockquote">
<p>To compute the product of an iterable with itself, specify the number of repetitions with the optional repeat keyword argument. For example, <code>product(A, repeat=4)</code> means the same as product(A, A, A, A).</p>
</blockquote>
<p><code>product</code> is used to compute the average sample variance for all 2, 3 and 4-element permutations from <img src="https://latex.codecogs.com/png.latex?%5B7,%209,%2010,%2012,%2015%5D">, and the result is compared to the population variance. Before we begin, lets calculate the population mean and variance:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cbar%7BY%7D%20&amp;=%2010.6%20%5C%5C%0A%5Csigma%5E%7B2%7D%20&amp;=%20%5Csum_%7Bi=1%7D%5E%7B5%7D%5Cfrac%7BY_%7Bi%7D%5E%7B2%7D%7D%7Bn%7D%20-%20%5Cbar%7BY%7D%5E%7B2%7D%20%5C%5C%0A&amp;=%20119.8%20-%2010.6%5E%7B2%7D%20%5C%5C%0A&amp;=%207.44%0A%5Cend%7Balign*%7D%0A"></p>
<p>We now compute the average of the sample variance for all <img src="https://latex.codecogs.com/png.latex?k">-element permutations from <img src="https://latex.codecogs.com/png.latex?%5B7,%209,%2010,%2012,%2015%5D"> for <img src="https://latex.codecogs.com/png.latex?2%20%5Cle%20k%20%5Cle%205">:</p>
<div id="cell-2" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Demonstrating that the sample variance is an unbiased estimator </span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">of the population variance. </span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Generate all possible 2, 3, 4 and 5-element permutations from </span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[7, 9, 10, 12, 15], and determine the sample variance of each </span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">sample. The average of the sample variances will exactly equate </span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">to the population variance if the sample variance is an unbiased </span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">estimator of the population variance.</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> itertools</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-13"></span>
<span id="cb1-14">v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb1-15"></span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify that the average of the sample variance</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for all 2-element samples equates to 7.44.</span></span>
<span id="cb1-19">s2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(itertools.product(v, repeat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-20">result2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean([np.var(ii, ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> s2])</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify that the average of the sample variance</span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for all 3-element samples equates to 7.44.</span></span>
<span id="cb1-24">s3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(itertools.product(v, repeat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb1-25">result3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean([np.var(ii, ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> s3])</span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify that the average of the sample variance</span></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for all 4-element samples equates to 7.44.</span></span>
<span id="cb1-29">s4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(itertools.product(v, repeat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb1-30">result4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean([np.var(ii, ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> s4])</span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify that the average of the sample variance</span></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for all 5-element samples equates to 7.44.</span></span>
<span id="cb1-34">s5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(itertools.product(v, repeat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb1-35">result5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean([np.var(ii, ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> s5])</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"result2: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"result3: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"result4: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result4<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"result5: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result5<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>result2: 7.44
result3: 7.4399999999999995
result4: 7.44
result5: 7.44</code></pre>
</div>
</div>
<p>Since the sample variance is an unbiased estimator of the population variance, these results should come as no surprise, but it is an interesting demonstration nonetheless.</p>


</section>

 ]]></description>
  <category>Statistical Modeling</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/bessels-correction/bessels-correction.html</guid>
  <pubDate>Thu, 01 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Generating Correlated Random Samples in Python</title>
  <link>https://www.jtrive.com/posts/correlated-samples/correlated-samples.html</link>
  <description><![CDATA[ 





<p>An analysis may require the ability to generate correlated random samples. For example, imagine we have monthly returns for three financial indicators over a 20 year period. We are interested in modeling these returns using parametric distributions for some downstream analysis, perhaps to estimate tail behavior over a large number of samples. In this post, I’ll demonstrate that assuming independence of truly correlated random variables falls short, and how to correctly model the correlation for sample generation. The financial indicator data is available <a href="https://gist.githubusercontent.com/jtrive84/9955433e344ec773e5766657f961fde5/raw/b2e2c99db1e05aeb69186550b9c78cc9412df911/sample_returns.csv">here</a>.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> stats</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-7"></span>
<span id="cb1-8">indicator_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/9955433e344ec773e5766657f961fde5/raw/b2e2c99db1e05aeb69186550b9c78cc9412df911/sample_returns.csv"</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(indicator_url)</span>
<span id="cb1-11"></span>
<span id="cb1-12">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">us_credit</th>
<th data-quarto-table-cell-role="th">us_market</th>
<th data-quarto-table-cell-role="th">global_market</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1/31/2001</td>
<td>0.035525</td>
<td>0.0301</td>
<td>0.022123</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2/28/2001</td>
<td>-0.001583</td>
<td>-0.0950</td>
<td>-0.091336</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3/31/2001</td>
<td>0.002638</td>
<td>-0.0675</td>
<td>-0.075002</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4/30/2001</td>
<td>0.010607</td>
<td>0.0738</td>
<td>0.075063</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5/31/2001</td>
<td>0.010448</td>
<td>0.0035</td>
<td>-0.010473</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The table contains monthly returns for us_credit, us_market and global_market from 2001-01-31 up to 2023-06-30, but our approach can be extended to any number of financial indicators. Our goal is to find an appropriate parametric distribution for each indicator to use for sample generation. We start by plotting histograms of each indicator to get an idea of the distributional form (symmetric, skewed, etc.). This will dictate which distribution we use to find the best fitting parameters via maximum likelihood. Since there are positive and negative values for each indicator, using a normal distribution is probably a safe bet. If values of the indicators were strictly positive, we would use a distribution with support on <img src="https://latex.codecogs.com/png.latex?(0,%20%5Cinfty)"> such as gamma, lognormal or weibull.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot histogram for each indicator.</span></span>
<span id="cb2-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">indicators <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.columns</span>
<span id="cb2-5"></span>
<span id="cb2-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, ind_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(indicators):</span>
<span id="cb2-9">    </span>
<span id="cb2-10">    ind_mean, ind_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[ind_name].mean(), df[ind_name].std()</span>
<span id="cb2-11">    label0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\bar x = $"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ind_mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-12">    label1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$s = $"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ind_std<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-13">    ax[ii].set_title(ind_name, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb2-14">    ax[ii].hist(</span>
<span id="cb2-15">        df[ind_name].values, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff7595"</span>, </span>
<span id="cb2-16">        edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb2-17">        )</span>
<span id="cb2-18">    </span>
<span id="cb2-19">    ax[ii].axvline(ind_mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \mu$"</span>)</span>
<span id="cb2-20">    ax[ii].set_yticklabels([])</span>
<span id="cb2-21">    ax[ii].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-22">    ax[ii].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-23">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb2-24">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb2-25">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb2-26">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb2-27">    ax[ii].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb2-28">    ax[ii].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb2-29">    ax[ii].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb2-30">    ax[ii].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb2-31">    </span>
<span id="cb2-32">    ax[ii].annotate(</span>
<span id="cb2-33">        label0, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.90</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, </span>
<span id="cb2-34">        fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span></span>
<span id="cb2-35">        ) </span>
<span id="cb2-36">    ax[ii].annotate(</span>
<span id="cb2-37">        label1, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.85</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, </span>
<span id="cb2-38">        fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span></span>
<span id="cb2-39">        ) </span>
<span id="cb2-40">    ax[ii].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x-small"</span>)</span>
<span id="cb2-41">    </span>
<span id="cb2-42">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/correlated-samples/correlated-samples_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img" alt="Histograms for us_credit, us_market and global_market."></p>
<figcaption>Distribution of returns for each indicator</figcaption>
</figure>
</div>
</div>
</div>
<p>The distribution of each indicator appears relatively normal. Given that the parametric form has been identified, we can use Scipy to determine the optimal parameters to fit three separate normal distributions (one per indicator) via maximum likelihood.</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> norm</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get normal parameter estimates (mean &amp; standard deviation) via maximum likelihood.</span></span>
<span id="cb3-5">mu0, std0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm.fit(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_credit"</span>], method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLE"</span>)</span>
<span id="cb3-6">mu1, std1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm.fit(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_market"</span>], method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLE"</span>)</span>
<span id="cb3-7">mu2, std2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm.fit(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"global_market"</span>], method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLE"</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9">dparams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_credit"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>: mu0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>: std0},</span>
<span id="cb3-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_market"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>: mu1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>: std1},</span>
<span id="cb3-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"global_market"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>: mu2, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>: std2},</span>
<span id="cb3-13">    }</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">- us_credit    : mean=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mu0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> std==</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>std0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"- us_market    : mean=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mu1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> std==</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>std1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"- global_market: mean=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mu2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> std==</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>std2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
- us_credit    : mean=0.00015 std==0.02138
- us_market    : mean=0.00595 std==0.04442
- global_market: mean=0.00517 std==0.04605
</code></pre>
</div>
</div>
<p>The parameter estimates match very closely with the empirical mean and standard deviation overlaid on each histogram. This is because the MLE estimates for the normal distribution are equal to the sample mean and the unadjusted sample variance. Next we overlay the best fitting parametric distribution with each indicator histogram in order to assess the quality of fit.</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot histogram for each indicator along with parameterized normal distribution.</span></span>
<span id="cb5-2">hist_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff7595"</span></span>
<span id="cb5-3">dist_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0000FF"</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, ind_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(indicators):</span>
<span id="cb5-8"></span>
<span id="cb5-9">    vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[ind_name]</span>
<span id="cb5-10">    mle_mean, mle_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dparams[ind_name][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>], dparams[ind_name][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>]</span>
<span id="cb5-11"></span>
<span id="cb5-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get PDF values associated with distribution.</span></span>
<span id="cb5-13">    ndist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm(mle_mean, mle_std)</span>
<span id="cb5-14">    xvals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(vals.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.90</span>, vals.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb5-15">    yvals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ndist.pdf(xvals)</span>
<span id="cb5-16"></span>
<span id="cb5-17">    label0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \mu = $"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mle_mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-18">    label1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \sigma = $"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mle_std<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-19">    </span>
<span id="cb5-20">    ax[ii].set_title(ind_name, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb5-21">    ax[ii].hist(</span>
<span id="cb5-22">        df[ind_name].values, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hist_color, </span>
<span id="cb5-23">        edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb5-24">        )</span>
<span id="cb5-25"></span>
<span id="cb5-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot normal distribution.</span></span>
<span id="cb5-27">    ax[ii].plot(xvals, yvals, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dist_color, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb5-28">    ax[ii].set_yticklabels([])</span>
<span id="cb5-29">    ax[ii].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb5-30">    ax[ii].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb5-31">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb5-32">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb5-33">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb5-34">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb5-35">    ax[ii].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb5-36">    ax[ii].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb5-37">    ax[ii].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb5-38">    ax[ii].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb5-39">    </span>
<span id="cb5-40">    ax[ii].annotate(</span>
<span id="cb5-41">        label0, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.90</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, </span>
<span id="cb5-42">        fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span></span>
<span id="cb5-43">        ) </span>
<span id="cb5-44">    ax[ii].annotate(</span>
<span id="cb5-45">        label1, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.85</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, </span>
<span id="cb5-46">        fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span></span>
<span id="cb5-47">        ) </span>
<span id="cb5-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#ax[ii].legend(loc="upper right", fancybox=True, framealpha=1, fontsize="x-small")</span></span>
<span id="cb5-49">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Indicator histograms w/ parametric overlay"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb5-50">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-51"></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/correlated-samples/correlated-samples_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img" alt="Histograms for us_credit, us_market and global_market with normal density overlay"></p>
<figcaption>Indicator histograms with parametric overlay</figcaption>
</figure>
</div>
</div>
</div>
<p>The distributions in each case enclose the original histograms pretty well, with decent tail coverage in each instance. To demonstrate the approach, we next generate independent random samples from each indicator.</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify number of samples to generate.</span></span>
<span id="cb6-3">nbr_sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copying dparams from previous cell.</span></span>
<span id="cb6-6">dparams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb6-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_credit"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>: mu0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>: std0},</span>
<span id="cb6-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_market"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>: mu1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>: std1},</span>
<span id="cb6-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"global_market"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>: mu2, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>: std2},</span>
<span id="cb6-10">    }</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># us_credit.</span></span>
<span id="cb6-13">mean0, std0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dparams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_credit"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>], dparams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_credit"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>]</span>
<span id="cb6-14">rv0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm(mean0, std0)</span>
<span id="cb6-15"></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># us_market.</span></span>
<span id="cb6-17">mean1, std1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dparams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_market"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>], dparams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_market"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>]</span>
<span id="cb6-18">rv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm(mean1, std1)</span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># global_market.</span></span>
<span id="cb6-21">mean2, std2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dparams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"global_market"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>], dparams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"global_market"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"std"</span>]</span>
<span id="cb6-22">rv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm(mean2, std2)</span>
<span id="cb6-23"></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataFrame to hold simulated indicators. </span></span>
<span id="cb6-25">dfsims1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb6-26">    np.vstack([rv0.rvs(nbr_sims), rv1.rvs(nbr_sims), rv2.rvs(nbr_sims)]).T,</span>
<span id="cb6-27">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>indicators</span>
<span id="cb6-28">    )</span>
<span id="cb6-29"></span>
<span id="cb6-30">dfsims1.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">us_credit</th>
<th data-quarto-table-cell-role="th">us_market</th>
<th data-quarto-table-cell-role="th">global_market</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>500.000000</td>
<td>500.000000</td>
<td>500.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>0.000558</td>
<td>0.012024</td>
<td>0.006257</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>0.022043</td>
<td>0.042455</td>
<td>0.045772</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>-0.072494</td>
<td>-0.115241</td>
<td>-0.148560</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>-0.014534</td>
<td>-0.017264</td>
<td>-0.024564</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>-0.000501</td>
<td>0.014443</td>
<td>0.007020</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>0.014217</td>
<td>0.042519</td>
<td>0.038046</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>0.069504</td>
<td>0.149524</td>
<td>0.132896</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Here we assume the value that an indicator takes on is independent of all other indicators. This is almost surely not the case. Let’s check how correlated the 3 selected indicators are within the original sample:</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2">df.corr()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">us_credit</th>
<th data-quarto-table-cell-role="th">us_market</th>
<th data-quarto-table-cell-role="th">global_market</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">us_credit</td>
<td>1.000000</td>
<td>-0.099877</td>
<td>-0.037652</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">us_market</td>
<td>-0.099877</td>
<td>1.000000</td>
<td>0.955514</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">global_market</td>
<td>-0.037652</td>
<td>0.955514</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Do the independent samples exhibit the same correlation?</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2">dfsims1.corr()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">us_credit</th>
<th data-quarto-table-cell-role="th">us_market</th>
<th data-quarto-table-cell-role="th">global_market</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">us_credit</td>
<td>1.000000</td>
<td>-0.072533</td>
<td>-0.066023</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">us_market</td>
<td>-0.072533</td>
<td>1.000000</td>
<td>-0.044359</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">global_market</td>
<td>-0.066023</td>
<td>-0.044359</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Not surprisingly, us_market and global_market are over 95% correlated in the original data. This is not exhibited within the set of non-correlated samples. With such high correlation, it is not reasonable to assume independence across indicators. We need instead to find a way to generate correlated random samples. This can be accomplished using Numpy’s multivariate normal distribution.</p>
<p>As a brief aside, the significance of a correlation between two random variables depends on the sample size. To test if the correlation between two variables demonstrates a linear relationship at the 5% significance level, we compute:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7C%5Crho%7C%20%5Cgt%202%20/%20%5Csqrt%7Bn%7D,%0A"></p>
<p>In our case, there are 270 samples, therefore <img src="https://latex.codecogs.com/png.latex?n%20=%20%5Csqrt%7B270%7D%20%5Capprox%2016.4">. Thus, in order for the correlation between two indicators to be significant at the 5% level, it needs to be greater than <img src="https://latex.codecogs.com/png.latex?2%20/%2016.4%20%5Capprox%20.12">, which is clearly the case for global_market-us_market.</p>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate correlated random samples.</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify number of simulations to generate.</span></span>
<span id="cb9-4">nbr_sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create vector of means.</span></span>
<span id="cb9-7">means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [mean0, mean1, mean2]</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bind reference to covariance matrix.</span></span>
<span id="cb9-10">V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.cov().values</span>
<span id="cb9-11"></span>
<span id="cb9-12">dfsims2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb9-13">    np.random.multivariate_normal(means, V, nbr_sims),</span>
<span id="cb9-14">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>indicators</span>
<span id="cb9-15">    )</span>
<span id="cb9-16"></span>
<span id="cb9-17">dfsims2.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">us_credit</th>
<th data-quarto-table-cell-role="th">us_market</th>
<th data-quarto-table-cell-role="th">global_market</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>500.000000</td>
<td>500.000000</td>
<td>500.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">mean</td>
<td>0.000547</td>
<td>0.005966</td>
<td>0.005387</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">std</td>
<td>0.021886</td>
<td>0.042421</td>
<td>0.044833</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">min</td>
<td>-0.062250</td>
<td>-0.097373</td>
<td>-0.137454</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25%</td>
<td>-0.013780</td>
<td>-0.024495</td>
<td>-0.027463</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">50%</td>
<td>0.000788</td>
<td>0.007268</td>
<td>0.006098</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75%</td>
<td>0.015203</td>
<td>0.033833</td>
<td>0.035412</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">max</td>
<td>0.067324</td>
<td>0.136830</td>
<td>0.148773</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The min and max values for each indicator seem to align with what was observed in the original data. Let’s verify that the samples in <code>dfsims2</code> are correlated.</p>
<div id="cell-18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2">dfsims2.corr()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">us_credit</th>
<th data-quarto-table-cell-role="th">us_market</th>
<th data-quarto-table-cell-role="th">global_market</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">us_credit</td>
<td>1.000000</td>
<td>-0.084854</td>
<td>-0.038219</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">us_market</td>
<td>-0.084854</td>
<td>1.000000</td>
<td>0.944791</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">global_market</td>
<td>-0.038219</td>
<td>0.944791</td>
<td>1.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>This matches closely with the original correlation profile. Let’s visualize the correlation in the generated random samples by comparing indicator samples from the independent simulated dataset vs.&nbsp;the dependent simulated dataset.</p>
<div id="cell-20" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate pair-wise scatter plots for each indicator for independent and dependent draws. </span></span>
<span id="cb11-2"></span>
<span id="cb11-3">dindices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb11-4">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>): {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"independent"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_credit"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_market"</span>},</span>
<span id="cb11-5">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"independent"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"global_market"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_credit"</span>},</span>
<span id="cb11-6">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>): {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"independent"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_market"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"global_market"</span>},</span>
<span id="cb11-7">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>): {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dependent"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_credit"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_market"</span>},</span>
<span id="cb11-8">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dependent"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"global_market"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_credit"</span>},</span>
<span id="cb11-9">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>): {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dependent"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"us_market"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"global_market"</span>},</span>
<span id="cb11-10">    }</span>
<span id="cb11-11"></span>
<span id="cb11-12"></span>
<span id="cb11-13">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kk, vv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dindices.items():</span>
<span id="cb11-16">    </span>
<span id="cb11-17">    ii, jj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kk</span>
<span id="cb11-18">    data_desc, x_desc, y_desc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>], vv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>], vv[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>]</span>
<span id="cb11-19"></span>
<span id="cb11-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> data_desc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"independent"</span>:</span>
<span id="cb11-21">        xx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfsims1[x_desc].values</span>
<span id="cb11-22">        yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfsims1[y_desc].values</span>
<span id="cb11-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb11-24">        xx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfsims2[x_desc].values</span>
<span id="cb11-25">        yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfsims2[y_desc].values</span>
<span id="cb11-26">        </span>
<span id="cb11-27">    titlestr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data_desc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_desc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> vs. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_desc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb11-28">    ax[ii, jj].set_title(titlestr, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb11-29">    ax[ii, jj].scatter(</span>
<span id="cb11-30">        xx, yy, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.85</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>)</span>
<span id="cb11-31"></span>
<span id="cb11-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax[ii].set_yticklabels([])</span></span>
<span id="cb11-33">    ax[ii, jj].set_xlabel(x_desc, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb11-34">    ax[ii, jj].set_ylabel(y_desc, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb11-35">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb11-36">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb11-37">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb11-38">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb11-39">    ax[ii, jj].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb11-40">    ax[ii, jj].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb11-41">    ax[ii, jj].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb11-42">    ax[ii, jj].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb11-43"></span>
<span id="cb11-44">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/correlated-samples/correlated-samples_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img" alt="Scatterplots by indicator pair for correlated and uncorrelated samples."></p>
<figcaption>Scatterplots by indicator pair for correlated and uncorrelated samples.</figcaption>
</figure>
</div>
</div>
</div>
<p>In the case of global_market-us_market (bottom right), the dependent plot captures the correlation inherent in the original data.</p>



 ]]></description>
  <category>Statistical Modeling</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/correlated-samples/correlated-samples.html</guid>
  <pubDate>Thu, 01 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Denoising Signals using the FFT</title>
  <link>https://www.jtrive.com/posts/fft-denoise/fft-denoise.html</link>
  <description><![CDATA[ 





<p>The Discrete Fourier Transform (DFT) turns a data vector into a sum of sine/cosine components. The DFT is a Fourier series on data instead of analytic functions. Why do we perform the DFT? Because the features typically of interest aren’t always obvious in the time domain. The Fast Fourier Transform (FFT) is an efficient method used to calculate the DFT. The naive implementation of DFT scales as <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(n%5E2)">, whereas FFT scales as <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(n%20%5Cmathrm%7Blog%7D(n))">.</p>
<p>Our original data is sampled at uniform intervals represented as <img src="https://latex.codecogs.com/png.latex?%5Bf_%7B0%7D,%20f_%7B1%7D,%20%5Cdots,%20f_%7Bn%7D%5D%5E%7BT%7D">, and we want to obtain a vector of Fourier coefficients <img src="https://latex.codecogs.com/png.latex?%5B%5Chat%7Bf%7D_%7B0%7D,%20%5Chat%7Bf%7D_%7B1%7D,%20%5Cdots,%20%5Chat%7Bf%7D_%7Bn%7D%5D%5E%7BT%7D">. In the second vector, <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7B0%7D"> represents how much of the lowest frequency is in the data, <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7B1%7D"> represents how much of the second lowest frequency, etc. The formula used to go from data to Fourier coefficients is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7Bf%7D_%7Bk%7D%20=%20%5Csum_%7Bj=0%7D%5E%7Bn-1%7D%20f_%7Bj%7De%5E%7Bi%202%5Cpi%20jk/n%7D.%0A"></p>
<p>In words, the <img src="https://latex.codecogs.com/png.latex?k%5E%7Bth%7D"> Fourier coefficient is obtained by taking the sum over all <img src="https://latex.codecogs.com/png.latex?j"> data points at the <img src="https://latex.codecogs.com/png.latex?j%5E%7Bth%7D"> frequency times the <img src="https://latex.codecogs.com/png.latex?k%5E%7Bth%7D"> frequency divided by <img src="https://latex.codecogs.com/png.latex?n">. We can see that this expression represents a sum of sin and cosine terms by recalling <img src="https://latex.codecogs.com/png.latex?e%5E%7Bin%7D%20=%20%5Cmathrm%7Bcos%7D(n)%20+%20i%5Cmathrm%7Bsin%7D(n)">. The <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bk%7D"> are complex numbers which contain phase and magnitude information. The magnitude of <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bf%7D_%7Bk%7D"> tells us how much of the <img src="https://latex.codecogs.com/png.latex?k%5E%7Bth%7D"> mode is in the original data.</p>
<p>To go from Fourier coefficients back to data, the formula is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af_%7Bk%7D%20=%20%5Cfrac%7B1%7D%7Bn%7D%5CBig(%5Csum_%7Bj=0%7D%5E%7Bn-1%7D%20%5Chat%7Bf%7D_%7Bj%7De%5E%7Bi%202%5Cpi%20jk/n%7D%5CBig),%0A"></p>
<p>which represents the inverse FFT.</p>
<p>The DFT matrix can be represented in terms of the fundemental frequency for an interval with <img src="https://latex.codecogs.com/png.latex?n"> data points, defined as <img src="https://latex.codecogs.com/png.latex?%5Comega_%7Bn%7D%20=%20e%5E%7B-2%5Cpi%20i%20/%20n%7D">:</p>
$$ M =
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bpmatrix%7D%0A1%20&amp;%201%20&amp;%201%20&amp;%20%5Cdots%20&amp;%201%20%5C%5C%0A1%20&amp;%20%5Comega_%7Bn%7D%20&amp;%20%5Comega_%7Bn%7D%5E%7B2%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_%7Bn%7D%5E%7Bn-1%7D%20%5C%5C%0A1%20&amp;%20%5Comega_%7Bn%7D%5E%7B2%7D%20&amp;%20%5Comega_%7Bn%7D%5E%7B4%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_%7Bn%7D%5E%7B2(n-1)%7D%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cvdots%20%5C%5C%0A1%20&amp;%20%5Comega_%7Bn%7D%5E%7Bn-1%7D%20&amp;%20%5Comega_%7Bn%7D%5E%7B2(n-1)%7D%20&amp;%20%5Cdots%20&amp;%20%5Comega_%7Bn%7D%5E%7B(n-1)%5E2%7D%0A%5Cend%7Bpmatrix%7D">
<p>$$</p>
<p><br></p>
<p>To obtain the Fourier coefficients, we multiply <img src="https://latex.codecogs.com/png.latex?M"> by <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7Bf%7D">, which yields a vector of complex coefficients, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Chat%7Bf%7D%7D">. Next we show how the FFT can be used to de-noise a signal.</p>
<section id="denoising-signals" class="level3">
<h3 class="anchored" data-anchor-id="denoising-signals">Denoising Signals</h3>
<p>This example, as well as much of the background, is taken from Steve Brunton’s FFT videos available <a href="https://youtu.be/jNC0jxb0OxE?si=H4JZGVU3-HB9PhCJ">here</a>. Assume you receive a dataset representing a discrete signal, and our goal is to identify the characteristic frequencies above a certain threshold. We then execute the following steps:</p>
<ol type="1">
<li>Fourier transform the data.</li>
<li>Identify the peaks in the frequency domain, and zero out everything below some threshold.</li>
<li>Run the inverse Fourier transform to recover the denoised signal.</li>
</ol>
<p>We create the original signal and add noise as follows:</p>
<div id="cell-2" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> math <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pi</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5">dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.001</span></span>
<span id="cb1-6">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, dt)</span>
<span id="cb1-7">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(t)</span>
<span id="cb1-8">forig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sin(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.sin(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> t)</span>
<span id="cb1-9">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.random.randn(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(t))</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run FFT on f. Capture power spectrum.</span></span>
<span id="cb1-12">fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.fft.fft(f, n)</span>
<span id="cb1-13">psd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(fhat)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-axis for plotting.</span></span>
<span id="cb1-16">freq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.arange(n)      </span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter out noise using psd.</span></span>
<span id="cb1-19">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all freqs with power &gt; thresh. Zero out small Fourier coeffs.</span></span>
<span id="cb1-22">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> psd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> thresh</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inverse fft for filtered time signal.</span></span>
<span id="cb1-25">ffilt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.fft.ifft(indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> fhat) </span></code></pre></div>
</div>
<p>Next we create a 3-facet plot: The top facet represents <code>forig</code> overlaid on the noisy signal <code>f</code>. The second facet represents the power spectrum, and the third the reconstructed filtered signal.</p>
<div id="cell-4" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-2"></span>
<span id="cb2-3">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-4">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original and noise-added signals"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb2-5">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(t, f, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"noisy"</span>)</span>
<span id="cb2-6">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(t, forig, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clean"</span>)</span>
<span id="cb2-7">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlim(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], t[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-8">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend(fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Power spectrum"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb2-11">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(freq[:n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], psd[:n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb2-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frequency"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb2-13">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"power"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb2-14"></span>
<span id="cb2-15">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(t, ffilt, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filtered"</span>)</span>
<span id="cb2-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(t, forig, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original"</span>)</span>
<span id="cb2-17">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Filtered signal"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb2-18">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].legend(fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>)</span>
<span id="cb2-19">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_xlim(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], t[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb2-22">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb2-23">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb2-24"></span>
<span id="cb2-25">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/fft-denoise/fft-denoise_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img" alt="Original, power spectrum and filtered signal for generated signal with noise."></p>
<figcaption>Original, power spectrum and filtered signal for generated signal with noise.</figcaption>
</figure>
</div>
</div>
</div>
<p>This tells us that even though the original signal is noisy, much of the signal is at 50Hz and 120Hz (verified by running <code>np.where(psd[:n // 2]&gt;thresh)[0]</code>), or the frequencies with power value in excess of the black horizontal dashed line in the center facet. Overlaying the filtered and original signals in the bottom facet, we see they line up perfectly.</p>
</section>
<section id="filtering-an-audio-file" class="level3">
<h3 class="anchored" data-anchor-id="filtering-an-audio-file">Filtering an Audio File</h3>
<p>In practice, the signal of interest will not be generated from an analytic function. Typically we’ll have a signal, and need to identify the dominant frequencies for downstream analysis. In the code that follows, the frequency spectrum is generated for a signal of arbitrary origin, which can be extended to any time domain signal. The signal is filtered, then we approximate the original signal using only a small number of frequencies. The focus will be on an audio clip of a vintage telephone ringer, available <a href="https://mixkit.co/free-sound-effects/">here</a>.</p>
<div id="cell-7" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Code to read in a .wav file, perform FFT and generate filtered signal.</span></span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.fftpack <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> fft, fftfreq</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.io.wavfile <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> read</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load .wav file. data has dimension nx2, with 2 representing</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the channels. We focus on the first channel only. </span></span>
<span id="cb3-8">censor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb3-9">fs, data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vintage-telephone-ringtone.wav"</span>)</span>
<span id="cb3-10">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)[:censor]</span>
<span id="cb3-11">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(s)</span>
<span id="cb3-12">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(n)</span>
<span id="cb3-13">sample_secs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(s) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> fs   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Duration of sample audio clip. </span></span>
<span id="cb3-14">dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> fs                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time in seconds between samples. </span></span>
<span id="cb3-15">fhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fft(s)               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate Fourier coefficients.</span></span>
<span id="cb3-16">psd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(fhat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Power spectrum.</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-axis for plotting. Can also call fftfreq(s.shape[0], d=dt).</span></span>
<span id="cb3-19">freq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.arange(n) </span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retain frequencies with power above this threshold.</span></span>
<span id="cb3-22">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb3-23"></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all freqs with power &gt; thresh. Zero out small Fourier coeffs.</span></span>
<span id="cb3-25">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> psd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> thresh</span>
<span id="cb3-26">ffilt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.fft.ifft(indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> fhat) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inverse fft for filtered time signal.</span></span></code></pre></div>
</div>
<p>We then plot the original signal, power spectrum and filtered signal:</p>
<div id="cell-9" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-2">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original signal (first 2^16 samples,~1.5 secs)"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb4-3">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(t, s, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original"</span>)</span>
<span id="cb4-4">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlim(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], t[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb4-5"></span>
<span id="cb4-6">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Power spectrum"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb4-7">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(freq[:n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], psd[:n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb4-8">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].axhline(thresh, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>)</span>
<span id="cb4-9">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frequency"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb4-10">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"power"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb4-11"></span>
<span id="cb4-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Filtered signal with original"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb4-13">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(t, ffilt, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filtered"</span>)</span>
<span id="cb4-14">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].plot(t, s, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original"</span>)</span>
<span id="cb4-15">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].legend(fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb4-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_xlim(t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], t[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb4-19">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb4-20">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb4-21">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb4-22">    ax[ii].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb4-23"></span>
<span id="cb4-24">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/fft-denoise/fft-denoise_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img" alt="Original, power spectrum and filtered signal for audio signal."></p>
<figcaption>Original, power spectrum and filtered signal for audio signal.</figcaption>
</figure>
</div>
</div>
</div>
<p>We set the threshold to retain only those frequencies with power in excess of 500. In the bottom facet, we see that by retaining only a small number of frequencies, we are able to capture a reasonable approximation to the original signal, especially away from the endpoints.</p>
<p>The filtered signal can be written to file as follows:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optionally export filtered audio.</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.io.wavfile <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> write</span>
<span id="cb5-3">write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filtered-telephone2.wav"</span>, fs, np.real(ffilt).astype(np.int16))</span></code></pre></div>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/fft-denoise/fft-denoise.html</guid>
  <pubDate>Thu, 01 Feb 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>GeoHashing from Scratch in Python</title>
  <link>https://www.jtrive.com/posts/geohash-python/geohash-python.html</link>
  <description><![CDATA[ 





<p>I recently became interested in GeoHashing, and wanted to develop an understanding of the algorithm with the goal of implementing it myself. I was surprised to find it to be quite simple and intuitive. In what follows, I’ll demonstrate how to generate GeoHashes for a given latitude and longitude and compare results against <code>pygeohash</code>, a Python library for all things GeoHash-related. I’ll also walkthrough an approach that can be used to find the neighboring cells of a given GeoHash, and render them on a map.</p>
<p>A Geohash is a unique identifier of a specific region on the Earth. The basic idea is the Earth gets divided into rectangular regions of user-defined size, and each region is assigned a unique id which is called its Geohash. For a given location on earth, the algorithm converts an arbitrary precision latitude and longitude into a string, the idea being that regions with a similar string prefix will be closer together. Conceptually, GeoHashing reduces proximity search to string prefix matching. As each character encodes additional precision, shared prefixes denote geographic proximity. But the converse is not true: Two points may be close in terms of relative proximity, but have no common GeoHash characters (think of two points on opposite sides of the prime meridian).</p>
<p>Geohashes also provide a degree of anonymity since it isn’t necessary to expose exact GPS coordinates. The location of an entity up to a bounding box cell at a given precision is all that is known.</p>
<p>Before we begin, it is important to note that GeoHash libraries in the wild use a much more efficient generating mechanism than what is presented here. My goal is to demonstrate the concept with maximum clarity as opposed to maximum efficiency. If you decide to use GeoHashing in a real-world application, use an existing library.</p>
<section id="algorithm" class="level3">
<h3 class="anchored" data-anchor-id="algorithm">Algorithm</h3>
<p>A GeoHash is a hierarchical spatial index: In order to represent a point, the world is recursively divided into smaller and smaller grid cells with each additional bit until the desired precision is reached. Functionally, the algorithm works by storing the intermediate results of two binary searches. In the resulting bit string, even-indexed bits represent longitude, while odd-indexed bits represent latitude. The user specifies a level of precision, usually between 1 and 12, and a GeoHash of that length is returned. The table below gives the dimensions of GeoHash cells at each level of precision (taken from <a href="https://www.movable-type.co.uk/scripts/geohash.html">here</a>):</p>
<pre class="text"><code>Precision          Dimension     
        1: 5,000km x 5,000km
        2:   1,250km x 625km
        3:     156km x 156km
        4:   31.9km x 19.5km
        5:   4.89km x 4.89km
        6:   1.22km x 0.61km
        7:       153m x 153m
        8:     38.2m x 19.1m
        9:     4.77m x 4.77m
       10:    1.19m x 0.596m 
       11:     149mm x 149mm
       12:   37.2mm x 18.6mm</code></pre>
<p>The values in the table represent the maximum dimension at each level of precision: As locations move away from the equator, the dimensions of each cell get smaller.</p>
<p>For a GeoHash of length 12, the coordinate can be found in a cell having dimension 37.2mm x 18.6mm, which is an impressive level of precision for a 12 character string!</p>
<p>The GeoHash symbol map consists of 32 characters:</p>
<pre><code>base32 = "0123456789bcdefghjkmnpqrstuvwxyz"</code></pre>
<p><code>base32</code> consists of digits 0 thru 9 plus all lowercase letters excluding <code>a, i, l, o</code>. As the search space is recursively partitioned, each group of 5 bits, when converted to a decimal integer, maps to one of the values in <code>base32</code> above.</p>
<p>I’ll present the algorithm first, then walkthrough it step-by-step. What follows is a basic implementation of GeoHashing, which takes as input the latitude and longitude for a point of interest, and returns the GeoHash and bounding box to the specified level of precision:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Very inefficient GeoHashing subroutine. For demonstration purposes only. </span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_geohash(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>):</span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generate GeoHash of lat/lon at specified precision.</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    lat: float</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Latitude of point of interest.</span></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    lon: float</span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Longitude of point of interest</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    precision: int</span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Precision of GeoHash. Higher values result in </span></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        smaller bounding regions.</span></span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    geohash, bbox as list</span></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-25">    base32 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0123456789bcdefghjkmnpqrstuvwxyz"</span></span>
<span id="cb3-26">    bits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-27"></span>
<span id="cb3-28">    min_lat, max_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span></span>
<span id="cb3-29">    min_lon, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span></span>
<span id="cb3-30"></span>
<span id="cb3-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> precision):</span>
<span id="cb3-32"></span>
<span id="cb3-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-34">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bisect longitude (E-W).</span></span>
<span id="cb3-35">            mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> mid_lon:</span>
<span id="cb3-37">                bits.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-38">                min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mid_lon</span>
<span id="cb3-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-40">                bits.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-41">                max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mid_lon</span>
<span id="cb3-42"></span>
<span id="cb3-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bisect latitude (N-S).</span></span>
<span id="cb3-45">            mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> mid_lat:</span>
<span id="cb3-47">                bits.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-48">                min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mid_lat</span>
<span id="cb3-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-50">                bits.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-51">                max_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mid_lat</span>
<span id="cb3-52"></span>
<span id="cb3-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create single bit string from list of 0/1s. </span></span>
<span id="cb3-54">    bitstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(ii) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bits])</span>
<span id="cb3-55"></span>
<span id="cb3-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Partition bitstr into groups of 5 bits. </span></span>
<span id="cb3-57">    quints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [bitstr[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ii):(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(precision)]</span>
<span id="cb3-58"></span>
<span id="cb3-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert binary digits to decimal digits to get indices into base32. </span></span>
<span id="cb3-60">    indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(ii, base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> quints]</span>
<span id="cb3-61"></span>
<span id="cb3-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup characters associated with each index and concatenate.</span></span>
<span id="cb3-63">    geohash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join([base32[ii] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> indices]) </span>
<span id="cb3-64"></span>
<span id="cb3-65">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># GeoHash bounding box is just the final, min_lat, min_lon, max_lat, max_lon.</span></span>
<span id="cb3-66">    bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [min_lat, min_lon, max_lat, max_lon]</span>
<span id="cb3-67"></span>
<span id="cb3-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(geohash, bbox)</span></code></pre></div>
</div>
<p>We define <code>base32</code> and initialize <code>bits</code> to hold our 0s and 1s. The initial minimum and maximum latitudes and longitudes define the bounds of the search space.</p>
<p>The range of iteration is specified as <code>range(5 * precision)</code>. For a GeoHash having precision=6, the <code>bits</code> list will contain 5 * 6 = 30 values. We multiply by 5 since the <code>base32</code> character map has length 32, and 2^5 bit arrangements cover each of the 32 indices.</p>
<p>If <code>ii</code> is even, we bisect longitude. If <code>lon &gt;= mid_lon</code> we append 1 to <code>bits</code> and update <code>min_lat</code>. Otherwise we append 0 and update <code>max_lon</code>. If <code>ii</code> is odd, we execute the same logic but for latitude. In this way, the final bit string represents interleaved longitude and latitude bits.</p>
<p>Once iteration completes, the individual elements of <code>bits</code> are concatenated into a single bit string <code>bitstr</code>. Next, we partition <code>bitstr</code> into groups of 5 bits (<code>quints</code>), which are converted to decimal integers, which are then used as indices to lookup elements from <code>base32</code>. These characters are concatenated into a single string representing the GeoHash.</p>
<p>To demonstrate, lets find the GeoHash for the Merchandise Mart (41.88876, -87.63516) at precision = 6. Once iteration completes, <code>bits</code> will consist of 30 1s and 0s:</p>
<pre><code>[0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1]</code></pre>
<p>Which gets combined into a single bit string:</p>
<pre><code>'011001010100011111001001101011'</code></pre>
<p>Partitioned into groups of 5 bits:</p>
<pre><code>['01100', '10101', '00011', '11100', '10011', '01011']</code></pre>
<p>Converted to decimal integers:</p>
<pre><code>[12, 21, 3, 28, 19, 11]</code></pre>
<p>Which serve as indices into <code>base32</code>, whose corresponding elements and are concatenated into the GeoHash:</p>
<pre><code>'dp3wmc'</code></pre>
<p>Our function also returns the bounding box of the precision = 6 GeoHash:</p>
<pre><code>[41.8853759765625, -87.637939453125, 41.890869140625, -87.626953125]</code></pre>
<p>Let’s compare the results of our implementation against pygeohash to ensure consistency:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygeohash</span>
<span id="cb10-3">lat, lon, precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.88876</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.63516</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb10-4">pygeohash.encode(latitude<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lat, longitude<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>'dp3wmc'</code></pre>
</div>
</div>
<p>Let’s visualize the precision = 6 GeoHash using folium:</p>
<div id="cell-6" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium </span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> folium.features <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DivIcon</span>
<span id="cb12-4"></span>
<span id="cb12-5"></span>
<span id="cb12-6">lat, lon, precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.88876</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.63516</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use our subroutine to get geohash and bounding box. </span></span>
<span id="cb12-9">geohash, bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb12-10"></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unpack bbox.</span></span>
<span id="cb12-12">min_lat, min_lon, max_lat, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bbox</span>
<span id="cb12-13"></span>
<span id="cb12-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get mid_lat and mid_lon for GeoHash id placement. </span></span>
<span id="cb12-15">mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb12-16">mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb12-17"></span>
<span id="cb12-18">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(</span>
<span id="cb12-19">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], </span>
<span id="cb12-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#width=900, </span></span>
<span id="cb12-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#height=600, </span></span>
<span id="cb12-22">    zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, </span>
<span id="cb12-23">    zoom_control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb12-24">    no_touch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb12-25">    tiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OpenStreetMap"</span></span>
<span id="cb12-26">    )</span>
<span id="cb12-27"></span>
<span id="cb12-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># precision = 6 GeoHash bounding box. </span></span>
<span id="cb12-29">folium.Rectangle(</span>
<span id="cb12-30">    [(min_lat, min_lon), (max_lat, max_lon)], </span>
<span id="cb12-31">    fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span></span>
<span id="cb12-32">    ).add_to(m)</span>
<span id="cb12-33"></span>
<span id="cb12-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Red dot at Merchandise Mart. </span></span>
<span id="cb12-35">folium.CircleMarker(</span>
<span id="cb12-36">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb12-37">    fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-38">    ).add_to(m)</span>
<span id="cb12-39"></span>
<span id="cb12-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># precision = 6 GeoHash id.</span></span>
<span id="cb12-41">folium.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>.Marker(</span>
<span id="cb12-42">    [mid_lat, mid_lon],</span>
<span id="cb12-43">    icon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DivIcon(</span>
<span id="cb12-44">        icon_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>),</span>
<span id="cb12-45">        icon_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb12-46">        html<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'&lt;div style="font-size: 40pt"&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>geohash<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/div&gt;'</span>,</span>
<span id="cb12-47">        )</span>
<span id="cb12-48">    ).add_to(m)</span>
<span id="cb12-49"></span>
<span id="cb12-50">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = true;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_d406830424c31d9f7fa29cd5a8cd1ac4 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_d406830424c31d9f7fa29cd5a8cd1ac4&quot; ></div>
        
</body>
<script>
    
    
            var map_d406830424c31d9f7fa29cd5a8cd1ac4 = L.map(
                &quot;map_d406830424c31d9f7fa29cd5a8cd1ac4&quot;,
                {
                    center: [41.88876, -87.63516],
                    crs: L.CRS.EPSG3857,
                    zoom: 16,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_1795c636b0bbda617f294c12eb61b0c3 = L.tileLayer(
                &quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;Data by \u0026copy; \u003ca target=\&quot;_blank\&quot; href=\&quot;http://openstreetmap.org\&quot;\u003eOpenStreetMap\u003c/a\u003e, under \u003ca target=\&quot;_blank\&quot; href=\&quot;http://www.openstreetmap.org/copyright\&quot;\u003eODbL\u003c/a\u003e.&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 18, &quot;maxZoom&quot;: 18, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            ).addTo(map_d406830424c31d9f7fa29cd5a8cd1ac4);
        
    
            var rectangle_7cf6f5bc1a73d02c9d170a86d5d75f20 = L.rectangle(
                [[41.8853759765625, -87.637939453125], [41.890869140625, -87.626953125]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.15, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_d406830424c31d9f7fa29cd5a8cd1ac4);
        
    
            var circle_marker_279afb42ab0900e900e86115810f3be2 = L.circleMarker(
                [41.88876, -87.63516],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_d406830424c31d9f7fa29cd5a8cd1ac4);
        
    
            var marker_f12d4899ed3684817b7ad4465c64a562 = L.marker(
                [41.88812255859375, -87.6324462890625],
                {}
            ).addTo(map_d406830424c31d9f7fa29cd5a8cd1ac4);
        
    
            var div_icon_97223cf9a4629254a8495bab6664e5da = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 40pt\&quot;\u003edp3wmc\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [100, 50], &quot;iconSize&quot;: [250, 36]});
            marker_f12d4899ed3684817b7ad4465c64a562.setIcon(div_icon_97223cf9a4629254a8495bab6664e5da);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
</section>
<section id="identify-geohash-neighboring-cells" class="level3">
<h3 class="anchored" data-anchor-id="identify-geohash-neighboring-cells">Identify GeoHash Neighboring Cells</h3>
<p>We can use the <code>get_geohash</code> function to help identify cells that neighbor a given GeoHash. Once the bounding box for the target GeoHash is known we simply increment those coordinates by a small amount, then lookup the GeoHash and bounding box associated with the new coordinate:</p>
<div id="cell-8" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2">lat, lon, precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.88876</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.63516</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb13-3"></span>
<span id="cb13-4">eps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span></span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center GeoHash id and bounding box.</span></span>
<span id="cb13-7">geohash, bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb13-8"></span>
<span id="cb13-9">min_lat, min_lon, max_lat, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bbox</span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get GeoHash id and bounding box for Northwest cell.</span></span>
<span id="cb13-12">gh_nw, bb_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(max_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb13-13"></span>
<span id="cb13-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get GeoHash id and bounding box for Northeast cell.</span></span>
<span id="cb13-15">gh_ne, bb_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(max_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb13-16"></span>
<span id="cb13-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get GeoHash id and bounding box for Southeast cell.</span></span>
<span id="cb13-18">gh_se, bb_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb13-19"></span>
<span id="cb13-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get GeoHash id and bounding box for Southwest cell.</span></span>
<span id="cb13-21">gh_sw, bb_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span></code></pre></div>
</div>
<p>Which gives us the bounding boxes in NW, NE, SE and SW directions. Notice that all 5 boxes share the same prefix out to 4 characters:</p>
<p><img src="https://www.jtrive.com/posts/geohash-python/geohash03.png" class="img-fluid"></p>
<p>Using the results from the NW, NE, SE and SW directions, we obtain the GeoHashes in the N, S, E and W directions:</p>
<div id="cell-11" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For N, get mid point between NE and NW cells.</span></span>
<span id="cb14-3">min_lat_nw, min_lon_nw, max_lat_nw, max_lon_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_nw</span>
<span id="cb14-4">min_lat_ne, min_lon_ne, max_lat_ne, max_lon_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_ne</span>
<span id="cb14-5">n_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat_nw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-6">n_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_ne) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For S, get mid point between SE and SW cells.</span></span>
<span id="cb14-9">min_lat_sw, min_lon_sw, max_lat_sw, max_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_sw</span>
<span id="cb14-10">min_lat_se, min_lon_se, max_lat_se, max_lon_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_se</span>
<span id="cb14-11">s_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat_sw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-12">s_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_se) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For E, get mid point between SE and NE cells.</span></span>
<span id="cb14-15">min_lat_ne, min_lon_ne, max_lat_ne, max_lon_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_ne</span>
<span id="cb14-16">min_lat_se, min_lon_se, max_lat_se, max_lon_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_se</span>
<span id="cb14-17">e_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (max_lat_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_lat_se) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-18">e_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_se) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-19"></span>
<span id="cb14-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For W, get mid point between SW and NW cells.</span></span>
<span id="cb14-21">min_lat_nw, min_lon_nw, max_lat_nw, max_lon_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_nw</span>
<span id="cb14-22">min_lat_sw, min_lon_sw, max_lat_sw, max_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_sw</span>
<span id="cb14-23">w_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (max_lat_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_lat_sw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-24">w_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_sw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<p>Which we can visualize using folium, resulting in:</p>
<p><img src="https://www.jtrive.com/posts/geohash-python/geohash04.png" class="img-fluid"></p>
<p>We can encapsulate this logic within a function we’ll call <code>get_neighbors</code>:</p>
<div id="cell-14" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_neighbors(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>):</span>
<span id="cb15-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Find 8 adjacent neighbors to GeoHash associated</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with (lat, lon) at specified precision.</span></span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    lat: float</span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Latitude of point of interest.</span></span>
<span id="cb15-12"></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    lon: float</span></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Longitude of point of interest</span></span>
<span id="cb15-15"></span>
<span id="cb15-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    precision: int</span></span>
<span id="cb15-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Precision of GeoHash. Higher values result in </span></span>
<span id="cb15-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        smaller bounding regions.</span></span>
<span id="cb15-19"></span>
<span id="cb15-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb15-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb15-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dict</span></span>
<span id="cb15-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb15-24">    dneighbors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb15-25">    eps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span></span>
<span id="cb15-26"></span>
<span id="cb15-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center GeoHash id and bounding box.</span></span>
<span id="cb15-28">    geohash, bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb15-29">    min_lat, min_lon, max_lat, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bbox</span>
<span id="cb15-30"></span>
<span id="cb15-31">    dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>: geohash, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: bbox}</span>
<span id="cb15-32"></span>
<span id="cb15-33">    dcorners <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb15-34">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nw"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>: max_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>: min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps},</span>
<span id="cb15-35">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ne"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>: max_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>: max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps},</span>
<span id="cb15-36">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sw"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>: min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>: min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps},</span>
<span id="cb15-37">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"se"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>: min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>: max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps},</span>
<span id="cb15-38">        }</span>
<span id="cb15-39"></span>
<span id="cb15-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dcorners:</span>
<span id="cb15-41">        lat_, lon_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dcorners[kk][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>], dcorners[kk][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>]</span>
<span id="cb15-42">        gh, bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(lat_, lon_, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb15-43">        dneighbors[kk] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>: gh, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: bb}</span>
<span id="cb15-44"></span>
<span id="cb15-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find GeoHash for N, S, E and W directions.</span></span>
<span id="cb15-46">    min_lat_nw, min_lon_nw, max_lat_nw, max_lon_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nw"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-47">    min_lat_ne, min_lon_ne, max_lat_ne, max_lon_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ne"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-48">    n_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat_nw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-49">    n_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_ne) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-50">    n_gh, n_bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(n_lat, n_lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb15-51">    dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>: n_gh, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: n_bb}</span>
<span id="cb15-52"></span>
<span id="cb15-53">    min_lat_sw, min_lon_sw, max_lat_sw, max_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sw"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-54">    min_lat_se, min_lon_se, max_lat_se, max_lon_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"se"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-55">    s_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat_sw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-56">    s_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_se) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-57">    s_gh, s_bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(s_lat, s_lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb15-58">    dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>: s_gh, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: s_bb}</span>
<span id="cb15-59"></span>
<span id="cb15-60">    min_lat_ne, min_lon_ne, max_lat_ne, max_lon_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ne"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-61">    min_lat_se, min_lon_se, max_lat_se, max_lon_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"se"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-62">    e_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (max_lat_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_lat_se) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-63">    e_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_se) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-64">    e_gh, e_bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(e_lat, e_lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb15-65">    dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>: e_gh, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: e_bb}</span>
<span id="cb15-66"></span>
<span id="cb15-67">    min_lat_nw, min_lon_nw, max_lat_nw, max_lon_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nw"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-68">    min_lat_sw, min_lon_sw, max_lat_sw, max_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sw"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-69">    w_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (max_lat_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_lat_sw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-70">    w_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_sw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-71">    w_gh, w_bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(w_lat, w_lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb15-72">    dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>: w_gh, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: w_bb}</span>
<span id="cb15-73">    </span>
<span id="cb15-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(dneighbors)</span></code></pre></div>
</div>
<p>Running <code>get_neighbors</code> and iterating over the results yields:</p>
<div id="cell-16" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">lat, lon, precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.88876</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.63516</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb16-3"></span>
<span id="cb16-4">dn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_neighbors(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dn:</span>
<span id="cb16-7">    gh, bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dn[kk][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>], dn[kk][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb16-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>[kk]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: geohash=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, bbox=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-9">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['center']: geohash=dp3wmc, bbox=[41.8853759765625, -87.637939453125, 41.890869140625, -87.626953125]
['nw']: geohash=dp3wmd, bbox=[41.890869140625, -87.64892578125, 41.8963623046875, -87.637939453125]
['ne']: geohash=dp3wq4, bbox=[41.890869140625, -87.626953125, 41.8963623046875, -87.615966796875]
['sw']: geohash=dp3wm8, bbox=[41.8798828125, -87.64892578125, 41.8853759765625, -87.637939453125]
['se']: geohash=dp3wq0, bbox=[41.8798828125, -87.626953125, 41.8853759765625, -87.615966796875]
['n']: geohash=dp3wmf, bbox=[41.890869140625, -87.637939453125, 41.8963623046875, -87.626953125]
['s']: geohash=dp3wmb, bbox=[41.8798828125, -87.637939453125, 41.8853759765625, -87.626953125]
['e']: geohash=dp3wq1, bbox=[41.8853759765625, -87.626953125, 41.890869140625, -87.615966796875]
['w']: geohash=dp3wm9, bbox=[41.8853759765625, -87.64892578125, 41.890869140625, -87.637939453125]</code></pre>
</div>
</div>
<p>Finally, we demonstrate how to recreate the previous figure (target GeoHash cell with eight adjacent neighbors):</p>
<div id="cell-18" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium </span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> folium.features <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DivIcon</span>
<span id="cb18-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb18-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb18-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb18-6"></span>
<span id="cb18-7"></span>
<span id="cb18-8">lat, lon, precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.88876</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.63516</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb18-9"></span>
<span id="cb18-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get  GeoHashes and bounding boxes. </span></span>
<span id="cb18-11">dn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_neighbors(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb18-12"></span>
<span id="cb18-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Separate color for each cell.</span></span>
<span id="cb18-14">fcolors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpl.colormaps[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gist_rainbow"</span>]</span>
<span id="cb18-15">colors_rgba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [fcolors(ii) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dn))]</span>
<span id="cb18-16">colors_hex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [mpl.colors.to_hex(ii, keep_alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> colors_rgba]</span>
<span id="cb18-17"></span>
<span id="cb18-18"></span>
<span id="cb18-19">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(</span>
<span id="cb18-20">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], </span>
<span id="cb18-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># width=900, </span></span>
<span id="cb18-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># height=600, </span></span>
<span id="cb18-23">    zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, </span>
<span id="cb18-24">    zoom_control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb18-25">    no_touch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb18-26">    tiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OpenStreetMap"</span></span>
<span id="cb18-27">    )</span>
<span id="cb18-28"></span>
<span id="cb18-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, kk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dn.keys()):</span>
<span id="cb18-30">    color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colors_hex[ii]</span>
<span id="cb18-31">    geohash, bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dn[kk][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>], dn[kk][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb18-32">    min_lat, min_lon, max_lat, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bbox</span>
<span id="cb18-33">    mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb18-34">    mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb18-35">    </span>
<span id="cb18-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># GeoHash bounding box. </span></span>
<span id="cb18-37">    folium.Rectangle(</span>
<span id="cb18-38">        [(min_lat, min_lon), (max_lat, max_lon)], </span>
<span id="cb18-39">        fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color, fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span></span>
<span id="cb18-40">        ).add_to(m)</span>
<span id="cb18-41">    </span>
<span id="cb18-42">    folium.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>.Marker(</span>
<span id="cb18-43">        [mid_lat, mid_lon],</span>
<span id="cb18-44">        icon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DivIcon(</span>
<span id="cb18-45">            icon_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>),</span>
<span id="cb18-46">            icon_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>),</span>
<span id="cb18-47">            html<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'&lt;div style="font-size: 30pt"&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>geohash<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/div&gt;'</span>,</span>
<span id="cb18-48">            )</span>
<span id="cb18-49">        ).add_to(m)</span>
<span id="cb18-50"></span>
<span id="cb18-51">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = true;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_7609c16d3f5e82169a8f210a7357fa0e {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_7609c16d3f5e82169a8f210a7357fa0e&quot; ></div>
        
</body>
<script>
    
    
            var map_7609c16d3f5e82169a8f210a7357fa0e = L.map(
                &quot;map_7609c16d3f5e82169a8f210a7357fa0e&quot;,
                {
                    center: [41.88876, -87.63516],
                    crs: L.CRS.EPSG3857,
                    zoom: 16,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_9ca7531826c6a63d8eba727121a56998 = L.tileLayer(
                &quot;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;Data by \u0026copy; \u003ca target=\&quot;_blank\&quot; href=\&quot;http://openstreetmap.org\&quot;\u003eOpenStreetMap\u003c/a\u003e, under \u003ca target=\&quot;_blank\&quot; href=\&quot;http://www.openstreetmap.org/copyright\&quot;\u003eODbL\u003c/a\u003e.&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 18, &quot;maxZoom&quot;: 18, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var rectangle_d2cd1bc853ff4dd57e01352f87e3f5fd = L.rectangle(
                [[41.8853759765625, -87.637939453125], [41.890869140625, -87.626953125]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff0029&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var marker_c58a6d95cfb912f1fb9577ddb99d1a75 = L.marker(
                [41.88812255859375, -87.6324462890625],
                {}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var div_icon_d4ffaad28ff46c1535a90764ac975199 = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003edp3wmc\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_c58a6d95cfb912f1fb9577ddb99d1a75.setIcon(div_icon_d4ffaad28ff46c1535a90764ac975199);
        
    
            var rectangle_5a1ab71b79989c9e16c6115131f61a7d = L.rectangle(
                [[41.890869140625, -87.64892578125], [41.8963623046875, -87.637939453125]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff8400&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var marker_9e79bad9da2c2d2257fbcdd552034fd2 = L.marker(
                [41.89361572265625, -87.6434326171875],
                {}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var div_icon_3255fb0f152dd09dd81d50347dfc30bb = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003edp3wmd\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_9e79bad9da2c2d2257fbcdd552034fd2.setIcon(div_icon_3255fb0f152dd09dd81d50347dfc30bb);
        
    
            var rectangle_26e73ecd278d440bc3db94c13b903e7e = L.rectangle(
                [[41.890869140625, -87.626953125], [41.8963623046875, -87.615966796875]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#cdff00&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var marker_cafc1c02fce8a6401bd062139e257a6c = L.marker(
                [41.89361572265625, -87.6214599609375],
                {}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var div_icon_fe83083374732c5751b8af0a971b785d = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003edp3wq4\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_cafc1c02fce8a6401bd062139e257a6c.setIcon(div_icon_fe83083374732c5751b8af0a971b785d);
        
    
            var rectangle_4ebc5c7bad4eab49bb88cd4f11f7d4e4 = L.rectangle(
                [[41.8798828125, -87.64892578125], [41.8853759765625, -87.637939453125]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#20ff00&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var marker_f07946b5c3990bb58ff9f9ecd888a41e = L.marker(
                [41.88262939453125, -87.6434326171875],
                {}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var div_icon_201904927cb7eb8596943e263fdbc1ff = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003edp3wm8\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_f07946b5c3990bb58ff9f9ecd888a41e.setIcon(div_icon_201904927cb7eb8596943e263fdbc1ff);
        
    
            var rectangle_2d085c45c89a83aac01a5544393efea8 = L.rectangle(
                [[41.8798828125, -87.626953125], [41.8853759765625, -87.615966796875]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#00ff8c&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var marker_97915d64e3cfc03dc46356ad58389fc0 = L.marker(
                [41.88262939453125, -87.6214599609375],
                {}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var div_icon_dc67c82a01a1835d7ca19731d53d3c75 = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003edp3wq0\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_97915d64e3cfc03dc46356ad58389fc0.setIcon(div_icon_dc67c82a01a1835d7ca19731d53d3c75);
        
    
            var rectangle_850a945eaf0f8e17da246dc7b3252ee9 = L.rectangle(
                [[41.890869140625, -87.637939453125], [41.8963623046875, -87.626953125]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#00c6ff&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var marker_1b2009ed20dc695823d641b3970752d5 = L.marker(
                [41.89361572265625, -87.6324462890625],
                {}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var div_icon_ccdaa85db053fd09921a611cce2caa6a = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003edp3wmf\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_1b2009ed20dc695823d641b3970752d5.setIcon(div_icon_ccdaa85db053fd09921a611cce2caa6a);
        
    
            var rectangle_2a26638a179246e389ffa998457928ec = L.rectangle(
                [[41.8798828125, -87.637939453125], [41.8853759765625, -87.626953125]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#0018ff&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var marker_6968907376b71d05774c6f35151adf0a = L.marker(
                [41.88262939453125, -87.6324462890625],
                {}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var div_icon_f3375c7f8f2f56c2e7fda754a563ae09 = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003edp3wmb\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_6968907376b71d05774c6f35151adf0a.setIcon(div_icon_f3375c7f8f2f56c2e7fda754a563ae09);
        
    
            var rectangle_071bbf9a3a0f791be9e5dab51f0f46e5 = L.rectangle(
                [[41.8853759765625, -87.626953125], [41.890869140625, -87.615966796875]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#9600ff&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var marker_ae7d49a17d84562c079efd6a360e727a = L.marker(
                [41.88812255859375, -87.6214599609375],
                {}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var div_icon_1bdaea4844f066647cc5cdc248dcb93d = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003edp3wq1\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_ae7d49a17d84562c079efd6a360e727a.setIcon(div_icon_1bdaea4844f066647cc5cdc248dcb93d);
        
    
            var rectangle_91acb0e9f937275047501d32d4cf770a = L.rectangle(
                [[41.8853759765625, -87.64892578125], [41.890869140625, -87.637939453125]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff00bf&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var marker_9f59a0be747ce0839b874787eacd44d8 = L.marker(
                [41.88812255859375, -87.6434326171875],
                {}
            ).addTo(map_7609c16d3f5e82169a8f210a7357fa0e);
        
    
            var div_icon_bb89b29e69ec5307441217738fb9837e = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003edp3wm9\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_9f59a0be747ce0839b874787eacd44d8.setIcon(div_icon_bb89b29e69ec5307441217738fb9837e);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <category>Geospatial</category>
  <guid>https://www.jtrive.com/posts/geohash-python/geohash-python.html</guid>
  <pubDate>Thu, 01 Feb 2024 06:00:00 GMT</pubDate>
</item>
</channel>
</rss>
