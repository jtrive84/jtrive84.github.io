<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>The Pleasure of Finding Things Out: A blog by James Triveri</title>
<link>https://www.jtrive.com/#category=Python</link>
<atom:link href="https://www.jtrive.com/index-python.xml" rel="self" type="application/rss+xml"/>
<description>A technical blog by James Triveri&quot;</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Mon, 14 Apr 2025 05:00:00 GMT</lastBuildDate>
<item>
  <title>Up and Running with JAX - Backpropagation and Training Neural Network</title>
  <link>https://www.jtrive.com/posts/intro-to-jax-part-3/intro-to-jax-part-3.html</link>
  <description><![CDATA[ 





<p>In the third and final installment of the <em>Up and Running with JAX</em> series, we demonstrate the remaining steps required to train and evaluate a simple neural network, specifically the implementation of the loss function, backward pass and training loop. As in Part 2, the focus will be on predicting class labels for the MNIST dataset, which consists of 28x28 pixel images of handwritten digits (0-9). The training loop consists of the following steps:</p>
<ul>
<li>Load a batch of training data.</li>
<li>Obtain model predictions for current batch of images.</li>
<li>Calculate the loss for current batch predictions vs.&nbsp;targets.</li>
<li>Calculate backward gradients over the weights and biases.</li>
<li>Update the weights and biases using the gradient information.</li>
<li>Calculate the loss on a set of data that not used for training.</li>
</ul>
<p>We begin by loading the dataset and functions implemented in Part 2 that facilitate weight initialization and the network forward pass:</p>
<div id="fc6d0f0f" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ToTensor</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> v2</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-15"></span>
<span id="cb1-16">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-17">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-18">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-19">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-20">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"display.precision"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-21">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch size.</span></span>
<span id="cb1-24">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb1-25"></span>
<span id="cb1-26">train_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.MNIST(</span>
<span id="cb1-27">    root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>,</span>
<span id="cb1-28">    train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-29">    download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-30">    transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>v2.Compose([ToTensor()])</span>
<span id="cb1-31">)</span>
<span id="cb1-32"></span>
<span id="cb1-33">valid_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.MNIST(</span>
<span id="cb1-34">    root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>,</span>
<span id="cb1-35">    train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb1-36">    download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-37">    transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>v2.Compose([ToTensor()])</span>
<span id="cb1-38">)</span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert PIL images to NumPy arrays.</span></span>
<span id="cb1-41">train_data_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_data.data.numpy() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize pixel values to [0, 1]</span></span>
<span id="cb1-42">valid_data_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_data.data.numpy() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize pixel values to [0, 1] </span></span>
<span id="cb1-43">train_data_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_data_arr.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten images to 1D arrays</span></span>
<span id="cb1-44">valid_data_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_data_arr.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten images to 1D arrays</span></span>
<span id="cb1-45">train_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_data.targets.numpy()</span>
<span id="cb1-46">valid_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_data.targets.numpy()</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create training and validation batches of 64.</span></span>
<span id="cb1-49">train_batches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-50">    (train_data_arr[(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ii):(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))], train_labels[(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ii):(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]) </span>
<span id="cb1-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_data_arr) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> bs)</span>
<span id="cb1-52">]</span>
<span id="cb1-53">valid_batches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-54">    (valid_data_arr[(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ii):(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))], valid_labels[(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ii):(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]) </span>
<span id="cb1-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_data_arr) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> bs)</span>
<span id="cb1-56">]</span>
<span id="cb1-57"></span>
<span id="cb1-58"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_data_arr.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_data_arr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-59"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"valid_data_arr.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_data_arr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-60"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_labels.shape  : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_labels<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-61"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"valid_labels.shape  : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_labels<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-62"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"len(train_batches)  : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_batches)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-63"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"len(valid_batches)  : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_batches)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>train_data_arr.shape: (60000, 784)
valid_data_arr.shape: (10000, 784)
train_labels.shape  : (60000,)
valid_labels.shape  : (10000,)
len(train_batches)  : 937
len(valid_batches)  : 156</code></pre>
</div>
</div>
<div id="9f47f6b0" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Functions introduced in Part 2. Refer to </span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    https://www.jtrive.com/posts/intro-to-jax-part-2/intro-to-jax-part-2.html</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">for more information. </span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random, vmap</span>
<span id="cb3-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jax.numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> jnp</span>
<span id="cb3-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> relu</span>
<span id="cb3-11"></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> initialize_weights(sizes, key, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.02</span>):</span>
<span id="cb3-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    "Initialize weights and biases for each layer for simple fully-connected </span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    network.</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    sizes : list of int</span></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        List of integers representing the number of neurons in each layer.</span></span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    key : jax.random.PRNGKey</span></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Random key for JAX.</span></span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb3-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    List of initialized weights and biases for each layer.</span></span>
<span id="cb3-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-30">    keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.split(key, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sizes) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-31">    params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m, n, k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(sizes[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], sizes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:], keys):</span>
<span id="cb3-33">        w_key, b_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.split(k)</span>
<span id="cb3-34">        w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> random.normal(w_key, (m, n))</span>
<span id="cb3-35">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> random.normal(b_key, (n,))</span>
<span id="cb3-36">        params.append((w, b))</span>
<span id="cb3-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> params</span>
<span id="cb3-38"></span>
<span id="cb3-39"></span>
<span id="cb3-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(params, X):</span>
<span id="cb3-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Forward pass for simple fully-connected network.</span></span>
<span id="cb3-43"></span>
<span id="cb3-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb3-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb3-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    params : list of tuples</span></span>
<span id="cb3-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        List of tuples containing weights and biases for each layer.</span></span>
<span id="cb3-48"></span>
<span id="cb3-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    X : jax.numpy.ndarray</span></span>
<span id="cb3-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Input data.</span></span>
<span id="cb3-51"></span>
<span id="cb3-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb3-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb3-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    jax.numpy.ndarray</span></span>
<span id="cb3-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-56">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X</span>
<span id="cb3-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> W, b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> params[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb3-58">        z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.dot(a, W) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb3-59">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> relu(z)</span>
<span id="cb3-60">    W, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> jnp.dot(a, W) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb3-62"></span>
<span id="cb3-63"></span>
<span id="cb3-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Auto-vectorization of forward pass.</span></span>
<span id="cb3-65">batch_forward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vmap(forward, in_axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
</div>
<p><br></p>
<section id="cross-entropy-loss-and-softmax" class="level3">
<h3 class="anchored" data-anchor-id="cross-entropy-loss-and-softmax"><strong>Cross-Entropy Loss and Softmax</strong></h3>
<p>Categorical cross-entropy loss is the most commonly used loss function for multi-class classification with mutually-exclusive classes. A lower cross-entropy loss means the predicted probabilities are closer to the true labels. A key characteristic of cross entropy loss is that it rewards/penalizes the probabilities of correct classes only: The value is independent of how the remaining probability is split between the incorrect classes.</p>
<p>For a single sample with ( C ) classes, the cross-entropy loss is give by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AL%20=%20-%20%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi=1%7D%5E%7BC%7D%20y_i%20%5Ctimes%20%5Clog(%5Chat%7By_i%7D),%0A"></p>
<p>where: - <img src="https://latex.codecogs.com/png.latex?n"> is the batch size. - <img src="https://latex.codecogs.com/png.latex?y_i"> is the true label (1 for the correct class, 0 otherwise). - <img src="https://latex.codecogs.com/png.latex?%5Chat%7By_i%7D"> is the predicted probability for class <img src="https://latex.codecogs.com/png.latex?i"> (from softmax). - The <img src="https://latex.codecogs.com/png.latex?%5Clog"> ensures the loss is large when the predicted probability is low for the correct class.</p>
<p>If we had a single vector of actual labels representing the index of the correct class (i.e., <code>yact</code> from above), simply compute the negative log of the probability at this index to get the cross entropy loss for that sample (since cross-entropy doesn’t consider incorrect classes).</p>
<p>We forego one-hot encoding our targets, so our loss function accepts a batch of final layer activations (<code>logits</code>) and targets (<code>labels</code>) represented as a single integer between 0 and 9 per sample. Using a batch size of 64, <code>logits</code> has shape (64, 10), and <code>labels</code> (64,):</p>
<div id="ce53f954" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> log_softmax</span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cross_entropy_loss(params, X, y):</span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute the loss for the given logits and labels.</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    params : list of tuples</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        List of tuples containing weights and biases for each layer.</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    logits :</span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Batch of final layer activations.</span></span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    labels :</span></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Batch of true labels, a single integer per sample.</span></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Computed loss.</span></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute logits for the batch.</span></span>
<span id="cb4-25">    logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward(params, X)</span>
<span id="cb4-26"></span>
<span id="cb4-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert logits to log probabilities.</span></span>
<span id="cb4-28">    log_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_softmax(logits)</span>
<span id="cb4-29"></span>
<span id="cb4-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>log_probs[jnp.arange(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y)), y].mean()</span>
<span id="cb4-31"></span></code></pre></div>
</div>
<p><br></p>
<p>The softmax function converts a vector logits into a probability distribution over classes. Logits refer to the raw, unnormalized output values produced by the last layer of a neural network before applying an activation function. It is commonly used in classification tasks. In some deep learning frameworks, cross-entropy loss is combined with softmax within a single function (see for example, <a href="https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html">CrossEntropyLoss</a> in PyTorch). For a vector <img src="https://latex.codecogs.com/png.latex?z"> of length <img src="https://latex.codecogs.com/png.latex?n">, softmax is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma(z_i)%20=%20%5Cfrac%7Be%5E%7Bz_i%7D%7D%7B%5Csum_%7Bj=1%7D%5E%7Bn%7D%20e%5E%7Bz_j%7D%7D,%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?e%5E%7Bz_i%7D"> exponentiates each element.</li>
<li>The denominator ensures all probabilities sum to 1.</li>
</ul>
<p><br></p>
<p>If any of the <img src="https://latex.codecogs.com/png.latex?z_i"> is large, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bz_i%7D"> can become extremely large, potentially causing overflow errors in computation. For example:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-2"></span>
<span id="cb5-3">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>])         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Large values</span></span>
<span id="cb5-4">softmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(np.exp(z))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OverflowError</span></span></code></pre></div>
<p><br></p>
<p>Since <img src="https://latex.codecogs.com/png.latex?e%5E%7B3000%7D"> is astronomically large, Python will struggle to handle it. The solution is to subtract the max value of each sample instead of using <img src="https://latex.codecogs.com/png.latex?z"> directly:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Csigma(z_i)%20=%20%5Cfrac%7Be%5E%7Bz_i%20-%20%5Cmax(z)%7D%7D%7B%5Csum_%7Bj=1%7D%5E%7Bn%7D%20e%5E%7Bz_j%20-%20%5Cmax(z)%7D%7D%0A"></p>
<p><br></p>
<p>This shifts all values down without affecting the final probabilities (since shifting inside the exponent maintains relative differences).</p>
<p><br></p>
</section>
<section id="backward-pass" class="level3">
<h3 class="anchored" data-anchor-id="backward-pass"><strong>Backward Pass</strong></h3>
<p>In order to obtain the gradients of the loss function w.r.t. the model parameters, JAX’s <code>grad</code> function can be used. <code>grad</code> computes the gradient of a scalar-valued function with respect to its inputs. It performs automatic differentiation by tracing the computation and building a backward pass to compute derivatives. <code>grad</code> accepts a Python function and returns a new function that computes the gradient of the original function. The returned function takes the same inputs as the original and returns the derivative w.r.t. the argument specified (the first argument by default).</p>
<p>Note that <code>grad</code> only returns the gradients of the loss function with respect to the parameters, and not the actual loss value. This is important information to have during training. We can instead use <code>value_and_grad</code>, which returns the actual loss value along with the gradients as a tuple. In the next cell, <code>update</code> implements the gradient update. I’ve included an <code>accuracy</code> function, which is used to evaluate model performance after each epoch:</p>
<div id="328c5e37" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> value_and_grad</span>
<span id="cb6-3"></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(params, X, y, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>):</span>
<span id="cb6-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Update weights and biases using gradient descent.</span></span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    params : list of tuples</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        List of tuples containing weights and biases for each layer.</span></span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    X : jax.numpy.ndarray</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Input data.</span></span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    y : jax.numpy.ndarray</span></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        True labels.</span></span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    lr : float</span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Learning rate.</span></span>
<span id="cb6-22"></span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tuple</span></span>
<span id="cb6-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Updated weights and biases.</span></span>
<span id="cb6-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss and gradients.</span></span>
<span id="cb6-29">    loss, grads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value_and_grad(cross_entropy_loss)(params, X, y)</span>
<span id="cb6-30">    </span>
<span id="cb6-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unpack parameters and gradients.</span></span>
<span id="cb6-32">    (W1, b1), (W2, b2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb6-33">    (dW1, db1), (dW2, db2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grads</span>
<span id="cb6-34"></span>
<span id="cb6-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update weights and biases.</span></span>
<span id="cb6-36">    W1_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dW1</span>
<span id="cb6-37">    b1_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> db1</span>
<span id="cb6-38">    W2_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dW2</span>
<span id="cb6-39">    b2_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> db2</span>
<span id="cb6-40">    </span>
<span id="cb6-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [(W1_new, b1_new), (W2_new, b2_new)], loss</span>
<span id="cb6-42"></span>
<span id="cb6-43"></span>
<span id="cb6-44"></span>
<span id="cb6-45"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> accuracy(logits, labels):</span>
<span id="cb6-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute accuracy.</span></span>
<span id="cb6-48"></span>
<span id="cb6-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb6-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb6-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    logits : jax.numpy.ndarray</span></span>
<span id="cb6-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Final layer activations.</span></span>
<span id="cb6-53"></span>
<span id="cb6-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    labels : jax.numpy.ndarray</span></span>
<span id="cb6-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        True labels.</span></span>
<span id="cb6-56"></span>
<span id="cb6-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb6-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb6-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    float</span></span>
<span id="cb6-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Accuracy.</span></span>
<span id="cb6-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-62">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.argmax(logits, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-63">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> labels).mean()</span></code></pre></div>
</div>
<p><br> We have everything setup train the network. The training loop is provided in the next cell, where the network is trained for 25 epochs:</p>
<div id="8d7206cc" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> perf_counter</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer sizes.</span></span>
<span id="cb7-5">sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of epochs.</span></span>
<span id="cb7-8">n_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate.</span></span>
<span id="cb7-11">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store loss, accuracy and runtime.</span></span>
<span id="cb7-14">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-15"></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize weights ands biases.</span></span>
<span id="cb7-17">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initialize_weights(sizes, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>random.PRNGKey(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>), scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.02</span>)   </span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_epochs):</span>
<span id="cb7-20"></span>
<span id="cb7-21">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> perf_counter()</span>
<span id="cb7-22"></span>
<span id="cb7-23">    losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] </span>
<span id="cb7-24"></span>
<span id="cb7-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> X, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_batches:</span>
<span id="cb7-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss.</span></span>
<span id="cb7-27">        params, loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> update(params, X, y, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span>
<span id="cb7-28">        losses.append(loss.item())</span>
<span id="cb7-29"></span>
<span id="cb7-30">    epoch_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> perf_counter() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb7-31">    avg_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(losses)</span>
<span id="cb7-32">    train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean([accuracy(forward(params, X), y).item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> X, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_batches])</span>
<span id="cb7-33">    valid_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean([accuracy(forward(params, X), y).item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> X, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> valid_batches])</span>
<span id="cb7-34">    results.append((epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, avg_loss, train_acc, valid_acc, epoch_time))</span>
<span id="cb7-35">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>avg_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, train acc.: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, valid acc.: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sec."</span>)</span>
<span id="cb7-36"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/25: loss: 1.5768, train acc.: 0.818, valid acc.: 0.824, time: 11.59 sec.
Epoch 2/25: loss: 0.5859, train acc.: 0.873, valid acc.: 0.881, time: 11.40 sec.
Epoch 3/25: loss: 0.4297, train acc.: 0.891, valid acc.: 0.896, time: 15.88 sec.
Epoch 4/25: loss: 0.3753, train acc.: 0.899, valid acc.: 0.904, time: 12.13 sec.
Epoch 5/25: loss: 0.3464, train acc.: 0.905, valid acc.: 0.909, time: 13.94 sec.
Epoch 6/25: loss: 0.3270, train acc.: 0.909, valid acc.: 0.913, time: 14.45 sec.
Epoch 7/25: loss: 0.3123, train acc.: 0.913, valid acc.: 0.918, time: 13.47 sec.
Epoch 8/25: loss: 0.2999, train acc.: 0.916, valid acc.: 0.920, time: 13.78 sec.
Epoch 9/25: loss: 0.2891, train acc.: 0.919, valid acc.: 0.922, time: 13.89 sec.
Epoch 10/25: loss: 0.2792, train acc.: 0.922, valid acc.: 0.925, time: 13.20 sec.
Epoch 11/25: loss: 0.2699, train acc.: 0.925, valid acc.: 0.927, time: 13.02 sec.
Epoch 12/25: loss: 0.2611, train acc.: 0.927, valid acc.: 0.930, time: 13.94 sec.
Epoch 13/25: loss: 0.2529, train acc.: 0.929, valid acc.: 0.931, time: 12.08 sec.
Epoch 14/25: loss: 0.2450, train acc.: 0.932, valid acc.: 0.932, time: 13.29 sec.
Epoch 15/25: loss: 0.2377, train acc.: 0.934, valid acc.: 0.934, time: 12.39 sec.
Epoch 16/25: loss: 0.2306, train acc.: 0.936, valid acc.: 0.936, time: 12.09 sec.
Epoch 17/25: loss: 0.2240, train acc.: 0.938, valid acc.: 0.937, time: 11.55 sec.
Epoch 18/25: loss: 0.2176, train acc.: 0.940, valid acc.: 0.939, time: 11.41 sec.
Epoch 19/25: loss: 0.2116, train acc.: 0.941, valid acc.: 0.940, time: 11.47 sec.
Epoch 20/25: loss: 0.2058, train acc.: 0.943, valid acc.: 0.941, time: 11.74 sec.
Epoch 21/25: loss: 0.2003, train acc.: 0.945, valid acc.: 0.942, time: 11.55 sec.
Epoch 22/25: loss: 0.1951, train acc.: 0.946, valid acc.: 0.943, time: 11.44 sec.
Epoch 23/25: loss: 0.1901, train acc.: 0.948, valid acc.: 0.945, time: 11.19 sec.
Epoch 24/25: loss: 0.1853, train acc.: 0.949, valid acc.: 0.946, time: 11.07 sec.
Epoch 25/25: loss: 0.1807, train acc.: 0.950, valid acc.: 0.947, time: 10.66 sec.</code></pre>
</div>
</div>
<p><br></p>
<p>The loss decreases as a function of epoch, and the best validation accuracy was realized on the 25th epoch. We can visualize our training metrics:</p>
<div id="40402590" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2">v_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8fcdb5"</span></span>
<span id="cb9-3">t_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#031f14"</span></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unpack results list. </span></span>
<span id="cb9-6">_, loss, tacc, vacc, epoch_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>results)</span>
<span id="cb9-7">xx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(loss))</span>
<span id="cb9-8"></span>
<span id="cb9-9">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>), sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training loss.</span></span>
<span id="cb9-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"training loss"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb9-13">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(xx, loss, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#303846"</span>)</span>
<span id="cb9-14">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"epoch"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb9-15">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loss"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#ax[0].set_xticks(xx)</span></span>
<span id="cb9-17">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb9-18">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb9-19">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb9-20">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb9-21">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-22">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training and validation accuracy.</span></span>
<span id="cb9-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train + validation accuracy"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb9-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(xx, tacc, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#303846"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train acc."</span>)</span>
<span id="cb9-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(xx, vacc, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"valid acc."</span>)</span>
<span id="cb9-28">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"epoch"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb9-29">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb9-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#ax[1].set_xticks(xx)</span></span>
<span id="cb9-31">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb9-32">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb9-33">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb9-34">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb9-35">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-36">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-37">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lower right"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, frameon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb9-38"></span>
<span id="cb9-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Runtime.</span></span>
<span id="cb9-40">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"epoch runtime"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb9-41">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].bar(xx, epoch_time, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t_color)</span>
<span id="cb9-42">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"epoch"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb9-43">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"runtime"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb9-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#ax[2].set_xticks(xx)</span></span>
<span id="cb9-45">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb9-46">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb9-47">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb9-48">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb9-49">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-50">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-51"></span>
<span id="cb9-52">plt.show()</span>
<span id="cb9-53"></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/intro-to-jax-part-3/intro-to-jax-part-3_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Given the shape of the training and validation accuracy curves, it’s likely that the network still had room to improve, and with additional epochs would almost certainly have achieved even better performance.</p>
<p><br></p>
</section>
<section id="jit-compilation" class="level3">
<h3 class="anchored" data-anchor-id="jit-compilation"><strong>JIT Compilation</strong></h3>
<p>On average, it took around 13 seconds for one full pass through the data using CPU. We can reduce the runtime drastically by just-in-time compiling the <code>update</code> function. Recall from the first installment of the series that Just-In-Time (JIT) compilation in JAX refers to the process of transforming a Python function into highly optimized, low-level code (usually XLA-compiled) that runs much faster. This can be accomplished using the <code>@jit</code> decorator. <code>update</code> now becomes:</p>
<div id="4fd912b9" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jit</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@jit</span></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(params, X, y, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>):</span>
<span id="cb10-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Update weights and biases using gradient descent.</span></span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    params : list of tuples</span></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        List of tuples containing weights and biases for each layer.</span></span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    X : jax.numpy.ndarray</span></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Input data.</span></span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    y : jax.numpy.ndarray</span></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        True labels.</span></span>
<span id="cb10-19"></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    lr : float</span></span>
<span id="cb10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Learning rate.</span></span>
<span id="cb10-22"></span>
<span id="cb10-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb10-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tuple</span></span>
<span id="cb10-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Updated weights and biases.</span></span>
<span id="cb10-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss and gradients.</span></span>
<span id="cb10-29">    loss, grads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value_and_grad(cross_entropy_loss)(params, X, y)</span>
<span id="cb10-30">    </span>
<span id="cb10-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unpack parameters and gradients.</span></span>
<span id="cb10-32">    (W1, b1), (W2, b2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb10-33">    (dW1, db1), (dW2, db2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grads</span>
<span id="cb10-34"></span>
<span id="cb10-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update weights and biases.</span></span>
<span id="cb10-36">    W1_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dW1</span>
<span id="cb10-37">    b1_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> db1</span>
<span id="cb10-38">    W2_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dW2</span>
<span id="cb10-39">    b2_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> db2</span>
<span id="cb10-40">    </span>
<span id="cb10-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [(W1_new, b1_new), (W2_new, b2_new)], loss</span></code></pre></div>
</div>
<p><br></p>
<p>Let’s retrain the network and assess the impact JIT compilation has on per-epoch training time:</p>
<div id="fcc8eea6" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Same training loop as before, but now using JIT compilation.</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> perf_counter</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer sizes.</span></span>
<span id="cb11-8">sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of epochs.</span></span>
<span id="cb11-11">n_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate.</span></span>
<span id="cb11-14">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb11-15"></span>
<span id="cb11-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store loss, accuracy and runtime.</span></span>
<span id="cb11-17">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize weights ands biases.</span></span>
<span id="cb11-20">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initialize_weights(sizes, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>random.PRNGKey(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>), scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.02</span>)   </span>
<span id="cb11-21"></span>
<span id="cb11-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_epochs):</span>
<span id="cb11-23"></span>
<span id="cb11-24">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> perf_counter()</span>
<span id="cb11-25"></span>
<span id="cb11-26">    losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] </span>
<span id="cb11-27"></span>
<span id="cb11-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> X, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_batches:</span>
<span id="cb11-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss.</span></span>
<span id="cb11-30">        params, loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> update(params, X, y, lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span>
<span id="cb11-31">        losses.append(loss.item())</span>
<span id="cb11-32"></span>
<span id="cb11-33">    epoch_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> perf_counter() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time</span>
<span id="cb11-34">    avg_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(losses)</span>
<span id="cb11-35">    train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean([accuracy(forward(params, X), y).item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> X, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_batches])</span>
<span id="cb11-36">    valid_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean([accuracy(forward(params, X), y).item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> X, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> valid_batches])</span>
<span id="cb11-37">    results.append((epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, avg_loss, train_acc, valid_acc, epoch_time))</span>
<span id="cb11-38">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n_epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>avg_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, train acc.: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, valid acc.: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> sec."</span>)</span>
<span id="cb11-39"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/25: loss: 1.5768, train acc.: 0.818, valid acc.: 0.824, time: 1.20 sec.
Epoch 2/25: loss: 0.5859, train acc.: 0.873, valid acc.: 0.881, time: 0.85 sec.
Epoch 3/25: loss: 0.4297, train acc.: 0.891, valid acc.: 0.896, time: 0.84 sec.
Epoch 4/25: loss: 0.3753, train acc.: 0.899, valid acc.: 0.904, time: 0.83 sec.
Epoch 5/25: loss: 0.3464, train acc.: 0.905, valid acc.: 0.909, time: 0.82 sec.
Epoch 6/25: loss: 0.3270, train acc.: 0.909, valid acc.: 0.913, time: 0.84 sec.
Epoch 7/25: loss: 0.3123, train acc.: 0.913, valid acc.: 0.918, time: 0.85 sec.
Epoch 8/25: loss: 0.2999, train acc.: 0.916, valid acc.: 0.920, time: 0.83 sec.
Epoch 9/25: loss: 0.2891, train acc.: 0.919, valid acc.: 0.922, time: 0.83 sec.
Epoch 10/25: loss: 0.2792, train acc.: 0.922, valid acc.: 0.925, time: 0.82 sec.
Epoch 11/25: loss: 0.2699, train acc.: 0.924, valid acc.: 0.927, time: 0.85 sec.
Epoch 12/25: loss: 0.2611, train acc.: 0.927, valid acc.: 0.930, time: 0.87 sec.
Epoch 13/25: loss: 0.2529, train acc.: 0.929, valid acc.: 0.931, time: 0.81 sec.
Epoch 14/25: loss: 0.2450, train acc.: 0.932, valid acc.: 0.932, time: 0.81 sec.
Epoch 15/25: loss: 0.2377, train acc.: 0.934, valid acc.: 0.934, time: 0.83 sec.
Epoch 16/25: loss: 0.2307, train acc.: 0.936, valid acc.: 0.936, time: 0.85 sec.
Epoch 17/25: loss: 0.2240, train acc.: 0.938, valid acc.: 0.937, time: 0.82 sec.
Epoch 18/25: loss: 0.2176, train acc.: 0.940, valid acc.: 0.939, time: 0.82 sec.
Epoch 19/25: loss: 0.2116, train acc.: 0.941, valid acc.: 0.940, time: 0.87 sec.
Epoch 20/25: loss: 0.2058, train acc.: 0.943, valid acc.: 0.941, time: 0.84 sec.
Epoch 21/25: loss: 0.2003, train acc.: 0.945, valid acc.: 0.942, time: 0.80 sec.
Epoch 22/25: loss: 0.1951, train acc.: 0.946, valid acc.: 0.943, time: 0.85 sec.
Epoch 23/25: loss: 0.1901, train acc.: 0.948, valid acc.: 0.944, time: 0.84 sec.
Epoch 24/25: loss: 0.1853, train acc.: 0.949, valid acc.: 0.946, time: 0.81 sec.
Epoch 25/25: loss: 0.1807, train acc.: 0.950, valid acc.: 0.947, time: 0.87 sec.</code></pre>
</div>
</div>
<p><br></p>
<p>By simply adding the <code>jit</code> decorator to the <code>update</code> function, the average training time per epoch dropped from around 13 seconds to under a second, with no degradation of performance. Pretty remarkable!</p>
<p><br></p>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion"><strong>Conclusion</strong></h3>
<p>JAX is a powerful tool for deep learning because it combines NumPy-like syntax with automatic differentiation, just-in-time (JIT) compilation for performance, and seamless GPU/TPU support, all while enabling functional programming patterns that make complex model transformations and optimization easier to express. In this series, we’ve only scratched the surface of what’s possible with JAX. For those eager to explore further, I recommend <em>Deep Learning with JAX</em> by Grigory Sapunov, which dives into more advanced topics and real-world applications of the framework.</p>
<p>I’m currently spending time getting familiar with <a href="https://flax.readthedocs.io/en/latest/">Flax</a>, a powerful, higher-level deep learning library that makes it easier to define, train, and manage models without sacrificing flexibility or performance (you can think of JAX as the engine and Flax as the framework that helps you build with that engine). It offers tools to define neural networks, handle parameter initialization and state management, and integrates nicely with JAX’s functional approach. It’s designed to make building and training deep learning models easier and more scalable without hiding the JAX underpinnings. More on FLax in a future post.</p>
<p><br></p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/intro-to-jax-part-3/intro-to-jax-part-3.html</guid>
  <pubDate>Mon, 14 Apr 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Up and Running with JAX - Fully-Connected Network Forward Pass</title>
  <link>https://www.jtrive.com/posts/intro-to-jax-part-2/intro-to-jax-part-2.html</link>
  <description><![CDATA[ 





<p>In a <a href="https://www.jtrive.com/posts/intro-to-jax-part-1/intro-to-jax-part-1.html">previous post</a>, I introduced JAX with particular emphasis on JIT compilation, vectorizing transformations and automatic differentiation. In this post, we walkthrough an implementation of the forward pass for a fully-connected neural network with the goal of classifying MNIST handwritten digits, incorporating concepts from the first post.</p>
<p>We begin by loading MNIST training and validation sets, convert the PIL images to Numpy arrays, and create image-label batches of size 64:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ToTensor</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> v2</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-15"></span>
<span id="cb1-16">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-17">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-18">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-19">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-20">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"display.precision"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-21">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch size.</span></span>
<span id="cb1-24">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb1-25"></span>
<span id="cb1-26">train_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.MNIST(</span>
<span id="cb1-27">    root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>,</span>
<span id="cb1-28">    train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-29">    download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-30">    transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>v2.Compose([ToTensor()])</span>
<span id="cb1-31">)</span>
<span id="cb1-32"></span>
<span id="cb1-33">valid_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.MNIST(</span>
<span id="cb1-34">    root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>,</span>
<span id="cb1-35">    train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb1-36">    download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-37">    transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>v2.Compose([ToTensor()])</span>
<span id="cb1-38">)</span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert PIL images to NumPy arrays.</span></span>
<span id="cb1-41">train_data_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_data.data.numpy() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize pixel values to [0, 1]</span></span>
<span id="cb1-42">valid_data_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_data.data.numpy() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize pixel values to [0, 1] </span></span>
<span id="cb1-43">train_data_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_data_arr.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten images to 1D arrays</span></span>
<span id="cb1-44">valid_data_arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_data_arr.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten images to 1D arrays</span></span>
<span id="cb1-45">train_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_data.targets.numpy()</span>
<span id="cb1-46">valid_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_data.targets.numpy()</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create training and validation batches of 64.</span></span>
<span id="cb1-49">train_batches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-50">    (train_data_arr[(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ii):(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))], train_labels[(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ii):(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]) </span>
<span id="cb1-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_data_arr) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> bs)</span>
<span id="cb1-52">]</span>
<span id="cb1-53">valid_batches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-54">    (valid_data_arr[(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ii):(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))], valid_labels[(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ii):(bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]) </span>
<span id="cb1-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_data_arr) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> bs)</span>
<span id="cb1-56">]</span>
<span id="cb1-57"></span>
<span id="cb1-58"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_data_arr.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_data_arr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-59"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"valid_data_arr.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_data_arr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-60"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_labels.shape  : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_labels<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-61"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"valid_labels.shape  : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>valid_labels<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-62"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"len(train_batches)  : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_batches)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-63"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"len(valid_batches)  : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_batches)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>train_data_arr.shape: (60000, 784)
valid_data_arr.shape: (10000, 784)
train_labels.shape  : (60000,)
valid_labels.shape  : (10000,)
len(train_batches)  : 937
len(valid_batches)  : 156</code></pre>
</div>
</div>
<p><br></p>
<p>We can visualize a batch of images and labels using matplotlib:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mpl_toolkits.axes_grid1 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ImageGrid</span>
<span id="cb3-4"></span>
<span id="cb3-5">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_batches[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-6">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.expand_dims(X.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10">grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageGrid(fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">111</span>, nrows_ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), axes_pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.20</span>)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ax, X_ii, y_ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(grid, X, y):</span>
<span id="cb3-13">    X_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.transpose(X_ii, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb3-14">    ax.imshow(X_ii, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)</span>
<span id="cb3-15">    ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb3-16">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/intro-to-jax-part-2/intro-to-jax-part-2_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Our goal is to create a model that accepts a batch of 64 images, and returns a class prediction for each image in the batch. Our architecture is presented in the image below:</p>
<p align="center">
<img src="https://www.jtrive.com/posts/intro-to-jax-part-2/mnist.png">
</p>
<p><br></p>
<p>The pre-activations for layer <img src="https://latex.codecogs.com/png.latex?l"> are computed as <img src="https://latex.codecogs.com/png.latex?Z%5E%7B(l)%7D%20=%20A%5E%7B(l-1)%7D%20W%5E%7B(l)%7D%20+%20b%5E%7B(l)%7D">, where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(l)%7D"> = layer <img src="https://latex.codecogs.com/png.latex?l"> pre-activations (value prior to applying non-linearity like ReLU).</li>
<li><img src="https://latex.codecogs.com/png.latex?A%5E%7B(l-1)%7D"> = layer <img src="https://latex.codecogs.com/png.latex?l-1"> activations, with <img src="https://latex.codecogs.com/png.latex?A%5E%7B(0)%7D"> representing the original input.</li>
<li><img src="https://latex.codecogs.com/png.latex?W%5E%7B(l)%7D"> = The weight matrix for layer <img src="https://latex.codecogs.com/png.latex?l">.</li>
<li><img src="https://latex.codecogs.com/png.latex?b%5E%7B(l)%7D"> = bias vector for layer <img src="https://latex.codecogs.com/png.latex?l">.</li>
</ul>
<p><br></p>
<p>For the network shown above assuming a batch size of 64:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(0)%7D%20=%20A%5E%7B(0)%7D">: Input matrix with dimension 64x784.</li>
<li><img src="https://latex.codecogs.com/png.latex?W%5E%7B(1)%7D">: Weight matrix with dimension 784x128.</li>
<li><img src="https://latex.codecogs.com/png.latex?b%5E%7B(1)%7D"> Bias vector of length 128.</li>
<li><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(1)%7D%20=%20A%5E%7B(0)%7D%20W%5E%7B(1)%7D%20+%20b%5E%7B(1)%7D">: Matrix of pre-activations with dimension 64x128.</li>
<li><img src="https://latex.codecogs.com/png.latex?A%5E%7B(1)%7D">: Non-linearity applied to <img src="https://latex.codecogs.com/png.latex?Z%5E%7B(1)%7D">. Activation matrix with dimension 64x128.</li>
<li><img src="https://latex.codecogs.com/png.latex?W%5E%7B(2)%7D">: Weight matrix with dimension 128x10.</li>
<li><img src="https://latex.codecogs.com/png.latex?b%5E%7B(2)%7D">: Bias vector of length 10.</li>
<li><img src="https://latex.codecogs.com/png.latex?Z%5E%7B(2)%7D%20=%20A%5E%7B(1)%7D%20W%5E%7B(2)%7D%20+%20b%5E%7B(2)%7D">: Matrix of pre-activations with dimension 64x10.</li>
<li><img src="https://latex.codecogs.com/png.latex?A%5E%7B(2)%7D">: Non-linearity applied to <img src="https://latex.codecogs.com/png.latex?Z%5E%7B(2)%7D">. Activation matrix with dimension 64x10.</li>
</ul>
<p><br></p>
<p>The forward pass feeds an image of size 28x28 into the network, which produces a probability distribution over all classes. The class with the highest probability is our class prediction, which for MNIST will be one of 10 digits 0-9. Specifically:</p>
<ul>
<li>Each 28x28 image is flattened to have shape 1x784. The input layer has the same size as the flattened image (784,).</li>
<li>The hidden layer consists of 128 neurons. The matrix of weights projecting from the input layer to the first hidden layer has dimension 784x128, plus a bias vector of length 128.</li>
<li>The output layer consists of 10 neurons, which is the same the number of classes in the dataset. The matrix of weights projecting from the hidden layer to the output layer has dimension 128x10, along with a bias vector of length 10.</li>
<li>Applying softmax to the output layer results in a probability distribution over classes.</li>
</ul>
<p>Weight initialization is handled automatically in PyTorch, but when working in JAX, The first step is to initialize the network weights. We can create a helper function to assist with randomly assigning values to the weight matrices and bias vectors.</p>
<p>In JAX, random number generation is handled a bit differently than in Numpy to ensure functional purity. JAX uses explicit PRNG keys to generate random numbers instead of relying on global state. A “key” is a special array that acts as a seed, and every time you use it, JAX produces the same random numbers for the same key.</p>
<p>Since JAX enforces immutability, you can’t reuse a key for multiple random calls without getting the same result. Instead, you split a key using <code>jax.random.split</code>, which deterministically generates new, unique keys from the original one. Each split key is independent, allowing for the generation of different random numbers while maintaining reproducibility. In the next cell, we initialize weights using small random normal values:</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> initialize_weights(sizes, key, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.02</span>):</span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    "Initialize weights and biases for each layer for simple fully-connected </span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    network.</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    sizes : list of int</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        List of integers representing the number of neurons in each layer.</span></span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    key : jax.random.PRNGKey</span></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Random key for JAX.</span></span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    List of iniitialized weights and biases for each layer.</span></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-22">    keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.split(key, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sizes) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-23">    params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> m, n, k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(sizes[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], sizes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:], keys):</span>
<span id="cb4-25">        w_key, b_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.split(k)</span>
<span id="cb4-26">        w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> random.normal(w_key, (m, n))</span>
<span id="cb4-27">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> random.normal(b_key, (n,))</span>
<span id="cb4-28">        params.append((w, b))</span>
<span id="cb4-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> params</span>
<span id="cb4-30"></span>
<span id="cb4-31"></span>
<span id="cb4-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize weights and biases for each layer.</span></span>
<span id="cb4-33">sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb4-34"></span>
<span id="cb4-35">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initialize_weights(sizes, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>random.PRNGKey(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>), scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.02</span>)   </span>
<span id="cb4-36"></span>
<span id="cb4-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print shape of each layer's weights and biases.</span></span>
<span id="cb4-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"W1 shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"b1 shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"W2 shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)  </span>
<span id="cb4-41"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"b2 shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>W1 shape: (784, 128)
b1 shape: (128,)
W2 shape: (128, 10)
b2 shape: (10,)</code></pre>
</div>
</div>
<p><br></p>
<p>In PyTorch, models inherit from <code>nn.Module</code> and must implement a <code>forward</code> method that defines the network’s computation flow. The forward method orchestrates how input tensors transform through pre-specified operations to produce outputs.</p>
<p>For our JAX implementation we’ll create a similar function, but the weights must be explicitly passed as parameters rather than stored as internal state. Unlike PyTorch’s object-oriented approach where weights are hidden properties of the model instance, JAX follows a functional paradigm that requires all state to be passed explicitly between function calls, eliminating hidden state.</p>
<p>In our <code>forward</code> function, we incorporate ReLU activation between layers to introduce non-linearity:</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jax.numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> jnp</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> relu</span>
<span id="cb6-4"></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(params, X):</span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Forward pass for simple fully-connected network.</span></span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    params : list of tuples</span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        List of tuples containing weights and biases for each layer.</span></span>
<span id="cb6-14"></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    X : jax.numpy.ndarray</span></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Input data.</span></span>
<span id="cb6-17"></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    jax.numpy.ndarray</span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-22">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X</span>
<span id="cb6-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> W, b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> params[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb6-24">        z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.dot(a, W) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb6-25">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> relu(z)</span>
<span id="cb6-26">    W, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb6-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> jnp.dot(a, W) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span></code></pre></div>
</div>
<p><br></p>
<p>We can pass a single flattened image array into <code>forward</code>, and it should return a 1x10 vector of activations. The output will not be a probability distribution since softmax hasn’t been applied, but we can still test it to ensure that the shape of the output is consistent with our expectations:</p>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get first image from first training batch.</span></span>
<span id="cb7-3">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_batches[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to JAX array.</span></span>
<span id="cb7-6">X0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.asarray(X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].flatten())</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pass X0 into forward.</span></span>
<span id="cb7-9">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward(params, X0)</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"ypred.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ypred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"ypred: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ypred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ypred.shape: (10,)
ypred: [-0.01938  0.04435  0.01545  0.01266  0.00116 -0.07045 -0.03737  0.00276  0.01255 -0.00883]</code></pre>
</div>
</div>
<p><br></p>
<section id="auto-vectorizing-the-forward-pass" class="level3">
<h3 class="anchored" data-anchor-id="auto-vectorizing-the-forward-pass">Auto-Vectorizing the Forward Pass</h3>
<p>As implmented, <code>forward</code> is only capable of processing a single flattened image at a time. However, we can use <code>vmap</code>, introduced in the first post, to process a batch of images at a time without any modification to <code>forward</code>. <code>vmap</code> enables batch processing while taking advantage of JAX’s optimized execution. Instead of using loops, it efficiently maps a function over an array along a pre-specified axis:</p>
<div id="cell-14" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> vmap</span>
<span id="cb9-3"></span>
<span id="cb9-4">batch_forward <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vmap(forward, in_axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
</div>
<p><br></p>
<p><code>in_axes</code> controls which input array axes to vectorize over, and its length must equal the number of positional arguments associated with the original function. In our case, the first argument to <code>forward</code> is <code>params</code>, which stays the same within the context of the forward pass. The second argument corresponds to our input image, and the ‘0’ indicates that vectorization should be applied along the 0th axis (which is batch dimension).</p>
<p>We can pass a batch of size 64 x 784 into <code>batch_forward</code>, and return an output of size 64x10:</p>
<div id="cell-16" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get first batch of flattened training images.</span></span>
<span id="cb10-3">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_batches[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-4"></span>
<span id="cb10-5">ypreds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_forward(params, X)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"ypreds.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ypreds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"ypreds:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ypreds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ypreds.shape: (64, 10)
ypreds:
[[-0.01938  0.04435  0.01545  0.01266  0.00116 -0.07045 -0.03737  0.00276  0.01255 -0.00883]
 [ 0.00129  0.0109   0.00602 -0.00877 -0.01916 -0.05659 -0.0483  -0.02185 -0.02209  0.01736]
 [-0.02005  0.00758  0.02579 -0.03333  0.00352 -0.0578  -0.04556 -0.0556  -0.04529  0.06416]
 [ 0.02695  0.00363  0.02104 -0.00848  0.03085 -0.06641 -0.03336 -0.01503 -0.04532  0.0081 ]
 [-0.02473 -0.01859  0.04075 -0.00455  0.01993 -0.04665 -0.03698 -0.0063  -0.03235  0.03909]
 [-0.02891  0.02183  0.01171 -0.00624  0.02155 -0.07441 -0.04383 -0.01707 -0.01268  0.02351]
 [ 0.01002 -0.01742  0.01145 -0.03244  0.01756 -0.04202 -0.04045 -0.03138 -0.01564  0.03871]
 [-0.01686  0.04742  0.04909  0.01424 -0.00733 -0.04773 -0.0763  -0.03617  0.01079  0.0016 ]
 [ 0.00961 -0.00337  0.01458 -0.01242  0.01239 -0.03938 -0.01167 -0.01025 -0.02025  0.03112]
 [-0.00639 -0.01172  0.04447 -0.0033   0.0276  -0.08083 -0.0409  -0.023   -0.03266  0.03201]
 [-0.01249  0.02364  0.03073 -0.0103   0.01524 -0.04002 -0.07046 -0.00143 -0.03037  0.03692]
 [-0.01155 -0.00816  0.01417  0.01124  0.01693 -0.03797 -0.00644 -0.00504 -0.04066  0.02742]
 [-0.03043  0.03531 -0.00233 -0.02903  0.02681 -0.07377 -0.09124 -0.0348  -0.02728  0.01781]
 [-0.03805  0.0015   0.02286 -0.02599  0.02493 -0.02707 -0.0489   0.00085 -0.03588  0.01173]
 [-0.00322 -0.00982  0.00318  0.00086  0.01338 -0.05927 -0.01745 -0.019   -0.02419  0.04078]
 [-0.00524 -0.03266  0.04316 -0.00133  0.02968 -0.06335 -0.01557 -0.02004 -0.05118  0.04478]
 [ 0.01196  0.00738  0.0139  -0.01251  0.02977 -0.0482  -0.04011 -0.04932 -0.01502  0.00449]
 [ 0.01775 -0.00792  0.02539  0.01883  0.01768 -0.06387 -0.0317  -0.0299  -0.01473  0.02359]
 [-0.01174  0.01263  0.01114 -0.02254  0.01541 -0.0507  -0.04069 -0.00546 -0.02738  0.03351]
 [ 0.00519 -0.00914  0.04497  0.01114  0.02668 -0.07109 -0.02906  0.00836 -0.03017  0.02743]
 [-0.01821 -0.00343  0.01697 -0.00879  0.03184 -0.06576 -0.04461 -0.02077 -0.0576   0.02691]
 [ 0.02505 -0.00406  0.01754 -0.01299 -0.03357 -0.0621  -0.05533 -0.01607 -0.05241  0.00787]
 [-0.00548 -0.0151   0.02098  0.00532 -0.0007  -0.06299 -0.02551  0.02606 -0.02592  0.02215]
 [ 0.02538 -0.00074  0.01906 -0.00907  0.03593 -0.0677  -0.02988 -0.01161 -0.04277  0.01133]
 [ 0.00403  0.00756  0.02052  0.02553  0.02037 -0.03283 -0.03985  0.01178 -0.02486 -0.00577]
 [-0.00577  0.01179 -0.00397 -0.01612  0.006   -0.05153 -0.08116 -0.0568  -0.02216  0.02107]
 [-0.01831 -0.00545  0.03149 -0.00173  0.02892 -0.01969 -0.03263 -0.01362 -0.03298  0.03155]
 [-0.02663  0.047    0.01241 -0.00937 -0.00653 -0.07457 -0.08388 -0.00652 -0.00656  0.03299]
 [-0.01582 -0.00341 -0.00549 -0.07723  0.03082 -0.08325 -0.02868 -0.03757 -0.03521  0.05039]
 [ 0.01516 -0.02163  0.03846 -0.00524  0.03453 -0.07424 -0.00601 -0.01762 -0.04946  0.02805]
 [ 0.02345  0.03865  0.0027  -0.03011  0.02129 -0.06911 -0.0642  -0.06447 -0.02161  0.0513 ]
 [-0.00958  0.00089  0.00206  0.00014 -0.03024 -0.05849 -0.03403 -0.04682 -0.02192  0.02192]
 [ 0.01296  0.01323 -0.00675 -0.02761  0.0001  -0.02599 -0.03824 -0.03056 -0.03029  0.00598]
 [ 0.015    0.00759  0.03926  0.00927  0.0302  -0.08289 -0.04693  0.00788 -0.02175  0.031  ]
 [-0.03891  0.03415  0.00166 -0.01509  0.0031  -0.05396 -0.07296 -0.00382 -0.02682  0.05255]
 [ 0.01267  0.00989  0.02874  0.01091  0.04832 -0.05603 -0.01568 -0.00115 -0.02438  0.00899]
 [-0.02444  0.03956 -0.00092 -0.01447 -0.00312 -0.06536 -0.05304 -0.00953 -0.0111   0.02981]
 [-0.0344   0.04178  0.01164 -0.03304  0.01373 -0.06036 -0.07474  0.01716 -0.03821  0.02719]
 [ 0.02056 -0.04235  0.02223 -0.03208  0.02435 -0.03469  0.0082  -0.01539 -0.02368  0.00596]
 [-0.01846  0.01328 -0.01612 -0.0376  -0.0026  -0.01918 -0.03758 -0.0154  -0.01747  0.02746]
 [-0.01283 -0.01919  0.0135   0.00131  0.01254 -0.04955 -0.02221 -0.01261 -0.02833  0.03626]
 [ 0.01384  0.017    0.02705 -0.01914  0.03964 -0.05375 -0.05693 -0.01484 -0.01374  0.03448]
 [-0.00959 -0.03199  0.0208   0.01219  0.01838 -0.04273  0.0039  -0.00971 -0.02165  0.02525]
 [-0.00754 -0.02387  0.03144  0.01683  0.01158 -0.04538 -0.02697  0.00096 -0.02717  0.0279 ]
 [-0.00149 -0.01607  0.03226  0.00932  0.03503 -0.04532 -0.02371 -0.04158 -0.02733  0.01295]
 [-0.00841 -0.02569  0.02426 -0.01079  0.04106 -0.04494 -0.02315 -0.01234 -0.03156  0.03288]
 [ 0.03858 -0.00225  0.03607  0.01419  0.05866 -0.04707 -0.0479  -0.0585  -0.03581  0.0068 ]
 [ 0.00396  0.00229  0.03064  0.00296  0.04075 -0.05858 -0.02379  0.01113 -0.01696  0.02085]
 [-0.0306   0.01159  0.01966 -0.0238   0.0085  -0.04504 -0.07059 -0.02362 -0.02067  0.04078]
 [-0.03142  0.03721  0.02696  0.00428  0.00507 -0.06188 -0.07031 -0.00547 -0.01252  0.0217 ]
 [-0.01006 -0.00553  0.009   -0.02372  0.00812 -0.04891 -0.06205 -0.01728 -0.02563  0.02564]
 [ 0.00656  0.03307  0.01764  0.00273 -0.00087 -0.07939 -0.07847 -0.05009 -0.03572  0.00226]
 [-0.01152  0.00209  0.01268 -0.02766  0.02629 -0.08758 -0.02191 -0.01157 -0.03755  0.07643]
 [ 0.00849 -0.00357  0.04292  0.00966  0.01071 -0.06685 -0.01274 -0.03098 -0.04872  0.04148]
 [-0.02366  0.01482  0.0214  -0.0017   0.03714 -0.06655 -0.00035 -0.03575 -0.00123  0.06236]
 [-0.00574 -0.01814  0.01388 -0.01289  0.03698 -0.05857 -0.04548 -0.01367 -0.03049  0.05411]
 [-0.00067  0.03152  0.01473 -0.00112  0.04264 -0.07165 -0.08533 -0.07986 -0.03663  0.02476]
 [ 0.00238 -0.01577  0.03842 -0.01902  0.03321 -0.05336 -0.03538  0.00514 -0.03226  0.02748]
 [-0.05187 -0.02097  0.04671 -0.02635  0.03248 -0.0399  -0.06063 -0.01354 -0.03793  0.04167]
 [ 0.02789 -0.00258  0.01699 -0.01496  0.02993 -0.06447 -0.03116 -0.00742 -0.03525  0.01357]
 [ 0.03633  0.0008   0.01882 -0.00777  0.00483 -0.0582  -0.05376 -0.08621 -0.0305   0.0121 ]
 [ 0.00676  0.01654  0.03401  0.00623  0.035   -0.06879 -0.0183  -0.00864 -0.03068  0.02204]
 [-0.04109  0.01182  0.00634 -0.02956 -0.00965 -0.064   -0.05708 -0.01416 -0.01804  0.03834]
 [-0.00258  0.03007  0.04005 -0.00407 -0.04672 -0.05536 -0.07473 -0.01553 -0.01838 -0.00027]]</code></pre>
</div>
</div>
<p><br></p>
<p>To ensure each row sums to 1, we can apply softmax to <code>ypreds</code>:</p>
<div id="cell-18" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> softmax</span>
<span id="cb12-3"></span>
<span id="cb12-4">yprobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(ypreds, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"yprobs.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yprobs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"yprobs:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yprobs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>yprobs.shape: (64, 10)
yprobs:
[[0.0985  0.10498 0.10199 0.10171 0.10054 0.09359 0.09674 0.1007  0.10169 0.09954]
 [0.10153 0.10251 0.10201 0.10051 0.09947 0.09582 0.09661 0.0992  0.09918 0.10317]
 [0.09949 0.10228 0.10416 0.09818 0.10186 0.0958  0.09698 0.09601 0.09701 0.10823]
 [0.10349 0.1011  0.10288 0.09988 0.10389 0.09426 0.09743 0.09923 0.09627 0.10155]
 [0.0982  0.09881 0.10485 0.1002  0.10269 0.09607 0.09701 0.10003 0.09746 0.10468]
 [0.09813 0.10323 0.10219 0.10038 0.1032  0.09376 0.09667 0.09929 0.09973 0.10341]
 [0.102   0.09924 0.10215 0.09776 0.10277 0.09683 0.09698 0.09787 0.09942 0.10497]
 [0.09886 0.10543 0.1056  0.10198 0.09981 0.09586 0.09316 0.09697 0.10163 0.1007 ]
 [0.10125 0.09994 0.10175 0.09904 0.10153 0.09641 0.09911 0.09926 0.09827 0.10345]
 [0.10024 0.09971 0.10547 0.10055 0.10371 0.09305 0.09684 0.09859 0.09765 0.10417]
 [0.09929 0.10294 0.10367 0.0995  0.10208 0.09659 0.09369 0.10039 0.09753 0.10432]
 [0.09923 0.09956 0.10181 0.10151 0.10209 0.09664 0.09973 0.09987 0.09638 0.10317]
 [0.09897 0.1057  0.1018  0.09911 0.10481 0.09478 0.09314 0.09854 0.09929 0.10387]
 [0.09734 0.10127 0.10345 0.09852 0.10367 0.09841 0.09629 0.1012  0.09755 0.10231]
 [0.10039 0.09973 0.10104 0.10081 0.10208 0.09492 0.09898 0.09882 0.09831 0.10491]
 [0.10013 0.09742 0.1051  0.10052 0.10369 0.09448 0.0991  0.09866 0.09563 0.10527]
 [0.10216 0.10169 0.10236 0.09969 0.104   0.0962  0.09698 0.09609 0.09944 0.1014 ]
 [0.10221 0.09962 0.10299 0.10232 0.1022  0.0942  0.09728 0.09745 0.09894 0.10281]
 [0.09965 0.10211 0.10196 0.09858 0.10239 0.09584 0.09681 0.10028 0.09811 0.10426]
 [0.10063 0.09919 0.10471 0.10123 0.10281 0.09323 0.09724 0.10094 0.09713 0.10289]
 [0.09956 0.10104 0.10313 0.1005  0.10467 0.09494 0.09697 0.09931 0.09572 0.10416]
 [0.10442 0.10142 0.10364 0.10052 0.09847 0.0957  0.09635 0.10021 0.09663 0.10264]
 [0.10003 0.09907 0.10271 0.10112 0.10051 0.09444 0.09805 0.10324 0.09801 0.10283]
 [0.10324 0.10058 0.10259 0.09975 0.10434 0.09407 0.09769 0.09949 0.09644 0.1018 ]
 [0.10052 0.10087 0.10219 0.1027  0.10217 0.09688 0.0962  0.1013  0.09765 0.09953]
 [0.10137 0.10317 0.10155 0.10033 0.10257 0.09684 0.09401 0.09633 0.09972 0.10413]
 [0.09848 0.09975 0.1035  0.10012 0.10324 0.09834 0.09708 0.09894 0.09704 0.10351]
 [0.09849 0.10601 0.10241 0.1002  0.10049 0.09388 0.09301 0.10049 0.10049 0.10454]
 [0.10039 0.10165 0.10144 0.09441 0.10519 0.09385 0.09911 0.09823 0.09847 0.10727]
 [0.10206 0.09837 0.10446 0.1     0.10405 0.09333 0.09992 0.09876 0.09567 0.10338]
 [0.10343 0.10502 0.10131 0.09804 0.10321 0.09429 0.09475 0.09473 0.09887 0.10635]
 [0.10078 0.10184 0.10196 0.10176 0.09872 0.09597 0.09834 0.09709 0.09954 0.104  ]
 [0.10258 0.10261 0.10058 0.0985  0.10127 0.09866 0.09746 0.09821 0.09824 0.10187]
 [0.10156 0.10081 0.10405 0.10098 0.10312 0.09209 0.09546 0.10084 0.0979  0.1032 ]
 [0.09728 0.10466 0.10131 0.09963 0.10146 0.09583 0.09403 0.10076 0.09846 0.1066 ]
 [0.10101 0.10073 0.10265 0.10083 0.10468 0.0943  0.09819 0.09963 0.09734 0.10064]
 [0.09864 0.10516 0.10099 0.09963 0.10077 0.09469 0.09586 0.10013 0.09997 0.10414]
 [0.0978  0.10555 0.10241 0.09794 0.10263 0.0953  0.09394 0.10298 0.09743 0.10402]
 [0.10273 0.09647 0.1029  0.09746 0.10312 0.09721 0.10147 0.0991  0.09829 0.10124]
 [0.09937 0.10258 0.09961 0.09749 0.10096 0.0993  0.09749 0.09968 0.09947 0.10404]
 [0.0995  0.09887 0.10216 0.10092 0.10206 0.09591 0.09857 0.09952 0.09797 0.10451]
 [0.10161 0.10193 0.10296 0.09831 0.10426 0.09497 0.09466 0.09873 0.09884 0.10373]
 [0.09937 0.09717 0.10244 0.10156 0.10219 0.09613 0.10072 0.09936 0.09818 0.10289]
 [0.09964 0.09802 0.1036  0.1021  0.10156 0.09594 0.09772 0.10049 0.0977  0.10323]
 [0.10047 0.09902 0.10392 0.10157 0.10421 0.09617 0.09827 0.09653 0.09791 0.10194]
 [0.09971 0.098   0.10302 0.09947 0.10476 0.09613 0.09825 0.09932 0.09743 0.10391]
 [0.10424 0.10007 0.10398 0.10173 0.10635 0.09568 0.0956  0.0946  0.09677 0.10098]
 [0.10023 0.10006 0.10294 0.10013 0.10398 0.09415 0.09748 0.10095 0.09815 0.10193]
 [0.09824 0.10248 0.10331 0.09891 0.10216 0.09684 0.09439 0.09893 0.09922 0.10551]
 [0.09769 0.10463 0.10356 0.10124 0.10132 0.09476 0.09396 0.10026 0.09955 0.10302]
 [0.10047 0.10092 0.1024  0.0991  0.10231 0.09664 0.09538 0.09974 0.09892 0.10412]
 [0.10244 0.10519 0.10358 0.10205 0.10168 0.094   0.09409 0.09679 0.0982  0.102  ]
 [0.09957 0.10093 0.10201 0.09797 0.10341 0.09228 0.09854 0.09956 0.09701 0.10872]
 [0.1013  0.10008 0.10484 0.10141 0.10152 0.09394 0.09917 0.09738 0.09566 0.10469]
 [0.09754 0.10137 0.10203 0.0997  0.10365 0.09344 0.09984 0.09637 0.09975 0.1063 ]
 [0.10017 0.09894 0.10216 0.09946 0.10454 0.09502 0.09627 0.09938 0.09772 0.10635]
 [0.10145 0.10477 0.10303 0.10141 0.10594 0.0945  0.09322 0.09373 0.09787 0.10407]
 [0.10069 0.09888 0.10438 0.09856 0.10384 0.09523 0.09696 0.10097 0.09726 0.10325]
 [0.09612 0.09914 0.10608 0.09861 0.10458 0.09728 0.09528 0.09988 0.09747 0.10555]
 [0.10348 0.10038 0.10236 0.09914 0.10369 0.09435 0.09755 0.09989 0.09715 0.10201]
 [0.10534 0.10166 0.10351 0.10079 0.10207 0.09584 0.09626 0.09319 0.09853 0.10282]
 [0.10069 0.10168 0.10347 0.10064 0.10358 0.09336 0.0982  0.09915 0.09699 0.10224]
 [0.09764 0.10295 0.10239 0.09878 0.10076 0.09543 0.0961  0.10031 0.09992 0.10572]
 [0.10117 0.10452 0.10557 0.10102 0.0968  0.09596 0.09412 0.09986 0.09958 0.1014 ]]</code></pre>
</div>
</div>
<p><br></p>
<p>At this point, the outputs are meaningless and are pretty close to uniformly distributed over classes. This is because we haven’t yet calculated the gradient of the loss function with respect to each weight, which allows the network to adjust its weights and biases to minimize prediction errors. In the next post, we’ll implement backpropagation entirely in JAX and walkthrough how to construct the training and validation loops.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/intro-to-jax-part-2/intro-to-jax-part-2.html</guid>
  <pubDate>Wed, 02 Apr 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Up and Running with JAX - JIT Compilation, Vectorizing Transformations and autodiff</title>
  <link>https://www.jtrive.com/posts/intro-to-jax-part-1/intro-to-jax-part-1.html</link>
  <description><![CDATA[ 





<p>I first learned about JAX a few years back in an article on functorch. Functorch was a library that brought JAX-like composable function transformations to PyTorch, initially developed as a separate library but has since been fully integrated into PyTorch’s core (as of PyTorch 2.0).</p>
<p>I’ve recently invested time in learning JAX, which has proven incredibly worthwhile. The clean functional approach makes my code more maintainable and reproducible, while delivering significant performance and efficiency improvements with surprisingly minimal changes to existing codebases.</p>
<p>So, what is JAX? It is a high-performance numerical computing library developed by Google Research. It combines the ease of use of Python and Numpy with the speed and efficiency of XLA (Accelerated Linear Algebra), making it particularly well-suited for machine learning research and numerical computing that requires high performance.</p>
<p>At its core, JAX extends Numpy’s functionality with automatic differentiation capabilities. This is essential for gradient-based optimization in machine learning. JAX also excels at just-in-time compilation, which translates Python functions into optimized machine code at runtime.</p>
<p align="center">
</p><p><img src="https://www.jtrive.com/posts/intro-to-jax-part-1/jax2.jpg" p=""></p>
<p>JAX takes a functional programming approach (no side-effects), emphasizing immutability and pure functions. Operations don’t modify their inputs but instead return new values. This is particularly valuable for numerical computations since it enables better parallelization and optimization. Rather than changing arrays in place, JAX functions create new arrays with updated values, resulting in code that is more composable and reproducible. As highlighted in <a href="https://docs.jax.dev/en/latest/notebooks/Common_Gotchas_in_JAX.html#pure-functions">JAX: The Sharp Bits</a>:</p>
<blockquote class="blockquote">
<p>JAX transformation and compilation are designed to work only on Python functions that are functionally pure: all the input data is passed through the function parameters, all the results are output through the function results. A pure function will always return the same result if invoked with the same inputs.</p>
</blockquote>
<p>Of the JAX features I researched, <code>vmap</code> is the most readily applicable to the work I do. <code>vmap</code> is a vectorizing transformation that automatically adds a batch dimension to calculations. It stands for “vectorized map” and lets you run a function across multiple inputs in a vectorized fashion without explicitly writing code for batch processing. This enables writing simple, single example functions, while simultaneously taking advantage of the performance benefits resulting from vectorized execution.</p>
<p>The JAX numpy submodule can often be used as drop-in replacement for Numpy since the API is almost identical. It provides the same API as Numpy, meaning that functions like <code>jnp.array</code>, <code>jnp.sin</code>, <code>jnp.dot</code>, <code>jnp.mean</code>, and many others work just as they do in standard Numpy. The key difference is that JAX arrays are immutable and are optimized for GPU execution.</p>
<p>This post highlights three features of JAX: Just-in-time compilation, vectorizing transformations and automatic differentiation. In a future post, I’ll walk through the forward and backward pass for a fully-connected neural network implemented entirely in JAX. Those future posts will make heavy use of the content covered here.</p>
<p><br></p>
<section id="just-in-time-compilation" class="level3">
<h3 class="anchored" data-anchor-id="just-in-time-compilation">Just-in-time Compilation</h3>
<p>JIT compilation in JAX speeds up computations by transforming Python functions into optimized machine code. When you apply <code>jax.jit</code> or the <code>jit</code> decorator to a function, JAX traces its operations and compiles them into an efficient, reusable representation. This means that instead of executing Python loops and function calls directly, JAX compiles them into a single, optimized computation graph that runs much faster on virtually any hardware.</p>
<p>The first time a JIT-compiled function is called, there’s a slight overhead as JAX compiles it, but subsequent calls run much faster since the compiled version is reused. JIT works best when inputs have a fixed shape and type, since changing them can trigger a recompilation. It can also be used in conjunction with <code>grad</code>, <code>vmap</code>, and <code>pmap</code> for even greater performance gains.</p>
<p>To demonstrate, we’ll implement a function that computes the great circle distance between two sets of coordinate pairs. The Haversine formula is defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Aa%20&amp;=%20%5Csin%5E2%5Cleft(%5Cfrac%7B%5CDelta%5Cphi%7D%7B2%7D%5Cright)%20+%20%5Ccos%5Cphi_1%20%5Ccos%5Cphi_2%20%5Csin%5E2%5Cleft(%5Cfrac%7B%5CDelta%5Clambda%7D%7B2%7D%5Cright)%5C%5C%0Ac%20&amp;=%202%20%5Ctimes%20%5Carcsin%5Cleft(%5Cmin%20(1,%20%5Csqrt%7Ba%7D)%5Cright)%5C%5C%0Ad%20&amp;=%20R%20%5Ctimes%20c,%0A%5Cend%7Balign*%7D%0A"></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5CDelta%20%5Cphi%20=%20%5Cphi_%7B1%7D%20-%20%5Cphi_2"> (latitude difference in radians)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5CDelta%20%5Clambda%20=%20%5Clambda_%7B1%7D%20-%20%5Clambda_%7B2%7D"> (longitude difference in radians)</li>
<li><img src="https://latex.codecogs.com/png.latex?R%20=%206,371"> km (globally average value of radius of the Earth in kilometers)</li>
<li><img src="https://latex.codecogs.com/png.latex?d%20="> great-circle distance</li>
</ul>
<p><br></p>
<p>A simple implementation of the Haversine formula using trigonometric functions from jax.numpy is provided below. I originally attempted using Python’s builtin trigonometric functions, but this caused JIT compilation to fail - the issue seemed to resolved itself when using the JAX-native variants. <code>get_haversine</code> accepts an array of <code>[lon0, lat0, lon1, lat1]</code> and returns the great circle distance between (lon0, lat0), (lon1, lat1):</p>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jax.numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> jnp</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_haversine(coords):</span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculate the great circle distance between two points on the earth </span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    (specified in decimal degrees).</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    coords: array-like</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Array containing the longitude and latitude of two points</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        arranged as [lon0, lat0, lon1, lat1].</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Great circle distance in km.</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-20"></span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Average Earth radius in km.</span></span>
<span id="cb1-22">    R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6371.0</span></span>
<span id="cb1-23"></span>
<span id="cb1-24">    lon0, lat0, lon1, lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coords</span>
<span id="cb1-25"></span>
<span id="cb1-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert degree latitudes and longitudes to radians.</span></span>
<span id="cb1-27">    rlon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.radians(lon0)</span>
<span id="cb1-28">    rlat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.radians(lat0)</span>
<span id="cb1-29">    rlon1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.radians(lon1)</span>
<span id="cb1-30">    rlat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.radians(lat1)</span>
<span id="cb1-31">    dlon, dlat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rlon1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> rlon0, rlat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> rlat0</span>
<span id="cb1-32">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.sin(dlat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> jnp.cos(rlat0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.cos(rlat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.sin(dlon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-33">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.asin(jnp.sqrt(a))</span>
<span id="cb1-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c</span></code></pre></div>
</div>
<p><br></p>
<p>To calculate the Haversine distance in kilometers between two points, say Durkin Park on the Southside of Chicago and Nectar’s in Burlington, Vermont, simply run:</p>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">lon0, lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.7295</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.7390</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Durkin Park, Chicago, IL</span></span>
<span id="cb2-3">lon1, lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">73.2117</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44.4762</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nectar's, Burlington, VT</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put coordinates in JAX array.</span></span>
<span id="cb2-6">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.array([lon0, lat0, lon1, lat1])</span>
<span id="cb2-7"></span>
<span id="cb2-8">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_haversine(coords)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Distance between Durkin Park and Nectar's: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> km"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Distance between Durkin Park and Nectar's: 1,215 km</code></pre>
</div>
</div>
<p><br></p>
<p>We can JIT-compile <code>get_haversine</code> and compare the run-time against the original implementation. Notice that we call <code>get_haversine_jit</code> once outside of <code>timeit</code> to avoid the overhead associated with the initial compilation:</p>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jit</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create jit-compiled version of get_haversine. </span></span>
<span id="cb4-5">get_haversine_jit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jit(get_haversine)</span>
<span id="cb4-6">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_haversine_jit([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">80.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">85.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">45.</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compiles on first call.</span></span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time the original.</span></span>
<span id="cb4-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n100 get_haversine(coords).block_until_ready()</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time the jit-compiled function.</span></span>
<span id="cb4-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n100 get_haversine_jit(coords).block_until_ready()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>265 μs ± 38.2 μs per loop (mean ± std. dev. of 7 runs, 100 loops each)
3.46 μs ± 1.03 μs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
</div>
</div>
<p><br></p>
<p>We realized about a 75x speed up for very little work on our end. For this example, we created a new function <code>get_haversine_jit</code> so the jit-compiled version runtime could be compared against the original non-JITed version. It is possible to instead use the <code>@jit</code> decorator, allowing for the original function name to be re-used:</p>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using jit decorator instead.</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@jit</span></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_haversine(coords):</span>
<span id="cb6-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculate the great circle distance between two points on the earth </span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    (specified in decimal degrees).</span></span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    coords: array-like</span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Array containing the longitude and latitude of two points</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        arranged as [lon0, lat0, lon1, lat1]</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Great circle distance in km.</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-20">    R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6371.0</span></span>
<span id="cb6-21"></span>
<span id="cb6-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert degree latitudes and longitudes to radians.</span></span>
<span id="cb6-23">    lon0, lat0, lon1, lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coords</span>
<span id="cb6-24">    rlon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.radians(lon0)</span>
<span id="cb6-25">    rlat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.radians(lat0)</span>
<span id="cb6-26">    rlon1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.radians(lon1)</span>
<span id="cb6-27">    rlat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.radians(lat1)</span>
<span id="cb6-28">    dlon, dlat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rlon1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> rlon0, rlat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> rlat0</span>
<span id="cb6-29">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.sin(dlat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> jnp.cos(rlat0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.cos(rlat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.sin(dlon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-30">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.asin(jnp.sqrt(a))</span>
<span id="cb6-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c</span>
<span id="cb6-32"></span></code></pre></div>
</div>
<p><br></p>
<p>There are some limitations to JIT-compilation in JAX. In particular, loops, if statements, and other control flow mechanisms may not work as expected. Refer to <a href="https://docs.jax.dev/en/latest/notebooks/Common_Gotchas_in_JAX.html#jax-the-sharp-bits">JAX: The Sharp Bits</a> for additional gotchas.</p>
<p><br></p>
</section>
<section id="vectorizing-transformations" class="level3">
<h3 class="anchored" data-anchor-id="vectorizing-transformations">Vectorizing Transformations</h3>
<p><code>vmap</code> automatically vectorizes operations, enabling the application of a function across multiple inputs without writing explicit loops. It enables batch processing while taking advantage of JAX’s optimized execution. Instead of using loops, <code>vmap</code> efficiently maps a function over an array along a pre-specified axis.</p>
<p>To demonstrate, I’ll apply <code>vmap</code> to <code>get_haversine</code>, allowing it to accept coordinate arrays of shape n x 4 as opposed to 1 x 4. We will generate a random coordinate array of 10,000 x 4 using JAX’s random generator utilities.</p>
<p>In JAX, random number generation is handled a bit differently than in Numpy to ensure functional purity. JAX uses explicit PRNG keys to generate random numbers instead of relying on global state. A “key” is a special array that acts as a seed, and every time you use it, JAX produces the same random numbers for the same key.</p>
<p>Since JAX enforces immutability, you can’t reuse a key for multiple random calls without getting the same result. Instead, you split a key using <code>jax.random.split</code>, which deterministically generates new, unique keys from the original one. Each split key is independent, allowing for the generation of different random numbers while maintaining reproducibility. This approach makes JAX’s random functions fully compatible with its JIT compilation and parallelization features.</p>
<p>In the next cell, we create a 10,000 x 4 array of random coordinate pairs. We are interested in computing the Haversine distance for each pair of coordinates, but don’t want to rewrite <code>get_haversine</code> to process more than a single pair of points at a time.</p>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jax.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> random</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 1,000,000 x 4 array of random longitudes and latitudes.</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Longitudes are in the range -175 to 175.</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Latitudes are in the range -85 to 85.</span></span>
<span id="cb7-7">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10_000</span></span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Seed for reproducibility. Split key for different random sequences.</span></span>
<span id="cb7-10">key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.PRNGKey(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)  </span>
<span id="cb7-11">keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.split(key, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb7-12"></span>
<span id="cb7-13">lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n,), minval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">175.</span>, maxval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">175.</span>)</span>
<span id="cb7-14">lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n,), minval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">85.</span>, maxval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">85.</span>)</span>
<span id="cb7-15">lon1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n,), minval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">175.</span>, maxval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">175.</span>)</span>
<span id="cb7-16">lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n,), minval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">85.</span>, maxval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">85.</span>)</span>
<span id="cb7-17">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.stack([lon0, lat0, lon1, lat1], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape (n, 4)</span></span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"coords.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>coords<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>coords.shape: (10000, 4)</code></pre>
</div>
</div>
<p><br></p>
<p>Then applying vectorization to <code>get_haversine</code> is as simple as wrapping the original function with <code>vmap</code>:</p>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> vmap</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vectorize get_haversine.</span></span>
<span id="cb9-5">get_haversine_vmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vmap(get_haversine)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate distances between 10k coordinate pairs.</span></span>
<span id="cb9-8">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_haversine_vmap(coords)</span>
<span id="cb9-9"></span>
<span id="cb9-10">d[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>Array([ 8697.932 ,  6449.9453,  8237.629 ,  7416.7593,  9463.392 ,
        3435.566 ,  8059.4575, 10055.319 , 16480.527 ,  6943.8413],      dtype=float32)</code></pre>
</div>
</div>
<p><br></p>
<p>Not surprisingly, vectorization provides a massive speedup vs.&nbsp;native looping:</p>
<div id="cell-17" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n1 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> coords: get_haversine(c)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n1 get_haversine_vmap(coords)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.42 s ± 20.9 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
5.45 ms ± 1.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p><br></p>
<p>It is also possible to combine just-in-time compilation along with vectorized transformations for additional performance gains.</p>
<p>Refer to the <a href="https://docs.jax.dev/en/latest/automatic-vectorization.html">JAX documentation on automatic vectorization</a> for more advanced use cases of <code>vmap</code>, specifically how to apply a vectorized transformation along a specific axis of a multi-dimensional array.</p>
<p><br></p>
</section>
<section id="automatic-differentiation" class="level3">
<h3 class="anchored" data-anchor-id="automatic-differentiation">Automatic Differentiation</h3>
<p>Automatic differentiation (autodiff) in JAX is a method for computing derivatives efficiently and accurately using computational differentiation. Unlike numerical differentiation which relies on finite differences and can be prone to errors, or symbolic differentiation, which can become computationally expensive, autodiff in JAX works by systematically applying the chain rule at a computational level.</p>
<p>JAX provides <code>grad</code> for computing gradients of scalar-valued functions, <code>jacfwd</code> and <code>jacrev</code> for Jacobians, and <code>hessian</code> for second-order derivatives. It uses forward-mode autodiff for computing derivatives of functions with a small number of inputs, while reverse-mode autodiff is well-suited for functions with many inputs but a single output, which is ideal for deep learning applications.</p>
<p>As a simple example of using <code>grad</code> for a scalar-valued function, given a continuous random variable <img src="https://latex.codecogs.com/png.latex?X"> with CDF <img src="https://latex.codecogs.com/png.latex?F(x)">, the PDF <img src="https://latex.codecogs.com/png.latex?f(x)"> is obtained by differentiating <img src="https://latex.codecogs.com/png.latex?F(x)">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(x)%20=%20%5Cfrac%7Bd%7D%7Bdx%7DF(x).%0A"></p>
<p>For the exponential distribution, the CDF and PDF are given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0AF(x)%20&amp;=%201%20-%20e%5E%7B-%5Clambda%20x%7D%5C%5C%0Af(x)%20&amp;=%20F'(x)%20=%20%5Clambda%20e%5E%7B-%5Clambda%20x%7D%5C%5C%0A%5Cend%7Balign*%7D%0A"></p>
<p>The exact value of the exponential PDF can be compared with the result returned by <code>grad</code> applied to the CDF to verify they are the same. The result will also be compared against the PDF at a given value of <img src="https://latex.codecogs.com/png.latex?x"> returned by <code>scipy.stats.expon</code>. For the purposes of demonstration, we set <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%201/%2010">, which is hard-coded within <code>expon_cdf</code> and <code>expon_pdf</code>:</p>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> expon</span>
<span id="cb13-3"></span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> expon_cdf(x):</span>
<span id="cb13-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Exponential distribution CDF.</span></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb13-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> jnp.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x)</span>
<span id="cb13-10"></span>
<span id="cb13-11"></span>
<span id="cb13-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> expon_pdf(x):</span>
<span id="cb13-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Exponential distribution PDF.</span></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb13-16"></span>
<span id="cb13-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x)</span>
<span id="cb13-18"></span>
<span id="cb13-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exponential distribution with mean 10. </span></span>
<span id="cb13-20">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expon(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<p><br></p>
<p>In order to obtain the derivative of <code>expon_cdf</code> using JAX, pass <code>expon_cdf</code> into <code>grad</code>. The result is a callable that can accept any scalar value on <img src="https://latex.codecogs.com/png.latex?%5B0,%20%5Cinfty)"> and will return the exponential PDF at that point:</p>
<div id="cell-23" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> grad</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute derivative of exponential CDF.</span></span>
<span id="cb14-5">jax_expon_pdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grad(expon_cdf)</span></code></pre></div>
</div>
<p><br></p>
<p>Comparing the analytical PDF, <code>jax_expon_pdf</code> and the Scipy-generated PDF evaluated at 4.5:</p>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2">v0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expon_pdf(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>)</span>
<span id="cb15-3">v1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jax_expon_pdf(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>)</span>
<span id="cb15-4">v2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r.pdf(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>)</span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Exact PDF : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.8f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"JAX PDF   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.8f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Scipy PDF : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.8f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Exact PDF : 0.063763
JAX PDF   : 0.063763
Scipy PDF : 0.063763</code></pre>
</div>
</div>
<p><br></p>
<p>A particularly useful feature of <code>grad</code> is that we can pass <code>jax_expon_pdf</code> into <code>grad</code> and obtain the second derivative of the exponential CDF. Again we compare the JAX result against the exact analytical solution:</p>
<div id="cell-27" class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Analytical solution for comparison.</span></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> expon_cdf_second_deriv(x):</span>
<span id="cb17-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Second derivative of exponential CDF.</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb17-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x)</span>
<span id="cb17-8"></span>
<span id="cb17-9"></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute second derivative of exponential CDF using grad.</span></span>
<span id="cb17-11">jax_expon_cdf_second_deriv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grad(jax_expon_pdf)</span>
<span id="cb17-12"></span>
<span id="cb17-13">v0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expon_cdf_second_deriv(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>)</span>
<span id="cb17-14">v1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jax_expon_cdf_second_deriv(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>)</span>
<span id="cb17-15"></span>
<span id="cb17-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Exact second derivative : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.8f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"JAX second derivative   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>v1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.8f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-18"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Exact second derivative : -0.00637628
JAX second derivative   : -0.00637628</code></pre>
</div>
</div>
<p><br></p>
<p>It is not an exaggeration to say <code>vmap</code>, <code>jit</code>, and <code>grad</code> have transformed my machine learning workflows. Vectorization without loops, lightning-fast compilation and flexible gradient computation let me build cleaner, faster models with less code. I’m finding new applications all the time and will continue to explore additional ways to leverage JAX and related libraries like flax.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/intro-to-jax-part-1/intro-to-jax-part-1.html</guid>
  <pubDate>Sat, 22 Mar 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating Animations with Folium</title>
  <link>https://www.jtrive.com/posts/folium-annimations/folium-annimations.html</link>
  <description><![CDATA[ 





<p><a href="https://python-visualization.github.io/folium/latest/user_guide/plugins/timestamped_geojson.html">TimestampedGeoJson</a> is a Folium plugin that facilitates the visualization of geospatial data that evolves over time using the GeoJSON format with timestamps. This is useful for tracking vehicle trajectories, satellites, pedestrian traffic, changes in weather patterns or any other geospatial phenomena with time dependent characteristics. TimestampedGeoJson leverages Leaflet.js’s leaflet-timestamped plugin and provides controls for play, pause, and speed adjustment. When added to a Folium map, it animates the appearance of features that evolve with time.</p>
<p>In what follows, I demonstrate how to create an animatio representing the trajectory of the International Space Station over the course of an hour using folium’s TimestampedGeoJson extension.</p>
<p>We start by obtaining the coordinates of the International Space station every minute for one hour using <a href="http://open-notify.org/Open-Notify-API/ISS-Location-Now/">Open Notify</a>, a simple api which returns the current location of the ISS relative to the surface of the earth. The <code>get_iss_position</code> function queries the api and returns the latitude, longitude and timestamp as a dictionary:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_iss_position():</span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Get timestamped coordinates of International Space Station relative </span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to the surface of the Earth.   </span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dict</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Dictionary with keys "latitude", "longitude" and </span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        "timestamp" indicating time and position of ISS. </span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-19">    dpos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb1-20">    resp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://api.open-notify.org/iss-now.json"</span>).json()</span>
<span id="cb1-21">    dpos[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>]</span>
<span id="cb1-22">    dpos[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(resp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iss_position"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>])</span>
<span id="cb1-23">    dpos[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(resp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iss_position"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>])</span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dpos</span></code></pre></div>
</div>
<p><br></p>
<p>The <code>coords</code> list of dictionaries is created by querying the api once every minute for an hour:</p>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb2-6">        tstmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-7">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_iss_position()</span>
<span id="cb2-8">        coords.append(p)</span>
<span id="cb2-9">       </span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ee:</span>
<span id="cb2-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ee<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-12"></span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">finally</span>:</span>
<span id="cb2-14">        time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coords.pkl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fpkl:</span>
<span id="cb2-17">    pickle.dump(coords, fpkl, protocol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>TimestampedGeoJson features expect coordinates and timestamps to be structured as GeoJSON. To do so, we first create <code>time_pos</code> which converts unix timestamps to a string representation (“YYYY-mm-dd HH:MM:ss”). The start and end points of the ISS position by are grouped together by shifting <code>time_pos</code> by a single index (see <code>end_pts</code> and <code>time_pos</code>), resulting in a LineString geometry for each time step.</p>
<p><code>lines</code> is a list of dictionaries with start and end coordinates (longitude first), start and end timestamps, and line segment color. In our animation, the color of the line segment will alternate between red and blue at each update.</p>
<p>The <code>features</code> list is what ultimately gets passed into TimestampedGeoJson. <code>features</code> is also a list of dictionaries, each element structured as:</p>
<pre><code>{
    "type": "Feature",
    "geometry": {
        "type": "LineString",
        "coordinates": [[LON1, LAT1], [LON2, LAT2]]
    },
    "properties": {
        "times": [TIMESTAMP1, TIMESTAMP2],
        "style": {
            "color": COLOR
            "weight": 3
        }
    }
}</code></pre>
<div id="cell-6" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unpack coords list of dicts. Use lon-lat ordering. </span></span>
<span id="cb4-3">time_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[</span>
<span id="cb4-4">    datetime.fromtimestamp(d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>]).strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %H:%M:%S"</span>),</span>
<span id="cb4-5">    [d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>], d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>]]</span>
<span id="cb4-6"> ] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> coords</span>
<span id="cb4-7">]</span>
<span id="cb4-8"></span>
<span id="cb4-9">end_pts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tt <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> time_pos[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]]</span>
<span id="cb4-10">time_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(time_pos[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], end_pts))</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine timestamps and coordinates in separate lists for each time step. </span></span>
<span id="cb4-13">lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{</span>
<span id="cb4-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coordinates"</span>: [tp[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], tp[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], </span>
<span id="cb4-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dates"</span>: [tp[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], tp[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]], </span>
<span id="cb4-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span></span>
<span id="cb4-17">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, tp <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(time_pos)</span>
<span id="cb4-18">]</span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create features list. Must be valid GeoJSON.</span></span>
<span id="cb4-21">features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-22">    {</span>
<span id="cb4-23">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature"</span>,</span>
<span id="cb4-24">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geometry"</span>: {</span>
<span id="cb4-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LineString"</span>,</span>
<span id="cb4-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coordinates"</span>: line[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coordinates"</span>]</span>
<span id="cb4-27">        },</span>
<span id="cb4-28">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb4-29">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"times"</span>: line[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dates"</span>],</span>
<span id="cb4-30">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"style"</span>: {</span>
<span id="cb4-31">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>: line[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>],</span>
<span id="cb4-32">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb4-33">            }</span>
<span id="cb4-34">        },</span>
<span id="cb4-35">    }</span>
<span id="cb4-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lines</span>
<span id="cb4-37">]</span></code></pre></div>
</div>
<p><br></p>
<p>A brief mention of relevant TimestampedGeoJson’s arguments:</p>
<ul>
<li><p><code>transition_time</code>: The duration in milliseconds between transitions. I set this to 500, but can also be adjusted from the map interface.</p></li>
<li><p><code>period</code>: Specifies the amount of time between observations in your data. By default, this is set to “P1D”, which represents one day. When I tried using the default, all of my points were displayed at once since I only had data that spanned one hour. Since the ISS location queries were separated by roughly 60 seconds, setting <code>period</code> to “PT60S” gave me what I was looking for.</p></li>
<li><p><code>date_options</code> accepts a string representing the format of your timestamps.</p></li>
</ul>
<p>Once the features list has been created, it is straightforward to display the animation. Initialize a folium map as usual, the call <code>plugins.TimestampedGeoJson</code> as demonstrated in the next cell:</p>
<div id="cell-8" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium.plugins <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plugins</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center map.</span></span>
<span id="cb5-6">dc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>] </span>
<span id="cb5-7">mid_lat, mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>], dc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>]</span>
<span id="cb5-8"></span>
<span id="cb5-9">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Figure(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">650</span>)</span>
<span id="cb5-10">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).add_to(f)</span>
<span id="cb5-11"></span>
<span id="cb5-12">plugins.TimestampedGeoJson(</span>
<span id="cb5-13">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FeatureCollection"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"features"</span>: features},</span>
<span id="cb5-14">    transition_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb5-15">    period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PT60S'</span>,</span>
<span id="cb5-16">    date_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'YYYY-MM-DD HH:mm:ss'</span>,</span>
<span id="cb5-17">).add_to(m)</span>
<span id="cb5-18"></span>
<span id="cb5-19">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_684fd003ba0ed685e86c491ef31e85a4 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.2/jquery-ui.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/iso8601-js-period@0.2.1/iso8601.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet-timedimension@1.1.1/dist/leaflet.timedimension.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/default.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet-timedimension@1.1.1/dist/leaflet.timedimension.control.css&quot;/>
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_684fd003ba0ed685e86c491ef31e85a4&quot; ></div>
        
</body>
<script>
    
    
            var map_684fd003ba0ed685e86c491ef31e85a4 = L.map(
                &quot;map_684fd003ba0ed685e86c491ef31e85a4&quot;,
                {
                    center: [-51.6184, 82.354],
                    crs: L.CRS.EPSG3857,
                    zoom: 2,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_3885e5befbbcdead22b300f3d6c7c5e6 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_3885e5befbbcdead22b300f3d6c7c5e6.addTo(map_684fd003ba0ed685e86c491ef31e85a4);
        
    
            L.Control.TimeDimensionCustom = L.Control.TimeDimension.extend({
                _getDisplayDateFormat: function(date){
                    var newdate = new moment(date);
                    console.log(newdate)
                    return newdate.format(&quot;YYYY-MM-DD HH:mm:ss&quot;);
                }
            });
            map_684fd003ba0ed685e86c491ef31e85a4.timeDimension = L.timeDimension(
                {
                    period: &quot;PT60S&quot;,
                }
            );
            var timeDimensionControl = new L.Control.TimeDimensionCustom(
                {&quot;autoPlay&quot;: true, &quot;loopButton&quot;: false, &quot;maxSpeed&quot;: 10, &quot;minSpeed&quot;: 0.1, &quot;playerOptions&quot;: {&quot;loop&quot;: true, &quot;startOver&quot;: true, &quot;transitionTime&quot;: 500}, &quot;position&quot;: &quot;bottomleft&quot;, &quot;speedSlider&quot;: true, &quot;timeSliderDragUpdate&quot;: false}
            );
            map_684fd003ba0ed685e86c491ef31e85a4.addControl(this.timeDimensionControl);

            var geoJsonLayer = L.geoJson({&quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [{&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-44.8473, 42.5574], [-40.7992, 40.3836]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:35:49&quot;, &quot;2025-02-18 07:36:49&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-40.7992, 40.3836], [-37.0293, 38.0607]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:36:49&quot;, &quot;2025-02-18 07:37:49&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-37.0293, 38.0607], [-33.514, 35.6094]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:37:49&quot;, &quot;2025-02-18 07:38:49&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-33.514, 35.6094], [-30.2279, 33.048]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:38:49&quot;, &quot;2025-02-18 07:39:49&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-30.2279, 33.048], [-27.1446, 30.3913]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:39:49&quot;, &quot;2025-02-18 07:40:49&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-27.1446, 30.3913], [-24.2186, 27.6327]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:40:49&quot;, &quot;2025-02-18 07:41:50&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-24.2186, 27.6327], [-21.4736, 24.8289]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:41:50&quot;, &quot;2025-02-18 07:42:50&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-21.4736, 24.8289], [-18.863, 21.9681]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:42:50&quot;, &quot;2025-02-18 07:43:50&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-18.863, 21.9681], [-16.3668, 19.0599]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:43:50&quot;, &quot;2025-02-18 07:44:50&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-16.3668, 19.0599], [-13.9661, 16.1124]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:44:50&quot;, &quot;2025-02-18 07:45:50&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-13.9661, 16.1124], [-11.6058, 13.0835]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:45:50&quot;, &quot;2025-02-18 07:46:51&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-11.6058, 13.0835], [-9.2167, 9.9036]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:46:51&quot;, &quot;2025-02-18 07:47:55&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-9.2167, 9.9036], [-6.8973, 6.7287]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:47:55&quot;, &quot;2025-02-18 07:48:58&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-6.8973, 6.7287], [-4.6119, 3.5409]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:48:58&quot;, &quot;2025-02-18 07:50:01&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-4.6119, 3.5409], [-2.4518, 0.4982]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:50:01&quot;, &quot;2025-02-18 07:51:01&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-2.4518, 0.4982], [-0.2944, -2.5449]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:51:01&quot;, &quot;2025-02-18 07:52:01&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-0.2944, -2.5449], [1.9106, -5.6338]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:52:01&quot;, &quot;2025-02-18 07:53:02&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[1.9106, -5.6338], [4.1047, -8.6615]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:53:02&quot;, &quot;2025-02-18 07:54:02&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[4.1047, -8.6615], [6.3573, -11.6984]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:54:02&quot;, &quot;2025-02-18 07:55:03&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[6.3573, -11.6984], [8.6844, -14.7373]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:55:03&quot;, &quot;2025-02-18 07:56:04&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[8.6844, -14.7373], [11.044, -17.6973]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:56:04&quot;, &quot;2025-02-18 07:57:04&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[11.044, -17.6973], [13.4905, -20.6213]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:57:04&quot;, &quot;2025-02-18 07:58:04&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[13.4905, -20.6213], [16.1725, -23.6443]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:58:04&quot;, &quot;2025-02-18 07:59:07&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[16.1725, -23.6443], [22.7229, -30.1895]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:59:07&quot;, &quot;2025-02-18 08:01:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[22.7229, -30.1895], [25.8371, -32.8903]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:01:29&quot;, &quot;2025-02-18 08:02:30&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[25.8371, -32.8903], [29.2721, -35.5783]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:02:30&quot;, &quot;2025-02-18 08:03:33&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[29.2721, -35.5783], [32.7763, -38.026]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:03:33&quot;, &quot;2025-02-18 08:04:33&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[32.7763, -38.026], [36.5338, -40.3463]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:04:33&quot;, &quot;2025-02-18 08:05:33&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[36.5338, -40.3463], [40.6021, -42.5355]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:05:33&quot;, &quot;2025-02-18 08:06:34&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[40.6021, -42.5355], [46.0646, -45.0047]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:06:34&quot;, &quot;2025-02-18 08:07:49&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[46.0646, -45.0047], [57.9104, -48.8132]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:07:49&quot;, &quot;2025-02-18 08:10:13&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[57.9104, -48.8132], [63.3463, -49.9679]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:10:13&quot;, &quot;2025-02-18 08:11:13&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[63.3463, -49.9679], [69.0258, -50.8318]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:11:13&quot;, &quot;2025-02-18 08:12:13&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[69.0258, -50.8318], [76.3735, -51.4726]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:12:13&quot;, &quot;2025-02-18 08:13:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[76.3735, -51.4726], [82.354, -51.6184]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:13:29&quot;, &quot;2025-02-18 08:14:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[82.354, -51.6184], [88.33, -51.4332]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:14:29&quot;, &quot;2025-02-18 08:15:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[88.33, -51.4332], [94.2112, -50.922]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:15:29&quot;, &quot;2025-02-18 08:16:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[94.2112, -50.922], [99.9194, -50.0976]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:16:29&quot;, &quot;2025-02-18 08:17:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[99.9194, -50.0976], [105.3919, -48.979]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:17:29&quot;, &quot;2025-02-18 08:18:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[105.3919, -48.979], [110.584, -47.5903]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:18:29&quot;, &quot;2025-02-18 08:19:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[110.584, -47.5903], [115.5513, -45.9281]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:19:29&quot;, &quot;2025-02-18 08:20:30&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[115.5513, -45.9281], [120.1944, -44.0424]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:20:30&quot;, &quot;2025-02-18 08:21:31&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[120.1944, -44.0424], [124.6569, -41.889]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:21:31&quot;, &quot;2025-02-18 08:22:34&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[124.6569, -41.889], [128.6089, -39.6691]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:22:34&quot;, &quot;2025-02-18 08:23:35&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[128.6089, -39.6691], [132.7046, -37.0229]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:23:35&quot;, &quot;2025-02-18 08:24:42&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[132.7046, -37.0229], [136.2796, -34.3969]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:24:42&quot;, &quot;2025-02-18 08:25:45&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[136.2796, -34.3969], [139.6162, -31.658]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:25:45&quot;, &quot;2025-02-18 08:26:48&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[139.6162, -31.658], [142.5987, -28.9603]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:26:48&quot;, &quot;2025-02-18 08:27:48&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[142.5987, -28.9603], [145.4152, -26.1886]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:27:48&quot;, &quot;2025-02-18 08:28:48&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[145.4152, -26.1886], [148.2393, -23.1876]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:28:48&quot;, &quot;2025-02-18 08:29:52&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[148.2393, -23.1876], [150.9066, -20.1521]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:29:52&quot;, &quot;2025-02-18 08:30:55&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[150.9066, -20.1521], [153.4608, -17.0701]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:30:55&quot;, &quot;2025-02-18 08:31:58&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[153.4608, -17.0701], [155.8462, -14.0494]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:31:58&quot;, &quot;2025-02-18 08:32:59&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[155.8462, -14.0494], [158.1252, -11.0506]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:32:59&quot;, &quot;2025-02-18 08:33:59&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[158.1252, -11.0506], [160.3529, -8.0309]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:33:59&quot;, &quot;2025-02-18 08:34:59&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[160.3529, -8.0309], [162.6536, -4.8432]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:34:59&quot;, &quot;2025-02-18 08:36:02&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[162.6536, -4.8432], [164.8217, -1.799]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:36:02&quot;, &quot;2025-02-18 08:37:03&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[164.8217, -1.799], [167.2342, 1.6045]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:37:03&quot;, &quot;2025-02-18 08:38:10&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[167.2342, 1.6045], [172.3649, 8.7475]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:38:10&quot;, &quot;2025-02-18 08:40:31&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}]}, {
                    pointToLayer: function (feature, latLng) {
                        if (feature.properties.icon == 'marker') {
                            if(feature.properties.iconstyle){
                                return new L.Marker(latLng, {
                                    icon: L.icon(feature.properties.iconstyle)});
                            }
                            //else
                            return new L.Marker(latLng);
                        }
                        if (feature.properties.icon == 'circle') {
                            if (feature.properties.iconstyle) {
                                return new L.circleMarker(latLng, feature.properties.iconstyle)
                                };
                            //else
                            return new L.circleMarker(latLng);
                        }
                        //else

                        return new L.Marker(latLng);
                    },
                    style: function (feature) {
                        return feature.properties.style;
                    },
                    onEachFeature: function(feature, layer) {
                        if (feature.properties.popup) {
                        layer.bindPopup(feature.properties.popup);
                        }
                        if (feature.properties.tooltip) {
                        layer.bindTooltip(feature.properties.tooltip);
                        }
                    }
                })

            var timestamped_geo_json_14e97978e8824516bd2c4cd063429150 = L.timeDimension.layer.geoJson(
                geoJsonLayer,
                {
                    updateTimeDimension: true,
                    addlastPoint: true,
                    duration: undefined,
                }
            ).addTo(map_684fd003ba0ed685e86c491ef31e85a4);
        
</script>
</html>" width="900" height="650" style="border:none !important;" "allowfullscreen"="" "webkitallowfullscreen"="" "mozallowfullscreen"=""></iframe>
</div>
</div>
<p><br></p>
<p>The visual field appears too cluttered with the inclusion of markers. We can remove them by setting <code>add_last_point = False</code>:</p>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium.plugins <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plugins</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center map.</span></span>
<span id="cb6-6">dc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>] </span>
<span id="cb6-7">mid_lat, mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latitude"</span>], dc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"longitude"</span>]</span>
<span id="cb6-8"></span>
<span id="cb6-9">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Figure(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">650</span>)</span>
<span id="cb6-10">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).add_to(f)</span>
<span id="cb6-11"></span>
<span id="cb6-12">plugins.TimestampedGeoJson(</span>
<span id="cb6-13">    {</span>
<span id="cb6-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FeatureCollection"</span>,</span>
<span id="cb6-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"features"</span>: features,</span>
<span id="cb6-16">    },</span>
<span id="cb6-17">    transition_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb6-18">    add_last_point<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb6-19">    period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PT60S'</span>,</span>
<span id="cb6-20">    date_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'YYYY-MM-DD HH:mm:ss'</span>,</span>
<span id="cb6-21">).add_to(m)</span>
<span id="cb6-22"></span>
<span id="cb6-23">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_6b2f73ddc181a0691f65b5c8c3180651 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.2/jquery-ui.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/iso8601-js-period@0.2.1/iso8601.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet-timedimension@1.1.1/dist/leaflet.timedimension.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/default.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet-timedimension@1.1.1/dist/leaflet.timedimension.control.css&quot;/>
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_6b2f73ddc181a0691f65b5c8c3180651&quot; ></div>
        
</body>
<script>
    
    
            var map_6b2f73ddc181a0691f65b5c8c3180651 = L.map(
                &quot;map_6b2f73ddc181a0691f65b5c8c3180651&quot;,
                {
                    center: [-51.6184, 82.354],
                    crs: L.CRS.EPSG3857,
                    zoom: 2,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_351abc866f463a909f424438e88cfa88 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_351abc866f463a909f424438e88cfa88.addTo(map_6b2f73ddc181a0691f65b5c8c3180651);
        
    
            L.Control.TimeDimensionCustom = L.Control.TimeDimension.extend({
                _getDisplayDateFormat: function(date){
                    var newdate = new moment(date);
                    console.log(newdate)
                    return newdate.format(&quot;YYYY-MM-DD HH:mm:ss&quot;);
                }
            });
            map_6b2f73ddc181a0691f65b5c8c3180651.timeDimension = L.timeDimension(
                {
                    period: &quot;PT60S&quot;,
                }
            );
            var timeDimensionControl = new L.Control.TimeDimensionCustom(
                {&quot;autoPlay&quot;: true, &quot;loopButton&quot;: false, &quot;maxSpeed&quot;: 10, &quot;minSpeed&quot;: 0.1, &quot;playerOptions&quot;: {&quot;loop&quot;: true, &quot;startOver&quot;: true, &quot;transitionTime&quot;: 500}, &quot;position&quot;: &quot;bottomleft&quot;, &quot;speedSlider&quot;: true, &quot;timeSliderDragUpdate&quot;: false}
            );
            map_6b2f73ddc181a0691f65b5c8c3180651.addControl(this.timeDimensionControl);

            var geoJsonLayer = L.geoJson({&quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [{&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-44.8473, 42.5574], [-40.7992, 40.3836]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:35:49&quot;, &quot;2025-02-18 07:36:49&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-40.7992, 40.3836], [-37.0293, 38.0607]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:36:49&quot;, &quot;2025-02-18 07:37:49&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-37.0293, 38.0607], [-33.514, 35.6094]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:37:49&quot;, &quot;2025-02-18 07:38:49&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-33.514, 35.6094], [-30.2279, 33.048]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:38:49&quot;, &quot;2025-02-18 07:39:49&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-30.2279, 33.048], [-27.1446, 30.3913]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:39:49&quot;, &quot;2025-02-18 07:40:49&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-27.1446, 30.3913], [-24.2186, 27.6327]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:40:49&quot;, &quot;2025-02-18 07:41:50&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-24.2186, 27.6327], [-21.4736, 24.8289]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:41:50&quot;, &quot;2025-02-18 07:42:50&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-21.4736, 24.8289], [-18.863, 21.9681]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:42:50&quot;, &quot;2025-02-18 07:43:50&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-18.863, 21.9681], [-16.3668, 19.0599]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:43:50&quot;, &quot;2025-02-18 07:44:50&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-16.3668, 19.0599], [-13.9661, 16.1124]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:44:50&quot;, &quot;2025-02-18 07:45:50&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-13.9661, 16.1124], [-11.6058, 13.0835]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:45:50&quot;, &quot;2025-02-18 07:46:51&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-11.6058, 13.0835], [-9.2167, 9.9036]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:46:51&quot;, &quot;2025-02-18 07:47:55&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-9.2167, 9.9036], [-6.8973, 6.7287]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:47:55&quot;, &quot;2025-02-18 07:48:58&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-6.8973, 6.7287], [-4.6119, 3.5409]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:48:58&quot;, &quot;2025-02-18 07:50:01&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-4.6119, 3.5409], [-2.4518, 0.4982]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:50:01&quot;, &quot;2025-02-18 07:51:01&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-2.4518, 0.4982], [-0.2944, -2.5449]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:51:01&quot;, &quot;2025-02-18 07:52:01&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[-0.2944, -2.5449], [1.9106, -5.6338]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:52:01&quot;, &quot;2025-02-18 07:53:02&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[1.9106, -5.6338], [4.1047, -8.6615]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:53:02&quot;, &quot;2025-02-18 07:54:02&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[4.1047, -8.6615], [6.3573, -11.6984]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:54:02&quot;, &quot;2025-02-18 07:55:03&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[6.3573, -11.6984], [8.6844, -14.7373]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:55:03&quot;, &quot;2025-02-18 07:56:04&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[8.6844, -14.7373], [11.044, -17.6973]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:56:04&quot;, &quot;2025-02-18 07:57:04&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[11.044, -17.6973], [13.4905, -20.6213]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:57:04&quot;, &quot;2025-02-18 07:58:04&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[13.4905, -20.6213], [16.1725, -23.6443]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:58:04&quot;, &quot;2025-02-18 07:59:07&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[16.1725, -23.6443], [22.7229, -30.1895]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 07:59:07&quot;, &quot;2025-02-18 08:01:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[22.7229, -30.1895], [25.8371, -32.8903]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:01:29&quot;, &quot;2025-02-18 08:02:30&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[25.8371, -32.8903], [29.2721, -35.5783]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:02:30&quot;, &quot;2025-02-18 08:03:33&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[29.2721, -35.5783], [32.7763, -38.026]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:03:33&quot;, &quot;2025-02-18 08:04:33&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[32.7763, -38.026], [36.5338, -40.3463]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:04:33&quot;, &quot;2025-02-18 08:05:33&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[36.5338, -40.3463], [40.6021, -42.5355]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:05:33&quot;, &quot;2025-02-18 08:06:34&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[40.6021, -42.5355], [46.0646, -45.0047]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:06:34&quot;, &quot;2025-02-18 08:07:49&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[46.0646, -45.0047], [57.9104, -48.8132]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:07:49&quot;, &quot;2025-02-18 08:10:13&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[57.9104, -48.8132], [63.3463, -49.9679]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:10:13&quot;, &quot;2025-02-18 08:11:13&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[63.3463, -49.9679], [69.0258, -50.8318]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:11:13&quot;, &quot;2025-02-18 08:12:13&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[69.0258, -50.8318], [76.3735, -51.4726]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:12:13&quot;, &quot;2025-02-18 08:13:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[76.3735, -51.4726], [82.354, -51.6184]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:13:29&quot;, &quot;2025-02-18 08:14:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[82.354, -51.6184], [88.33, -51.4332]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:14:29&quot;, &quot;2025-02-18 08:15:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[88.33, -51.4332], [94.2112, -50.922]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:15:29&quot;, &quot;2025-02-18 08:16:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[94.2112, -50.922], [99.9194, -50.0976]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:16:29&quot;, &quot;2025-02-18 08:17:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[99.9194, -50.0976], [105.3919, -48.979]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:17:29&quot;, &quot;2025-02-18 08:18:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[105.3919, -48.979], [110.584, -47.5903]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:18:29&quot;, &quot;2025-02-18 08:19:29&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[110.584, -47.5903], [115.5513, -45.9281]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:19:29&quot;, &quot;2025-02-18 08:20:30&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[115.5513, -45.9281], [120.1944, -44.0424]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:20:30&quot;, &quot;2025-02-18 08:21:31&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[120.1944, -44.0424], [124.6569, -41.889]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:21:31&quot;, &quot;2025-02-18 08:22:34&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[124.6569, -41.889], [128.6089, -39.6691]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:22:34&quot;, &quot;2025-02-18 08:23:35&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[128.6089, -39.6691], [132.7046, -37.0229]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:23:35&quot;, &quot;2025-02-18 08:24:42&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[132.7046, -37.0229], [136.2796, -34.3969]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:24:42&quot;, &quot;2025-02-18 08:25:45&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[136.2796, -34.3969], [139.6162, -31.658]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:25:45&quot;, &quot;2025-02-18 08:26:48&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[139.6162, -31.658], [142.5987, -28.9603]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:26:48&quot;, &quot;2025-02-18 08:27:48&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[142.5987, -28.9603], [145.4152, -26.1886]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:27:48&quot;, &quot;2025-02-18 08:28:48&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[145.4152, -26.1886], [148.2393, -23.1876]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:28:48&quot;, &quot;2025-02-18 08:29:52&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[148.2393, -23.1876], [150.9066, -20.1521]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:29:52&quot;, &quot;2025-02-18 08:30:55&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[150.9066, -20.1521], [153.4608, -17.0701]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:30:55&quot;, &quot;2025-02-18 08:31:58&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[153.4608, -17.0701], [155.8462, -14.0494]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:31:58&quot;, &quot;2025-02-18 08:32:59&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[155.8462, -14.0494], [158.1252, -11.0506]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:32:59&quot;, &quot;2025-02-18 08:33:59&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[158.1252, -11.0506], [160.3529, -8.0309]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:33:59&quot;, &quot;2025-02-18 08:34:59&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[160.3529, -8.0309], [162.6536, -4.8432]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:34:59&quot;, &quot;2025-02-18 08:36:02&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[162.6536, -4.8432], [164.8217, -1.799]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:36:02&quot;, &quot;2025-02-18 08:37:03&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[164.8217, -1.799], [167.2342, 1.6045]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:37:03&quot;, &quot;2025-02-18 08:38:10&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;blue&quot;, &quot;weight&quot;: 3}}}, {&quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {&quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[167.2342, 1.6045], [172.3649, 8.7475]]}, &quot;properties&quot;: {&quot;times&quot;: [&quot;2025-02-18 08:38:10&quot;, &quot;2025-02-18 08:40:31&quot;], &quot;style&quot;: {&quot;color&quot;: &quot;red&quot;, &quot;weight&quot;: 3}}}]}, {
                    pointToLayer: function (feature, latLng) {
                        if (feature.properties.icon == 'marker') {
                            if(feature.properties.iconstyle){
                                return new L.Marker(latLng, {
                                    icon: L.icon(feature.properties.iconstyle)});
                            }
                            //else
                            return new L.Marker(latLng);
                        }
                        if (feature.properties.icon == 'circle') {
                            if (feature.properties.iconstyle) {
                                return new L.circleMarker(latLng, feature.properties.iconstyle)
                                };
                            //else
                            return new L.circleMarker(latLng);
                        }
                        //else

                        return new L.Marker(latLng);
                    },
                    style: function (feature) {
                        return feature.properties.style;
                    },
                    onEachFeature: function(feature, layer) {
                        if (feature.properties.popup) {
                        layer.bindPopup(feature.properties.popup);
                        }
                        if (feature.properties.tooltip) {
                        layer.bindTooltip(feature.properties.tooltip);
                        }
                    }
                })

            var timestamped_geo_json_7c2687c86a6037189666baefde7834b0 = L.timeDimension.layer.geoJson(
                geoJsonLayer,
                {
                    updateTimeDimension: true,
                    addlastPoint: false,
                    duration: undefined,
                }
            ).addTo(map_6b2f73ddc181a0691f65b5c8c3180651);
        
</script>
</html>" width="900" height="650" style="border:none !important;" "allowfullscreen"="" "webkitallowfullscreen"="" "mozallowfullscreen"=""></iframe>
</div>
</div>



 ]]></description>
  <category>Python</category>
  <category>Geospatial</category>
  <guid>https://www.jtrive.com/posts/folium-annimations/folium-annimations.html</guid>
  <pubDate>Wed, 19 Feb 2025 06:00:00 GMT</pubDate>
</item>
<item>
  <title>The Bootstrap Chain Ladder from Scratch using Polars</title>
  <link>https://www.jtrive.com/posts/boostrap-chainladder-polars/bootstrap-chainladder-polars.html</link>
  <description><![CDATA[ 





<p>In an earlier <a href="https://www.jtrive.com/posts/boostrap-chainladder-pandas/bootstrap-chainladder-pandas.html">post</a>, I provided a step-by-step guide on performing the bootstrap chain ladder using Pandas. This method involves repeatedly resampling residuals from the original chain ladder model to generate a series of simulated datasets, each replicating the original data’s claims development patterns (for more background, refer to the linked article).</p>
<p>Here we again walkthrough the bootstrap chain ladder step-by-step, this time using Polars, a high-performance DataFrame library built in Rust specifically designed for efficient data processing with large datasets. Unlike Pandas which is single-threaded, Polars leverages multi-core processors resulting in faster execution for many tasks. Although not required for our work in this setting, Polars can also handle datasets larger than available memory, spilling to disk when necessary. In Pandas, we can only process datasets having size less than or equal to available system memory.</p>
<p>Although Polars offers clear advantages over Pandas in many scenarios, this particular case isn’t one of them. Polars eliminates the concept of an index, which is a core feature of Pandas. But indices are especially valuable in this context for calculating age-to-age factors, identifying values along the latest diagonal, and squaring triangles. Additionally, while some insurers may store tens or hundreds of millions of claim records in their data warehouses, losses are typically aggregated by origin and development period ahead of a reserving analysis, resulting in datasets greatly reduced in size vs.&nbsp;transactional claim data. As a consequence, reserving actuaries typically don’t work with datasets large enough to necessitate parallel processing or out-of-core computation.</p>
<p>Translating the original Pandas bootstrap chain ladder code to Polars provided a good opportunity to showcase the library’s core features. However, many operations felt much less intuitive compared to their Pandas counterparts. Even so, I see this post as a valuable reference for specific Polars operations that I’ll likely use again in the future.</p>
<p>The steps to perform the bootstrap chain ladder:</p>
<ol type="1">
<li><p>Transform loss data into cumulative triangle representation.</p></li>
<li><p>Calculate all-year volume weighted age-to-age factors.</p></li>
<li><p>Calculate the cumulative fitted triangle by applying backwards recursion, beginning with the observed cumulative losses from the latest diagonal.</p></li>
<li><p>Calculate the unscaled Pearson residuals, <img src="https://latex.codecogs.com/png.latex?r_%7Bp%7D">, degrees of freedom <img src="https://latex.codecogs.com/png.latex?DF"> and scale parameter <img src="https://latex.codecogs.com/png.latex?%5Cphi">.</p></li>
<li><p>Calculate the adjusted Pearson residuals, defined as <img src="https://latex.codecogs.com/png.latex?r_%7Bp%7D%5E%7B%7Badj%7D%7D%20=%20%5Csqrt%7B%5Cfrac%7Bn%7D%7BDF%7D%7D%20%5Ctimes%20r_%7Bp%7D">.</p></li>
<li><p>For each bootstrap sample (1…1000):</p>
<ol type="i">
<li><p>Generate a sample from the adjusted Pearson residuals <img src="https://latex.codecogs.com/png.latex?r_%7Bp%7D%5E%7B%7Badj%7D%7D"> with replacement.</p></li>
<li><p>Using the sampled adjusted Pearson residuals and fitted incremental triangle <img src="https://latex.codecogs.com/png.latex?m">, construct the triangle of sampled incremental losses <img src="https://latex.codecogs.com/png.latex?I_%7Bi%7D%20=%20m%20+%20%5Chat%7Br%7D_%7Bp%7D%5E%7Badj%7D%20%5Csqrt%7Bm%7D">, where <img src="https://latex.codecogs.com/png.latex?%5Chat%7Br%7D_%7Bp%7D%5E%7Badj%7D"> represents a sample with replacement from the adjusted Pearson residuals and <img src="https://latex.codecogs.com/png.latex?m"> the fitted incremental triangle.</p></li>
<li><p>Create a cumulative triangle using the result from ii., and project future losses using the chain ladder method.</p></li>
<li><p>Incorporate process variance by simulating each future projected incremental loss from a gamma distribution parameterized with mean equal to the projected loss value and variance the loss value times <img src="https://latex.codecogs.com/png.latex?%5Cphi">.</p></li>
<li><p>Cumulate the incremental losses, then compute the total needed reserve as the ultimate projected value minus the latest cumulative loss amount by origin period.</p></li>
</ol></li>
<li><p>Compute desired quantiles of interest from predictive distribution of bootstrap samples.</p></li>
</ol>
<p><br></p>
<p>In what follows each step is demonstrated, along with exhibits to visually assess the distribution of future losses.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext watermark</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb1-10"></span>
<span id="cb1-11">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"display.precision"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-14">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-15">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-16">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-17">warnings.simplefilter(action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>, category<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">FutureWarning</span>)</span>
<span id="cb1-18"></span>
<span id="cb1-19">pl.Config(tbl_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-20">pl.Config(float_precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-21">pl.Config(tbl_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-22"></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>watermark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>conda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>hostname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>machine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>iversions</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Python implementation: CPython
Python version       : 3.12.8
IPython version      : 8.31.0

conda environment: polars

Compiler    : MSC v.1942 64 bit (AMD64)
OS          : Windows
Release     : 11
Machine     : AMD64
Processor   : Intel64 Family 6 Model 170 Stepping 4, GenuineIntel
CPU cores   : 22
Architecture: 64bit

Hostname: JTRIZPC11

matplotlib: 3.10.0
pandas    : 2.2.3
polars    : 1.20.0
numpy     : 2.2.2
</code></pre>
</div>
</div>
<p>Start by loading the data from GitHub:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load RAA dataset. </span></span>
<span id="cb3-3">dfraa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/976c80786a6e97cce7483e306562f85b/raw/06a5c8b1f823fbe2b6da15f90a672517fa5b4571/RAA.csv"</span>)</span>
<span id="cb3-4">dfraa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfraa.sort(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEV"</span>])</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original incremental loss data:"</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subtract 1980 from ORIGIN.</span></span>
<span id="cb3-9">dfraa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfraa.with_columns(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>).sub(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1980</span>).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>))</span>
<span id="cb3-10"></span>
<span id="cb3-11">dfraa.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original incremental loss data:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (10, 3)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">DEV</th>
<th data-quarto-table-cell-role="th">VALUE</th>
</tr>
<tr class="odd">
<th>i64</th>
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>1</td>
<td>5012</td>
</tr>
<tr class="even">
<td>1</td>
<td>2</td>
<td>3257</td>
</tr>
<tr class="odd">
<td>1</td>
<td>3</td>
<td>2638</td>
</tr>
<tr class="even">
<td>1</td>
<td>4</td>
<td>898</td>
</tr>
<tr class="odd">
<td>1</td>
<td>5</td>
<td>1734</td>
</tr>
<tr class="even">
<td>1</td>
<td>6</td>
<td>2642</td>
</tr>
<tr class="odd">
<td>1</td>
<td>7</td>
<td>1828</td>
</tr>
<tr class="even">
<td>1</td>
<td>8</td>
<td>599</td>
</tr>
<tr class="odd">
<td>1</td>
<td>9</td>
<td>54</td>
</tr>
<tr class="even">
<td>1</td>
<td>10</td>
<td>172</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
<p>A number of functions are defined that will be used throughout the remainder of the article. Note that the implementations differ from the Pandas version: <code>to_cum</code> and <code>to_incr</code> accept an optional <code>as_tri</code> argument, which when set to <code>True</code> transforms the table of losses into a DataFrame formatted as a runoff triangle:</p>
<ul>
<li><p><code>to_cum</code>: Accepts an incremental loss DataFrame and returns a cumulative loss DataFrame, optionally structured as a runoff triangle.</p></li>
<li><p><code>to_incr</code>: Accepts a cumulative loss DataFrame and returns an incremental loss DataFrame, optionally structured as a runoff triangle.</p></li>
<li><p><code>get_a2a_factors</code>: Accepts a cumulative triangle and returns the all-year volume weighted age-to-age factors.</p></li>
<li><p><code>get_latest</code>: Accepts a triangle and returns the value at the latest development period by origin.</p></li>
<li><p><code>square_tri</code>: Accepts a cumulative triangle and set of age-to-age factors and projects future losses, populating the lower-right of the original cumulative triangle.</p></li>
</ul>
<p><br></p>
<p>For <code>get_a2a_factors</code>, <code>get_latest</code> and <code>square_tri</code>, a few simplifying assumptions have been made:</p>
<ol type="1">
<li>The triangles under consideration have an equal number of development and origin periods.</li>
<li>Development periods are sequential starting with 1.</li>
<li>No tail factor is included.</li>
</ol>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> to_tri(df: pl.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pl.DataFrame:</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return DataFrame structured as runoff triangle.</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        df: pd.DataFrame</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Loss data with columns ORIGIN, DEV and VALUE.</span></span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pl.DataFrame</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEV"</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VALUE"</span>)</span>
<span id="cb5-15">    </span>
<span id="cb5-16"></span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> to_table(tri: pl.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pl.DataFrame:</span>
<span id="cb5-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Accepts a DataFrame structured as a triangle and returns the tabular </span></span>
<span id="cb5-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    representation having columns ORIGIN, DEV and VALUE.</span></span>
<span id="cb5-22"></span>
<span id="cb5-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb5-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        df: pd.DataFrame</span></span>
<span id="cb5-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Loss data structures as a runoff triangle.</span></span>
<span id="cb5-26"></span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb5-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pl.DataFrame</span></span>
<span id="cb5-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-30">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.unpivot(tri.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>], variable_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEV"</span>, value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VALUE"</span>)</span>
<span id="cb5-31">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.with_columns(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEV"</span>).cast(pl.Int32).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEV"</span>))</span>
<span id="cb5-32">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sort([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEV"</span>])</span>
<span id="cb5-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df</span>
<span id="cb5-34"></span>
<span id="cb5-35"></span>
<span id="cb5-36"></span>
<span id="cb5-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> to_cum(df: pl.DataFrame, as_tri: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pl.DataFrame:</span>
<span id="cb5-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Accepts a DataFrame of incremental losses and returns a DataFrame</span></span>
<span id="cb5-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    of cumulative losses. Optionally return DataFrame as cumulative </span></span>
<span id="cb5-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    triangle.</span></span>
<span id="cb5-42"></span>
<span id="cb5-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb5-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        df : pl.DataFrame</span></span>
<span id="cb5-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Incremental losses.</span></span>
<span id="cb5-46"></span>
<span id="cb5-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        as_tri: bool</span></span>
<span id="cb5-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Should DataFrame be returned as a triangle.</span></span>
<span id="cb5-49"></span>
<span id="cb5-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb5-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pl.DataFrame</span></span>
<span id="cb5-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-53">    dfc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.with_columns(</span>
<span id="cb5-54">        pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VALUE"</span>).cum_sum().over(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VALUE"</span>)</span>
<span id="cb5-55">    )</span>
<span id="cb5-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> as_tri:</span>
<span id="cb5-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> to_tri(dfc)</span>
<span id="cb5-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb5-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dfc</span>
<span id="cb5-60"></span>
<span id="cb5-61"></span>
<span id="cb5-62"></span>
<span id="cb5-63"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> to_incr(df: pl.DataFrame, as_tri: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pl.DataFrame:</span>
<span id="cb5-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Accepts a DataFrame with cumulative losses and de-cumulates.</span></span>
<span id="cb5-66"></span>
<span id="cb5-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb5-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ctri : pl.DataFrame</span></span>
<span id="cb5-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Cumulative losses.</span></span>
<span id="cb5-70"></span>
<span id="cb5-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        as_tri : bool</span></span>
<span id="cb5-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Should DataFrame be returned as a triangle.</span></span>
<span id="cb5-73"></span>
<span id="cb5-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb5-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pl.DataFrame  </span></span>
<span id="cb5-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-77">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get values at first development period.</span></span>
<span id="cb5-78">    first_devp_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEV"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VALUE"</span>).to_numpy().flatten()</span>
<span id="cb5-79"></span>
<span id="cb5-80">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute difference of cumulative losses by each origin period.</span></span>
<span id="cb5-81">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.with_columns(VALUE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VALUE"</span>).diff()).over(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>))</span>
<span id="cb5-82"></span>
<span id="cb5-83">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> as_tri:</span>
<span id="cb5-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to triangle.</span></span>
<span id="cb5-85">        tri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_tri(df)</span>
<span id="cb5-86"></span>
<span id="cb5-87">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set first development period to first_devp_values. </span></span>
<span id="cb5-88">        tri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.with_columns(pl.Series(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>, first_devp_values))</span>
<span id="cb5-89">        </span>
<span id="cb5-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tri</span>
<span id="cb5-91">    </span>
<span id="cb5-92">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb5-93">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df</span>
<span id="cb5-94"></span>
<span id="cb5-95"></span>
<span id="cb5-96"></span>
<span id="cb5-97"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_a2a_factors(tri: pl.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>]]:</span>
<span id="cb5-98">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculate all-year volume weighted age-to-age factors. </span></span>
<span id="cb5-100"></span>
<span id="cb5-101"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb5-102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tri: pl.DataFrame</span></span>
<span id="cb5-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Cumulative triangle.</span></span>
<span id="cb5-104"></span>
<span id="cb5-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb5-106"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        List of (age-to-age header, age-to-age factor).</span></span>
<span id="cb5-107"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-108">    max_origin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctri0[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb5-109">    all_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb5-110">    dps0, dps1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_devps[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], all_devps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb5-111">    a2a_headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>jj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, jj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(dps0, dps1)]</span>
<span id="cb5-112">    a2a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-113">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dp0, dp1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(dps0), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(dps1)):</span>
<span id="cb5-114">        v1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.select(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(dp0)).to_numpy().flatten()[:(max_origin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(dp1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb5-115">        v2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.select(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(dp1)).to_numpy().flatten()[:(max_origin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(dp1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb5-116">        a2a.append((np.nansum(v2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.nansum(v1)).item())</span>
<span id="cb5-117">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(a2a_headers, a2a[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb5-118">    </span>
<span id="cb5-119">    </span>
<span id="cb5-120"></span>
<span id="cb5-121"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_latest(tri: pl.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>]]:</span>
<span id="cb5-122">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-123"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return the value at the latest development period by origin. </span></span>
<span id="cb5-124"></span>
<span id="cb5-125"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb5-126"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tri : pl.DataFrame</span></span>
<span id="cb5-127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Cumulative or incremental triangle.</span></span>
<span id="cb5-128"></span>
<span id="cb5-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb5-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        list of (origin, latest) tuples.</span></span>
<span id="cb5-131"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-132">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tri.columns:</span>
<span id="cb5-133">        tri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>)</span>
<span id="cb5-134">    nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.width</span>
<span id="cb5-135">    latest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tri[ii, nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_devps)]</span>
<span id="cb5-136">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(tri.columns, latest))</span>
<span id="cb5-137"></span>
<span id="cb5-138"></span>
<span id="cb5-139"></span>
<span id="cb5-140"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square_tri(tri: pl.DataFrame, a2a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>]]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pl.DataFrame:</span>
<span id="cb5-141">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-142"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Project future losses for `tri` using `a2a`.</span></span>
<span id="cb5-143"></span>
<span id="cb5-144"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb5-145"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tri : pl.DataFrame</span></span>
<span id="cb5-146"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Cumulative triangle.</span></span>
<span id="cb5-147"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb5-148"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a2a: list</span></span>
<span id="cb5-149"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Age-to-age factors.</span></span>
<span id="cb5-150"></span>
<span id="cb5-151"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb5-152"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb5-153"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pl.DataFrame</span></span>
<span id="cb5-154"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Original triangle with projected future losses. </span></span>
<span id="cb5-155"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-156">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tri.columns:</span>
<span id="cb5-157">        sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>)</span>
<span id="cb5-158">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb5-159">        sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri</span>
<span id="cb5-160">    _, a2a_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a2a)</span>
<span id="cb5-161">    nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqrd.width</span>
<span id="cb5-162">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_devps):</span>
<span id="cb5-163">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> r_idx, nbr_devps):</span>
<span id="cb5-164">            sqrd[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(c_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  sqrd[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(c_idx)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a2a_values[c_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-165">    sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqrd.with_row_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-166">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sqrd</span>
<span id="cb5-167"></span></code></pre></div>
</div>
<p><br></p>
<p>Create an incremental loss triangle, passing <code>dfraa</code> into <code>to_tri</code>:</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">tri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_tri(dfraa)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original incremental loss triangle:"</span>)</span>
<span id="cb6-5"></span>
<span id="cb6-6">tri0</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original incremental loss triangle:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (10, 11)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
<tr class="odd">
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>5012</td>
<td>3257</td>
<td>2638</td>
<td>898</td>
<td>1734</td>
<td>2642</td>
<td>1828</td>
<td>599</td>
<td>54</td>
<td>172</td>
</tr>
<tr class="even">
<td>2</td>
<td>106</td>
<td>4179</td>
<td>1111</td>
<td>5270</td>
<td>3116</td>
<td>1817</td>
<td>-103</td>
<td>673</td>
<td>535</td>
<td>null</td>
</tr>
<tr class="odd">
<td>3</td>
<td>3410</td>
<td>5582</td>
<td>4881</td>
<td>2268</td>
<td>2594</td>
<td>3479</td>
<td>649</td>
<td>603</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>4</td>
<td>5655</td>
<td>5900</td>
<td>4211</td>
<td>5500</td>
<td>2159</td>
<td>2658</td>
<td>984</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>5</td>
<td>1092</td>
<td>8473</td>
<td>6271</td>
<td>6333</td>
<td>3786</td>
<td>225</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>6</td>
<td>1513</td>
<td>4932</td>
<td>5257</td>
<td>1233</td>
<td>2917</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>7</td>
<td>557</td>
<td>3463</td>
<td>6926</td>
<td>1368</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>8</td>
<td>1351</td>
<td>5596</td>
<td>6165</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>9</td>
<td>3133</td>
<td>2262</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>10</td>
<td>2063</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
<p>Next we create a cumulative loss triangle using <code>to_cum</code> with <code>as_tri = True</code>:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2">ctri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_cum(dfraa, as_tri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original cumulative loss triangle:"</span>)</span>
<span id="cb8-5"></span>
<span id="cb8-6">ctri0</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original cumulative loss triangle:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (10, 11)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
<tr class="odd">
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>5012</td>
<td>8269</td>
<td>10907</td>
<td>11805</td>
<td>13539</td>
<td>16181</td>
<td>18009</td>
<td>18608</td>
<td>18662</td>
<td>18834</td>
</tr>
<tr class="even">
<td>2</td>
<td>106</td>
<td>4285</td>
<td>5396</td>
<td>10666</td>
<td>13782</td>
<td>15599</td>
<td>15496</td>
<td>16169</td>
<td>16704</td>
<td>null</td>
</tr>
<tr class="odd">
<td>3</td>
<td>3410</td>
<td>8992</td>
<td>13873</td>
<td>16141</td>
<td>18735</td>
<td>22214</td>
<td>22863</td>
<td>23466</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>4</td>
<td>5655</td>
<td>11555</td>
<td>15766</td>
<td>21266</td>
<td>23425</td>
<td>26083</td>
<td>27067</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>5</td>
<td>1092</td>
<td>9565</td>
<td>15836</td>
<td>22169</td>
<td>25955</td>
<td>26180</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>6</td>
<td>1513</td>
<td>6445</td>
<td>11702</td>
<td>12935</td>
<td>15852</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>7</td>
<td>557</td>
<td>4020</td>
<td>10946</td>
<td>12314</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>8</td>
<td>1351</td>
<td>6947</td>
<td>13112</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>9</td>
<td>3133</td>
<td>5395</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>10</td>
<td>2063</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
<p>Calculate the all-year volume weighted age-to-age factors</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%20%20f_%7Bk%7D%20&amp;=%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn-k%7D%0AC_%7Bi,k+1%7D%7D%7B%5Csum_%7Bi=1%7D%5E%7Bn-k%7DC_%7Bi,k%7D%7D%0A%5Cend%7Baligned%7D,%0A"></p>
<p>for development period <img src="https://latex.codecogs.com/png.latex?i">.</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2">a2a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_a2a_factors(ctri0)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"All-year volume weighted age-to-age factors:"</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6">a2a</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>All-year volume weighted age-to-age factors:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>[('1-2', 2.9993586513353794),
 ('2-3', 1.6235227537534538),
 ('3-4', 1.2708881150356526),
 ('4-5', 1.1716746330883747),
 ('5-6', 1.113384886206463),
 ('6-7', 1.0419346379110106),
 ('7-8', 1.033263553789384),
 ('8-9', 1.0169364810075625),
 ('9-10', 1.0092165898617511)]</code></pre>
</div>
</div>
<p><br></p>
<p>Although not required here, age-to-ultimate factors can be obtained as follows:</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2">h, v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a2a)</span>
<span id="cb13-3"></span>
<span id="cb13-4">a2u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.cumprod(v[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age-to-ultimate factors:"</span>)</span>
<span id="cb13-7"></span>
<span id="cb13-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(h, a2u.tolist()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Age-to-ultimate factors:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>[('1-2', 8.920233896752476),
 ('2-3', 2.9740470992960426),
 ('3-4', 1.8318481169544962),
 ('4-5', 1.441392121998959),
 ('5-6', 1.2301982831186211),
 ('6-7', 1.104917354599779),
 ('7-8', 1.0604478576650866),
 ('8-9', 1.0263091674684617),
 ('9-10', 1.0092165898617511)]</code></pre>
</div>
</div>
<p><br></p>
<p>Calculate the cumulative fitted triangle by applying backwards recursion, beginning with the observed cumulative losses from the latest diagonal.</p>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctri0.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb16-3">a2a_headers, a2a_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a2a)</span>
<span id="cb16-4"></span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create empty triangle with same shape as ctri0. </span></span>
<span id="cb16-7">ctri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.DataFrame(</span>
<span id="cb16-8">    {<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>: [np.nan] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> nbr_devps <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)}</span>
<span id="cb16-9">).with_row_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-10"></span>
<span id="cb16-11"></span>
<span id="cb16-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(ctri[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb16-13">    </span>
<span id="cb16-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine latest development period.</span></span>
<span id="cb16-15">    latest_devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> r_idx</span>
<span id="cb16-16"></span>
<span id="cb16-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set latest diagonal of tri to same value as in tri0.</span></span>
<span id="cb16-18">    ctri[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(latest_devp)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctri0[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(latest_devp)] </span>
<span id="cb16-19"></span>
<span id="cb16-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use backward recursion to un-develop triangle using a2a_values. </span></span>
<span id="cb16-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> devp <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(latest_devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb16-22"></span>
<span id="cb16-23">        ctri[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(devp)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ctri[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a2a_values[devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb16-24"></span>
<span id="cb16-25"></span>
<span id="cb16-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fitted cumulative triangle:"</span>)</span>
<span id="cb16-27"></span>
<span id="cb16-28">ctri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fitted cumulative triangle:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (10, 11)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
<tr class="odd">
<th>u32</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>2111.3796</td>
<td>6332.7847</td>
<td>10281.4201</td>
<td>13066.5346</td>
<td>15309.7271</td>
<td>17045.6188</td>
<td>17760.4206</td>
<td>18351.1953</td>
<td>18662.0000</td>
<td>18834.0000</td>
</tr>
<tr class="even">
<td>2</td>
<td>1889.8556</td>
<td>5668.3547</td>
<td>9202.7029</td>
<td>11695.6057</td>
<td>13703.4445</td>
<td>15257.2080</td>
<td>15897.0135</td>
<td>16425.8047</td>
<td>16704.0000</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>3</td>
<td>2699.8587</td>
<td>8097.8445</td>
<td>13147.0348</td>
<td>16708.4103</td>
<td>19576.8205</td>
<td>21796.5360</td>
<td>22710.5659</td>
<td>23466.0000</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>4</td>
<td>3217.7567</td>
<td>9651.2063</td>
<td>15668.9531</td>
<td>19913.4862</td>
<td>23332.1267</td>
<td>25977.6372</td>
<td>27067.0000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>5</td>
<td>3242.8226</td>
<td>9726.3881</td>
<td>15791.0124</td>
<td>20068.6100</td>
<td>23513.8813</td>
<td>26180.0000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>6</td>
<td>2186.1650</td>
<td>6557.0929</td>
<td>10645.5896</td>
<td>13529.3532</td>
<td>15852.0000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>7</td>
<td>1989.7800</td>
<td>5968.0637</td>
<td>9689.2872</td>
<td>12314.0000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>8</td>
<td>2692.6640</td>
<td>8076.2650</td>
<td>13112.0000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>9</td>
<td>1798.7179</td>
<td>5395.0000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>10</td>
<td>2063.0000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
<p>Calculate the unscaled Pearson residuals, <img src="https://latex.codecogs.com/png.latex?r_%7Bp%7D">, degrees of freedom <img src="https://latex.codecogs.com/png.latex?DF"> and scale parameter <img src="https://latex.codecogs.com/png.latex?%5Cphi">.</p>
<p>The unscaled Pearson residuals are defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ar_%7Bp%7D%20=%20%5Cfrac%7BI%20-%20m%7D%7B%5Csqrt%7Bm%7D%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?I"> represents actual incremental losses and <img src="https://latex.codecogs.com/png.latex?m"> fitted incremental losses.</p>
<p>Polars doesn’t have an equivalent to Pandas <code>df.diff(axis=1)</code>, so the implementation of <code>to_incr</code> is a little more involved than what we saw last post. First, the actual triangle on incremental losses:</p>
<div id="cell-18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual incremental triangle tri:"</span>)</span>
<span id="cb18-3"></span>
<span id="cb18-4">tri0</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Actual incremental triangle tri:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (10, 11)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
<tr class="odd">
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
<th>i64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>5012</td>
<td>3257</td>
<td>2638</td>
<td>898</td>
<td>1734</td>
<td>2642</td>
<td>1828</td>
<td>599</td>
<td>54</td>
<td>172</td>
</tr>
<tr class="even">
<td>2</td>
<td>106</td>
<td>4179</td>
<td>1111</td>
<td>5270</td>
<td>3116</td>
<td>1817</td>
<td>-103</td>
<td>673</td>
<td>535</td>
<td>null</td>
</tr>
<tr class="odd">
<td>3</td>
<td>3410</td>
<td>5582</td>
<td>4881</td>
<td>2268</td>
<td>2594</td>
<td>3479</td>
<td>649</td>
<td>603</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>4</td>
<td>5655</td>
<td>5900</td>
<td>4211</td>
<td>5500</td>
<td>2159</td>
<td>2658</td>
<td>984</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>5</td>
<td>1092</td>
<td>8473</td>
<td>6271</td>
<td>6333</td>
<td>3786</td>
<td>225</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>6</td>
<td>1513</td>
<td>4932</td>
<td>5257</td>
<td>1233</td>
<td>2917</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>7</td>
<td>557</td>
<td>3463</td>
<td>6926</td>
<td>1368</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>8</td>
<td>1351</td>
<td>5596</td>
<td>6165</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>9</td>
<td>3133</td>
<td>2262</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>10</td>
<td>2063</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
<p>And the fitted incremental triangle:</p>
<div id="cell-20" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fitted incremental triangle.</span></span>
<span id="cb20-3">tri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_incr(to_table(ctri), as_tri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fitted incremental triangle tri:"</span>)</span>
<span id="cb20-6"></span>
<span id="cb20-7">tri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fitted incremental triangle tri:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (10, 11)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
<tr class="odd">
<th>u32</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>2111.3796</td>
<td>4221.4051</td>
<td>3948.6354</td>
<td>2785.1145</td>
<td>2243.1925</td>
<td>1735.8917</td>
<td>714.8019</td>
<td>590.7747</td>
<td>310.8047</td>
<td>172.0000</td>
</tr>
<tr class="even">
<td>2</td>
<td>1889.8556</td>
<td>3778.4991</td>
<td>3534.3481</td>
<td>2492.9028</td>
<td>2007.8388</td>
<td>1553.7635</td>
<td>639.8055</td>
<td>528.7912</td>
<td>278.1953</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>3</td>
<td>2699.8587</td>
<td>5397.9858</td>
<td>5049.1903</td>
<td>3561.3755</td>
<td>2868.4102</td>
<td>2219.7156</td>
<td>914.0298</td>
<td>755.4341</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>4</td>
<td>3217.7567</td>
<td>6433.4496</td>
<td>6017.7467</td>
<td>4244.5332</td>
<td>3418.6404</td>
<td>2645.5105</td>
<td>1089.3628</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>5</td>
<td>3242.8226</td>
<td>6483.5655</td>
<td>6064.6243</td>
<td>4277.5976</td>
<td>3445.2713</td>
<td>2666.1187</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>6</td>
<td>2186.1650</td>
<td>4370.9279</td>
<td>4088.4966</td>
<td>2883.7637</td>
<td>2322.6468</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>7</td>
<td>1989.7800</td>
<td>3978.2838</td>
<td>3721.2235</td>
<td>2624.7128</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>8</td>
<td>2692.6640</td>
<td>5383.6010</td>
<td>5035.7350</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>9</td>
<td>1798.7179</td>
<td>3596.2821</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>10</td>
<td>2063.0000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
<p>The unscaled Pearson residuals are then calculated element-wise:</p>
<div id="cell-22" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"></span>
<span id="cb22-2">numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.select(tri0.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tri.select(tri.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]) </span>
<span id="cb22-3">denom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.select(pl.col(tri0.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().sqrt())</span>
<span id="cb22-4">r_us <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> denom</span>
<span id="cb22-5"></span>
<span id="cb22-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unscaled Pearson residuals:"</span>)</span>
<span id="cb22-7"></span>
<span id="cb22-8">r_us</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unscaled Pearson residuals:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (10, 10)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
<tr class="odd">
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>63.1259</td>
<td>-14.8433</td>
<td>-20.8573</td>
<td>-35.7583</td>
<td>-10.7510</td>
<td>21.7480</td>
<td>41.6370</td>
<td>0.3384</td>
<td>-14.5666</td>
<td>0.0000</td>
</tr>
<tr class="even">
<td>-41.0341</td>
<td>6.5154</td>
<td>-40.7625</td>
<td>55.6209</td>
<td>24.7308</td>
<td>6.6781</td>
<td>-29.3664</td>
<td>6.2712</td>
<td>15.3967</td>
<td>null</td>
</tr>
<tr class="odd">
<td>13.6670</td>
<td>2.5046</td>
<td>-2.3670</td>
<td>-21.6728</td>
<td>-5.1237</td>
<td>26.7285</td>
<td>-8.7663</td>
<td>-5.5461</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>42.9657</td>
<td>-6.6508</td>
<td>-23.2906</td>
<td>19.2704</td>
<td>-21.5437</td>
<td>0.2428</td>
<td>-3.1923</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>-37.7697</td>
<td>24.7072</td>
<td>2.6501</td>
<td>31.4266</td>
<td>5.8049</td>
<td>-47.2769</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>-14.3973</td>
<td>8.4866</td>
<td>18.2746</td>
<td>-30.7401</td>
<td>12.3326</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>-32.1201</td>
<td>-8.1696</td>
<td>52.5357</td>
<td>-24.5299</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>-25.8555</td>
<td>2.8948</td>
<td>15.9135</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>31.4605</td>
<td>-22.2495</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>0.0000</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
<p><img src="https://latex.codecogs.com/png.latex?DF%20=%20n%20-%20p">, where <img src="https://latex.codecogs.com/png.latex?n"> is the number of populated cells in the original triangle and <img src="https://latex.codecogs.com/png.latex?p"> the number of parameters in the chain ladder model (10 for origin period and 9 for development period):</p>
<div id="cell-24" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"></span>
<span id="cb24-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.count().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().to_numpy().flatten()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb24-3">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tri0.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb24-4">DF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p</span>
<span id="cb24-5"></span>
<span id="cb24-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Degrees of freedom: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DF<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Degrees of freedom: 36.</code></pre>
</div>
</div>
<p><br></p>
<p>The scale parameter <img src="https://latex.codecogs.com/png.latex?%5Cphi"> is the sum of the squared unscaled Pearson residuals over the degrees of freedom:</p>
<div id="cell-26" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"></span>
<span id="cb26-2">phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_us.with_columns(pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().to_numpy().flatten().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> DF</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Scale parameter: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>phi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scale parameter: 983.635.</code></pre>
</div>
</div>
<p><br></p>
<p>Calculate the adjusted Pearson residuals, <img src="https://latex.codecogs.com/png.latex?r_%7Bp%7D%5E%7B%7Badj%7D%7D">, defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ar_%7Bp%7D%5E%7B%7Badj%7D%7D%20=%20%5Csqrt%7B%5Cfrac%7Bn%7D%7BDF%7D%7D%20%5Ctimes%20r_%7Bp%7D%0A"></p>
<div id="cell-28" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"></span>
<span id="cb28-2">r_adj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> DF).item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r_us  </span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adjusted Pearson residuals:"</span>)</span>
<span id="cb28-5"></span>
<span id="cb28-6">r_adj</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Adjusted Pearson residuals:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (10, 10)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
<tr class="odd">
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>78.0257</td>
<td>-18.3468</td>
<td>-25.7803</td>
<td>-44.1984</td>
<td>-13.2886</td>
<td>26.8812</td>
<td>51.4647</td>
<td>0.4183</td>
<td>-18.0048</td>
<td>0.0000</td>
</tr>
<tr class="even">
<td>-50.7196</td>
<td>8.0533</td>
<td>-50.3838</td>
<td>68.7493</td>
<td>30.5681</td>
<td>8.2544</td>
<td>-36.2979</td>
<td>7.7514</td>
<td>19.0308</td>
<td>null</td>
</tr>
<tr class="odd">
<td>16.8929</td>
<td>3.0957</td>
<td>-2.9256</td>
<td>-26.7883</td>
<td>-6.3330</td>
<td>33.0374</td>
<td>-10.8354</td>
<td>-6.8551</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>53.1071</td>
<td>-8.2206</td>
<td>-28.7879</td>
<td>23.8188</td>
<td>-26.6287</td>
<td>0.3001</td>
<td>-3.9458</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>-46.6845</td>
<td>30.5389</td>
<td>3.2756</td>
<td>38.8443</td>
<td>7.1751</td>
<td>-58.4358</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>-17.7955</td>
<td>10.4897</td>
<td>22.5880</td>
<td>-37.9958</td>
<td>15.2434</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>-39.7015</td>
<td>-10.0978</td>
<td>64.9359</td>
<td>-30.3197</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>-31.9582</td>
<td>3.5780</td>
<td>19.6696</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="odd">
<td>38.8863</td>
<td>-27.5012</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
<tr class="even">
<td>0.0000</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
<p>(From this point each subsequent step is repeated up to the desired number of bootstrap samples.)</p>
<p>Generate a sample from the adjusted Pearson residuals with replacement:</p>
<div id="cell-30" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set random seed for reproducibility.</span></span>
<span id="cb30-3">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb30-4"></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Represent adjusted residuals as Numpy array with nans and 0s removed.</span></span>
<span id="cb30-6">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_adj[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].to_numpy().flatten()</span>
<span id="cb30-7">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r[np.logical_and(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>np.isnan(r), r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)] </span>
<span id="cb30-8"></span>
<span id="cb30-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample tri0.shape[0] * tri0.shape[1] values at each iteration, but only</span></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keep values in upper left portion of triangle. Use mask to determine </span></span>
<span id="cb30-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># which values to retain.</span></span>
<span id="cb30-12">mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>np.isnan(tri[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb30-13"></span>
<span id="cb30-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample with replacement from adjusted residuals. </span></span>
<span id="cb30-15">s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.choice(r, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask.shape, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb30-16"></span>
<span id="cb30-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Replace 0s with nans.</span></span>
<span id="cb30-18">s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s_r</span>
<span id="cb30-19">s_r[s_r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.nan</span>
<span id="cb30-20">s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.from_numpy(s_r, schema<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)])</span>
<span id="cb30-21"></span>
<span id="cb30-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample with replacement from adjusted Pearson residuals:"</span>)</span>
<span id="cb30-23"></span>
<span id="cb30-24">s_r</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sample with replacement from adjusted Pearson residuals:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (10, 10)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
<tr class="odd">
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>-50.3838</td>
<td>-13.2886</td>
<td>7.1751</td>
<td>30.5389</td>
<td>26.8812</td>
<td>-18.3468</td>
<td>-58.4358</td>
<td>33.0374</td>
<td>10.4897</td>
<td>7.1751</td>
</tr>
<tr class="even">
<td>-10.0978</td>
<td>8.2544</td>
<td>-26.7883</td>
<td>0.4183</td>
<td>78.0257</td>
<td>-58.4358</td>
<td>38.8443</td>
<td>-30.3197</td>
<td>19.6696</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>-27.5012</td>
<td>38.8443</td>
<td>-58.4358</td>
<td>-6.3330</td>
<td>7.1751</td>
<td>-27.5012</td>
<td>0.4183</td>
<td>-50.7196</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>-44.1984</td>
<td>8.0533</td>
<td>-37.9958</td>
<td>-27.5012</td>
<td>38.8443</td>
<td>-25.7803</td>
<td>-30.3197</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>19.0308</td>
<td>-3.9458</td>
<td>-26.7883</td>
<td>-2.9256</td>
<td>38.8863</td>
<td>7.7514</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>30.5681</td>
<td>-27.5012</td>
<td>26.8812</td>
<td>8.2544</td>
<td>38.8443</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>-39.7015</td>
<td>-17.7955</td>
<td>-18.3468</td>
<td>-10.8354</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>22.5880</td>
<td>-18.0048</td>
<td>3.0957</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>-25.7803</td>
<td>-26.7883</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>0.4183</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
<p>Using the sampled adjusted Pearson residuals and fitted incremental triangle <img src="https://latex.codecogs.com/png.latex?m">, construct the triangle of sampled incremental losses <img src="https://latex.codecogs.com/png.latex?%7BI_%7Bi%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AI_%7Bi%7D%20=%20m%20+%20%5Chat%7Br%7D_%7Bp%7D%5E%7Badj%7D%20%5Csqrt%7Bm%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Chat%7Br%7D_%7Bp%7D%5E%7Badj%7D"> represents a sample with replacement from the adjusted Pearson residuals and <img src="https://latex.codecogs.com/png.latex?m"> the fitted incremental triangle:</p>
<div id="cell-32" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"></span>
<span id="cb32-2">tri_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tri.select(pl.col(tri.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]).sqrt())</span>
<span id="cb32-3">tri_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri_ii.with_row_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb32-4"></span>
<span id="cb32-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Triangle of sampled incremental loss tri_ii:"</span>)</span>
<span id="cb32-6"></span>
<span id="cb32-7">tri_ii</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Triangle of sampled incremental loss tri_ii:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (10, 11)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
<tr class="odd">
<th>u32</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>-203.7452</td>
<td>3358.0144</td>
<td>4399.5047</td>
<td>4396.7778</td>
<td>3516.3502</td>
<td>971.4887</td>
<td>-847.5257</td>
<td>1393.7759</td>
<td>495.7340</td>
<td>266.1004</td>
</tr>
<tr class="even">
<td>2</td>
<td>1450.8774</td>
<td>4285.8909</td>
<td>1941.7709</td>
<td>2513.7873</td>
<td>5504.0870</td>
<td>-749.6490</td>
<td>1622.3472</td>
<td>-168.4248</td>
<td>606.2675</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>3</td>
<td>1270.8943</td>
<td>8251.9128</td>
<td>896.8769</td>
<td>3183.4392</td>
<td>3252.6902</td>
<td>924.0302</td>
<td>926.6758</td>
<td>-638.6012</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>4</td>
<td>710.5888</td>
<td>7079.3951</td>
<td>3070.2582</td>
<td>2452.8309</td>
<td>5689.8317</td>
<td>1319.5115</td>
<td>88.6453</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>5</td>
<td>4326.5491</td>
<td>6165.8502</td>
<td>3978.4635</td>
<td>4086.2513</td>
<td>5727.7564</td>
<td>3066.3579</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>6</td>
<td>3615.4212</td>
<td>2552.7444</td>
<td>5807.3180</td>
<td>3327.0288</td>
<td>4194.7016</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>7</td>
<td>218.8165</td>
<td>2855.8569</td>
<td>2602.0332</td>
<td>2069.5944</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>8</td>
<td>3864.7765</td>
<td>4062.5315</td>
<td>5255.4183</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td>9</td>
<td>705.3407</td>
<td>1989.8118</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td>10</td>
<td>2081.9985</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
<p>Create a cumulative triangle, and project future losses using the chain ladder method:</p>
<div id="cell-34" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"></span>
<span id="cb34-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create cumulative triangle from sampled incremental losses.</span></span>
<span id="cb34-3">ctri_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_cum(to_table(tri_ii), as_tri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb34-4"></span>
<span id="cb34-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get age-to-age factors for sampled cumulative triangle.</span></span>
<span id="cb34-6">a2a_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_a2a_factors(ctri_ii)</span>
<span id="cb34-7"></span>
<span id="cb34-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Square ctri_ii, populating the lower-right side using a2a_ii.</span></span>
<span id="cb34-9">ctri_ii_sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_tri(ctri_ii, a2a_ii)</span>
<span id="cb34-10"></span>
<span id="cb34-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Completed sampled triangle ctri_ii_sqrd:"</span>)</span>
<span id="cb34-12"></span>
<span id="cb34-13">ctri_ii_sqrd</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Completed sampled triangle ctri_ii_sqrd:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (10, 11)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
<tr class="odd">
<th>u32</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>-203.7452</td>
<td>3154.2692</td>
<td>7553.7739</td>
<td>11950.5517</td>
<td>15466.9019</td>
<td>16438.3906</td>
<td>15590.8649</td>
<td>16984.6408</td>
<td>17480.3748</td>
<td>17746.4752</td>
</tr>
<tr class="even">
<td>2</td>
<td>1450.8774</td>
<td>5736.7683</td>
<td>7678.5392</td>
<td>10192.3265</td>
<td>15696.4135</td>
<td>14946.7645</td>
<td>16569.1116</td>
<td>16400.6868</td>
<td>17006.9544</td>
<td>17265.8480</td>
</tr>
<tr class="odd">
<td>3</td>
<td>1270.8943</td>
<td>9522.8071</td>
<td>10419.6840</td>
<td>13603.1232</td>
<td>16855.8134</td>
<td>17779.8436</td>
<td>18706.5194</td>
<td>18067.9182</td>
<td>18664.3141</td>
<td>18948.4374</td>
</tr>
<tr class="even">
<td>4</td>
<td>710.5888</td>
<td>7789.9839</td>
<td>10860.2421</td>
<td>13313.0730</td>
<td>19002.9047</td>
<td>20322.4162</td>
<td>20411.0615</td>
<td>20646.5050</td>
<td>21328.0164</td>
<td>21652.6887</td>
</tr>
<tr class="odd">
<td>5</td>
<td>4326.5491</td>
<td>10492.3993</td>
<td>14470.8628</td>
<td>18557.1141</td>
<td>24284.8704</td>
<td>27351.2284</td>
<td>28055.8538</td>
<td>28379.4807</td>
<td>29316.2465</td>
<td>29762.5220</td>
</tr>
<tr class="even">
<td>6</td>
<td>3615.4212</td>
<td>6168.1656</td>
<td>11975.4836</td>
<td>15302.5124</td>
<td>19497.2140</td>
<td>20678.4336</td>
<td>21211.1538</td>
<td>21455.8265</td>
<td>22164.0523</td>
<td>22501.4514</td>
</tr>
<tr class="odd">
<td>7</td>
<td>218.8165</td>
<td>3074.6735</td>
<td>5676.7067</td>
<td>7746.3011</td>
<td>10351.3688</td>
<td>10978.4964</td>
<td>11261.3256</td>
<td>11391.2261</td>
<td>11767.2341</td>
<td>11946.3644</td>
</tr>
<tr class="even">
<td>8</td>
<td>3864.7765</td>
<td>7927.3080</td>
<td>13182.7263</td>
<td>17413.9552</td>
<td>23270.2385</td>
<td>24680.0431</td>
<td>25315.8531</td>
<td>25607.8739</td>
<td>26453.1529</td>
<td>26855.8442</td>
</tr>
<tr class="odd">
<td>9</td>
<td>705.3407</td>
<td>2695.1525</td>
<td>4093.6863</td>
<td>5407.6272</td>
<td>7226.2030</td>
<td>7663.9954</td>
<td>7861.4361</td>
<td>7952.1185</td>
<td>8214.6065</td>
<td>8339.6559</td>
</tr>
<tr class="even">
<td>10</td>
<td>2081.9985</td>
<td>7378.7321</td>
<td>11207.6084</td>
<td>14804.8883</td>
<td>19783.7469</td>
<td>20982.3259</td>
<td>21522.8749</td>
<td>21771.1433</td>
<td>22489.7774</td>
<td>22832.1349</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
<p>So far we’ve accounted for parameter variance, but not process variance. In order to obtain the full prediction error, we need to incorporate process variance into our estimates. This is accomplished by simulating incremental projected losses from a gamma distribution. For each cell in the lower right of the completed triangle, we randomly sample from a gamma distribution with mean equal to the projected incremental loss in that cell, and variance equal to the value in that cell times <img src="https://latex.codecogs.com/png.latex?%5Cphi">. For example, consider the following squared incremental triangle:</p>
<pre><code>      1  2  3  4  5  6  7  8  9  10
1991  84 27  6  6  3  0  2 -1 -0  2
1992 109 33  7  2  4  4  1 -1  1  2
1993  86 28  8  4  3  2 -0  1  0  2
1994 113 32  1  4  3  2 -1 -0  0  2
1995  86 26  6  3  2  2  0 -0  0  2
1996 107 39  7  4  4  2  1 -0  0  2
1997  72 26  2  3  2  2  0 -0  0  1
1998  77 21  3  3  2  2  0 -0  0  1
1999  74 28  4  3  2  2  0 -0  0  1
2000  54 17  3  2  2  1  0 -0  0  1</code></pre>
<p><br></p>
<p>Values to the right of the main diagonal represent projected future losses. For the loss at origin = 2000 and development period = 2, the projected incremental loss is 17. We would therefore sample from a gamma distribution parameterized as follows:</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gamma</span>
<span id="cb37-2"></span>
<span id="cb37-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Computed above. </span></span>
<span id="cb37-4">phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.798</span> </span>
<span id="cb37-5"></span>
<span id="cb37-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Value at intersection of origin=2000 and development period = 2.</span></span>
<span id="cb37-7">mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb37-8"></span>
<span id="cb37-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine shape and scale from mean and variance.</span></span>
<span id="cb37-10">shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> mu)</span>
<span id="cb37-11">scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> mu) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> mu</span>
<span id="cb37-12"></span>
<span id="cb37-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate sample from gamma distribution.</span></span>
<span id="cb37-14">rng.gamma(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>shape, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scale, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb37-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># array([19.29149])</span></span></code></pre></div>
<p><br></p>
<p>We take advantage of the fact that for the gamma distribution, the shape parameter <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%20E%5BX%5D%5E%7B2%7D%20/%20%5Cmathrm%7BVar%7D%5BX%5D"> and scale <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20=%20%5Cmathrm%7BVar%7D%5BX%5D%20/%20E%5BX%5D">. In essence, we are simulating future incremental losses from a series a gamma distributions, each with parameterization based on the chain ladder-derived future incremental losses. To handle cases in which a projected incremental loss might be negative, we take the absolute value of the projected loss when determining <img src="https://latex.codecogs.com/png.latex?%5Calpha_%7Bij%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctheta_%7Bij%7D"> for origin period <img src="https://latex.codecogs.com/png.latex?i">, development period <img src="https://latex.codecogs.com/png.latex?j">, where <img src="https://latex.codecogs.com/png.latex?2%20%5Cleq%20i%20%5Cleq%20n"> and <img src="https://latex.codecogs.com/png.latex?j%20%5Cgeq%20n%20-%20i%20+%202">.</p>
<div id="cell-36" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb38-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Incorporation of process variance. </span></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb38-4"></span>
<span id="cb38-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gamma</span>
<span id="cb38-6"></span>
<span id="cb38-7"></span>
<span id="cb38-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get sampled squared incremental triangle.</span></span>
<span id="cb38-9">tri_ii_sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_incr(to_table(ctri_ii_sqrd), as_tri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>)</span>
<span id="cb38-10"></span>
<span id="cb38-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_devps):</span>
<span id="cb38-12"></span>
<span id="cb38-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> r_idx, nbr_devps):</span>
<span id="cb38-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get mean and variance using incremental loss value.</span></span>
<span id="cb38-15">        m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(tri_ii_sqrd[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(c_idx)])</span>
<span id="cb38-16">        v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phi</span>
<span id="cb38-17"></span>
<span id="cb38-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine shape and scale parameters. </span></span>
<span id="cb38-19">        shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> v</span>
<span id="cb38-20">        scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> m</span>
<span id="cb38-21"></span>
<span id="cb38-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update value at [r_idx, c_idx] with sample from gamma distribution.</span></span>
<span id="cb38-23">        tri_ii_sqrd[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(c_idx)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.gamma(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>shape, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scale, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).item()</span>
<span id="cb38-24"></span>
<span id="cb38-25"></span>
<span id="cb38-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sampled incremental triangle w/ process variance:"</span>)</span>
<span id="cb38-27"></span>
<span id="cb38-28">tri_ii_sqrd</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sampled incremental triangle w/ process variance:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (10, 10)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
<tr class="odd">
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
<th>f64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>-203.7452</td>
<td>3358.0144</td>
<td>4399.5047</td>
<td>4396.7778</td>
<td>3516.3502</td>
<td>971.4887</td>
<td>-847.5257</td>
<td>1393.7759</td>
<td>495.7340</td>
<td>266.1004</td>
</tr>
<tr class="even">
<td>1450.8774</td>
<td>4285.8909</td>
<td>1941.7709</td>
<td>2513.7873</td>
<td>5504.0870</td>
<td>-749.6490</td>
<td>1622.3472</td>
<td>-168.4248</td>
<td>5.6818</td>
<td>258.8936</td>
</tr>
<tr class="odd">
<td>1270.8943</td>
<td>8251.9128</td>
<td>896.8769</td>
<td>3183.4392</td>
<td>3252.6902</td>
<td>924.0302</td>
<td>926.6758</td>
<td>261.2162</td>
<td>45.4568</td>
<td>284.1233</td>
</tr>
<tr class="even">
<td>710.5888</td>
<td>7079.3951</td>
<td>3070.2582</td>
<td>2452.8309</td>
<td>5689.8317</td>
<td>1319.5115</td>
<td>0.0000</td>
<td>1187.7049</td>
<td>138.5052</td>
<td>324.6723</td>
</tr>
<tr class="odd">
<td>4326.5491</td>
<td>6165.8502</td>
<td>3978.4635</td>
<td>4086.2513</td>
<td>5727.7564</td>
<td>2287.3879</td>
<td>375.7417</td>
<td>20.5246</td>
<td>624.2870</td>
<td>446.2756</td>
</tr>
<tr class="even">
<td>3615.4212</td>
<td>2552.7444</td>
<td>5807.3180</td>
<td>3327.0288</td>
<td>3960.9182</td>
<td>218.8131</td>
<td>10.1640</td>
<td>14.2730</td>
<td>306.6162</td>
<td>337.3991</td>
</tr>
<tr class="odd">
<td>218.8165</td>
<td>2855.8569</td>
<td>2602.0332</td>
<td>1195.7353</td>
<td>962.9821</td>
<td>160.2781</td>
<td>418.3009</td>
<td>0.0000</td>
<td>14.9545</td>
<td>179.1303</td>
</tr>
<tr class="even">
<td>3864.7765</td>
<td>4062.5315</td>
<td>8917.8595</td>
<td>1226.2463</td>
<td>3936.2469</td>
<td>2824.7474</td>
<td>827.3206</td>
<td>4.3581</td>
<td>84.7208</td>
<td>402.6913</td>
</tr>
<tr class="odd">
<td>705.3407</td>
<td>1146.8776</td>
<td>1215.0414</td>
<td>619.7826</td>
<td>3797.3911</td>
<td>796.3057</td>
<td>8.3274</td>
<td>2.0791</td>
<td>0.2504</td>
<td>125.0494</td>
</tr>
<tr class="even">
<td>2713.2565</td>
<td>3260.8427</td>
<td>1892.6994</td>
<td>2777.3152</td>
<td>1124.3156</td>
<td>720.6907</td>
<td>10.0764</td>
<td>7.8274</td>
<td>299.7176</td>
<td>342.3576</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
<p>From this point, we proceed exactly as if performing a standard chain ladder analysis: Cumulate incremental losses, then compute the total needed reserve as the ultimate projected value minus the latest cumulative loss amount by origin period. In the next cell we convert <code>latest_values</code> to a numpy array to simplify differencing with ultimates, but this can also be computed element-wise in a list comprehension:</p>
<div id="cell-38" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"></span>
<span id="cb40-2">tri_ii_sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri_ii_sqrd.with_row_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb40-3">ctri_ii_sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_cum(to_table(tri_ii_sqrd), as_tri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb40-4">latest_origin, latest_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>get_latest(ctri_ii_sqrd))</span>
<span id="cb40-5">latest_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(latest_values)</span>
<span id="cb40-6">ultimates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctri_ii_sqrd[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].to_numpy().flatten()</span>
<span id="cb40-7">ibnr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ultimates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> latest_values).tolist()</span>
<span id="cb40-8"></span>
<span id="cb40-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IBNR:"</span>)</span>
<span id="cb40-10"></span>
<span id="cb40-11">ibnr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>IBNR:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>[0.0,
 258.89359253426665,
 329.5800615108092,
 1650.8823904054043,
 1466.8288652047886,
 887.2653700652991,
 1735.6459265833819,
 9306.331478679494,
 6564.227039438123,
 10435.842507396274]</code></pre>
</div>
</div>
<p>The preceding steps are repeated for the desired number of bootstrap samples, resulting in the predictive distribution of total needed reserve by origin period and in aggregate.</p>
<p><br></p>
<section id="bringing-it-all-together" class="level3">
<h3 class="anchored" data-anchor-id="bringing-it-all-together">Bringing it All Together</h3>
<p>The steps outlined above are combined in the next cell to run 1000 bootstrap iterations, generating the predictive distribution of reserves. We also present code to visualize the predictive distribution by origin period and in aggregate.</p>
<div id="cell-40" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"></span>
<span id="cb43-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb43-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb43-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gamma</span>
<span id="cb43-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb43-6"></span>
<span id="cb43-7">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb43-8">pl.Config(tbl_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb43-9">pl.Config(float_precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb43-10">pl.Config(tbl_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb43-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set random seed for reproducibility.</span></span>
<span id="cb43-12">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb43-13"></span>
<span id="cb43-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of bootstrap samples.</span></span>
<span id="cb43-15">nbr_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb43-16"></span>
<span id="cb43-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load tabular incremental losses. Convert to incremental triangle. </span></span>
<span id="cb43-18">dfraa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/976c80786a6e97cce7483e306562f85b/raw/06a5c8b1f823fbe2b6da15f90a672517fa5b4571/RAA.csv"</span>)</span>
<span id="cb43-19">dfraa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfraa.sort(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEV"</span>])</span>
<span id="cb43-20">dfraa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfraa.with_columns(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>).sub(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1980</span>).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>))</span>
<span id="cb43-21">tri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_tri(dfraa)</span>
<span id="cb43-22">nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb43-23">mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>np.isnan(tri0[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb43-24"></span>
<span id="cb43-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create cumulative triangle from original losses.</span></span>
<span id="cb43-26">ctri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_cum(dfraa, as_tri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb43-27"></span>
<span id="cb43-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All-year volume-weighted age-to-age factors.</span></span>
<span id="cb43-29">a2a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_a2a_factors(ctri0)</span>
<span id="cb43-30"></span>
<span id="cb43-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cumulative fitted triangle via backwards recursion.</span></span>
<span id="cb43-32">a2a_headers, a2a_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a2a)</span>
<span id="cb43-33"></span>
<span id="cb43-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create empty triangle with same shape as ctri0. </span></span>
<span id="cb43-35">ctri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.DataFrame(</span>
<span id="cb43-36">    {<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>: [np.nan] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> nbr_devps <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)}</span>
<span id="cb43-37">).with_row_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-38"></span>
<span id="cb43-39"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(ctri[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb43-40"></span>
<span id="cb43-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine latest development period.</span></span>
<span id="cb43-42">    latest_devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> r_idx</span>
<span id="cb43-43"></span>
<span id="cb43-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set latest diagonal of tri to same value as in tri0.</span></span>
<span id="cb43-45">    ctri[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(latest_devp)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctri0[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(latest_devp)] </span>
<span id="cb43-46"></span>
<span id="cb43-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use backward recursion to un-develop triangle using a2a_values. </span></span>
<span id="cb43-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> devp <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(latest_devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb43-49">        ctri[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(devp)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ctri[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a2a_values[devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb43-50"></span>
<span id="cb43-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Incremental fitted triangle.</span></span>
<span id="cb43-52">tri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_incr(to_table(ctri), as_tri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb43-53"></span>
<span id="cb43-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unscaled Pearson residuals.</span></span>
<span id="cb43-55">numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.select(tri0.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tri.select(tri.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]) </span>
<span id="cb43-56">denom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.select(pl.col(tri0.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().sqrt())</span>
<span id="cb43-57">r_us <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> denom</span>
<span id="cb43-58"></span>
<span id="cb43-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Degrees of freedom.</span></span>
<span id="cb43-60">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.count().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().to_numpy().flatten()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb43-61">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tri0.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb43-62">DF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p</span>
<span id="cb43-63"></span>
<span id="cb43-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale parameter.</span></span>
<span id="cb43-65">phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_us.with_columns(pl.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().to_numpy().flatten().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> DF</span>
<span id="cb43-66"></span>
<span id="cb43-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjusted Pearson residuals.</span></span>
<span id="cb43-68">r_adj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> DF).item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r_us  </span>
<span id="cb43-69"></span>
<span id="cb43-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sampling distribution from adjusted Pearson residuals. Remove</span></span>
<span id="cb43-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nans and 0s. </span></span>
<span id="cb43-72">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_adj[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].to_numpy().flatten()</span>
<span id="cb43-73">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r[np.logical_and(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>np.isnan(r), r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)] </span>
<span id="cb43-74"></span>
<span id="cb43-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample tri0.width * tri0.height values at each iteration, but only</span></span>
<span id="cb43-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keep values in upper left portion of triangle. Use mask to determine </span></span>
<span id="cb43-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># which values to retain.</span></span>
<span id="cb43-78">sqrd_ctris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb43-79"></span>
<span id="cb43-80"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_samples):</span>
<span id="cb43-81"></span>
<span id="cb43-82">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample with replacement from adjusted residuals. </span></span>
<span id="cb43-83">    s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.choice(r, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask.shape, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb43-84">    s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s_r</span>
<span id="cb43-85">    s_r[s_r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.nan</span>
<span id="cb43-86">    s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.from_numpy(s_r, schema<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)])</span>
<span id="cb43-87"></span>
<span id="cb43-88">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sampled incremental triangle.</span></span>
<span id="cb43-89">    tri_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tri.select(pl.col(tri.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]).sqrt())</span>
<span id="cb43-90">    tri_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri_ii.with_row_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-91"></span>
<span id="cb43-92">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sampled cumulative triangle.</span></span>
<span id="cb43-93">    ctri_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_cum(to_table(tri_ii), as_tri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb43-94"></span>
<span id="cb43-95">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Age-to-age factors for sampled cumulative triangle.</span></span>
<span id="cb43-96">    a2a_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_a2a_factors(ctri_ii)</span>
<span id="cb43-97"></span>
<span id="cb43-98">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sampled squared cumulative triangle.</span></span>
<span id="cb43-99">    ctri_ii_sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_tri(ctri_ii, a2a_ii)</span>
<span id="cb43-100"></span>
<span id="cb43-101">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sampled squared incremental triangle.</span></span>
<span id="cb43-102">    tri_ii_sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_incr(to_table(ctri_ii_sqrd), as_tri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb43-103"></span>
<span id="cb43-104">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Incorporate process variance.</span></span>
<span id="cb43-105">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_devps):</span>
<span id="cb43-106">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> r_idx, nbr_devps):</span>
<span id="cb43-107">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get mean and variance using incremental loss value.</span></span>
<span id="cb43-108">            m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(tri_ii_sqrd[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(c_idx)])</span>
<span id="cb43-109">            v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phi</span>
<span id="cb43-110"></span>
<span id="cb43-111">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine shape and scale parameters. </span></span>
<span id="cb43-112">            shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> v</span>
<span id="cb43-113">            scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> m</span>
<span id="cb43-114"></span>
<span id="cb43-115">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update value at [r_idx, c_idx] with sample from gamma distribution.</span></span>
<span id="cb43-116">            tri_ii_sqrd[r_idx, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(c_idx)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.gamma(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>shape, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scale, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).item()</span>
<span id="cb43-117"></span>
<span id="cb43-118">    ctri_ii_sqrd2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_cum(to_table(tri_ii_sqrd), as_tri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb43-119"></span>
<span id="cb43-120">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep Sampled squared triangle.</span></span>
<span id="cb43-121">    sqrd_ctris.append(ctri_ii_sqrd2)</span></code></pre></div>
</div>
<p><br></p>
<p>Obtain the predictive distribution of reserves and ultimates from <code>sqrd_ctris</code>. Each triangle in <code>sqrd_ctris</code> is converted to a Pandas DataFrame to keep the visualization code consistent with the prior post:</p>
<div id="cell-42" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"></span>
<span id="cb44-2">ultimates, reserves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb44-3"></span>
<span id="cb44-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, ctri <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(sqrd_ctris):</span>
<span id="cb44-5"></span>
<span id="cb44-6">    latest_origin, latest_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>get_latest(ctri))</span>
<span id="cb44-7">    ctri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctri.to_pandas().set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>)</span>
<span id="cb44-8">    latest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(</span>
<span id="cb44-9">        data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>latest_values, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(ii) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> latest_origin]</span>
<span id="cb44-10">    )</span>
<span id="cb44-11"></span>
<span id="cb44-12">    ult <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb44-13">        ctri.iloc[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb44-14">        .to_frame()</span>
<span id="cb44-15">        .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb44-16">        .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb44-17">    )</span>
<span id="cb44-18"></span>
<span id="cb44-19">    ult[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ii</span>
<span id="cb44-20">    ultimates.append(ult)</span>
<span id="cb44-21"></span>
<span id="cb44-22">    ibnr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb44-23">        (ctri.iloc[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> latest).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb44-24">        .to_frame()</span>
<span id="cb44-25">        .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb44-26">        .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb44-27">    )</span>
<span id="cb44-28"></span>
<span id="cb44-29">    ibnr[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ii</span>
<span id="cb44-30">    reserves.append(ibnr)</span>
<span id="cb44-31"></span>
<span id="cb44-32">dfults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(ultimates).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb44-33">dfibnr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(reserves).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb44-34"></span></code></pre></div>
</div>
<p><br></p>
<p>Using <code>dfults</code> and <code>dfibnr</code>, we create a summary of mean ultimate, mean IBNR, standard error of IBNR as well as 75th and 95th percentiles of the predictive distribution of reserves:</p>
<div id="cell-44" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"></span>
<span id="cb45-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span></span>
<span id="cb45-3"></span>
<span id="cb45-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Latest cumulative loss amount by origin.</span></span>
<span id="cb45-5">latest_origin, latest_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>get_latest(ctri0))</span>
<span id="cb45-6">latest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb45-7">    pd.Series(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>latest_values, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(ii) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> latest_origin])</span>
<span id="cb45-8">    .to_frame()</span>
<span id="cb45-9">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb45-10">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb45-11">)</span>
<span id="cb45-12"></span>
<span id="cb45-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mean ultimate by origin.</span></span>
<span id="cb45-14">ult_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb45-15">    dfults.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult"</span>].mean()</span>
<span id="cb45-16">    .to_frame()</span>
<span id="cb45-17">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb45-18">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult_mean"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb45-19">)</span>
<span id="cb45-20"></span>
<span id="cb45-21">ibnr_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  (</span>
<span id="cb45-22">    dfibnr.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].mean()</span>
<span id="cb45-23">    .to_frame()</span>
<span id="cb45-24">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb45-25">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_mean"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb45-26">)</span>
<span id="cb45-27"></span>
<span id="cb45-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard error of reserve distribution by origin. </span></span>
<span id="cb45-29">ibnr_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb45-30">    dfibnr.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].std(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb45-31">    .to_frame()</span>
<span id="cb45-32">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb45-33">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_se"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb45-34">)</span>
<span id="cb45-35"></span>
<span id="cb45-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 75th percentile of reserve distribution by origin. </span></span>
<span id="cb45-37">ibnr_75 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb45-38">    dfibnr.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>)</span>
<span id="cb45-39">    .to_frame()</span>
<span id="cb45-40">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb45-41">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_75th"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb45-42">)</span>
<span id="cb45-43"></span>
<span id="cb45-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 95th percentile of reserve distribution by origin. </span></span>
<span id="cb45-45">ibnr_95 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb45-46">    dfibnr.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>)</span>
<span id="cb45-47">    .to_frame()</span>
<span id="cb45-48">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb45-49">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_95th"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb45-50">)</span>
<span id="cb45-51"></span>
<span id="cb45-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine into a single DataFrame.</span></span>
<span id="cb45-53">bcl_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(</span>
<span id="cb45-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df1, df2: df1.merge(df2, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>),</span>
<span id="cb45-55">    (latest, ult_mean, ibnr_mean, ibnr_se, ibnr_75, ibnr_95)</span>
<span id="cb45-56">)</span>
<span id="cb45-57"></span>
<span id="cb45-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set ult_mean for earliest origin period to latest.</span></span>
<span id="cb45-59">bcl_summary.at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult_mean"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bcl_summary.at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest"</span>]</span>
<span id="cb45-60"></span>
<span id="cb45-61"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boostrap chain ladder summary by origin:"</span>)</span>
<span id="cb45-62"></span>
<span id="cb45-63"></span>
<span id="cb45-64">bcl_summary.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Boostrap chain ladder summary by origin:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">origin</th>
<th data-quarto-table-cell-role="th">latest</th>
<th data-quarto-table-cell-role="th">ult_mean</th>
<th data-quarto-table-cell-role="th">ibnr_mean</th>
<th data-quarto-table-cell-role="th">ibnr_se</th>
<th data-quarto-table-cell-role="th">ibnr_75th</th>
<th data-quarto-table-cell-role="th">ibnr_95th</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>18834</td>
<td>18834.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>16704</td>
<td>17002.0</td>
<td>165.0</td>
<td>430.0</td>
<td>385.0</td>
<td>940.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>23466</td>
<td>24436.0</td>
<td>753.0</td>
<td>1056.0</td>
<td>1228.0</td>
<td>2719.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>27067</td>
<td>29034.0</td>
<td>1916.0</td>
<td>1714.0</td>
<td>2824.0</td>
<td>5079.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>5</td>
<td>26180</td>
<td>29014.0</td>
<td>2915.0</td>
<td>2085.0</td>
<td>4023.0</td>
<td>6865.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>6</td>
<td>15852</td>
<td>19656.0</td>
<td>3896.0</td>
<td>2452.0</td>
<td>5218.0</td>
<td>8692.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>7</td>
<td>12314</td>
<td>18031.0</td>
<td>5681.0</td>
<td>3066.0</td>
<td>7513.0</td>
<td>11501.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>8</td>
<td>13112</td>
<td>24818.0</td>
<td>11551.0</td>
<td>5142.0</td>
<td>14783.0</td>
<td>21143.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>9</td>
<td>5395</td>
<td>16291.0</td>
<td>10951.0</td>
<td>6283.0</td>
<td>14557.0</td>
<td>22634.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>10</td>
<td>2063</td>
<td>20003.0</td>
<td>17958.0</td>
<td>13786.0</td>
<td>25409.0</td>
<td>43653.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>While results by origin can be useful, typically actuaries are more interested in the aggregate view. To get aggregate results, we first group by simulation number, then proceed as in the prior cell:</p>
<div id="cell-46" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"></span>
<span id="cb47-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aggregate bootstrap chain ladder results.</span></span>
<span id="cb47-3"></span>
<span id="cb47-4">agg_ults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfults.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb47-5">agg_ibnr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfibnr.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb47-6"></span>
<span id="cb47-7">dsumm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb47-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest"</span>: [latest[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()],</span>
<span id="cb47-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult_mean"</span>: [agg_ults.mean().item()],</span>
<span id="cb47-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_mean"</span>: [agg_ibnr.mean().item()],</span>
<span id="cb47-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_se"</span>: [agg_ibnr.std(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).item()],</span>
<span id="cb47-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_75th"</span>: [agg_ibnr.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>).item()],</span>
<span id="cb47-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_95th"</span>: [agg_ibnr.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>).item()]</span>
<span id="cb47-14">}</span>
<span id="cb47-15"></span>
<span id="cb47-16">bcl_summary_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame().from_dict(dsumm, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>)</span>
<span id="cb47-17">bcl_summary_total.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total"</span>]</span>
<span id="cb47-18"></span>
<span id="cb47-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boostrap chain ladder summary in total:"</span>)</span>
<span id="cb47-20"></span>
<span id="cb47-21">bcl_summary_total.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Boostrap chain ladder summary in total:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">latest</th>
<th data-quarto-table-cell-role="th">ult_mean</th>
<th data-quarto-table-cell-role="th">ibnr_mean</th>
<th data-quarto-table-cell-role="th">ibnr_se</th>
<th data-quarto-table-cell-role="th">ibnr_75th</th>
<th data-quarto-table-cell-role="th">ibnr_95th</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">total</td>
<td>160987</td>
<td>217184.0</td>
<td>55787.0</td>
<td>18960.0</td>
<td>66239.0</td>
<td>88935.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
</section>
<section id="visualizing-bootstrap-chain-ladder-results" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-bootstrap-chain-ladder-results">Visualizing Bootstrap Chain Ladder Results</h2>
<p>We can visualize actuals and predictions together by origin out to ultimate with 90% prediction intervals for each forecast period. Starting with <code>sqrd_tris</code>, we transform the data to make it easier for plotting:</p>
<div id="cell-48" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"></span>
<span id="cb49-2"></span>
<span id="cb49-3">dflist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb49-4"></span>
<span id="cb49-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tri <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sqrd_ctris:</span>
<span id="cb49-6"></span>
<span id="cb49-7">    dftri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb49-8">        tri.to_pandas().set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>)</span>
<span id="cb49-9">        .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb49-10">        .rename_axis(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb49-11">        .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb49-12">        .melt(id_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, var_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcl_value"</span>)</span>
<span id="cb49-13">    )</span>
<span id="cb49-14"></span>
<span id="cb49-15">    dflist.append(dftri)</span>
<span id="cb49-16"></span>
<span id="cb49-17"></span>
<span id="cb49-18"></span>
<span id="cb49-19">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(dflist)</span>
<span id="cb49-20">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb49-21">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sort_values([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>]).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb49-22"></span>
<span id="cb49-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute mean, 5th and 95th percentile of prediction interval for each forecast period.</span></span>
<span id="cb49-24">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb49-25">    df</span>
<span id="cb49-26">    .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>], as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcl_value"</span>]</span>
<span id="cb49-27">    .agg({</span>
<span id="cb49-28">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcl_mean"</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: v.mean(), </span>
<span id="cb49-29">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcl_95th"</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: v.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>),</span>
<span id="cb49-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcl_5th"</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: v.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>)</span>
<span id="cb49-31">    })</span>
<span id="cb49-32">)</span>
<span id="cb49-33"></span>
<span id="cb49-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Attach actual values from original cumulative triangle.</span></span>
<span id="cb49-35">dfctri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb49-36">    ctri0.to_pandas().set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>)</span>
<span id="cb49-37">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb49-38">    .rename_axis(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb49-39">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb49-40">    .melt(id_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, var_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actual_value"</span>)</span>
<span id="cb49-41">)</span>
<span id="cb49-42">dfctri0[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfctri0[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb49-43"></span>
<span id="cb49-44">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.merge(dfctri0, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>], how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>)</span>
<span id="cb49-45"></span>
<span id="cb49-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If actual_value is nan, then dev is a prediction for that origin. Otherwise</span></span>
<span id="cb49-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it is an actual value. </span></span>
<span id="cb49-48">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actual_devp_ind"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actual_value"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> np.isnan(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb49-49">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> r: r.bcl_mean <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> r.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> r.actual_value, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb49-50"></span>
<span id="cb49-51">df.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">origin</th>
<th data-quarto-table-cell-role="th">dev</th>
<th data-quarto-table-cell-role="th">bcl_mean</th>
<th data-quarto-table-cell-role="th">bcl_95th</th>
<th data-quarto-table-cell-role="th">bcl_5th</th>
<th data-quarto-table-cell-role="th">actual_value</th>
<th data-quarto-table-cell-role="th">actual_devp_ind</th>
<th data-quarto-table-cell-role="th">value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">90</td>
<td>10</td>
<td>1</td>
<td>2044.92690</td>
<td>5819.41104</td>
<td>2.74973</td>
<td>2063.0</td>
<td>1</td>
<td>2063.00000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">91</td>
<td>10</td>
<td>2</td>
<td>6523.89949</td>
<td>16103.08545</td>
<td>101.75998</td>
<td>NaN</td>
<td>0</td>
<td>6523.89949</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">92</td>
<td>10</td>
<td>3</td>
<td>10661.43665</td>
<td>25982.44515</td>
<td>319.20599</td>
<td>NaN</td>
<td>0</td>
<td>10661.43665</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">93</td>
<td>10</td>
<td>4</td>
<td>13682.08149</td>
<td>32977.99907</td>
<td>611.55764</td>
<td>NaN</td>
<td>0</td>
<td>13682.08149</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">94</td>
<td>10</td>
<td>5</td>
<td>16092.90839</td>
<td>38453.69231</td>
<td>799.41542</td>
<td>NaN</td>
<td>0</td>
<td>16092.90839</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">95</td>
<td>10</td>
<td>6</td>
<td>17973.94826</td>
<td>42833.83253</td>
<td>934.59346</td>
<td>NaN</td>
<td>0</td>
<td>17973.94826</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">96</td>
<td>10</td>
<td>7</td>
<td>18718.07392</td>
<td>45366.39099</td>
<td>1007.06181</td>
<td>NaN</td>
<td>0</td>
<td>18718.07392</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">97</td>
<td>10</td>
<td>8</td>
<td>19360.64161</td>
<td>46870.52200</td>
<td>1052.26676</td>
<td>NaN</td>
<td>0</td>
<td>19360.64161</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">98</td>
<td>10</td>
<td>9</td>
<td>19813.97172</td>
<td>47265.73702</td>
<td>1067.22772</td>
<td>NaN</td>
<td>0</td>
<td>19813.97172</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">99</td>
<td>10</td>
<td>10</td>
<td>20003.07058</td>
<td>47960.10396</td>
<td>1225.34543</td>
<td>NaN</td>
<td>0</td>
<td>20003.07058</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Actuals with forecasts by origin year with 90% prediction intervals:</p>
<div id="cell-50" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"></span>
<span id="cb50-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb50-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.ticker <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MaxNLocator</span>
<span id="cb50-4"></span>
<span id="cb50-5"></span>
<span id="cb50-6">fill_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFC04C"</span></span>
<span id="cb50-7"></span>
<span id="cb50-8"></span>
<span id="cb50-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume 9 origin periods (no distribution of fully-developed oldest origin period)</span></span>
<span id="cb50-10">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb50-11">origin_periods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb50-12"></span>
<span id="cb50-13">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb50-14"></span>
<span id="cb50-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (ii, jj), origin <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(indices, origin_periods):</span>
<span id="cb50-16"></span>
<span id="cb50-17">    dforigin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df.origin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>origin]</span>
<span id="cb50-18"></span>
<span id="cb50-19">    ax[ii, jj].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>origin<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb50-20"></span>
<span id="cb50-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get last actual development period for origin.</span></span>
<span id="cb50-22">    last_actual_devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].dev.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb50-23"></span>
<span id="cb50-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Actual values.</span></span>
<span id="cb50-25">    act_dev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].dev.tolist()</span>
<span id="cb50-26">    act_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].value.tolist()</span>
<span id="cb50-27"></span>
<span id="cb50-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted values.</span></span>
<span id="cb50-29">    pred_dev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [last_actual_devp] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].dev.tolist()</span>
<span id="cb50-30">    pred_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [act_val[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].value.tolist()</span>
<span id="cb50-31"></span>
<span id="cb50-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5th and 95th percentiles.</span></span>
<span id="cb50-33">    pred_5th <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [act_val[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].bcl_5th.tolist()</span>
<span id="cb50-34">    pred_95th <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [act_val[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].bcl_95th.tolist()</span>
<span id="cb50-35"></span>
<span id="cb50-36">    ax[ii, jj].plot(</span>
<span id="cb50-37">        pred_dev, pred_val, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#1d2951"</span>, markerfacecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, </span>
<span id="cb50-38">        markeredgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#1d2951"</span>, markeredgewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"predicted"</span></span>
<span id="cb50-39">    )</span>
<span id="cb50-40"></span>
<span id="cb50-41">    ax[ii, jj].plot(</span>
<span id="cb50-42">        act_dev, act_val, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#1d2951"</span>, markerfacecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#1d2951"</span>, </span>
<span id="cb50-43">         markeredgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#1d2951"</span>, markeredgewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actual"</span></span>
<span id="cb50-44">    )</span>
<span id="cb50-45"></span>
<span id="cb50-46">    ax[ii, jj].plot(</span>
<span id="cb50-47">        pred_dev, pred_95th, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># color="#FFFFB2",</span></span>
<span id="cb50-48">        linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"95th percentile"</span></span>
<span id="cb50-49">    )</span>
<span id="cb50-50"></span>
<span id="cb50-51">    ax[ii, jj].plot(</span>
<span id="cb50-52">        pred_dev, pred_5th, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-."</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># color="#FFFFB2",</span></span>
<span id="cb50-53">        linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5th percentile"</span></span>
<span id="cb50-54">    )</span>
<span id="cb50-55"></span>
<span id="cb50-56">    ax[ii, jj].fill_between(pred_dev, pred_5th, pred_95th, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fill_color, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>)</span>
<span id="cb50-57">    ax[ii, jj].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb50-58">    ax[ii, jj].get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x, p: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)))</span>
<span id="cb50-59">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb50-60">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb50-61">    ax[ii, jj].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb50-62">    ax[ii, jj].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb50-63">    ax[ii, jj].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb50-64">    ax[ii, jj].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb50-65">    ax[ii, jj].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper left"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x-small"</span>)</span>
<span id="cb50-66"></span>
<span id="cb50-67">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bootstrap chain ladder forecasts with 90% prediction interval"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb50-68"></span>
<span id="cb50-69">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/boostrap-chainladder-polars/bootstrap-chainladder-polars_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>As expected, the prediction intervals grow wider for origin periods with fewer development periods of actual data to account for the greater uncertainty in ultimate projections.</p>
<p>Second, an exhibit with a separate histogram per facet can be used to visualize the distribution of IBNR generated by the bootstrap chain ladder:</p>
<div id="cell-52" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"></span>
<span id="cb51-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb51-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb51-4"></span>
<span id="cb51-5"></span>
<span id="cb51-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Color for each histogram.</span></span>
<span id="cb51-7">hist_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5473ff"</span></span>
<span id="cb51-8"></span>
<span id="cb51-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume 9 origin periods (no distribution of fully-developed oldest origin period)</span></span>
<span id="cb51-10">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb51-11">origin_periods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb51-12"></span>
<span id="cb51-13">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb51-14"></span>
<span id="cb51-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (ii, jj), origin <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(indices, origin_periods):</span>
<span id="cb51-16">    ax[ii, jj].set_title(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(origin), fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>)</span>
<span id="cb51-17">    ax[ii, jj].hist(</span>
<span id="cb51-18">        dfibnr[dfibnr.origin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>origin].ibnr, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb51-19">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hist_color, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb51-20">        )</span>
<span id="cb51-21">    </span>
<span id="cb51-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax[ii, jj].yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter("{x:,.0f}"))</span></span>
<span id="cb51-23">    ax[ii, jj].set_yticklabels([])</span>
<span id="cb51-24">    ax[ii, jj].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb51-25">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb51-26">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb51-27">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb51-28">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb51-29">    ax[ii, jj].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb51-30">    ax[ii, jj].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb51-31">    ax[ii, jj].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb51-32">    ax[ii, jj].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb51-33"></span>
<span id="cb51-34">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boostrap chain ladder: IBNR by origin"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb51-35">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/boostrap-chainladder-polars/bootstrap-chainladder-polars_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Finally, we can create a similar exhibit for the aggregate distribution of IBNR, with vertical lines added at the 50th, 75th, 95th and 99th percentile of total needed reserve:</p>
<div id="cell-54" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"></span>
<span id="cb52-2">hist_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5473ff"</span></span>
<span id="cb52-3"></span>
<span id="cb52-4">dfibnr_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfibnr.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb52-5">ibnr_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfibnr_total[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].values</span>
<span id="cb52-6">ibnr_50 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(ibnr_total, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>).item()</span>
<span id="cb52-7">ibnr_75 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(ibnr_total, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>).item()</span>
<span id="cb52-8">ibnr_95 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(ibnr_total, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>).item()</span>
<span id="cb52-9">ibnr_99 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(ibnr_total, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.99</span>).item()</span>
<span id="cb52-10"></span>
<span id="cb52-11">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.25</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb52-12"></span>
<span id="cb52-13">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bootstrap chain ladder: total IBNR"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb52-14"></span>
<span id="cb52-15">ax.hist(</span>
<span id="cb52-16">    ibnr_total, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hist_color, </span>
<span id="cb52-17">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb52-18">    )</span>
<span id="cb52-19"></span>
<span id="cb52-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 50th percentile.</span></span>
<span id="cb52-21">ax.axvline(ibnr_50, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb52-22">ax.annotate(</span>
<span id="cb52-23">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$p_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">50</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.0f}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(ibnr_50), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ibnr_50, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2e-5</span>),</span>
<span id="cb52-24">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb52-25">    textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset pixels"</span></span>
<span id="cb52-26">)</span>
<span id="cb52-27"></span>
<span id="cb52-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 75th percentile.</span></span>
<span id="cb52-29">ax.axvline(ibnr_75, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb52-30">ax.annotate(</span>
<span id="cb52-31">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$p_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">75</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.0f}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(ibnr_75), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ibnr_75, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2e-5</span>),</span>
<span id="cb52-32">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb52-33">    textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset pixels"</span></span>
<span id="cb52-34">)</span>
<span id="cb52-35"></span>
<span id="cb52-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 95th percentile.</span></span>
<span id="cb52-37">ax.axvline(ibnr_95, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb52-38">ax.annotate(</span>
<span id="cb52-39">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$p_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">95</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.0f}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(ibnr_95), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ibnr_95, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2e-5</span>),</span>
<span id="cb52-40">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb52-41">    textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset pixels"</span></span>
<span id="cb52-42">)</span>
<span id="cb52-43"></span>
<span id="cb52-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 99th percentile.</span></span>
<span id="cb52-45">ax.axvline(ibnr_99, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb52-46">ax.annotate(</span>
<span id="cb52-47">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$p_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">99</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.0f}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(ibnr_99), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ibnr_99, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2e-5</span>),</span>
<span id="cb52-48">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb52-49">    textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset pixels"</span></span>
<span id="cb52-50">)</span>
<span id="cb52-51"></span>
<span id="cb52-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax[ii, jj].yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter("{x:,.0f}"))</span></span>
<span id="cb52-53">ax.set_yticklabels([])</span>
<span id="cb52-54">ax.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb52-55">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb52-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax.tick_params(axis="x", which="minor", direction='in', labelsize=8)</span></span>
<span id="cb52-57">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb52-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax.tick_params(axis="y", which="minor", direction='in', labelsize=8)</span></span>
<span id="cb52-59">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb52-60">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb52-61">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb52-62">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb52-63">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/boostrap-chainladder-polars/bootstrap-chainladder-polars_files/figure-html/cell-28-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <category>Actuarial</category>
  <guid>https://www.jtrive.com/posts/boostrap-chainladder-polars/bootstrap-chainladder-polars.html</guid>
  <pubDate>Sat, 25 Jan 2025 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Standing Up Ad-hoc Compute Clusters with Dask</title>
  <link>https://www.jtrive.com/posts/adhoc-compute-cluster-with-dask/adhoc-compute-cluster-with-dask.html</link>
  <description><![CDATA[ 





<p>Dask is an open-source parallel computing library for Python that enables the processing of large datasets and complex computations across multiple cores and distributed systems. It provides a flexible and dynamic task scheduling system that allows users to build complex workflows and handle large-scale data processing.</p>
<p>Dask is a compelling alternative to PySpark for distributed computing, particularly for those who work primarily within the Python ecosystem. Dask doesn’t require a Java runtime, and can be imported like any other third-party package. It is much lighter weight because it doesn’t require the heavy infrastructure needed to support Spark computing environments. PySpark typically needs a full Spark cluster setup with distributed resource management and coordination (e.g., YARN or Kubernetes), which involves significant overhead. In contrast, Dask operates within a Python environment and can scale from a single machine to a cluster as needed, without requiring the setup of a full distributed system.</p>
<p>In particular, I was interested in setting up a Dask cluster to leverage my own computing resources rather than rely on cloud resources or deployment software such as <a href="https://docs.coiled.io/user_guide/index.html">colied</a>, which I would almost certainly opt for if creating a cloud-based cluster in a real-world setting.</p>
<p>There were a number of laptops at my disposal in various states of underutilization and disrepair, and figured setting up a compute cluster would be a great way to gain familiarity with Dask, as well as give new life to these otherwise unused machines. In particular, my cluster consists of:</p>
<ol type="1">
<li>Lenovo Slim 7 Pro X (Ubuntu 22.04, 20GB RAM, 1TB SSD, 16 CPU): <strong>client/scheduler</strong></li>
<li>Sony VAIO (Ubuntu 22.04, 16GB RAM, 512GB SSD, 4 CPU): <strong>worker</strong></li>
<li>Raspberry Pi 5 (Debian 12.7, 4GB RAM, 128GB SSD, 4 CPU): <strong>worker</strong></li>
</ol>
<p>It is straightforward to extend the cluster to additional workers. The only requirements are 1) the machine be accessible from the client via ssh, and 2) the availability of a Python environment consistent with the other worker nodes in terms of install location and package versions.</p>
<p>I attempted including an additional worker using a Windows client running the same dask conda environment via WSL, but couldn’t get it to work. I’m sure it’s possible, I just didn’t spend the time to configue it properly. I’ll pick this up again down the road and will publish an update.</p>
<p>In order to ensure a consistent environment across workers, I installed Miniforge to the same location on client and worker nodes, and used an environment file save to a GitHub Gist which was referenced at the time of environment creation:</p>
<pre><code>(base) $ conda env create --file=https://gist.githubusercontent.com/jtrive84/f0d23fcf22bb590caefca1e10243aba2/raw/53328d955a4f543581448c6b6033da94058eb245/dask.yaml</code></pre>
<p>The dask environment contains:</p>
<pre><code>name: dask
channels:
- conda-forge
- defaults
dependencies:
- python=3.12
- dask=2024.12.0
- dask-labextension=7.0.0
- numpy=2.2.1
- asyncssh=2.19.0
- pyarrow=18.1.0
- matplotlib=3.9.4
- ipykernel
- watermark
- jupyterlab</code></pre>
<p>The dask-labextension is a JupyterLab extension that provides a user-friendly interface for monitoring Dask clusters from JupyterLab. It provides real-time visualizations of cluster performance and displays worker status, memory usage, and task progress, and offers a high degree of configurability. I highly recommend utilizing the Dask lab extension if managing Dask clusters from JupyterLab.</p>
<p><img src="https://www.jtrive.com/posts/adhoc-compute-cluster-with-dask/dasklab.png" class="img-fluid"> <em>DaskLab extension</em></p>
<p><br></p>
<p>All nodes run within the dask conda environment located at:</p>
<pre><code>~/miniforge3/envs/dask/bin/python</code></pre>
<p>To demonstrate my cluster, I’ll use the <a href="https://www.kaggle.com/datasets/dilwong/">Flight Prices</a> dataset available on Kaggle. This is a 31GB dataset containing one-way flight itineraries found on Expedia between 2022-04-16 and 2022-10-05 for airport codes ATL, DFW, DEN, ORD, LAX, CLT, MIA, JFK, EWR, SFO, DTW, BOS, PHL, LGA, IAD and OAK. The file is larger than the client’s available memory, so it couldn’t be analyzed using Pandas which requires the entire dataset to be loaded into RAM. Dask can spill intermediate results to disk for datasets too large to fit into memory, giving us the ability to work with much larger datasets than would otherwise be possible.</p>
<p>To get an idea of what the data looks like, we can read the first 100 records using Pandas:</p>
<div id="34bf4b21-9da5-4190-bfa6-9953d4b051c6" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb4-4"></span>
<span id="cb4-5">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb4-6">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb4-7">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-8">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Obtained from from https://www.kaggle.com/datasets/dilwong/flightprices</span></span>
<span id="cb4-11">data_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/shared/data/airlines/itineraries.csv"</span></span>
<span id="cb4-12"></span>
<span id="cb4-13">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(data_path, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb4-14"></span>
<span id="cb4-15">df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">legId</th>
<th data-quarto-table-cell-role="th">searchDate</th>
<th data-quarto-table-cell-role="th">flightDate</th>
<th data-quarto-table-cell-role="th">startingAirport</th>
<th data-quarto-table-cell-role="th">destinationAirport</th>
<th data-quarto-table-cell-role="th">fareBasisCode</th>
<th data-quarto-table-cell-role="th">travelDuration</th>
<th data-quarto-table-cell-role="th">elapsedDays</th>
<th data-quarto-table-cell-role="th">isBasicEconomy</th>
<th data-quarto-table-cell-role="th">isRefundable</th>
<th data-quarto-table-cell-role="th">isNonStop</th>
<th data-quarto-table-cell-role="th">baseFare</th>
<th data-quarto-table-cell-role="th">totalFare</th>
<th data-quarto-table-cell-role="th">seatsRemaining</th>
<th data-quarto-table-cell-role="th">totalTravelDistance</th>
<th data-quarto-table-cell-role="th">segmentsDepartureTimeEpochSeconds</th>
<th data-quarto-table-cell-role="th">segmentsDepartureTimeRaw</th>
<th data-quarto-table-cell-role="th">segmentsArrivalTimeEpochSeconds</th>
<th data-quarto-table-cell-role="th">segmentsArrivalTimeRaw</th>
<th data-quarto-table-cell-role="th">segmentsArrivalAirportCode</th>
<th data-quarto-table-cell-role="th">segmentsDepartureAirportCode</th>
<th data-quarto-table-cell-role="th">segmentsAirlineName</th>
<th data-quarto-table-cell-role="th">segmentsAirlineCode</th>
<th data-quarto-table-cell-role="th">segmentsEquipmentDescription</th>
<th data-quarto-table-cell-role="th">segmentsDurationInSeconds</th>
<th data-quarto-table-cell-role="th">segmentsDistance</th>
<th data-quarto-table-cell-role="th">segmentsCabinCode</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>9ca0e81111c683bec1012473feefd28f</td>
<td>2022-04-16</td>
<td>2022-04-17</td>
<td>ATL</td>
<td>BOS</td>
<td>LA0NX0MC</td>
<td>PT2H29M</td>
<td>0</td>
<td>False</td>
<td>False</td>
<td>True</td>
<td>217.67</td>
<td>248.6</td>
<td>9</td>
<td>947.0</td>
<td>1650214620</td>
<td>2022-04-17T12:57:00.000-04:00</td>
<td>1650223560</td>
<td>2022-04-17T15:26:00.000-04:00</td>
<td>BOS</td>
<td>ATL</td>
<td>Delta</td>
<td>DL</td>
<td>Airbus A321</td>
<td>8940</td>
<td>947</td>
<td>coach</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>98685953630e772a098941b71906592b</td>
<td>2022-04-16</td>
<td>2022-04-17</td>
<td>ATL</td>
<td>BOS</td>
<td>LA0NX0MC</td>
<td>PT2H30M</td>
<td>0</td>
<td>False</td>
<td>False</td>
<td>True</td>
<td>217.67</td>
<td>248.6</td>
<td>4</td>
<td>947.0</td>
<td>1650191400</td>
<td>2022-04-17T06:30:00.000-04:00</td>
<td>1650200400</td>
<td>2022-04-17T09:00:00.000-04:00</td>
<td>BOS</td>
<td>ATL</td>
<td>Delta</td>
<td>DL</td>
<td>Airbus A321</td>
<td>9000</td>
<td>947</td>
<td>coach</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>98d90cbc32bfbb05c2fc32897c7c1087</td>
<td>2022-04-16</td>
<td>2022-04-17</td>
<td>ATL</td>
<td>BOS</td>
<td>LA0NX0MC</td>
<td>PT2H30M</td>
<td>0</td>
<td>False</td>
<td>False</td>
<td>True</td>
<td>217.67</td>
<td>248.6</td>
<td>9</td>
<td>947.0</td>
<td>1650209700</td>
<td>2022-04-17T11:35:00.000-04:00</td>
<td>1650218700</td>
<td>2022-04-17T14:05:00.000-04:00</td>
<td>BOS</td>
<td>ATL</td>
<td>Delta</td>
<td>DL</td>
<td>Boeing 757-200</td>
<td>9000</td>
<td>947</td>
<td>coach</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>969a269d38eae583f455486fa90877b4</td>
<td>2022-04-16</td>
<td>2022-04-17</td>
<td>ATL</td>
<td>BOS</td>
<td>LA0NX0MC</td>
<td>PT2H32M</td>
<td>0</td>
<td>False</td>
<td>False</td>
<td>True</td>
<td>217.67</td>
<td>248.6</td>
<td>8</td>
<td>947.0</td>
<td>1650218340</td>
<td>2022-04-17T13:59:00.000-04:00</td>
<td>1650227460</td>
<td>2022-04-17T16:31:00.000-04:00</td>
<td>BOS</td>
<td>ATL</td>
<td>Delta</td>
<td>DL</td>
<td>Airbus A321</td>
<td>9120</td>
<td>947</td>
<td>coach</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>980370cf27c89b40d2833a1d5afc9751</td>
<td>2022-04-16</td>
<td>2022-04-17</td>
<td>ATL</td>
<td>BOS</td>
<td>LA0NX0MC</td>
<td>PT2H34M</td>
<td>0</td>
<td>False</td>
<td>False</td>
<td>True</td>
<td>217.67</td>
<td>248.6</td>
<td>9</td>
<td>947.0</td>
<td>1650203940</td>
<td>2022-04-17T09:59:00.000-04:00</td>
<td>1650213180</td>
<td>2022-04-17T12:33:00.000-04:00</td>
<td>BOS</td>
<td>ATL</td>
<td>Delta</td>
<td>DL</td>
<td>Airbus A321</td>
<td>9240</td>
<td>947</td>
<td>coach</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>79eda9f841e226a1e2121d74211e595c</td>
<td>2022-04-16</td>
<td>2022-04-17</td>
<td>ATL</td>
<td>BOS</td>
<td>VH0AUEL1</td>
<td>PT2H38M</td>
<td>0</td>
<td>False</td>
<td>False</td>
<td>True</td>
<td>217.67</td>
<td>248.6</td>
<td>7</td>
<td>947.0</td>
<td>1650206700</td>
<td>2022-04-17T10:45:00.000-04:00</td>
<td>1650216180</td>
<td>2022-04-17T13:23:00.000-04:00</td>
<td>BOS</td>
<td>ATL</td>
<td>JetBlue Airways</td>
<td>B6</td>
<td>NaN</td>
<td>9480</td>
<td>947</td>
<td>coach</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>9335fae376c38bb61263281779f469ec</td>
<td>2022-04-16</td>
<td>2022-04-17</td>
<td>ATL</td>
<td>BOS</td>
<td>V0AJZNN1</td>
<td>PT4H12M</td>
<td>0</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>213.02</td>
<td>251.1</td>
<td>3</td>
<td>956.0</td>
<td>1650198000||1650205620</td>
<td>2022-04-17T08:20:00.000-04:00||2022-04-17T10:2...</td>
<td>1650203400||1650213120</td>
<td>2022-04-17T09:50:00.000-04:00||2022-04-17T12:3...</td>
<td>CLT||BOS</td>
<td>ATL||CLT</td>
<td>American Airlines||American Airlines</td>
<td>AA||AA</td>
<td>Airbus A320||Airbus A320</td>
<td>5400||7500</td>
<td>228||728</td>
<td>coach||coach</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<section id="using-localcluster" class="level3">
<h3 class="anchored" data-anchor-id="using-localcluster">Using <code>LocalCluster</code></h3>
<p>Before demonstrating the use of <code>SSHCluster</code>, we’ll look at <code>LocalCLuster</code>, which allows us to create a local multi-core cluster for parallel computing on a single machine. It helps to distribute tasks across multiple CPUs or threads on your local machine, giving us the ability to scale computations beyond a single core:</p>
<div id="f2f6840c-01be-4a59-9192-88faebe1d434" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating LocalCluster instance.</span></span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dask.distributed <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LocalCluster</span>
<span id="cb5-4"></span>
<span id="cb5-5">cluster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LocalCluster(n_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, threads_per_worker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) </span>
<span id="cb5-6">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster.get_client()</span>
<span id="cb5-7"></span>
<span id="cb5-8">client</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>
    <div style="width: 24px; height: 24px; background-color: #e1e1e1; border: 3px solid #9D9D9D; border-radius: 5px; position: absolute;"> </div>
    <div style="margin-left: 48px;">
        <h3 style="margin-bottom: 0px;" class="anchored">Client</h3>
        <p style="color: #9D9D9D; margin-bottom: 0px;">Client-a5ec0bd6-c9fe-11ef-8e58-3003c82ce6ed</p>
        
<table class="caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Connection method:</strong> Cluster object</td>
<td style="text-align: left;"><strong>Cluster type:</strong> distributed.LocalCluster</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Dashboard:</strong> <a href="http://127.0.0.1:8787/status" target="_blank">http://127.0.0.1:8787/status</a></td>
<td style="text-align: left;"></td>
</tr>
</tbody>
</table>


        
            <button style="margin-bottom: 12px;" data-commandlinker-command="dask:populate-and-launch-layout" data-commandlinker-args="{&quot;url&quot;: &quot;http://127.0.0.1:8787/status&quot; }">
                Launch dashboard in JupyterLab
            </button>
        

        
            <details>
            <summary style="margin-bottom: 20px;"><h3 style="display: inline;" class="anchored">Cluster Info</h3></summary>
            <div class="jp-RenderedHTMLCommon jp-RenderedHTML jp-mod-trusted jp-OutputArea-output">
    <div style="width: 24px; height: 24px; background-color: #e1e1e1; border: 3px solid #9D9D9D; border-radius: 5px; position: absolute;">
    </div>
    <div style="margin-left: 48px;">
        <h3 style="margin-bottom: 0px; margin-top: 0px;" class="anchored">LocalCluster</h3>
        <p style="color: #9D9D9D; margin-bottom: 0px;">e965c2ed</p>
        
<table class="caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Dashboard:</strong> <a href="http://127.0.0.1:8787/status" target="_blank">http://127.0.0.1:8787/status</a></td>
<td style="text-align: left;"><strong>Workers:</strong> 2</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Total threads:</strong> 8</td>
<td style="text-align: left;"><strong>Total memory:</strong> 27.09 GiB</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Status:</strong> running</td>
<td style="text-align: left;"><strong>Using processes:</strong> True</td>
</tr>
</tbody>
</table>


        <details>
            <summary style="margin-bottom: 20px;">
                <h3 style="display: inline;" class="anchored">Scheduler Info</h3>
            </summary>

            <div style="">
    <div>
        <div style="width: 24px; height: 24px; background-color: #FFF7E5; border: 3px solid #FF6132; border-radius: 5px; position: absolute;"> </div>
        <div style="margin-left: 48px;">
            <h3 style="margin-bottom: 0px;" class="anchored">Scheduler</h3>
            <p style="color: #9D9D9D; margin-bottom: 0px;">Scheduler-65021379-9cf0-472f-af9f-c744d27ff689</p>
            
<table class="caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Comm:</strong> tcp://127.0.0.1:36097</td>
<td style="text-align: left;"><strong>Workers:</strong> 2</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Dashboard:</strong> <a href="http://127.0.0.1:8787/status" target="_blank">http://127.0.0.1:8787/status</a></td>
<td style="text-align: left;"><strong>Total threads:</strong> 8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Started:</strong> Just now</td>
<td style="text-align: left;"><strong>Total memory:</strong> 27.09 GiB</td>
</tr>
</tbody>
</table>

        </div>
    </div>

    <details style="margin-left: 48px;">
        <summary style="margin-bottom: 20px;">
            <h3 style="display: inline;" class="anchored">Workers</h3>
        </summary>

        
        <div style="margin-bottom: 20px;">
            <div style="width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;"> </div>
            <div style="margin-left: 48px;">
            <details>
                <summary>
                    <h4 style="margin-bottom: 0px; display: inline;" class="anchored">Worker: 0</h4>
                </summary>
                
<table class="caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Comm:</strong> tcp://127.0.0.1:33431</td>
<td style="text-align: left;"><strong>Total threads:</strong> 4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Dashboard:</strong> <a href="http://127.0.0.1:39027/status" target="_blank">http://127.0.0.1:39027/status</a></td>
<td style="text-align: left;"><strong>Memory:</strong> 13.55 GiB</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Nanny:</strong> tcp://127.0.0.1:46835</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td colspan="2" style="text-align: left;"><strong>Local directory:</strong> /tmp/dask-scratch-space/worker-s4dyz9pk</td>
</tr>
</tbody>
</table>

            </details>
            </div>
        </div>
        
        <div style="margin-bottom: 20px;">
            <div style="width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;"> </div>
            <div style="margin-left: 48px;">
            <details>
                <summary>
                    <h4 style="margin-bottom: 0px; display: inline;" class="anchored">Worker: 1</h4>
                </summary>
                
<table class="caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Comm:</strong> tcp://127.0.0.1:36301</td>
<td style="text-align: left;"><strong>Total threads:</strong> 4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Dashboard:</strong> <a href="http://127.0.0.1:35767/status" target="_blank">http://127.0.0.1:35767/status</a></td>
<td style="text-align: left;"><strong>Memory:</strong> 13.55 GiB</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Nanny:</strong> tcp://127.0.0.1:36265</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td colspan="2" style="text-align: left;"><strong>Local directory:</strong> /tmp/dask-scratch-space/worker-9t1r0nti</td>
</tr>
</tbody>
</table>

            </details>
            </div>
        </div>
        

    </details>
</div>

        </details>
    </div>
</div>
            </details>
        

    </div>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>2025-01-03 12:16:44,335 - distributed.shuffle._scheduler_plugin - WARNING - Shuffle 8b04cd7a3e831297147d5c00d79f8bb9 initialized by task ('shuffle-transfer-8b04cd7a3e831297147d5c00d79f8bb9', 295) executed on worker tcp://127.0.0.1:33431
2025-01-03 12:18:07,698 - distributed.shuffle._scheduler_plugin - WARNING - Shuffle 8b04cd7a3e831297147d5c00d79f8bb9 deactivated due to stimulus 'task-finished-1735928287.6946151'
2025-01-03 12:19:33,219 - distributed.shuffle._scheduler_plugin - WARNING - Shuffle b7f5ce97ecf82f18ee01140b59d55007 initialized by task ('shuffle-transfer-b7f5ce97ecf82f18ee01140b59d55007', 99) executed on worker tcp://127.0.0.1:33431
2025-01-03 12:20:26,159 - distributed.shuffle._scheduler_plugin - WARNING - Shuffle b7f5ce97ecf82f18ee01140b59d55007 deactivated due to stimulus 'task-finished-1735928426.1586232'
2025-01-03 12:20:35,652 - distributed.shuffle._scheduler_plugin - WARNING - Shuffle 8b04cd7a3e831297147d5c00d79f8bb9 initialized by task ('shuffle-transfer-8b04cd7a3e831297147d5c00d79f8bb9', 405) executed on worker tcp://127.0.0.1:36301
2025-01-03 12:21:36,894 - distributed.shuffle._scheduler_plugin - WARNING - Shuffle 8b04cd7a3e831297147d5c00d79f8bb9 deactivated due to stimulus 'task-finished-1735928496.8918214'</code></pre>
</div>
</div>
<p>Then we can read in the itineraries dataset and perform an aggregation. First we get the number of records by starting airport:</p>
<div id="b4c97c81-059a-454e-bddc-83eca19f45d7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dask</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dask.dataframe <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ddf</span>
<span id="cb7-4"></span>
<span id="cb7-5">data_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/shared/data/airlines/itineraries.csv"</span></span>
<span id="cb7-6"></span>
<span id="cb7-7">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ddf.read_csv(</span>
<span id="cb7-8">    data_path, </span>
<span id="cb7-9">    usecols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"startingAirport"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"destinationAirport"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"baseFare"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"totalFare"</span>],</span>
<span id="cb7-10">    assume_missing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb7-11">)</span>
<span id="cb7-12"></span>
<span id="cb7-13">dfstart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"startingAirport"</span>).startingAirport.count()</span>
<span id="cb7-14"></span>
<span id="cb7-15">dfstart.compute()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>startingAirport
CLT    5494510
MIA    4930213
OAK    3809884
DFW    5674959
ATL    5312028
IAD    3464378
JFK    4425164
DTW    4547052
DEN    4697143
LGA    5919323
BOS    5883876
ORD    5503476
PHL    4726187
EWR    3970797
LAX    8073281
SFO    5706482
Name: startingAirport, dtype: int64</code></pre>
</div>
</div>
<p><br></p>
<p>Next we compute the average total fare by starting airport:</p>
<div id="11090e95-a64e-4858-878c-78b20509a96c" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2">dffare <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"startingAirport"</span>).totalFare.mean()</span>
<span id="cb9-3">dffare.compute()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>startingAirport
CLT    321.456261
MIA    299.955595
OAK    534.211396
DFW    294.077856
ATL    303.774077
IAD    370.046151
JFK    375.406488
DTW    330.940539
DEN    335.077884
LGA    299.220774
BOS    285.865775
ORD    281.691875
PHL    344.088743
EWR    302.986457
LAX    379.254937
SFO    434.504077
Name: totalFare, dtype: float64</code></pre>
</div>
</div>
<div id="28e231ed-a68a-478c-9054-c3c8a8104480" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2">client.shutdown()</span></code></pre></div>
</div>
<p><br></p>
</section>
<section id="using-sshcluster" class="level3">
<h3 class="anchored" data-anchor-id="using-sshcluster">Using <code>SSHCluster</code></h3>
<p><code>SSHCluster</code> is used to create our distributed cluster on the local network. It accepts a list of hostnames, the first of which will be used for the scheduler and the rest as workers. We can repeat the name of the first host to have it also serve as a worker.</p>
<p>The full list of worker options can be found <a href="https://distributed.dask.org/en/stable/worker.html">here</a>. Note that in when using <code>LocalCluster</code>, <code>n_workers</code> specifies the total number of workers. When using <code>SSHCluster</code>, <code>n_workers</code> is the number of workers <em>per host</em>. In the next cell, we’ve create a cluster with two nodes, 1 worker each, with 4 threads per worker:</p>
<div id="80664db1-8c51-4cee-b10e-1c9c02b0629a" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dask.distributed <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Client, SSHCluster</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Path to dask environment executable for all nodes. </span></span>
<span id="cb12-5">remote_python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/miniforge3/envs/dask/bin/python"</span></span>
<span id="cb12-6"></span>
<span id="cb12-7">hosts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localhost"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.86.138"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"192.168.86.147"</span>]</span>
<span id="cb12-8"></span>
<span id="cb12-9">worker_opts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_workers"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nthreads"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>} <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#"memory_limit": "8GB"</span></span>
<span id="cb12-10"></span>
<span id="cb12-11">connect_opts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb12-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"known_hosts"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, </span>
<span id="cb12-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"username"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jtriz"</span>, </span>
<span id="cb12-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"password"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xxxxx"</span>,</span>
<span id="cb12-15">}</span>
<span id="cb12-16"></span>
<span id="cb12-17">cluster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SSHCluster(</span>
<span id="cb12-18">    hosts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hosts,</span>
<span id="cb12-19">    worker_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>worker_opts,</span>
<span id="cb12-20">    connect_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>connect_opts,</span>
<span id="cb12-21">    remote_python<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>remote_python</span>
<span id="cb12-22">)</span>
<span id="cb12-23"></span>
<span id="cb12-24">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client(cluster)</span>
<span id="cb12-25"></span>
<span id="cb12-26">client</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2025-01-03 12:24:23,300 - distributed.deploy.ssh - INFO - 2025-01-03 12:24:23,299 - distributed.scheduler - INFO - State start
2025-01-03 12:24:23,304 - distributed.deploy.ssh - INFO - 2025-01-03 12:24:23,303 - distributed.scheduler - INFO -   Scheduler at: tcp://192.168.86.154:46219
2025-01-03 12:24:24,150 - distributed.deploy.ssh - INFO - 2025-01-03 12:24:24,149 - distributed.nanny - INFO -         Start Nanny at: 'tcp://192.168.86.154:35955'
2025-01-03 12:24:24,161 - distributed.deploy.ssh - INFO - 2025-01-03 12:24:24,160 - distributed.nanny - INFO -         Start Nanny at: 'tcp://192.168.86.154:45391'
2025-01-03 12:24:24,538 - distributed.deploy.ssh - INFO - 2025-01-03 12:24:24,536 - distributed.worker - INFO -       Start worker at: tcp://192.168.86.154:40165
2025-01-03 12:24:24,553 - distributed.deploy.ssh - INFO - 2025-01-03 12:24:24,551 - distributed.worker - INFO -       Start worker at: tcp://192.168.86.154:39183</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>
    <div style="width: 24px; height: 24px; background-color: #e1e1e1; border: 3px solid #9D9D9D; border-radius: 5px; position: absolute;"> </div>
    <div style="margin-left: 48px;">
        <h3 style="margin-bottom: 0px;" class="anchored">Client</h3>
        <p style="color: #9D9D9D; margin-bottom: 0px;">Client-f59132cc-c9ff-11ef-8e58-3003c82ce6ed</p>
        
<table class="caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Connection method:</strong> Cluster object</td>
<td style="text-align: left;"><strong>Cluster type:</strong> distributed.SpecCluster</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Dashboard:</strong> <a href="http://192.168.86.154:8787/status" target="_blank">http://192.168.86.154:8787/status</a></td>
<td style="text-align: left;"></td>
</tr>
</tbody>
</table>


        
            <button style="margin-bottom: 12px;" data-commandlinker-command="dask:populate-and-launch-layout" data-commandlinker-args="{&quot;url&quot;: &quot;http://192.168.86.154:8787/status&quot; }">
                Launch dashboard in JupyterLab
            </button>
        

        
            <details>
            <summary style="margin-bottom: 20px;"><h3 style="display: inline;" class="anchored">Cluster Info</h3></summary>
            <div class="jp-RenderedHTMLCommon jp-RenderedHTML jp-mod-trusted jp-OutputArea-output">
    <div style="width: 24px; height: 24px; background-color: #e1e1e1; border: 3px solid #9D9D9D; border-radius: 5px; position: absolute;">
    </div>
    <div style="margin-left: 48px;">
        <h3 style="margin-bottom: 0px; margin-top: 0px;" class="anchored">SpecCluster</h3>
        <p style="color: #9D9D9D; margin-bottom: 0px;">SSHCluster</p>
        
<table class="caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Dashboard:</strong> <a href="http://192.168.86.154:8787/status" target="_blank">http://192.168.86.154:8787/status</a></td>
<td style="text-align: left;"><strong>Workers:</strong> 2</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Total threads:</strong> 8</td>
<td style="text-align: left;"><strong>Total memory:</strong> 13.55 GiB</td>
</tr>
</tbody>
</table>


        <details>
            <summary style="margin-bottom: 20px;">
                <h3 style="display: inline;" class="anchored">Scheduler Info</h3>
            </summary>

            <div style="">
    <div>
        <div style="width: 24px; height: 24px; background-color: #FFF7E5; border: 3px solid #FF6132; border-radius: 5px; position: absolute;"> </div>
        <div style="margin-left: 48px;">
            <h3 style="margin-bottom: 0px;" class="anchored">Scheduler</h3>
            <p style="color: #9D9D9D; margin-bottom: 0px;">Scheduler-04823e11-b8e4-4127-9552-fea45137927a</p>
            
<table class="caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Comm:</strong> tcp://192.168.86.154:46219</td>
<td style="text-align: left;"><strong>Workers:</strong> 2</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Dashboard:</strong> <a href="http://192.168.86.154:8787/status" target="_blank">http://192.168.86.154:8787/status</a></td>
<td style="text-align: left;"><strong>Total threads:</strong> 8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Started:</strong> Just now</td>
<td style="text-align: left;"><strong>Total memory:</strong> 13.55 GiB</td>
</tr>
</tbody>
</table>

        </div>
    </div>

    <details style="margin-left: 48px;">
        <summary style="margin-bottom: 20px;">
            <h3 style="display: inline;" class="anchored">Workers</h3>
        </summary>

        
        <div style="margin-bottom: 20px;">
            <div style="width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;"> </div>
            <div style="margin-left: 48px;">
            <details>
                <summary>
                    <h4 style="margin-bottom: 0px; display: inline;" class="anchored">Worker: tcp://192.168.86.154:39183</h4>
                </summary>
                
<table class="caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Comm:</strong> tcp://192.168.86.154:39183</td>
<td style="text-align: left;"><strong>Total threads:</strong> 4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Dashboard:</strong> <a href="http://192.168.86.154:35959/status" target="_blank">http://192.168.86.154:35959/status</a></td>
<td style="text-align: left;"><strong>Memory:</strong> 6.77 GiB</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Nanny:</strong> tcp://192.168.86.154:35955</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td colspan="2" style="text-align: left;"><strong>Local directory:</strong> /tmp/dask-scratch-space/worker-b7o381g5</td>
</tr>
</tbody>
</table>

            </details>
            </div>
        </div>
        
        <div style="margin-bottom: 20px;">
            <div style="width: 24px; height: 24px; background-color: #DBF5FF; border: 3px solid #4CC9FF; border-radius: 5px; position: absolute;"> </div>
            <div style="margin-left: 48px;">
            <details>
                <summary>
                    <h4 style="margin-bottom: 0px; display: inline;" class="anchored">Worker: tcp://192.168.86.154:40165</h4>
                </summary>
                
<table class="caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Comm:</strong> tcp://192.168.86.154:40165</td>
<td style="text-align: left;"><strong>Total threads:</strong> 4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>Dashboard:</strong> <a href="http://192.168.86.154:43629/status" target="_blank">http://192.168.86.154:43629/status</a></td>
<td style="text-align: left;"><strong>Memory:</strong> 6.77 GiB</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong>Nanny:</strong> tcp://192.168.86.154:45391</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td colspan="2" style="text-align: left;"><strong>Local directory:</strong> /tmp/dask-scratch-space/worker-lh5cekag</td>
</tr>
</tbody>
</table>

            </details>
            </div>
        </div>
        

    </details>
</div>

        </details>
    </div>
</div>
            </details>
        

    </div>
</div>
</div>
</div>
<p><br></p>
<p>Getting a count of the number of records by starting airport:</p>
<div id="d688cfb5-9d5f-4518-929a-b433cbd85500" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2">data_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/shared/data/airlines/itineraries.csv"</span></span>
<span id="cb14-3"></span>
<span id="cb14-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ddf.read_csv(</span>
<span id="cb14-5">    data_path, </span>
<span id="cb14-6">    usecols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"startingAirport"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"destinationAirport"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"baseFare"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"totalFare"</span>],</span>
<span id="cb14-7">    assume_missing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb14-8">)</span>
<span id="cb14-9"></span>
<span id="cb14-10">dfstart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"startingAirport"</span>).startingAirport.count()</span>
<span id="cb14-11"></span>
<span id="cb14-12">dfstart.compute()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>startingAirport
CLT    5494510
MIA    4930213
OAK    3809884
DFW    5674959
ATL    5312028
IAD    3464378
JFK    4425164
DTW    4547052
DEN    4697143
LGA    5919323
BOS    5883876
ORD    5503476
PHL    4726187
EWR    3970797
LAX    8073281
SFO    5706482
Name: startingAirport, dtype: int64</code></pre>
</div>
</div>
<p><br></p>
<p>As before, computing the average total fare by starting airport:</p>
<div id="1bac1ddf-0c16-4ecf-88ab-ffd701647c3c" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">dffare <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"startingAirport"</span>).totalFare.mean()</span>
<span id="cb16-3">dffare.compute()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>startingAirport
CLT    321.456261
MIA    299.955595
OAK    534.211396
DFW    294.077856
ATL    303.774077
IAD    370.046151
JFK    375.406488
DTW    330.940539
DEN    335.077884
LGA    299.220774
BOS    285.865775
ORD    281.691875
PHL    344.088743
EWR    302.986457
LAX    379.254937
SFO    434.504077
Name: totalFare, dtype: float64</code></pre>
</div>
</div>
<div id="f7152581-201c-4080-a663-a942414974ca" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2">client.shutdown()</span></code></pre></div>
</div>
<p><br></p>
<p>The Dask Lab extention didn’t seem to work when using <code>SSHCluster</code>. This probably has more to do with my setup than any issue with the extention itself, but even after tinkering with it for a while, I couldn’t get it to display usage metrics.</p>
<p>While I was able to get <code>SSHCluster</code> setup and running on my local network, I’ll probably opt for <code>LocalCLuster</code> for my distributed computing needs, first because my data processing needs aren’t that significant and this was intended as a proof of concept, and second not having access to the dash lab extention when using <code>SSHCluter</code> is limiting. In addition, at times I noticed a mismatch between the actual number of workers and number of workers displayed by the <code>SSHCluster</code> client, so it was difficult to determine if the cluster was properly configured without diagnostic tooling.</p>
<p>I plan on researching how to go about setting up an additional worker on WSL within an <code>SSHCluster</code>, but that will be a future post.</p>


</section>

 ]]></description>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/adhoc-compute-cluster-with-dask/adhoc-compute-cluster-with-dask.html</guid>
  <pubDate>Thu, 02 Jan 2025 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Multimodal Neural Networks for Risk Classification</title>
  <link>https://www.jtrive.com/posts/mulitmodal-neural-networks/multimodal-neural-networks.html</link>
  <description><![CDATA[ 





<p>Multimodal neural networks are a type of model designed to integrate data from multiple modalities, such as text, images, audio, video, or other data types. Multimodal networks aim to learn complex relationships between different kinds of inputs, with the hope of achieving better performance than a model focusing on a single modality.</p>
<p>For example, in applications like video captioning, a multimodal network combines visual features from video frames with linguistic models to generate descriptive text. In tasks like audio-visual speech recognition, it can integrate auditory and visual data for more robust performance. By leveraging diverse types of data, multimodal neural networks improve the accuracy and context-awareness of machine learning systems, allowing for potentially deeper insights.</p>
<p>This post documents how to create a multimodal network for the purpose of quantifying roadway risk using traditional tabular features along with images of the surrounding region. The tabular features may describe the underlying network topology, or the number of traffic citations issued as a function of daily traffic volume, etc. Here a synthetic dataset will be used, but would be replaced with meaningful variables for real-world usage.</p>
<p>For the purposes of demonstration, a small set of images are used: The Des Moines, Iowa metro region is partitioned into 16 equally sized tiles laid out in a 4x4 grid pattern:</p>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a grid of sample images.</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cv2</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mpl_toolkits.axes_grid1 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ImageGrid</span>
<span id="cb1-9"></span>
<span id="cb1-10">image_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"images"</span>)</span>
<span id="cb1-11">image_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [image_dir.joinpath(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(ii)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>zfill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.png"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)]</span>
<span id="cb1-12"></span>
<span id="cb1-13"></span>
<span id="cb1-14">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-15"></span>
<span id="cb1-16">grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageGrid(fig, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">111</span>, nrows_ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), axes_pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.20</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load images.</span></span>
<span id="cb1-19">images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [cv2.cvtColor(cv2.imread(ii), cv2.COLOR_BGR2RGB)  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> image_paths]</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize to 196 x 196.</span></span>
<span id="cb1-22">images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [cv2.resize(ii, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">196</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">196</span>), interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cv2.INTER_AREA) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> images]</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ax, path, img <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(grid, image_paths, images):</span>
<span id="cb1-25">    ax.imshow(img)</span>
<span id="cb1-26">    ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb1-27">    ax.set_title(path.name, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb1-28"></span>
<span id="cb1-29">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\Users\jtriv\miniforge3\envs\torch\Lib\site-packages\IPython\core\pylabtools.py:170: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  fig.canvas.print_figure(bytes_io, **kw)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/mulitmodal-neural-networks/multimodal-neural-networks_files/figure-html/cell-2-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>In practice, a much larger dataset with tens or hundreds of thousands of images would be used, but this small sample will suffice to demonstrate the approach. The setup used here can be specialized for different but similar task.</p>
<p>A synthetic dataset is created to represent tabular features and label along with the path to the corresponding image file. Each row corresponds to one of the images shown in the grid above. For the label, <em>1</em> represents a region of high risk and <em>0</em> a region of low risk based on an auxiliary analysis:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb3-5"></span>
<span id="cb3-6">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-7">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb3-8">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-9">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-10">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"display.precision"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-11"></span>
<span id="cb3-12">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb3-13">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create 20 random tabular features. df has the same number of rows as the</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of images (16).</span></span>
<span id="cb3-17">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(rng.normal(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)))</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add label.</span></span>
<span id="cb3-20">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.integers(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add path to corresponding image file.</span></span>
<span id="cb3-23">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_path"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [image_dir.joinpath(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(ii)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>zfill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.png"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)]</span>
<span id="cb3-24"></span>
<span id="cb3-25">df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
<th data-quarto-table-cell-role="th">11</th>
<th data-quarto-table-cell-role="th">12</th>
<th data-quarto-table-cell-role="th">13</th>
<th data-quarto-table-cell-role="th">14</th>
<th data-quarto-table-cell-role="th">15</th>
<th data-quarto-table-cell-role="th">16</th>
<th data-quarto-table-cell-role="th">17</th>
<th data-quarto-table-cell-role="th">18</th>
<th data-quarto-table-cell-role="th">19</th>
<th data-quarto-table-cell-role="th">label</th>
<th data-quarto-table-cell-role="th">image_path</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1.28963</td>
<td>0.48410</td>
<td>0.24857</td>
<td>0.73372</td>
<td>-0.98589</td>
<td>-0.32993</td>
<td>0.14570</td>
<td>-1.27563</td>
<td>0.33370</td>
<td>-1.23056</td>
<td>-0.54767</td>
<td>-0.42706</td>
<td>1.92863</td>
<td>0.82478</td>
<td>0.78189</td>
<td>-0.68096</td>
<td>1.84075</td>
<td>-0.58315</td>
<td>1.39984</td>
<td>1.98030</td>
<td>0</td>
<td>c:\Users\jtriv\repos\blog-posts-in-progress\mu...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>-1.20795</td>
<td>0.30504</td>
<td>-0.62360</td>
<td>0.59993</td>
<td>0.12950</td>
<td>2.13616</td>
<td>0.24374</td>
<td>-0.68748</td>
<td>-2.42601</td>
<td>-0.10827</td>
<td>-3.08048</td>
<td>0.81488</td>
<td>1.87151</td>
<td>-1.50928</td>
<td>-0.93552</td>
<td>0.40171</td>
<td>-0.42437</td>
<td>-0.82750</td>
<td>-0.49901</td>
<td>0.69287</td>
<td>1</td>
<td>c:\Users\jtriv\repos\blog-posts-in-progress\mu...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0.29436</td>
<td>0.91876</td>
<td>-0.76522</td>
<td>0.34283</td>
<td>2.13044</td>
<td>-2.04926</td>
<td>1.72924</td>
<td>-0.08234</td>
<td>0.66696</td>
<td>-0.96648</td>
<td>-0.54479</td>
<td>-0.93761</td>
<td>0.46527</td>
<td>-0.81374</td>
<td>-0.45954</td>
<td>-0.46045</td>
<td>0.83743</td>
<td>0.33436</td>
<td>-0.10157</td>
<td>-1.33409</td>
<td>1</td>
<td>c:\Users\jtriv\repos\blog-posts-in-progress\mu...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>-0.29149</td>
<td>0.40605</td>
<td>2.30611</td>
<td>-0.19939</td>
<td>1.56295</td>
<td>1.48744</td>
<td>0.99899</td>
<td>-0.05705</td>
<td>0.53843</td>
<td>1.20204</td>
<td>-1.36381</td>
<td>-0.78851</td>
<td>0.04786</td>
<td>-0.87854</td>
<td>-1.01904</td>
<td>-0.52666</td>
<td>-0.96457</td>
<td>-0.04617</td>
<td>1.71839</td>
<td>1.36298</td>
<td>0</td>
<td>c:\Users\jtriv\repos\blog-posts-in-progress\mu...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>-1.04513</td>
<td>-2.56570</td>
<td>-0.52784</td>
<td>1.27892</td>
<td>-0.47038</td>
<td>-0.24379</td>
<td>-1.13843</td>
<td>-0.48612</td>
<td>1.41375</td>
<td>1.29564</td>
<td>-0.49210</td>
<td>-0.86928</td>
<td>2.09184</td>
<td>0.90340</td>
<td>0.38600</td>
<td>-0.63851</td>
<td>-1.43843</td>
<td>-0.79458</td>
<td>0.89424</td>
<td>-0.73609</td>
<td>0</td>
<td>c:\Users\jtriv\repos\blog-posts-in-progress\mu...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>1.46810</td>
<td>-2.06851</td>
<td>-1.91358</td>
<td>-1.55112</td>
<td>-0.76136</td>
<td>0.25340</td>
<td>1.18610</td>
<td>-0.80685</td>
<td>-1.51704</td>
<td>-1.29806</td>
<td>-0.75313</td>
<td>-0.02666</td>
<td>1.32913</td>
<td>0.30397</td>
<td>-1.81921</td>
<td>-0.98140</td>
<td>-0.45354</td>
<td>-1.29872</td>
<td>0.13481</td>
<td>0.87467</td>
<td>0</td>
<td>c:\Users\jtriv\repos\blog-posts-in-progress\mu...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>-0.43073</td>
<td>-0.81238</td>
<td>1.35071</td>
<td>-0.62312</td>
<td>-0.74979</td>
<td>0.53097</td>
<td>-0.13714</td>
<td>0.01988</td>
<td>-0.65419</td>
<td>-0.41824</td>
<td>-1.15486</td>
<td>0.37681</td>
<td>0.62695</td>
<td>0.75203</td>
<td>-0.88323</td>
<td>-0.44607</td>
<td>-1.04912</td>
<td>-0.49071</td>
<td>-0.28945</td>
<td>-0.66037</td>
<td>0</td>
<td>c:\Users\jtriv\repos\blog-posts-in-progress\mu...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>In order to supply the model with training data, a custom <code>Dataset</code> object is created. It accepts the DataFrame created in the previous cell along with the desired image dimension. The <code>__getitem__</code> method is overridden to return a dictionary consisting of the image, tabular features and label for a single training sample:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader, Dataset</span>
<span id="cb4-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transforms, utils</span>
<span id="cb4-6">torchvision.disable_beta_transforms_warning()</span>
<span id="cb4-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> v2</span>
<span id="cb4-8"></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MultiModalDataset(Dataset):</span>
<span id="cb4-11">    </span>
<span id="cb4-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, df, image_dim):</span>
<span id="cb4-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters</span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ----------</span></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        df: pd.DataFrame</span></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Contains image path, predictors and label.</span></span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        image_dim: int</span></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Shape of images used for training. </span></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-22">        img_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-23">            v2.CenterCrop(image_dim),</span>
<span id="cb4-24">            v2.ToImage(),</span>
<span id="cb4-25">            v2.ToDtype(torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-26">        ]</span>
<span id="cb4-27"></span>
<span id="cb4-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v2.Compose(img_transform)</span>
<span id="cb4-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_path"</span>].tolist()</span>
<span id="cb4-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>].tolist()</span>
<span id="cb4-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.from_numpy(df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image_path"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).values).to(torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb4-32"></span>
<span id="cb4-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels)</span>
<span id="cb4-35"></span>
<span id="cb4-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb4-37">        img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_paths[index])</span>
<span id="cb4-38">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_path).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>)</span>
<span id="cb4-39">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_transform(img)</span>
<span id="cb4-40">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels[index]</span>
<span id="cb4-41">        predictors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.features[index, :]</span>
<span id="cb4-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>: img, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"predictors"</span>: predictors, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>: label}</span>
<span id="cb4-43"></span></code></pre></div>
</div>
<p><br></p>
<p>In total, three separate models need to be created:</p>
<ol type="1">
<li>A convolutional neural network (CNN) to be trained on image data</li>
<li>A fully-connected network to be trained on tabular features</li>
<li>A combined network which concatenates activations from 1 and 2 and generates a prediction</li>
</ol>
<p>A simple CNN is shown below, but any model can be used in its place. PyTorch’s pre-trained weights and associated models are worth exploring, available <a href="https://pytorch.org/vision/main/models.html">here</a>.</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple CNN for image data. </span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb5-5"></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BasicCNN(nn.Module):</span>
<span id="cb5-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb5-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb5-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb5-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MaxPool2d(kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb5-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">529</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb5-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb5-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.drp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Dropout(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout)</span>
<span id="cb5-16">        </span>
<span id="cb5-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X):</span>
<span id="cb5-18">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1(X)))</span>
<span id="cb5-19">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2(output)))</span>
<span id="cb5-20">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.flatten(output, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-21">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.drp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1(output)))</span>
<span id="cb5-22">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.drp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2(output)))</span>
<span id="cb5-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> output</span>
<span id="cb5-24"></span>
<span id="cb5-25"></span>
<span id="cb5-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print number of trainable parameters.</span></span>
<span id="cb5-27">nbr_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.numel() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> BasicCNN().parameters())</span>
<span id="cb5-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"BasicCNN number of parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbr_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>BasicCNN number of parameters: 1,024,604</code></pre>
</div>
</div>
<p><br></p>
<p>Within <code>self.fc1</code>, <code>in_features</code> is set to 529 * 4 * 4 = 8,464, which is the flattened shape coming out of <code>self.conv2</code> after the application of max pooling.</p>
<p>To use a pre-trained model, a different architecture is required. For example, to use ResNet34 trained on ImageNet data, a <code>PretrainedCNN</code> model is created:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pretrained CNN (ResNet34) for image data. </span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> models</span>
<span id="cb7-5"></span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> PretrainedCNN(nn.Module):</span>
<span id="cb7-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb7-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb7-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.resnet34()</span>
<span id="cb7-11"></span>
<span id="cb7-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set requires_grad to False for pretrained model. </span></span>
<span id="cb7-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> param <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.parameters():</span>
<span id="cb7-14">            param.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-15"></span>
<span id="cb7-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get dimension of last layer input. </span></span>
<span id="cb7-17">        pt_num_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.fc.in_features</span>
<span id="cb7-18">        </span>
<span id="cb7-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.fc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb7-20">             nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pt_num_features, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),</span>
<span id="cb7-21">             nn.Dropout(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout),</span>
<span id="cb7-22">             nn.ReLU(),</span>
<span id="cb7-23">        )</span>
<span id="cb7-24">        </span>
<span id="cb7-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb7-26">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span>
<span id="cb7-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> output</span>
<span id="cb7-28"></span>
<span id="cb7-29"></span>
<span id="cb7-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print number of trainable parameters.</span></span>
<span id="cb7-31">nbr_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.numel() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> PretrainedCNN().parameters())</span>
<span id="cb7-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"PretrainedCNN number of parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbr_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>PretrainedCNN number of parameters: 21,317,504</code></pre>
</div>
</div>
<p><br></p>
<p><code>PretrainedCNN</code> has many more parameters than <code>BasicCNN</code>, but only weights associated with <code>self.model.fc</code> will be updated during backpropagation. All other weights have been frozen in the call to <code>param.requires_grad = False</code>. The actual number of trainable parameters for <code>PretrainedCNN</code> is closer to 30,000.</p>
<p>Within the forward pass, both <code>BasicCNN</code> and <code>PretrainedCNN</code> return an activation tensor having dimension BATCH_SIZE x 64.</p>
<p>The model to process tabular features is a simple fully-connected network with two hidden layers:</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Model to process tabular features.</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> TabularNN(nn.Module):</span>
<span id="cb9-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_features, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb9-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb9-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb9-7">            nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_features, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),</span>
<span id="cb9-8">            nn.ReLU(),</span>
<span id="cb9-9">            nn.Dropout(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout),</span>
<span id="cb9-10">            nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>),</span>
<span id="cb9-11">            nn.ReLU(),</span>
<span id="cb9-12">            nn.Dropout(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout),</span>
<span id="cb9-13">            nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb9-14">        )</span>
<span id="cb9-15">        </span>
<span id="cb9-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb9-17">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)</span>
<span id="cb9-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> output</span>
<span id="cb9-19">    </span>
<span id="cb9-20"></span>
<span id="cb9-21">nbr_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(p.numel() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> TabularNN(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>).parameters())</span>
<span id="cb9-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"TabularNN number of parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbr_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>TabularNN number of parameters: 13,792</code></pre>
</div>
</div>
<p><br></p>
<p><code>num_features</code> is the number of predictors in the tabular dataset (we used 20 for the synthetic data created earlier). Within the forward pass, <code>TabularNN</code> returns an activation tensor of dimension BATCH_SIZE x 32.</p>
<p>In the next cell, <code>MultiModalNN</code> accepts an image model and a tabular model, along with the dimension of the activation output for each. The activations are concatenated row-wise, then passed through the sigmoid to generate an output between 0 and 1, where values closer to 1 represent higher risk regions. <code>MultiModalNN</code> consists only of a single linear layer which reduces the dimensionality of the concatenated activations down to an output dimension BATCH_SIZE x 1. The <code>forward</code> method accepts both a batch of images and a batch of tabular features.</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multi-modal network. </span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MultiModalNN(nn.Module):</span>
<span id="cb11-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_model, tabular_model, image_act_dim, tabular_act_dim, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb11-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb11-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_model</span>
<span id="cb11-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tabular_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tabular_model</span>
<span id="cb11-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigmoid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sigmoid()</span>
<span id="cb11-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mm_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb11-10">            nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_act_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tabular_act_dim, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>),</span>
<span id="cb11-11">            nn.ReLU(),</span>
<span id="cb11-12">            nn.Dropout(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout),</span>
<span id="cb11-13">            nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-14">        )</span>
<span id="cb11-15"></span>
<span id="cb11-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, images, predictors):</span>
<span id="cb11-17">        image_activations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image_model(images)</span>
<span id="cb11-18">        tabular_activations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tabular_model(predictors)</span>
<span id="cb11-19">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((image_activations, tabular_activations), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-20">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigmoid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mm_model(output))</span>
<span id="cb11-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> output</span>
<span id="cb11-22">    </span></code></pre></div>
</div>
<section id="bringing-it-all-together" class="level3">
<h3 class="anchored" data-anchor-id="bringing-it-all-together">Bringing it All Together</h3>
<p>We first create a <code>MultiModalDataset</code> instance which gets passed into <code>DataLoader</code>. We use a batch size of 4 (8 samples for training, 4 for validation):</p>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize DataLoaders.</span></span>
<span id="cb12-2"></span>
<span id="cb12-3">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb12-4">image_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">196</span></span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use GPU if available. </span></span>
<span id="cb12-7">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda:0"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb12-8"></span>
<span id="cb12-9">ds_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultiModalDataset(df[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>], image_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_dim)</span>
<span id="cb12-10">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(ds_train, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-11"></span>
<span id="cb12-12">ds_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultiModalDataset(df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:], image_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image_dim)</span>
<span id="cb12-13">valid_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(ds_valid, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-14"></span>
<span id="cb12-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>device: cpu.</code></pre>
</div>
</div>
<p>We can inspect a batch of training data and get the dimensions of the concatenated images and tabular features:</p>
<div id="cell-18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(train_loader))</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"d.keys()              : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(d.keys())<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"d['image'].shape      : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"d['predictors'].shape : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'predictors'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"d['label'].shape      : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>d.keys()              : ['image', 'predictors', 'label']
d['image'].shape      : torch.Size([4, 3, 196, 196])
d['predictors'].shape : torch.Size([4, 20])
d['label'].shape      : torch.Size([4])</code></pre>
</div>
</div>
<p><br></p>
<p>To create a <code>MutliModalNN</code> instance, we first initialize the component models. Recall that for <code>BasicCNN</code>, the output will be BATCH_SIZE x 64 and for <code>TabularNN</code> BATCH_SIZE x 32. The optimizer is initialized, the loss function specified and code is added to train on multiple GPUs in parallel if available:</p>
<div id="cell-20" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">dropout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.10</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dropout</span></span>
<span id="cb16-3">ngpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of GPUs </span></span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create model instances.</span></span>
<span id="cb16-6">cnn_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BasicCNN(dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout)</span>
<span id="cb16-7">tab_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularNN(num_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout)</span>
<span id="cb16-8">mm_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultiModalNN(cnn_model, tab_model, image_act_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, tabular_act_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout)</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify loss criteria and optimizer.</span></span>
<span id="cb16-11">criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.BCELoss()</span>
<span id="cb16-12">optim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(mm_model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0002</span>, betas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.999</span>))</span>
<span id="cb16-13"></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distribute model across multiple gpus if available.</span></span>
<span id="cb16-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (ngpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb16-16">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.DataParallel(mm_model, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(ngpu)))</span></code></pre></div>
</div>
<p><br></p>
<p>As a quick verification, a batch of training data is passed into <code>mm_model</code> to ensure the correct output dimensionality:</p>
<div id="cell-22" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2">images, predictors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>], d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"predictors"</span>]</span>
<span id="cb17-3">predictors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictors.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb17-4">images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> images.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb17-5">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mm_model(images, predictors).squeeze()</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"y.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-8"></span>
<span id="cb17-9">y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>y.shape: torch.Size([4])</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>tensor([0.5056, 0.5047, 0.5080, 0.5011], grad_fn=&lt;SqueezeBackward0&gt;)</code></pre>
</div>
</div>
<p><br></p>
<p>The training loop executes the following steps:</p>
<ul>
<li>Load a batch of training data from the DataLoader.</li>
<li>Zero out the optimizer’s gradients.</li>
<li>Get predictions from the model for current batch.</li>
<li>Calculate the loss for current batch predictions vs.&nbsp;labels.</li>
<li>Calculate backward gradients over the weights.</li>
<li>Calculate the loss on a set of data that was not used for training.</li>
</ul>
<p><code>trainer</code> and <code>validator</code> are defined to handle the training and validation of a single epoch:</p>
<div id="cell-24" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> trainer(epoch, model, train_loader, criterion, optim):</span>
<span id="cb20-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Train single epoch.</span></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb20-6">    nbr_batches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)</span>
<span id="cb20-7"></span>
<span id="cb20-8">    running_loss, checkpoint_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb20-9"></span>
<span id="cb20-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, dinputs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(train_loader):</span>
<span id="cb20-11"></span>
<span id="cb20-12">        images, predictors, yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dinputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>], dinputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"predictors"</span>], dinputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>]</span>
<span id="cb20-13">        predictors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictors.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb20-14">        images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> images.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb20-15">        yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yactual.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb20-16"></span>
<span id="cb20-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero out gradients.</span></span>
<span id="cb20-18">        optim.zero_grad()</span>
<span id="cb20-19"></span>
<span id="cb20-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass.</span></span>
<span id="cb20-21">        ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(images, predictors).squeeze()</span>
<span id="cb20-22"></span>
<span id="cb20-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss and gradients.</span></span>
<span id="cb20-24">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(ypred, yactual)</span>
<span id="cb20-25">        loss.backward()</span>
<span id="cb20-26"></span>
<span id="cb20-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update weights.</span></span>
<span id="cb20-28">        optim.step()</span>
<span id="cb20-29"></span>
<span id="cb20-30">        running_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>loss.item()</span>
<span id="cb20-31"></span>
<span id="cb20-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb20-33">            checkpoint_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> running_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb20-34">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">+ [train][epoch=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, batch=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] loss = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb20-35">            running_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb20-36"></span>
<span id="cb20-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> checkpoint_loss</span>
<span id="cb20-38">       </span>
<span id="cb20-39"></span>
<span id="cb20-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validator(epoch, model, valid_loader, criterion):</span>
<span id="cb20-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb20-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Validate single epoch.</span></span>
<span id="cb20-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb20-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb20-45">        </span>
<span id="cb20-46">        running_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb20-47"></span>
<span id="cb20-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, dinputs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(valid_loader, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb20-49">            images, predictors, yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dinputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>], dinputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"predictors"</span>], dinputs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>]</span>
<span id="cb20-50">            predictors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictors.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb20-51">            images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> images.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb20-52">            yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yactual.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb20-53">            ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(images, predictors).squeeze()</span>
<span id="cb20-54">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> criterion(ypred, yactual)</span>
<span id="cb20-55">            running_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb20-56">        avg_valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> running_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ii</span>
<span id="cb20-57"></span>
<span id="cb20-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> avg_valid_loss</span></code></pre></div>
</div>
<p>Then construct the training loop:</p>
<div id="cell-26" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"></span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb21-3"></span>
<span id="cb21-4">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb21-5">best_valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e15</span></span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb21-8"></span>
<span id="cb21-9">    mm_model.train()</span>
<span id="cb21-10"></span>
<span id="cb21-11">    train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trainer(epoch, mm_model, train_loader, criterion, optim)</span>
<span id="cb21-12"></span>
<span id="cb21-13">    mm_model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb21-14"></span>
<span id="cb21-15">    valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> validator(epoch, mm_model, valid_loader, criterion)</span>
<span id="cb21-16"></span>
<span id="cb21-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> best_valid_loss:</span>
<span id="cb21-18">        model_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"epoch-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth"</span></span>
<span id="cb21-19">        torch.save(mm_model, model_path)</span>
<span id="cb21-20">        best_valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    + [train][epoch=1, batch=0] loss = 0.00696.
    + [train][epoch=2, batch=0] loss = 0.00690.
    + [train][epoch=3, batch=0] loss = 0.00676.
    + [train][epoch=4, batch=0] loss = 0.00658.
    + [train][epoch=5, batch=0] loss = 0.00668.
    + [train][epoch=6, batch=0] loss = 0.00648.
    + [train][epoch=7, batch=0] loss = 0.00812.
    + [train][epoch=8, batch=0] loss = 0.00723.
    + [train][epoch=9, batch=0] loss = 0.00835.
    + [train][epoch=10, batch=0] loss = 0.00585.</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="enhancements" class="level3">
<h3 class="anchored" data-anchor-id="enhancements">Enhancements</h3>
<p>As presented above, the map images have a lot of detail that may not be of particular interest for the task at hand. It may be desirable to create binary images that represent roadways in white and everything else black. This can be accomplished using a segmentation model such as U-Net. The multimodal architecture can also be expanded to incorporate multiple images per training sample, or even facilitate additional modalities.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/mulitmodal-neural-networks/multimodal-neural-networks.html</guid>
  <pubDate>Sat, 14 Dec 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Geohashing for Fun and Profit</title>
  <link>https://www.jtrive.com/posts/geohash-python/geohash-python.html</link>
  <description><![CDATA[ 





<p>I recently became interested in geohashing and wanted to develop an understanding of the algorithm with the aim of implementing it myself. I was surprised to find it to be quite simple and intuitive. In this article, I’ll demonstrate how to generate geohashes for a given latitude and longitude and compare results against <code>pygeohash</code>, a Python library for all things geohash-related. I’ll also walkthrough an approach that can be used to find neighboring cells of a given geohash, and render them on a map using folium.</p>
<p>A geohash is a unique identifier of a specific region on the Earth. The basic idea is the Earth gets divided into rectangular regions of user-defined size, and each region is assigned a unique id which is called its geohash. For a given location on earth, the algorithm converts an arbitrary precision latitude and longitude into a string, the idea being that regions with a similar string prefix will be closer together. Conceptually, geohashing reduces proximity search to string prefix matching. As each character encodes additional precision, shared prefixes denote geographic proximity. But the converse is not true: Two points may be close in terms of relative proximity, but have no common geohash characters (think of two points on opposite sides of the prime meridian).</p>
<p>Geohashes offer a level of anonymity by avoiding the need to share precise GPS coordinates. Instead, they represent a location within a specific bounding box at a chosen level of precision.</p>
<p>Before we begin, it is important to note that geohash libraries in the wild use a more efficient generating mechanism than what is presented here. My goal is to demonstrate the concept with maximum clarity as opposed to maximum efficiency. If you decide to use geohashing in a real-world application, use an existing library.</p>
<p><br></p>
<section id="algorithm" class="level3">
<h3 class="anchored" data-anchor-id="algorithm">Algorithm</h3>
<p>A geohash is a hierarchical spatial index: In order to represent a point, the world is recursively divided into smaller and smaller grid cells with each additional bit until the desired precision is reached. Functionally, the algorithm works by storing the intermediate results of two binary searches. In the resulting bit string, even-indexed bits represent longitude, while odd-indexed bits represent latitude. The user specifies a level of precision, usually between 1 and 12, and a geohash of that length is returned. The table below gives the dimensions of geohashes at each level of precision (taken from <a href="https://www.movable-type.co.uk/scripts/geohash.html">here</a>):</p>
<pre class="text"><code>Precision          Dimension     
        1: 5,000km x 5,000km
        2:   1,250km x 625km
        3:     156km x 156km
        4:   31.9km x 19.5km
        5:   4.89km x 4.89km
        6:   1.22km x 0.61km
        7:       153m x 153m
        8:     38.2m x 19.1m
        9:     4.77m x 4.77m
       10:    1.19m x 0.596m 
       11:     149mm x 149mm
       12:   37.2mm x 18.6mm</code></pre>
<p>The values in the table represent the maximum dimension at each level of precision: As locations move away from the equator, the dimensions of each cell get smaller.</p>
<p>For a geohash of length 12, the coordinate can be found in a cell having dimension 37.2mm x 18.6mm, which is an impressive level of precision for a 12 character string!</p>
<p>The geohash symbol map consists of 32 characters:</p>
<pre><code>base32 = "0123456789bcdefghjkmnpqrstuvwxyz"</code></pre>
<p><code>base32</code> consists of digits 0 thru 9 plus all lowercase letters excluding <code>a, i, l, o</code>. As the search space is recursively partitioned, each group of 5 bits, when converted to a decimal integer, maps to one of the values in <code>base32</code>.</p>
<p>I’ll present the algorithm first then walkthrough it step-by-step. What follows is a basic implementation of geohashing, which takes as input the latitude and longitude for a point of interest and returns the geohash and bounding box to the specified level of precision:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Very inefficient geohashing subroutine. For demonstration purposes only. </span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_geohash(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>):</span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generate geohash of lat/lon at specified precision.</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    lat: float</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Latitude of point of interest.</span></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    lon: float</span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Longitude of point of interest</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    precision: int</span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Precision of geohash. Higher values result in </span></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        smaller bounding regions.</span></span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    geohash, bbox as list</span></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-25">    base32 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0123456789bcdefghjkmnpqrstuvwxyz"</span></span>
<span id="cb3-26">    bits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-27"></span>
<span id="cb3-28">    min_lat, max_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span></span>
<span id="cb3-29">    min_lon, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span></span>
<span id="cb3-30"></span>
<span id="cb3-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> precision):</span>
<span id="cb3-32"></span>
<span id="cb3-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-34">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bisect longitude (E-W).</span></span>
<span id="cb3-35">            mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> mid_lon:</span>
<span id="cb3-37">                bits.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-38">                min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mid_lon</span>
<span id="cb3-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-40">                bits.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-41">                max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mid_lon</span>
<span id="cb3-42"></span>
<span id="cb3-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bisect latitude (N-S).</span></span>
<span id="cb3-45">            mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> mid_lat:</span>
<span id="cb3-47">                bits.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-48">                min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mid_lat</span>
<span id="cb3-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-50">                bits.append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-51">                max_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mid_lat</span>
<span id="cb3-52"></span>
<span id="cb3-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create single bit string from list of 0/1s. </span></span>
<span id="cb3-54">    bitstr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(ii) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bits])</span>
<span id="cb3-55"></span>
<span id="cb3-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Partition bitstr into groups of 5 bits. </span></span>
<span id="cb3-57">    quints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [bitstr[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ii):(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(precision)]</span>
<span id="cb3-58"></span>
<span id="cb3-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert binary digits to decimal digits to get indices into base32. </span></span>
<span id="cb3-60">    indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(ii, base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> quints]</span>
<span id="cb3-61"></span>
<span id="cb3-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lookup characters associated with each index and concatenate.</span></span>
<span id="cb3-63">    geohash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join([base32[ii] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> indices]) </span>
<span id="cb3-64"></span>
<span id="cb3-65">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># geohash bounding box is just the final, min_lat, min_lon, max_lat, max_lon.</span></span>
<span id="cb3-66">    bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [min_lat, min_lon, max_lat, max_lon]</span>
<span id="cb3-67"></span>
<span id="cb3-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> geohash, bbox</span></code></pre></div>
</div>
<p><br></p>
<p>Within <code>get_geohash</code>, <code>base32</code> represents the 32 character map and <code>bits</code> gets set to an empty list to hold 0s and 1s. The initial minimum and maximum latitudes and longitudes define the bounds of the search space.</p>
<p>The range of iteration is specified as <code>range(5 * precision)</code>. For a geohash having precision=6, the <code>bits</code> list will contain 5 * 6 = 30 values. We multiply by 5 since the <code>base32</code> character map has length 32, and 2^5 bit arrangements cover each of the 32 indices.</p>
<p>If <code>ii</code> is even, we bisect longitude. If <code>lon &gt;= mid_lon</code> we append 1 to <code>bits</code> and update <code>min_lat</code>. Otherwise we append 0 and update <code>max_lon</code>. If <code>ii</code> is odd, we execute the same logic but for latitude. In this way, the final bit string represents interleaved longitude and latitude bits.</p>
<p>Once iteration completes, the individual elements of <code>bits</code> are concatenated into a single bit string <code>bitstr</code>. Next, we partition <code>bitstr</code> into groups of 5 bits (<code>quints</code>), which are converted to decimal integers, which are then used as indices to lookup elements from <code>base32</code>. These characters are concatenated into a single string representing the geohash.</p>
<p>Let’s use <code>get_geohash</code> to determine the level 6 geohash for The Mutual Group home office in West Des Moines, IA (41.58538, -93.71946). <code>bits</code> will consist of 30 1s and 0s:</p>
<pre><code>[0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0]</code></pre>
<p>Which get combined into a single bit string:</p>
<pre><code>'010011111110011100100110100110'</code></pre>
<p>Partitioned into groups of 5 bits:</p>
<pre><code>['01001', '11111', '10011', '10010', '01101', '00110']</code></pre>
<p>Converted to decimal integers:</p>
<pre><code>[9, 31, 19, 18, 13, 6]</code></pre>
<p>Which serve as indices into <code>base32</code>, whose corresponding elements and are concatenated into the geohash:</p>
<pre><code>'9zmke6'</code></pre>
<p><code>get_geohash</code> also returns the bounding box of the precision = 6 geohash:</p>
<pre><code>[41.583251953125, -93.724365234375, 41.5887451171875, -93.71337890625]</code></pre>
<p><br></p>
<p>Let’s compare the results of our implementation against pygeohash to ensure consistency:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygeohash</span>
<span id="cb10-3"></span>
<span id="cb10-4">lat, lon, precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.58538</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">93.71946</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb10-5">gh1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(lat, lon, precision)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-6">gh2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygeohash.encode(latitude<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lat, longitude<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"get_geohash level-6 geohash : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gh1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pygeohash level-6 geohash   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gh2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>get_geohash level-6 geohash : 9zmke6
pygeohash level-6 geohash   : 9zmke6</code></pre>
</div>
</div>
<p><br></p>
<p>We can visualize the precision = 6 geohash using folium:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium </span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> folium.features <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DivIcon</span>
<span id="cb12-4"></span>
<span id="cb12-5"></span>
<span id="cb12-6">lat, lon, precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.58538</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">93.71946</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use our subroutine to get geohash and bounding box. </span></span>
<span id="cb12-9">geohash, bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb12-10"></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unpack bbox.</span></span>
<span id="cb12-12">min_lat, min_lon, max_lat, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bbox</span>
<span id="cb12-13"></span>
<span id="cb12-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get mid_lat and mid_lon for geohash id placement. </span></span>
<span id="cb12-15">mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb12-16">mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb12-17"></span>
<span id="cb12-18">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(</span>
<span id="cb12-19">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], </span>
<span id="cb12-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#width=900, </span></span>
<span id="cb12-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#height=600, </span></span>
<span id="cb12-22">    zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, </span>
<span id="cb12-23">    zoom_control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb12-24">    no_touch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb12-25">    tiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OpenStreetMap"</span></span>
<span id="cb12-26">    )</span>
<span id="cb12-27"></span>
<span id="cb12-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># precision = 6 geohash bounding box. </span></span>
<span id="cb12-29">folium.Rectangle(</span>
<span id="cb12-30">    [(min_lat, min_lon), (max_lat, max_lon)], </span>
<span id="cb12-31">    fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span></span>
<span id="cb12-32">    ).add_to(m)</span>
<span id="cb12-33"></span>
<span id="cb12-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Red dot at Merchandise Mart. </span></span>
<span id="cb12-35">folium.CircleMarker(</span>
<span id="cb12-36">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb12-37">    fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-38">    ).add_to(m)</span>
<span id="cb12-39"></span>
<span id="cb12-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># precision = 6 geohash id.</span></span>
<span id="cb12-41">folium.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>.Marker(</span>
<span id="cb12-42">    [mid_lat, mid_lon],</span>
<span id="cb12-43">    icon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DivIcon(</span>
<span id="cb12-44">        icon_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>),</span>
<span id="cb12-45">        icon_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb12-46">        html<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'&lt;div style="font-size: 40pt"&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>geohash<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/div&gt;'</span>,</span>
<span id="cb12-47">        )</span>
<span id="cb12-48">    ).add_to(m)</span>
<span id="cb12-49"></span>
<span id="cb12-50">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = true;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_1723606a2a68b8dda75030a21465026a {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_1723606a2a68b8dda75030a21465026a&quot; ></div>
        
</body>
<script>
    
    
            var map_1723606a2a68b8dda75030a21465026a = L.map(
                &quot;map_1723606a2a68b8dda75030a21465026a&quot;,
                {
                    center: [41.58538, -93.71946],
                    crs: L.CRS.EPSG3857,
                    zoom: 15,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_b408470fe7956aed4ead3726576ce38e = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_b408470fe7956aed4ead3726576ce38e.addTo(map_1723606a2a68b8dda75030a21465026a);
        
    
            var rectangle_988d6c89ee773a4eb8aa31092cc999bf = L.rectangle(
                [[41.583251953125, -93.724365234375], [41.5887451171875, -93.71337890625]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.15, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_1723606a2a68b8dda75030a21465026a);
        
    
            var circle_marker_6a9a646ea218648c4d32e3c3ae4a018c = L.circleMarker(
                [41.58538, -93.71946],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_1723606a2a68b8dda75030a21465026a);
        
    
            var marker_64882f5e3848da7a72426c2234469af8 = L.marker(
                [41.58599853515625, -93.7188720703125],
                {}
            ).addTo(map_1723606a2a68b8dda75030a21465026a);
        
    
            var div_icon_53dccdd8c168ef17d28c71a0bac848db = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 40pt\&quot;\u003e9zmke6\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [100, 50], &quot;iconSize&quot;: [250, 36]});
            marker_64882f5e3848da7a72426c2234469af8.setIcon(div_icon_53dccdd8c168ef17d28c71a0bac848db);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
</section>
<section id="identify-neighboring-cells" class="level3">
<h3 class="anchored" data-anchor-id="identify-neighboring-cells">Identify Neighboring Cells</h3>
<p><code>get_geohash</code> can be used to help identify cells that neighbor a given geohash. Once the bounding box for the target geohash is known we simply increment those coordinates by a small amount, then lookup the geohash and bounding box associated with the new coordinate:</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2">lat, lon, precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.58538</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">93.71946</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb13-3"></span>
<span id="cb13-4">eps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span></span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center geohash id and bounding box.</span></span>
<span id="cb13-7">geohash, bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb13-8"></span>
<span id="cb13-9">min_lat, min_lon, max_lat, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bbox</span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get geohash id and bounding box for Northwest cell.</span></span>
<span id="cb13-12">gh_nw, bb_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(max_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb13-13"></span>
<span id="cb13-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get geohash id and bounding box for Northeast cell.</span></span>
<span id="cb13-15">gh_ne, bb_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(max_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb13-16"></span>
<span id="cb13-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get geohash id and bounding box for Southeast cell.</span></span>
<span id="cb13-18">gh_se, bb_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb13-19"></span>
<span id="cb13-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get geohash id and bounding box for Southwest cell.</span></span>
<span id="cb13-21">gh_sw, bb_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span></code></pre></div>
</div>
<p><br></p>
<p>Using the results from the NW, NE, SE and SW directions, we obtain the geohashes in the N, S, E and W directions:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For N, get mid point between NE and NW cells.</span></span>
<span id="cb14-3">min_lat_nw, min_lon_nw, max_lat_nw, max_lon_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_nw</span>
<span id="cb14-4">min_lat_ne, min_lon_ne, max_lat_ne, max_lon_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_ne</span>
<span id="cb14-5">n_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat_nw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-6">n_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_ne) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For S, get mid point between SE and SW cells.</span></span>
<span id="cb14-9">min_lat_sw, min_lon_sw, max_lat_sw, max_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_sw</span>
<span id="cb14-10">min_lat_se, min_lon_se, max_lat_se, max_lon_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_se</span>
<span id="cb14-11">s_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat_sw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-12">s_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_se) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For E, get mid point between SE and NE cells.</span></span>
<span id="cb14-15">min_lat_ne, min_lon_ne, max_lat_ne, max_lon_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_ne</span>
<span id="cb14-16">min_lat_se, min_lon_se, max_lat_se, max_lon_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_se</span>
<span id="cb14-17">e_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (max_lat_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_lat_se) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-18">e_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_se) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-19"></span>
<span id="cb14-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For W, get mid point between SW and NW cells.</span></span>
<span id="cb14-21">min_lat_nw, min_lon_nw, max_lat_nw, max_lon_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_nw</span>
<span id="cb14-22">min_lat_sw, min_lon_sw, max_lat_sw, max_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bb_sw</span>
<span id="cb14-23">w_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (max_lat_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_lat_sw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-24">w_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_sw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<p><img src="https://www.jtrive.com/posts/geohash-python/image01.png" class="img-fluid"></p>
<p><br></p>
<p>This logic can be encapsulated within a function identified as <code>get_neighbors</code>:</p>
<div id="cell-13" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_neighbors(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>):</span>
<span id="cb15-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Find 8 adjacent neighbors to geohash associated</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with (lat, lon) at specified precision.</span></span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    lat: float</span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Latitude of point of interest.</span></span>
<span id="cb15-12"></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    lon: float</span></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Longitude of point of interest</span></span>
<span id="cb15-15"></span>
<span id="cb15-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    precision: int</span></span>
<span id="cb15-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Precision of geohash. Higher values result in </span></span>
<span id="cb15-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        smaller bounding regions.</span></span>
<span id="cb15-19"></span>
<span id="cb15-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb15-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb15-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dict</span></span>
<span id="cb15-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb15-24">    dneighbors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb15-25">    eps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span></span>
<span id="cb15-26"></span>
<span id="cb15-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center geohash id and bounding box.</span></span>
<span id="cb15-28">    geohash, bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb15-29">    min_lat, min_lon, max_lat, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bbox</span>
<span id="cb15-30"></span>
<span id="cb15-31">    dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>: geohash, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: bbox}</span>
<span id="cb15-32"></span>
<span id="cb15-33">    dcorners <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb15-34">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nw"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>: max_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>: min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps},</span>
<span id="cb15-35">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ne"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>: max_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>: max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps},</span>
<span id="cb15-36">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sw"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>: min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>: min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps},</span>
<span id="cb15-37">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"se"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>: min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> eps, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>: max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> eps},</span>
<span id="cb15-38">        }</span>
<span id="cb15-39"></span>
<span id="cb15-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dcorners:</span>
<span id="cb15-41">        lat_, lon_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dcorners[kk][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>], dcorners[kk][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>]</span>
<span id="cb15-42">        gh, bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(lat_, lon_, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb15-43">        dneighbors[kk] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>: gh, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: bb}</span>
<span id="cb15-44"></span>
<span id="cb15-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find geohash for N, S, E and W directions.</span></span>
<span id="cb15-46">    min_lat_nw, min_lon_nw, max_lat_nw, max_lon_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nw"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-47">    min_lat_ne, min_lon_ne, max_lat_ne, max_lon_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ne"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-48">    n_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat_nw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-49">    n_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_ne) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-50">    n_gh, n_bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(n_lat, n_lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb15-51">    dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>: n_gh, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: n_bb}</span>
<span id="cb15-52"></span>
<span id="cb15-53">    min_lat_sw, min_lon_sw, max_lat_sw, max_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sw"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-54">    min_lat_se, min_lon_se, max_lat_se, max_lon_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"se"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-55">    s_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat_sw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-56">    s_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_se) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-57">    s_gh, s_bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(s_lat, s_lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb15-58">    dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>: s_gh, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: s_bb}</span>
<span id="cb15-59"></span>
<span id="cb15-60">    min_lat_ne, min_lon_ne, max_lat_ne, max_lon_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ne"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-61">    min_lat_se, min_lon_se, max_lat_se, max_lon_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"se"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-62">    e_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (max_lat_ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_lat_se) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-63">    e_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_se) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-64">    e_gh, e_bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(e_lat, e_lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb15-65">    dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>: e_gh, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: e_bb}</span>
<span id="cb15-66"></span>
<span id="cb15-67">    min_lat_nw, min_lon_nw, max_lat_nw, max_lon_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nw"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-68">    min_lat_sw, min_lon_sw, max_lat_sw, max_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sw"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb15-69">    w_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (max_lat_nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> min_lat_sw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-70">    w_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon_sw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon_sw) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-71">    w_gh, w_bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_geohash(w_lat, w_lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb15-72">    dneighbors[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>: w_gh, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>: w_bb}</span>
<span id="cb15-73"></span>
<span id="cb15-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dneighbors</span></code></pre></div>
</div>
<p>Running <code>get_neighbors</code> and iterating over the results yields:</p>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">lat, lon, precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.58538</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">93.71946</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb16-3"></span>
<span id="cb16-4">dn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_neighbors(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>precision)</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dn:</span>
<span id="cb16-7">    gh, bb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dn[kk][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>], dn[kk][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb16-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>[kk]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: geohash=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, bbox=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-9">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['center']: geohash=9zmke6, bbox=[41.583251953125, -93.724365234375, 41.5887451171875, -93.71337890625]
['nw']: geohash=9zmke5, bbox=[41.5887451171875, -93.7353515625, 41.59423828125, -93.724365234375]
['ne']: geohash=9zmkee, bbox=[41.5887451171875, -93.71337890625, 41.59423828125, -93.702392578125]
['sw']: geohash=9zmke1, bbox=[41.5777587890625, -93.7353515625, 41.583251953125, -93.724365234375]
['se']: geohash=9zmke9, bbox=[41.5777587890625, -93.71337890625, 41.583251953125, -93.702392578125]
['n']: geohash=9zmke7, bbox=[41.5887451171875, -93.724365234375, 41.59423828125, -93.71337890625]
['s']: geohash=9zmke3, bbox=[41.5777587890625, -93.724365234375, 41.583251953125, -93.71337890625]
['e']: geohash=9zmked, bbox=[41.583251953125, -93.71337890625, 41.5887451171875, -93.702392578125]
['w']: geohash=9zmke4, bbox=[41.583251953125, -93.7353515625, 41.5887451171875, -93.724365234375]</code></pre>
</div>
</div>
<p><br></p>
<p>Finally, we can visualize a geohash with its 8 surrounding neighbors:</p>
<div id="cell-17" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium </span>
<span id="cb18-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> folium.features <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DivIcon</span>
<span id="cb18-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb18-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb18-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb18-7"></span>
<span id="cb18-8"></span>
<span id="cb18-9">lat, lon, precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.58538</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">93.71946</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get  geohashes and bounding boxes. </span></span>
<span id="cb18-12">dn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_neighbors(lat, lon, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb18-13"></span>
<span id="cb18-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Separate color for each cell.</span></span>
<span id="cb18-15">fcolors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpl.colormaps[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gist_rainbow"</span>]</span>
<span id="cb18-16">colors_rgba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [fcolors(ii) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dn))]</span>
<span id="cb18-17">colors_hex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [mpl.colors.to_hex(ii, keep_alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> colors_rgba]</span>
<span id="cb18-18"></span>
<span id="cb18-19"></span>
<span id="cb18-20">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(</span>
<span id="cb18-21">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], </span>
<span id="cb18-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># width=900, </span></span>
<span id="cb18-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># height=600, </span></span>
<span id="cb18-24">    zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, </span>
<span id="cb18-25">    zoom_control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb18-26">    no_touch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb18-27">    tiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OpenStreetMap"</span></span>
<span id="cb18-28">    )</span>
<span id="cb18-29"></span>
<span id="cb18-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, kk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dn.keys()):</span>
<span id="cb18-31">    color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colors_hex[ii]</span>
<span id="cb18-32">    geohash, bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dn[kk][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geohash"</span>], dn[kk][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>]</span>
<span id="cb18-33">    min_lat, min_lon, max_lat, max_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bbox</span>
<span id="cb18-34">    mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lat) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb18-35">    mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (min_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_lon) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb18-36">    </span>
<span id="cb18-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># geohash bounding box. </span></span>
<span id="cb18-38">    folium.Rectangle(</span>
<span id="cb18-39">        [(min_lat, min_lon), (max_lat, max_lon)], </span>
<span id="cb18-40">        fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color, fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span></span>
<span id="cb18-41">        ).add_to(m)</span>
<span id="cb18-42">    </span>
<span id="cb18-43">    folium.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>.Marker(</span>
<span id="cb18-44">        [mid_lat, mid_lon],</span>
<span id="cb18-45">        icon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DivIcon(</span>
<span id="cb18-46">            icon_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>),</span>
<span id="cb18-47">            icon_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>),</span>
<span id="cb18-48">            html<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'&lt;div style="font-size: 30pt"&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>geohash<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/div&gt;'</span>,</span>
<span id="cb18-49">            )</span>
<span id="cb18-50">        ).add_to(m)</span>
<span id="cb18-51"></span>
<span id="cb18-52">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = true;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_f8fb5a97424b241040995d41e8a6e427 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_f8fb5a97424b241040995d41e8a6e427&quot; ></div>
        
</body>
<script>
    
    
            var map_f8fb5a97424b241040995d41e8a6e427 = L.map(
                &quot;map_f8fb5a97424b241040995d41e8a6e427&quot;,
                {
                    center: [41.58538, -93.71946],
                    crs: L.CRS.EPSG3857,
                    zoom: 15,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_3fef21eabb61d706ffbde836d81c0130 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_3fef21eabb61d706ffbde836d81c0130.addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var rectangle_31d58377817bb867e3371d8e3a03a8b0 = L.rectangle(
                [[41.583251953125, -93.724365234375], [41.5887451171875, -93.71337890625]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff0029&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var marker_57f3c603961c89d2a8f99f28df4457de = L.marker(
                [41.58599853515625, -93.7188720703125],
                {}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var div_icon_15485c038cf2114f540a146af3bc50fb = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003e9zmke6\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_57f3c603961c89d2a8f99f28df4457de.setIcon(div_icon_15485c038cf2114f540a146af3bc50fb);
        
    
            var rectangle_c48f5140b16fd215159d5dbcf4a7bd14 = L.rectangle(
                [[41.5887451171875, -93.7353515625], [41.59423828125, -93.724365234375]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff8400&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var marker_c4f7107b8182386b852a765a4e8451cc = L.marker(
                [41.59149169921875, -93.7298583984375],
                {}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var div_icon_a29326a4bc63088a642d3d2f304cd13f = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003e9zmke5\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_c4f7107b8182386b852a765a4e8451cc.setIcon(div_icon_a29326a4bc63088a642d3d2f304cd13f);
        
    
            var rectangle_14c8de7e469c7ed87f8af988ff25ae97 = L.rectangle(
                [[41.5887451171875, -93.71337890625], [41.59423828125, -93.702392578125]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#cdff00&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var marker_098086474863e7baee0a7ad9339f0091 = L.marker(
                [41.59149169921875, -93.7078857421875],
                {}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var div_icon_b918a6f13877540d0b53d3497cc88e5e = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003e9zmkee\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_098086474863e7baee0a7ad9339f0091.setIcon(div_icon_b918a6f13877540d0b53d3497cc88e5e);
        
    
            var rectangle_ee99db82cfed962f0f64a8ca97b6cee6 = L.rectangle(
                [[41.5777587890625, -93.7353515625], [41.583251953125, -93.724365234375]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#20ff00&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var marker_bd32acf064cf22cfc123b97253d86659 = L.marker(
                [41.58050537109375, -93.7298583984375],
                {}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var div_icon_4df6bfbe655c80d7353db04a491c40e6 = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003e9zmke1\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_bd32acf064cf22cfc123b97253d86659.setIcon(div_icon_4df6bfbe655c80d7353db04a491c40e6);
        
    
            var rectangle_a0e466eb8595ce6556103c7cf7ce371f = L.rectangle(
                [[41.5777587890625, -93.71337890625], [41.583251953125, -93.702392578125]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#00ff8c&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var marker_cfb530d6520f78808cf7a27afad59a5f = L.marker(
                [41.58050537109375, -93.7078857421875],
                {}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var div_icon_ba3beb3418ba40b33e31955d9e8bdf03 = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003e9zmke9\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_cfb530d6520f78808cf7a27afad59a5f.setIcon(div_icon_ba3beb3418ba40b33e31955d9e8bdf03);
        
    
            var rectangle_5a7d7280781d3abf44b022572258557c = L.rectangle(
                [[41.5887451171875, -93.724365234375], [41.59423828125, -93.71337890625]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#00c6ff&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var marker_954e6740890bb6f873f58bcba5f25552 = L.marker(
                [41.59149169921875, -93.7188720703125],
                {}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var div_icon_10713f695521a133b034b7e1a935219d = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003e9zmke7\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_954e6740890bb6f873f58bcba5f25552.setIcon(div_icon_10713f695521a133b034b7e1a935219d);
        
    
            var rectangle_8fac6ead9d8f27c8bcd00fa4255fedc5 = L.rectangle(
                [[41.5777587890625, -93.724365234375], [41.583251953125, -93.71337890625]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#0018ff&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var marker_2a41c2b15f590dfb871e5223965bf65c = L.marker(
                [41.58050537109375, -93.7188720703125],
                {}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var div_icon_3694dad7fb144f9cc970f4b63a9afe40 = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003e9zmke3\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_2a41c2b15f590dfb871e5223965bf65c.setIcon(div_icon_3694dad7fb144f9cc970f4b63a9afe40);
        
    
            var rectangle_380c45b4d2882b3932ab75ba3eb7fb4a = L.rectangle(
                [[41.583251953125, -93.71337890625], [41.5887451171875, -93.702392578125]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#9600ff&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var marker_9316c9fe8891caaf523ef4af7c6458a8 = L.marker(
                [41.58599853515625, -93.7078857421875],
                {}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var div_icon_d7c34fd89aecaccbec520df4442069bb = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003e9zmked\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_9316c9fe8891caaf523ef4af7c6458a8.setIcon(div_icon_d7c34fd89aecaccbec520df4442069bb);
        
    
            var rectangle_5e1dc083272b898fe575d32f4468b63e = L.rectangle(
                [[41.583251953125, -93.7353515625], [41.5887451171875, -93.724365234375]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff00bf&quot;, &quot;fillOpacity&quot;: 0.25, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var marker_5d1392b9afca153520a2fb641f8d3aa4 = L.marker(
                [41.58599853515625, -93.7298583984375],
                {}
            ).addTo(map_f8fb5a97424b241040995d41e8a6e427);
        
    
            var div_icon_02e98006b9ce518bb3cd9fc527c7f781 = L.divIcon({&quot;className&quot;: &quot;empty&quot;, &quot;html&quot;: &quot;\u003cdiv style=\&quot;font-size: 30pt\&quot;\u003e9zmke4\u003c/div\u003e&quot;, &quot;iconAnchor&quot;: [75, 25], &quot;iconSize&quot;: [250, 36]});
            marker_5d1392b9afca153520a2fb641f8d3aa4.setIcon(div_icon_02e98006b9ce518bb3cd9fc527c7f781);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>As we’ve demonstrated, geohashes are useful because they compactly encode geographic coordinates into strings, enabling efficient location-based indexing and searches. This is useful for data aggregation and protects privacy by providing only approximate locations without revealing exact coordinates.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Geospatial</category>
  <guid>https://www.jtrive.com/posts/geohash-python/geohash-python.html</guid>
  <pubDate>Wed, 04 Dec 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>GIS Algorithms in Python, Part I - Point-to-Point and Point-to-Line Distances</title>
  <link>https://www.jtrive.com/posts/gis-algorithms-in-python-1/gis-algorithms-in-python-1.html</link>
  <description><![CDATA[ 





<p>I’ve been spending time exploring Ningchuan Xiao’s excellent book, <em>GIS Algorithms</em>. This text offers a comprehensive dive into fundamental geospatial concepts including geometric algorithms, spatial indexing, and spatial analysis. The author thoroughly explains the theoretical foundations of each concept and provides practical Python implementations as examples.</p>
<p>In a series of upcoming posts, I’ll break down and share insights on these concepts one-by-one. In this post, we’ll focus on two straightforward geometric algorithms: calculating point-to-point and point-to-line distances. The accompanying code leverages the Shapely library to handle geometric primitives such as points and lines and to validate our custom implementations of each algorithm.</p>
<section id="point-to-point-distance" class="level2">
<h2 class="anchored" data-anchor-id="point-to-point-distance">Point-to-Point Distance</h2>
<p>We begin by computing the distance between two points in a rectilinear coordinate system. This can be accomplished using the Pythagorean theorem. For <img src="https://latex.codecogs.com/png.latex?p_%7B0%7D%20=%20(x_%7B0%7D,%20y_%7B0%7D)"> and <img src="https://latex.codecogs.com/png.latex?p_%7B1%7D%20=%20(x_%7B1%7D,%20y_%7B1%7D)">, the straight line distance <img src="https://latex.codecogs.com/png.latex?D"> between <img src="https://latex.codecogs.com/png.latex?p_%7B0%7D"> and <img src="https://latex.codecogs.com/png.latex?p_%7B2%7D"> is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AD%20=%20%5Csqrt%7B(x_%7B1%7D%20-%20x_%7B0%7D)%5E%7B2%7D%20+%20(y_%7B1%7D%20-%20y_%7B0%7D)%5E%7B2%7D%7D.%0A"></p>
<p>In the next cell, <code>point2point</code> computes the distance between two points using the Pythagorean theorem:</p>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> math <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqrt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> shapely.geometry <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Point</span>
<span id="cb1-4"></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> point2point(p0, p1):</span>
<span id="cb1-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return the distance between p1 and p2. </span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    p0: shapely.geometry.point.Point</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        First point.</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    p1: shapely.geometry.point.Point</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Second point.</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    float</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Straight-line distance between p0 and p1. </span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-23">    x0: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p0.x</span>
<span id="cb1-24">    y0: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p0.y</span>
<span id="cb1-25">    x1: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p1.x</span>
<span id="cb1-26">    y1: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p1.y</span>
<span id="cb1-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sqrt((x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x0)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y0)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-28"></span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define two points.</span></span>
<span id="cb1-31">p0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>)</span>
<span id="cb1-32">p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.</span>)</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute distances using point2point and shapely. </span></span>
<span id="cb1-35">p2p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> point2point(p0, p1)</span>
<span id="cb1-36">shp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p0.distance(p1)</span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Distance using point2point: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p2p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Distance using shapely    : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Distance using point2point: 4.47214
Distance using shapely    : 4.47214</code></pre>
</div>
</div>
<p><br></p>
<p>If it is necessary to compute distance between two points on a sphere separated by a large extent, using <code>point2point</code> will not be accurate. We can instead opt for the haversine formula, which calculates the great-circle distance between two points on the Earth’s surface. It is especially suited for applications where accuracy over large distances is critical. The <code>haversine</code> function in the next cell accepts two points, with <code>x</code> representing longitude and <code>y</code> latitude, and returns the great circle distance between them. To use the haversine formula, it is necessary to specify a value for the radius of the Earth. We use 6,371 km, a generally accepted value for the Earth’s mean radius (see <a href="https://www.movable-type.co.uk/scripts/latlong.html">here</a>):</p>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> math <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asin, cos, sin, radians</span>
<span id="cb3-3"></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_haversine(p0, p1):</span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculate the great circle distance between two points on the earth </span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    (specified in decimal degrees).</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        p0: shapely.geometry.point.Point</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        First point with x = longitude and y = latitude.</span></span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    p1: shapely.geometry.point.Point</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Second point with x = longitude and y = latitude.</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    float</span></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Great circle distance between p0 and p1 in km.</span></span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    References</span></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    http://www.movable-type.co.uk/scripts/latlong.html</span></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-27">    R: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6371.</span></span>
<span id="cb3-28">    lon0: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p0.x</span>
<span id="cb3-29">    lat0: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p0.y</span>
<span id="cb3-30">    lon1: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p1.x</span>
<span id="cb3-31">    lat1: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p1.y</span>
<span id="cb3-32">    </span>
<span id="cb3-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert lat and lon degrees to radians.</span></span>
<span id="cb3-34">    rlon0, rlat0, rlon1, rlat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(radians, (lon0, lat0, lon1, lat1))</span>
<span id="cb3-35">    dlon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rlon1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> rlon0</span>
<span id="cb3-36">    dlat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rlat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> rlat0</span>
<span id="cb3-37">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sin(dlat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cos(rlat0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cos(rlat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sin(dlon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-38">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> asin(sqrt(a))</span>
<span id="cb3-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c</span></code></pre></div>
</div>
<p><br></p>
<p>The pyproj library can be used to validate our haversine distance calculation. <code>p0</code> represents Chicago, Illinois and <code>p1</code> Burlington, Vermont. <code>pyproj.inv</code> returns the distance in meters, so we divide by 1000 to covert to km:</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyproj</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p0 = Chicago, IL, p1 = Burlington, VT. </span></span>
<span id="cb4-5">p0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.6298</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.8781</span>)</span>
<span id="cb4-6">p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">73.2121</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44.4759</span>) </span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute distances using get_haversine and geopy. </span></span>
<span id="cb4-9">get_haversine_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_haversine(p0, p1)</span>
<span id="cb4-10">geodesic <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyproj.Geod(ellps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WGS84"</span>)</span>
<span id="cb4-11">_, _, pyproj_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geodesic.inv(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p0.coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p1.coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Distance (km) via get_haversine: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_haversine_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Distance (km) via pyproj       : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pyproj_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Distance (km) via get_haversine: 1,203
Distance (km) via pyproj       : 1,205</code></pre>
</div>
</div>
<p>The results are very close. We could get them to match exactly by tweaking the value used for the Earth’s radius.</p>
<p><br></p>
</section>
<section id="point-to-line-distance" class="level2">
<h2 class="anchored" data-anchor-id="point-to-line-distance">Point-to-Line Distance</h2>
<p>In Chapter 2 of <em>GIS Algorithms</em>, a general expression for the distance from a point to a line in rectilinear coordinates is presented. The distance <img src="https://latex.codecogs.com/png.latex?D"> is defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AD%20=%20%5Cfrac%7B%7Cax_%7B0%7D%20+%20by_%7B0%7D%20+%20c%7C%7D%7B%5Csqrt%7Ba%5E%7B2%7D%20+%20b%5E%7B2%7D%7D%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?ax_%7B0%7D%20+%20by_%7B0%7D%20+%20c"> is a line on the 2-D plane where <img src="https://latex.codecogs.com/png.latex?a,%20b"> and <img src="https://latex.codecogs.com/png.latex?c"> are constants. To obtain this expression, we calculate the distance from the point to the intersection point <img src="https://latex.codecogs.com/png.latex?(x_%7B1%7D,%20y_%7B1%7D)"> between the line and a perpendicular line passing through <img src="https://latex.codecogs.com/png.latex?(x_%7B0%7D,%20y_%7B0%7D)">.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?L%20=%20ax_%7B0%7D%20+%20by_%7B0%7D%20+%20c">. The slope of the line perpendicular to <img src="https://latex.codecogs.com/png.latex?L"> is <img src="https://latex.codecogs.com/png.latex?b%20/%20a">, therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7By_%7B1%7D%20-%20y_%7B0%7D%7D%7Bx_%7B1%7D%20-%20x_%7B0%7D%7D%20=%20%5Cfrac%7Bb%7D%7Ba%7D,%0A"></p>
<p>resulting in</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aa(y_%7B1%7D%20-%20y_%7B0%7D)%20-%20b(x_%7B1%7D%20-%20x_%7B0%7D)%20=%200.%0A"></p>
<p>Squaring both sides and rearranging yields</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aa%5E%7B2%7D(y_%7B1%7D%20-%20y_%7B0%7D)%5E%7B2%7D%20+%20b%5E%7B2%7D(x_%7B1%7D%20-%20x_%7B0%7D)%5E%7B2%7D%20=%202ab(x_%7B1%7D%20-%20x_%7B0%7D)(y_%7B1%7D%20-%20y_%7B0%7D).%0A"></p>
<p>After adding <img src="https://latex.codecogs.com/png.latex?a%5E%7B2%7D(x_%7B1%7D%20-%20x_%7B0%7D)%5E%7B2%7D%20+%20b%5E%7B2%7D(y_%7B1%7D%20-%20y_%7B0%7D)%5E%7B2%7D"> to both sides, the L.H.S. can be rewritten as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(a%5E%7B2%7D%20+%20b%5E%7B2%7D)%5Cbig((y_%7B1%7D%20-%20y_%7B0%7D)%5E%7B2%7D%20+%20(x_%7B1%7D%20-%20x_%7B0%7D)%5E%7B2%7D%5Cbig),%0A"></p>
<p>and the R.H.S. as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(ax_%7B1%7D%20+%20by_%7B1%7D%20-%20ax_%7B0%7D%20-%20by_%7B0%7D)%5E%7B2%7D.%0A"></p>
<p>Since the intersection point <img src="https://latex.codecogs.com/png.latex?(x_%7B1%7D,%20y_%7B1%7D)"> also falls on the original line <img src="https://latex.codecogs.com/png.latex?L">, <img src="https://latex.codecogs.com/png.latex?ax_%7B1%7D%20+%20by_%7B1%7D%20=%20-c">. Substituting this result within the R.H.S expression above gives us</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(a%5E%7B2%7D%20+%20b%5E%7B2%7D)%5Cbig((y_%7B1%7D%20-%20y_%7B0%7D)%5E%7B2%7D%20+%20(x_%7B1%7D%20-%20x_%7B0%7D)%5E%7B2%7D%5Cbig)%20=%20(ax_%7B0%7D%20+%20by_%7B0%7D%20+%20c)%5E%7B2%7D.%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?(y_%7B1%7D%20-%20y_%7B0%7D)%5E%7B2%7D%20+%20(x_%7B1%7D%20-%20x_%7B0%7D)%5E%7B2%7D"> is the square of the distance between <img src="https://latex.codecogs.com/png.latex?(x_%7B0%7D,%20y_%7B0%7D)"> and <img src="https://latex.codecogs.com/png.latex?L">. Rearranging, we obtain the original expression for <img src="https://latex.codecogs.com/png.latex?D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AD%20=%20%5Cfrac%7B%7Cax_%7B0%7D%20+%20by_%7B0%7D%20+%20c%7C%7D%7B%5Csqrt%7Ba%5E%7B2%7D%20+%20b%5E%7B2%7D%7D%7D.%0A"></p>
<p><br></p>
<p>In order to obtain the values for <img src="https://latex.codecogs.com/png.latex?a,%20b"> and <img src="https://latex.codecogs.com/png.latex?c">, we assume two endpoints that define a line segment <img src="https://latex.codecogs.com/png.latex?(x_%7B1%7D,%20y_%7B1%7D)"> and <img src="https://latex.codecogs.com/png.latex?(x_%7B2%7D,%20y_%7B2%7D)">. Let</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Adx%20&amp;=%20x_%7B1%7D%20-%20x_%7B2%7D%5C%5C%0Ady%20&amp;=%20y_%7B1%7D%20-%20y_%7B2%7D%5C%5C%0Ay%20&amp;=%20%5Cfrac%7Bdy%7D%7Bdx%7Dx%20+%20n,%0A%5Cend%7Balign*%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?n"> is a constant we need to compute. Plugging <img src="https://latex.codecogs.com/png.latex?(x_%7B1%7D,%20y_%7B1%7D)"> into the last equation and solving for <img src="https://latex.codecogs.com/png.latex?n"> yields</p>
<p><img src="https://latex.codecogs.com/png.latex?%0An%20=%20y_%7B1%7D%20-%20%5Cfrac%7Bdy%7D%7Bdx%7Dx_%7B1%7D.%0A"></p>
<p>Thus, a general form for the line can be expressed as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay%20=%20%5Cfrac%7Bdy%7D%7Bdx%7Dx%20+%20y_%7B1%7D%20-%20%5Cfrac%7Bdy%7D%7Bdx%7Dx_%7B1%7D.%0A"></p>
<p>Multiplying through by <img src="https://latex.codecogs.com/png.latex?dx"> and rearranging results in</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Axdy%20-%20ydx%20+%20y_%7B1%7Ddx%20-x_%7B1%7Ddy%20=%200.%0A"></p>
<p>Referring back to our original expression for <img src="https://latex.codecogs.com/png.latex?L">, it is easy to see that</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0Aa%20&amp;=%20dy%5C%5C%0Ab%20&amp;=%20-dx%5C%5C%0Ac%20&amp;=%20y_%7B1%7Ddx%20-%20x_%7B1%7Ddy.%0A%5Cend%7Balign*%7D%0A"></p>
<p><br></p>
<p>Given a point <img src="https://latex.codecogs.com/png.latex?(x_%7B0%7D,%20y_%7B0%7D)"> and a line segment <img src="https://latex.codecogs.com/png.latex?L"> defined by two endpoints <img src="https://latex.codecogs.com/png.latex?(x_%7B1%7D,%20y_%7B1%7D)"> and <img src="https://latex.codecogs.com/png.latex?(x_%7B2%7D,%20y_%7B2%7D)">, we can now determine the distance from <img src="https://latex.codecogs.com/png.latex?(x_%7B0%7D,%20y_%7B0%7D)"> to the intersection point between <img src="https://latex.codecogs.com/png.latex?L"> and the perpendicular line passing through <img src="https://latex.codecogs.com/png.latex?(x_%7B0%7D,%20y_%7B0%7D)">:</p>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> shapely.geometry <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LineString</span>
<span id="cb6-3"></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> point2line(p, l):</span>
<span id="cb6-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute distance between point p and line l.</span></span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    p: shapely.geometry.point.Point</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Point of interest.</span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    l: shapely.geometry.linestring.LineString</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Line defined by two end points. </span></span>
<span id="cb6-15"></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    float</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Distance from p to l. </span></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get endpoints from l. </span></span>
<span id="cb6-22">    p1, p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l.coords[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb6-23">    x0: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.x</span>
<span id="cb6-24">    y0: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.y</span>
<span id="cb6-25">    x1: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-26">    y1: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb6-27">    x2: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-28">    y2: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb6-29">    dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x2</span>
<span id="cb6-30">    dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y2</span>
<span id="cb6-31">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dy</span>
<span id="cb6-32">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dx</span>
<span id="cb6-33">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dy</span>
<span id="cb6-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sqrt(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<p><br></p>
<p>We create a line and point and use <code>point2line</code> to calculate the distance. The distance is also calculated using shapely for verification:</p>
<div id="cell-11" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>)</span>
<span id="cb7-3">l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LineString([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>], [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.</span>]])</span>
<span id="cb7-4"></span>
<span id="cb7-5">point2line_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> point2line(p, l)</span>
<span id="cb7-6">shapely_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.distance(l)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"point2line distance: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>point2line_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"shapely distance   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shapely_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>point2line distance: 5.58440
shapely distance   : 5.58440</code></pre>
</div>
</div>
<p><br></p>
<p>Let’s visualize <code>p</code> and <code>l</code>, along with the line perpendicular to <code>l</code> passing through <code>p</code>:</p>
<div id="cell-13" class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine slope and intercept of line perpendicular to l passing through p.</span></span>
<span id="cb9-5">x0, y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p.coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-6">(x1, y1), (x2, y2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l.coords[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get slope and intercept of l.</span></span>
<span id="cb9-9">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x1)</span>
<span id="cb9-10">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x1</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get slope of line perpendicular to l.</span></span>
<span id="cb9-13">mp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> m</span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get intercept of line perpendicular to l that passes through (x0, y0).</span></span>
<span id="cb9-16">bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x0</span>
<span id="cb9-17"></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine x and y where l and line perpendicular to l intersect. </span></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The two points that define the line perpendicular to l are (x0, y0) </span></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and (x_intersect, y_intersect).</span></span>
<span id="cb9-21">x_intersect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (bp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mp)</span>
<span id="cb9-22">y_intersect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_intersect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group coordinates for plotting.</span></span>
<span id="cb9-25">xx, yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x1, x2], [y1, y2]</span>
<span id="cb9-26">xxp, yyp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x0, x_intersect], [y0, y_intersect]</span>
<span id="cb9-27"></span>
<span id="cb9-28"></span>
<span id="cb9-29">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb9-30"></span>
<span id="cb9-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot point p.</span></span>
<span id="cb9-32">ax.plot(x0, y0, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original point"</span>)</span>
<span id="cb9-33"></span>
<span id="cb9-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot line segment l.</span></span>
<span id="cb9-35">ax.plot(xx, yy, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original line"</span>)</span>
<span id="cb9-36"></span>
<span id="cb9-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot line segment perpendicular to l.</span></span>
<span id="cb9-38">ax.plot(xxp, yyp, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"perpendicular line"</span>)</span>
<span id="cb9-39"></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot intersection point.</span></span>
<span id="cb9-41">ax.plot(x_intersect, y_intersect, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"intersection point"</span>)</span>
<span id="cb9-42"></span>
<span id="cb9-43">ax.annotate(</span>
<span id="cb9-44">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x0, y0), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, </span>
<span id="cb9-45">    textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset points"</span>, xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, </span>
<span id="cb9-46">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span></span>
<span id="cb9-47">) </span>
<span id="cb9-48"></span>
<span id="cb9-49">ax.annotate(</span>
<span id="cb9-50">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x0, y0), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset points"</span>, </span>
<span id="cb9-51">    xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span></span>
<span id="cb9-52">) </span>
<span id="cb9-53"></span>
<span id="cb9-54">ax.annotate(</span>
<span id="cb9-55">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_intersect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_intersect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x_intersect, y_intersect), </span>
<span id="cb9-56">    xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset points"</span>, </span>
<span id="cb9-57">    xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span></span>
<span id="cb9-58">) </span>
<span id="cb9-59"></span>
<span id="cb9-60">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb9-61">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb9-62">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb9-63">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb9-64">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb9-65">ax.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb9-66">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/gis-algorithms-in-python-1/gis-algorithms-in-python-1_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Since we have the endpoints of the line perpendicular to <code>l</code> passing through <code>p</code>, we can show that <code>point2point</code> returns the same distance as <code>point2line</code>:</p>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2">p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(x0, y0)</span>
<span id="cb10-3">p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Point(x_intersect, y_intersect)</span>
<span id="cb10-4"></span>
<span id="cb10-5">point2point(p1, p2)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>5.584403908234904</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Geospatial</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/gis-algorithms-in-python-1/gis-algorithms-in-python-1.html</guid>
  <pubDate>Fri, 22 Nov 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>The Bootstrap Chain Ladder from Scratch using Pandas</title>
  <link>https://www.jtrive.com/posts/boostrap-chainladder-pandas/bootstrap-chainladder-pandas.html</link>
  <description><![CDATA[ 





<p>The bootstrap chain ladder is a statistical technique used in actuarial reserving to project future claim liabilities based on historical data. It builds upon the chain ladder method, but the chain ladder method by itself does not provide a measure of the uncertainty in its projections, which is where the bootstrap technique comes in. The bootstrap chain ladder provides an empirical distribution of reserve estimates, which can be used to quantify the uncertainty and variability around the estimates generated by the chain ladder.</p>
<p>The bootstrap chain ladder works by repeatedly resampling residuals from the original chain ladder model and creating a series of simulated datasets, each of which mimics the original data in its pattern of claims development. The most commonly used approach was originally outlined by England and Verrall in <a href="https://www.actuaries.org.uk/system/files/documents/pdf/sm0201.pdf"><em>Stochastic Claims Reserving in General Insurance</em></a>, which notably described a technique that can be used to incorporate process variance, allowing for the quantification of the full prediction error of the total needed reserve.</p>
<p>The bootstrap chain ladder is simple from a technical standpoint, but it is worth highlighting the DataFrame operations required to implement the full algorithm. The code used here leverages the Pandas library, but a future post will reproduce the full estimator pipeline using Polars.</p>
<p>Much of what follows is a direct implementation of Appendix 3 from <em>Two Approaches to Calculating Correlated Reserve Indications Across Multiple Lines of Business</em>, Kirshner, et. al.&nbsp;Also, many of the DataFrame operations exhibited here can be implemented more efficiently, but the goal of this article was to present the bootstrap chain ladder with maximal clarity rather than focusing on optimal performance.</p>
<p>The steps to perform the bootstrap chain ladder:</p>
<ol type="1">
<li><p>Transform loss data into cumulative triangle representation.</p></li>
<li><p>Calculate all-year volume weighted age-to-age factors.</p></li>
<li><p>Calculate the cumulative fitted triangle by applying backwards recursion, beginning with the observed cumulative losses from the latest diagonal.</p></li>
<li><p>Calculate the unscaled Pearson residuals, <img src="https://latex.codecogs.com/png.latex?r_%7Bp%7D">, degrees of freedom <img src="https://latex.codecogs.com/png.latex?DF"> and scale parameter <img src="https://latex.codecogs.com/png.latex?%5Cphi">.</p></li>
<li><p>Calculate the adjusted Pearson residuals, defined as <img src="https://latex.codecogs.com/png.latex?r_%7Bp%7D%5E%7B%7Badj%7D%7D%20=%20%5Csqrt%7B%5Cfrac%7Bn%7D%7BDF%7D%7D%20%5Ctimes%20r_%7Bp%7D">.</p></li>
<li><p>For each bootstrap sample (1…1000):</p>
<ol type="i">
<li><p>Generate a sample from the adjusted Pearson residuals <img src="https://latex.codecogs.com/png.latex?r_%7Bp%7D%5E%7B%7Badj%7D%7D"> with replacement.</p></li>
<li><p>Using the sampled adjusted Pearson residuals and fitted incremental triangle <img src="https://latex.codecogs.com/png.latex?m">, construct the triangle of sampled incremental losses <img src="https://latex.codecogs.com/png.latex?I_%7Bi%7D%20=%20m%20+%20%5Chat%7Br%7D_%7Bp%7D%5E%7Badj%7D%20%5Csqrt%7Bm%7D">, where <img src="https://latex.codecogs.com/png.latex?%5Chat%7Br%7D_%7Bp%7D%5E%7Badj%7D"> represents a sample with replacement from the adjusted Pearson residuals and <img src="https://latex.codecogs.com/png.latex?m"> the fitted incremental triangle.</p></li>
<li><p>Create a cumulative triangle using the result from ii., and project future losses using the chain ladder method.</p></li>
<li><p>Incorporate process variance by simulating each future projected incremental loss from a gamma distribution parameterized with mean equal to the projected loss value and variance the loss value times <img src="https://latex.codecogs.com/png.latex?%5Cphi">.</p></li>
<li><p>Cumulate the incremental losses, then compute the total needed reserve as the ultimate projected value minus the latest cumulative loss amount by origin period.</p></li>
</ol></li>
<li><p>Compute desired quantiles of interest from predictive distribution of bootstrap samples.</p></li>
</ol>
<p><br></p>
<p>In what follows each step is demonstrated, along with exhibits to visually assess the distribution of future losses.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext watermark</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-9"></span>
<span id="cb1-10">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-11">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"display.precision"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-12">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-13">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-14">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-15">warnings.simplefilter(action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>, category<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">FutureWarning</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>watermark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>conda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>hostname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>machine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>iversions</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Python implementation: CPython
Python version       : 3.11.10
IPython version      : 8.28.0

conda environment: py311

Compiler    : MSC v.1941 64 bit (AMD64)
OS          : Windows
Release     : 10
Machine     : AMD64
Processor   : Intel64 Family 6 Model 170 Stepping 4, GenuineIntel
CPU cores   : 22
Architecture: 64bit

Hostname: JTRIZPC11

numpy     : 2.1.0
pandas    : 2.2.2
matplotlib: 3.9.2
</code></pre>
</div>
</div>
<p>Begin by loading the data from GitHub and transforming it into an incremental triangle:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load RAA dataset. </span></span>
<span id="cb3-3">dfraa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/976c80786a6e97cce7483e306562f85b/raw/06a5c8b1f823fbe2b6da15f90a672517fa5b4571/RAA.csv"</span>)</span>
<span id="cb3-4">dfraa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfraa.sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEV"</span>])</span>
<span id="cb3-5">tri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfraa.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEV"</span>).rename_axis(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb3-6">tri0.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.columns.droplevel(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-7">tri0.columns.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original incremental loss triangle:"</span>)</span>
<span id="cb3-10"></span>
<span id="cb3-11">tri0</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original incremental loss triangle:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1981</td>
<td>5012.0</td>
<td>3257.0</td>
<td>2638.0</td>
<td>898.0</td>
<td>1734.0</td>
<td>2642.0</td>
<td>1828.0</td>
<td>599.0</td>
<td>54.0</td>
<td>172.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1982</td>
<td>106.0</td>
<td>4179.0</td>
<td>1111.0</td>
<td>5270.0</td>
<td>3116.0</td>
<td>1817.0</td>
<td>-103.0</td>
<td>673.0</td>
<td>535.0</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1983</td>
<td>3410.0</td>
<td>5582.0</td>
<td>4881.0</td>
<td>2268.0</td>
<td>2594.0</td>
<td>3479.0</td>
<td>649.0</td>
<td>603.0</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1984</td>
<td>5655.0</td>
<td>5900.0</td>
<td>4211.0</td>
<td>5500.0</td>
<td>2159.0</td>
<td>2658.0</td>
<td>984.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1985</td>
<td>1092.0</td>
<td>8473.0</td>
<td>6271.0</td>
<td>6333.0</td>
<td>3786.0</td>
<td>225.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1986</td>
<td>1513.0</td>
<td>4932.0</td>
<td>5257.0</td>
<td>1233.0</td>
<td>2917.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1987</td>
<td>557.0</td>
<td>3463.0</td>
<td>6926.0</td>
<td>1368.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1988</td>
<td>1351.0</td>
<td>5596.0</td>
<td>6165.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1989</td>
<td>3133.0</td>
<td>2262.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1990</td>
<td>2063.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>A number of functions are defined that will be used throughout the remainder of the article:</p>
<ul>
<li><p><code>to_cum</code>: Accepts an incremental triangle and returns a cumulative triangle.</p></li>
<li><p><code>to_incr</code>: Accepts a cumulative triangle and returns an incremental triangle.</p></li>
<li><p><code>get_a2a_factors</code>: Accepts a cumulative triangle and returns the all-year volume weighted age-to-age factors.</p></li>
<li><p><code>get_latest</code>: Accepts a triangle and returns the value at the latest development period by origin.</p></li>
<li><p><code>square_tri</code>: Accepts a cumulative triangle and set of age-to-age factors and projects future losses, populating the lower-right of the original cumulative triangle.</p></li>
</ul>
<p><br></p>
<p>For <code>get_a2a_factors</code>, <code>get_latest</code> and <code>square_tri</code>, a few simplifying assumptions have been made:</p>
<ol type="1">
<li>The triangles under consideration have an equal number of development and origin periods.</li>
<li>Development periods are sequential starting with 1.</li>
<li>No tail factor is included.</li>
</ol>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> to_cum(tri: pd.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.DataFrame:</span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Accepts a DataFrame structured as an incremental triangle and </span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    returns a cumulative triangle.</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tri : pd.DataFrame</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Incremental triangle.</span></span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pd.DataFrame</span></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Cumulative triangle</span></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tri.cumsum(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-18"></span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> to_incr(tri: pd.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.DataFrame:</span>
<span id="cb5-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Accepts a DataFrame structured as an cumulative triangle and </span></span>
<span id="cb5-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    returns an incremental triangle.</span></span>
<span id="cb5-24"></span>
<span id="cb5-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb5-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tri : pd.DataFrame</span></span>
<span id="cb5-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Cumulative triangle.</span></span>
<span id="cb5-29"></span>
<span id="cb5-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb5-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb5-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pd.DataFrame</span></span>
<span id="cb5-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Incremental triangle.       </span></span>
<span id="cb5-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-35">    tri_incr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.diff(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-36">    tri_incr.iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tri_incr</span>
<span id="cb5-38"></span>
<span id="cb5-39"></span>
<span id="cb5-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_a2a_factors(tri: pd.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.Series:</span>
<span id="cb5-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculate all-year volume weighted age-to-age factors. </span></span>
<span id="cb5-43"></span>
<span id="cb5-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb5-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb5-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tri : pd.DataFrame</span></span>
<span id="cb5-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Cumulative triangle.</span></span>
<span id="cb5-48"></span>
<span id="cb5-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb5-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb5-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pd.Series</span></span>
<span id="cb5-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        All-year volume weighted age-to-age factors.</span></span>
<span id="cb5-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-54">    all_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.columns.tolist()</span>
<span id="cb5-55">    min_origin, max_origin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), tri.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb5-56">    dps0, dps1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_devps[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], all_devps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]  </span>
<span id="cb5-57">    a2a_headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>jj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, jj <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(dps0, dps1)]</span>
<span id="cb5-58">    a2a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-59"></span>
<span id="cb5-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dp1, dp0 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(dps1[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], dps0[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb5-61">        vals1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.loc[min_origin:(max_origin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dp0), dp1].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb5-62">        vals0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.loc[min_origin:(max_origin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dp0), dp0].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb5-63">        a2a.append((vals1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> vals0).item())</span>
<span id="cb5-64"></span>
<span id="cb5-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pd.Series(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a2a[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a2a_headers)</span>
<span id="cb5-66">    </span>
<span id="cb5-67"></span>
<span id="cb5-68"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_latest(tri: pd.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.Series:</span>
<span id="cb5-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return the value at the latest development period by origin. </span></span>
<span id="cb5-71"></span>
<span id="cb5-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb5-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb5-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tri : pd.DataFrame</span></span>
<span id="cb5-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Cumulative or incremental triangle.</span></span>
<span id="cb5-76"></span>
<span id="cb5-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb5-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb5-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pd.Series</span></span>
<span id="cb5-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-81">    nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-82">    latest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tri.iat[ii, nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].item() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_devps)]</span>
<span id="cb5-83">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pd.Series(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>latest, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tri.index, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest"</span>)</span>
<span id="cb5-84"></span>
<span id="cb5-85"></span>
<span id="cb5-86"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square_tri(tri: pd.DataFrame, a2a: pd.Series) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.DataFrame:</span>
<span id="cb5-87">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Project future losses for `tri` using `a2a`.</span></span>
<span id="cb5-89"></span>
<span id="cb5-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb5-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb5-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tri : pd.DataFrame</span></span>
<span id="cb5-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Cumulative triangle.</span></span>
<span id="cb5-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb5-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    a2a: pd.Series</span></span>
<span id="cb5-96"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Age-to-age factors.</span></span>
<span id="cb5-97"></span>
<span id="cb5-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb5-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb5-100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pd.DataFrame</span></span>
<span id="cb5-101"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Original triangle with projected future losses. </span></span>
<span id="cb5-102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-103">    nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-104">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbr_devps):</span>
<span id="cb5-105">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> r_idx, nbr_devps):</span>
<span id="cb5-106">            tri.iat[r_idx, c_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri.iat[r_idx, c_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a2a.iat[c_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-107">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tri</span></code></pre></div>
</div>
<p><br></p>
<p>Use <code>to_cum</code> to get a cumulative triangle:</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">ctri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_cum(tri0)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original cumulative triangle:"</span>)</span>
<span id="cb6-5"></span>
<span id="cb6-6">ctri0</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original cumulative triangle:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1981</td>
<td>5012.0</td>
<td>8269.0</td>
<td>10907.0</td>
<td>11805.0</td>
<td>13539.0</td>
<td>16181.0</td>
<td>18009.0</td>
<td>18608.0</td>
<td>18662.0</td>
<td>18834.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1982</td>
<td>106.0</td>
<td>4285.0</td>
<td>5396.0</td>
<td>10666.0</td>
<td>13782.0</td>
<td>15599.0</td>
<td>15496.0</td>
<td>16169.0</td>
<td>16704.0</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1983</td>
<td>3410.0</td>
<td>8992.0</td>
<td>13873.0</td>
<td>16141.0</td>
<td>18735.0</td>
<td>22214.0</td>
<td>22863.0</td>
<td>23466.0</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1984</td>
<td>5655.0</td>
<td>11555.0</td>
<td>15766.0</td>
<td>21266.0</td>
<td>23425.0</td>
<td>26083.0</td>
<td>27067.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1985</td>
<td>1092.0</td>
<td>9565.0</td>
<td>15836.0</td>
<td>22169.0</td>
<td>25955.0</td>
<td>26180.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1986</td>
<td>1513.0</td>
<td>6445.0</td>
<td>11702.0</td>
<td>12935.0</td>
<td>15852.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1987</td>
<td>557.0</td>
<td>4020.0</td>
<td>10946.0</td>
<td>12314.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1988</td>
<td>1351.0</td>
<td>6947.0</td>
<td>13112.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1989</td>
<td>3133.0</td>
<td>5395.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1990</td>
<td>2063.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Calculate the all-year volume weighted age-to-age factors</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%20%20f_%7Bk%7D%20&amp;=%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn-k%7D%0AC_%7Bi,k+1%7D%7D%7B%5Csum_%7Bi=1%7D%5E%7Bn-k%7DC_%7Bi,k%7D%7D%0A%5Cend%7Baligned%7D,%0A"></p>
<p>for development period <img src="https://latex.codecogs.com/png.latex?i">.</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2">a2a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_a2a_factors(ctri0)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"All-year volume weighted age-to-age factors:"</span>)</span>
<span id="cb8-5"></span>
<span id="cb8-6">a2a</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>All-year volume weighted age-to-age factors:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>1-2     2.99936
2-3     1.62352
3-4     1.27089
4-5     1.17167
5-6     1.11338
6-7     1.04193
7-8     1.03326
8-9     1.01694
9-10    1.00922
dtype: float64</code></pre>
</div>
</div>
<p><br></p>
<p>Although not required here, age-to-ultimate factors can be obtained as follows:</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2">a2u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.cumprod(a2a[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age-to-ultimate factors:"</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6">a2u</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Age-to-ultimate factors:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>1-2     8.92023
2-3     2.97405
3-4     1.83185
4-5     1.44139
5-6     1.23020
6-7     1.10492
7-8     1.06045
8-9     1.02631
9-10    1.00922
dtype: float64</code></pre>
</div>
</div>
<p><br></p>
<p>Calculate the cumulative fitted triangle by applying backwards recursion, beginning with the observed cumulative losses from the latest diagonal.</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2">nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctri0.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create empty triangle with same shape as tri0. </span></span>
<span id="cb14-5">ctri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tri0.columns, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tri0.index, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, origin <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(ctri0.index):</span>
<span id="cb14-8"></span>
<span id="cb14-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine latest development period.</span></span>
<span id="cb14-10">    latest_devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> idx</span>
<span id="cb14-11"></span>
<span id="cb14-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set latest diagonal of tri to same value as in tri0.</span></span>
<span id="cb14-13">    ctri.at[origin, latest_devp] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctri0.at[origin, latest_devp]</span>
<span id="cb14-14"></span>
<span id="cb14-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use backward recursion to un-develop triangle using a2a. </span></span>
<span id="cb14-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> devp <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(latest_devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb14-17">        ctri.at[origin, devp] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ctri.at[origin, devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a2a.iloc[devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb14-18"></span>
<span id="cb14-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fitted cumulative triangle:"</span>)</span>
<span id="cb14-20"></span>
<span id="cb14-21">ctri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fitted cumulative triangle:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1981</td>
<td>2111.37961</td>
<td>6332.78471</td>
<td>10281.42007</td>
<td>13066.53458</td>
<td>15309.72711</td>
<td>17045.61877</td>
<td>17760.42062</td>
<td>18351.19533</td>
<td>18662.0</td>
<td>18834.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1982</td>
<td>1889.85559</td>
<td>5668.35472</td>
<td>9202.70287</td>
<td>11695.60570</td>
<td>13703.44452</td>
<td>15257.20801</td>
<td>15897.01351</td>
<td>16425.80467</td>
<td>16704.0</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1983</td>
<td>2699.85868</td>
<td>8097.84449</td>
<td>13147.03479</td>
<td>16708.41026</td>
<td>19576.82046</td>
<td>21796.53602</td>
<td>22710.56587</td>
<td>23466.00000</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1984</td>
<td>3217.75667</td>
<td>9651.20632</td>
<td>15668.95306</td>
<td>19913.48622</td>
<td>23332.12666</td>
<td>25977.63719</td>
<td>27067.00000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1985</td>
<td>3242.82263</td>
<td>9726.38811</td>
<td>15791.01241</td>
<td>20068.60999</td>
<td>23513.88125</td>
<td>26180.00000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1986</td>
<td>2186.16501</td>
<td>6557.09292</td>
<td>10645.58956</td>
<td>13529.35325</td>
<td>15852.00000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1987</td>
<td>1989.77995</td>
<td>5968.06372</td>
<td>9689.28724</td>
<td>12314.00000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1988</td>
<td>2692.66398</td>
<td>8076.26500</td>
<td>13112.00000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1989</td>
<td>1798.71787</td>
<td>5395.00000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1990</td>
<td>2063.00000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Calculate the unscaled Pearson residuals, <img src="https://latex.codecogs.com/png.latex?r_%7Bp%7D">, degrees of freedom <img src="https://latex.codecogs.com/png.latex?DF"> and scale parameter <img src="https://latex.codecogs.com/png.latex?%5Cphi">.</p>
<p>The unscaled Pearson residuals are defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ar_%7Bp%7D%20=%20%5Cfrac%7BI%20-%20m%7D%7B%5Csqrt%7Bm%7D%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?I"> represents actual incremental losses and <img src="https://latex.codecogs.com/png.latex?m"> fitted incremental losses.</p>
<p>To get incremental representations of <code>ctri0</code> and <code>ctri</code>, do:</p>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Actual incremental triangle.</span></span>
<span id="cb16-3">tri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_incr(ctri0)</span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual incremental triangle tri0:"</span>)</span>
<span id="cb16-6"></span>
<span id="cb16-7">tri0</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Actual incremental triangle tri0:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1981</td>
<td>5012.0</td>
<td>3257.0</td>
<td>2638.0</td>
<td>898.0</td>
<td>1734.0</td>
<td>2642.0</td>
<td>1828.0</td>
<td>599.0</td>
<td>54.0</td>
<td>172.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1982</td>
<td>106.0</td>
<td>4179.0</td>
<td>1111.0</td>
<td>5270.0</td>
<td>3116.0</td>
<td>1817.0</td>
<td>-103.0</td>
<td>673.0</td>
<td>535.0</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1983</td>
<td>3410.0</td>
<td>5582.0</td>
<td>4881.0</td>
<td>2268.0</td>
<td>2594.0</td>
<td>3479.0</td>
<td>649.0</td>
<td>603.0</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1984</td>
<td>5655.0</td>
<td>5900.0</td>
<td>4211.0</td>
<td>5500.0</td>
<td>2159.0</td>
<td>2658.0</td>
<td>984.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1985</td>
<td>1092.0</td>
<td>8473.0</td>
<td>6271.0</td>
<td>6333.0</td>
<td>3786.0</td>
<td>225.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1986</td>
<td>1513.0</td>
<td>4932.0</td>
<td>5257.0</td>
<td>1233.0</td>
<td>2917.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1987</td>
<td>557.0</td>
<td>3463.0</td>
<td>6926.0</td>
<td>1368.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1988</td>
<td>1351.0</td>
<td>5596.0</td>
<td>6165.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1989</td>
<td>3133.0</td>
<td>2262.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1990</td>
<td>2063.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-17" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fitted incremental triangle.</span></span>
<span id="cb18-3">tri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_incr(ctri)</span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fitted incremental triangle tri:"</span>)</span>
<span id="cb18-6"></span>
<span id="cb18-7">tri</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fitted incremental triangle tri:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1981</td>
<td>2111.37961</td>
<td>4221.40510</td>
<td>3948.63536</td>
<td>2785.11450</td>
<td>2243.19253</td>
<td>1735.89167</td>
<td>714.80185</td>
<td>590.77471</td>
<td>310.80467</td>
<td>172.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1982</td>
<td>1889.85559</td>
<td>3778.49913</td>
<td>3534.34815</td>
<td>2492.90283</td>
<td>2007.83882</td>
<td>1553.76350</td>
<td>639.80549</td>
<td>528.79116</td>
<td>278.19533</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1983</td>
<td>2699.85868</td>
<td>5397.98581</td>
<td>5049.19030</td>
<td>3561.37547</td>
<td>2868.41020</td>
<td>2219.71556</td>
<td>914.02985</td>
<td>755.43413</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1984</td>
<td>3217.75667</td>
<td>6433.44965</td>
<td>6017.74674</td>
<td>4244.53316</td>
<td>3418.64044</td>
<td>2645.51053</td>
<td>1089.36281</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1985</td>
<td>3242.82263</td>
<td>6483.56548</td>
<td>6064.62430</td>
<td>4277.59759</td>
<td>3445.27126</td>
<td>2666.11875</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1986</td>
<td>2186.16501</td>
<td>4370.92792</td>
<td>4088.49664</td>
<td>2883.76369</td>
<td>2322.64675</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1987</td>
<td>1989.77995</td>
<td>3978.28376</td>
<td>3721.22352</td>
<td>2624.71276</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1988</td>
<td>2692.66398</td>
<td>5383.60102</td>
<td>5035.73500</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1989</td>
<td>1798.71787</td>
<td>3596.28213</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1990</td>
<td>2063.00000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>The unscaled Pearson residuals are then calculated element-wise:</p>
<div id="cell-19" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2">r_us <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tri) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> tri.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.sqrt)</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unscaled Pearson residuals:"</span>)</span>
<span id="cb20-5"></span>
<span id="cb20-6">r_us</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unscaled Pearson residuals:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1981</td>
<td>63.12592</td>
<td>-14.84332</td>
<td>-20.85731</td>
<td>-35.75829</td>
<td>-10.75100</td>
<td>21.74797</td>
<td>41.63702</td>
<td>0.33841</td>
<td>-14.56663</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1982</td>
<td>-41.03414</td>
<td>6.51544</td>
<td>-40.76253</td>
<td>55.62095</td>
<td>24.73082</td>
<td>6.67811</td>
<td>-29.36643</td>
<td>6.27119</td>
<td>15.39671</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1983</td>
<td>13.66703</td>
<td>2.50458</td>
<td>-2.36696</td>
<td>-21.67284</td>
<td>-5.12365</td>
<td>26.72854</td>
<td>-8.76627</td>
<td>-5.54605</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1984</td>
<td>42.96574</td>
<td>-6.65076</td>
<td>-23.29058</td>
<td>19.27038</td>
<td>-21.54368</td>
<td>0.24282</td>
<td>-3.19228</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1985</td>
<td>-37.76965</td>
<td>24.70715</td>
<td>2.65007</td>
<td>31.42656</td>
<td>5.80493</td>
<td>-47.27692</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1986</td>
<td>-14.39727</td>
<td>8.48656</td>
<td>18.27461</td>
<td>-30.74009</td>
<td>12.33255</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1987</td>
<td>-32.12011</td>
<td>-8.16956</td>
<td>52.53574</td>
<td>-24.52986</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1988</td>
<td>-25.85548</td>
<td>2.89478</td>
<td>15.91345</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1989</td>
<td>31.46054</td>
<td>-22.24953</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1990</td>
<td>0.00000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p><img src="https://latex.codecogs.com/png.latex?DF%20=%20n%20-%20p">, where <img src="https://latex.codecogs.com/png.latex?n"> is the number of populated cells in the original triangle and <img src="https://latex.codecogs.com/png.latex?p"> the number of parameters in the chain ladder model (10 for origin period and 9 for development period):</p>
<div id="cell-21" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"></span>
<span id="cb22-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.count().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb22-3">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.index.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tri0.columns.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb22-4">DF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p</span>
<span id="cb22-5"></span>
<span id="cb22-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Degrees of freedom: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DF<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Degrees of freedom: 36.</code></pre>
</div>
</div>
<p><br></p>
<p>The scale parameter <img src="https://latex.codecogs.com/png.latex?%5Cphi"> is the sum of the squared unscaled Pearson residuals over the degrees of freedom:</p>
<div id="cell-23" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"></span>
<span id="cb24-2">phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((r_us<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> DF).item()</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Scale parameter: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>phi<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scale parameter: 983.635.</code></pre>
</div>
</div>
<p><br></p>
<p>Calculate the adjusted Pearson residuals, <img src="https://latex.codecogs.com/png.latex?r_%7Bp%7D%5E%7B%7Badj%7D%7D">, defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ar_%7Bp%7D%5E%7B%7Badj%7D%7D%20=%20%5Csqrt%7B%5Cfrac%7Bn%7D%7BDF%7D%7D%20%5Ctimes%20r_%7Bp%7D%0A"></p>
<div id="cell-25" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"></span>
<span id="cb26-2">r_adj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> DF) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r_us </span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adjusted Pearson residuals:"</span>)</span>
<span id="cb26-5"></span>
<span id="cb26-6">r_adj</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Adjusted Pearson residuals:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="13">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1981</td>
<td>78.02573</td>
<td>-18.34683</td>
<td>-25.78033</td>
<td>-44.19843</td>
<td>-13.28859</td>
<td>26.88122</td>
<td>51.46473</td>
<td>0.41828</td>
<td>-18.00484</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1982</td>
<td>-50.71956</td>
<td>8.05330</td>
<td>-50.38384</td>
<td>68.74933</td>
<td>30.56811</td>
<td>8.25437</td>
<td>-36.29788</td>
<td>7.75140</td>
<td>19.03085</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1983</td>
<td>16.89291</td>
<td>3.09575</td>
<td>-2.92564</td>
<td>-26.78834</td>
<td>-6.33300</td>
<td>33.03735</td>
<td>-10.83539</td>
<td>-6.85510</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1984</td>
<td>53.10708</td>
<td>-8.22056</td>
<td>-28.78793</td>
<td>23.81883</td>
<td>-26.62870</td>
<td>0.30014</td>
<td>-3.94576</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1985</td>
<td>-46.68454</td>
<td>30.53886</td>
<td>3.27557</td>
<td>38.84427</td>
<td>7.17509</td>
<td>-58.43584</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1986</td>
<td>-17.79550</td>
<td>10.48967</td>
<td>22.58802</td>
<td>-37.99576</td>
<td>15.24345</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1987</td>
<td>-39.70151</td>
<td>-10.09784</td>
<td>64.93591</td>
<td>-30.31972</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1988</td>
<td>-31.95823</td>
<td>3.57805</td>
<td>19.66955</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1989</td>
<td>38.88627</td>
<td>-27.50115</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1990</td>
<td>0.00000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>(From this point each subsequent step is repeated up to the desired number of bootstrap samples.)</p>
<p>Generate a sample from the adjusted Pearson residuals with replacement:</p>
<div id="cell-27" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set random seed for reproducibility.</span></span>
<span id="cb28-3">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb28-4"></span>
<span id="cb28-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Represent adjusted residuals as Numpy array with nans and 0s removed.</span></span>
<span id="cb28-6">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_adj.iloc[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>).values.flatten()</span>
<span id="cb28-7">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r[np.logical_and(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>np.isnan(r), r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)]</span>
<span id="cb28-8"></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample tri0.shape[0] * tri0.shape[1] values at each iteration, but only</span></span>
<span id="cb28-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keep values in upper left portion of triangle. Use mask to determine </span></span>
<span id="cb28-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># which values to retain.</span></span>
<span id="cb28-12">mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>np.isnan(tri0)</span>
<span id="cb28-13"></span>
<span id="cb28-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample with replacement from adjusted residuals. </span></span>
<span id="cb28-15">s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.choice(r, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask.shape, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb28-16"></span>
<span id="cb28-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace 0s with nans.</span></span>
<span id="cb28-18">s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s_r).replace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, np.nan)</span>
<span id="cb28-19"></span>
<span id="cb28-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample with replacement from adjusted Pearson residuals:"</span>)</span>
<span id="cb28-21"></span>
<span id="cb28-22">s_r</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sample with replacement from adjusted Pearson residuals:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1981</td>
<td>-50.38384</td>
<td>-13.28859</td>
<td>7.17509</td>
<td>30.53886</td>
<td>26.88122</td>
<td>-18.34683</td>
<td>-58.43584</td>
<td>33.03735</td>
<td>10.48967</td>
<td>7.17509</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1982</td>
<td>-10.09784</td>
<td>8.25437</td>
<td>-26.78834</td>
<td>0.41828</td>
<td>78.02573</td>
<td>-58.43584</td>
<td>38.84427</td>
<td>-30.31972</td>
<td>19.66955</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1983</td>
<td>-27.50115</td>
<td>38.84427</td>
<td>-58.43584</td>
<td>-6.33300</td>
<td>7.17509</td>
<td>-27.50115</td>
<td>0.41828</td>
<td>-50.71956</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1984</td>
<td>-44.19843</td>
<td>8.05330</td>
<td>-37.99576</td>
<td>-27.50115</td>
<td>38.84427</td>
<td>-25.78033</td>
<td>-30.31972</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1985</td>
<td>19.03085</td>
<td>-3.94576</td>
<td>-26.78834</td>
<td>-2.92564</td>
<td>38.88627</td>
<td>7.75140</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1986</td>
<td>30.56811</td>
<td>-27.50115</td>
<td>26.88122</td>
<td>8.25437</td>
<td>38.84427</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1987</td>
<td>-39.70151</td>
<td>-17.79550</td>
<td>-18.34683</td>
<td>-10.83539</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1988</td>
<td>22.58802</td>
<td>-18.00484</td>
<td>3.09575</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1989</td>
<td>-25.78033</td>
<td>-26.78834</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1990</td>
<td>0.41828</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Using the sampled adjusted Pearson residuals and fitted incremental triangle <img src="https://latex.codecogs.com/png.latex?m">, construct the triangle of sampled incremental losses <img src="https://latex.codecogs.com/png.latex?%7BI_%7Bi%7D%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AI_%7Bi%7D%20=%20m%20+%20%5Chat%7Br%7D_%7Bp%7D%5E%7Badj%7D%20%5Csqrt%7Bm%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Chat%7Br%7D_%7Bp%7D%5E%7Badj%7D"> represents a sample with replacement from the adjusted Pearson residuals and <img src="https://latex.codecogs.com/png.latex?m"> the fitted incremental triangle:</p>
<div id="cell-29" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"></span>
<span id="cb30-2">tri_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tri.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.sqrt)</span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Triangle of sampled incremental loss tri_ii:"</span>)</span>
<span id="cb30-5"></span>
<span id="cb30-6">tri_ii</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Triangle of sampled incremental loss tri_ii:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1981</td>
<td>-203.74517</td>
<td>3358.01441</td>
<td>4399.50467</td>
<td>4396.77782</td>
<td>3516.35018</td>
<td>971.48866</td>
<td>-847.52570</td>
<td>1393.77594</td>
<td>495.73396</td>
<td>266.10038</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1982</td>
<td>1450.87736</td>
<td>4285.89089</td>
<td>1941.77093</td>
<td>2513.78729</td>
<td>5504.08697</td>
<td>-749.64897</td>
<td>1622.34716</td>
<td>-168.42480</td>
<td>606.26754</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1983</td>
<td>1270.89430</td>
<td>8251.91283</td>
<td>896.87689</td>
<td>3183.43918</td>
<td>3252.69020</td>
<td>924.03021</td>
<td>926.67577</td>
<td>-638.60120</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1984</td>
<td>710.58877</td>
<td>7079.39510</td>
<td>3070.25824</td>
<td>2452.83086</td>
<td>5689.83169</td>
<td>1319.51149</td>
<td>88.64530</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1985</td>
<td>4326.54913</td>
<td>6165.85019</td>
<td>3978.46348</td>
<td>4086.25126</td>
<td>5727.75635</td>
<td>3066.35794</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1986</td>
<td>3615.42117</td>
<td>2552.74443</td>
<td>5807.31796</td>
<td>3327.02883</td>
<td>4194.70163</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1987</td>
<td>218.81653</td>
<td>2855.85695</td>
<td>2602.03318</td>
<td>2069.59441</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1988</td>
<td>3864.77654</td>
<td>4062.53149</td>
<td>5255.41826</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1989</td>
<td>705.34074</td>
<td>1989.81179</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1990</td>
<td>2081.99854</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Create a cumulative triangle, and project future losses using the chain ladder method:</p>
<div id="cell-31" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create cumulative triangle from sampled incremental losses.</span></span>
<span id="cb32-3">ctri_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_cum(tri_ii)</span>
<span id="cb32-4"></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Get age-to-age factors for sampled cumulative triangle.</span></span>
<span id="cb32-6">a2a_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_a2a_factors(ctri_ii)</span>
<span id="cb32-7"></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Square ctri_ii, populating the lower-right side using a2a_ii.</span></span>
<span id="cb32-9">ctri_ii_sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_tri(ctri_ii, a2a_ii)</span>
<span id="cb32-10"></span>
<span id="cb32-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Completed sampled triangle ctri_ii_sqrd:"</span>)</span>
<span id="cb32-12"></span>
<span id="cb32-13">ctri_ii_sqrd</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Completed sampled triangle ctri_ii_sqrd:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1981</td>
<td>-203.74517</td>
<td>3154.26925</td>
<td>7553.77392</td>
<td>11950.55173</td>
<td>15466.90192</td>
<td>16438.39058</td>
<td>15590.86488</td>
<td>16984.64083</td>
<td>17480.37479</td>
<td>17746.47517</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1982</td>
<td>1450.87736</td>
<td>5736.76825</td>
<td>7678.53919</td>
<td>10192.32648</td>
<td>15696.41345</td>
<td>14946.76448</td>
<td>16569.11164</td>
<td>16400.68684</td>
<td>17006.95438</td>
<td>17265.84797</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1983</td>
<td>1270.89430</td>
<td>9522.80713</td>
<td>10419.68402</td>
<td>13603.12320</td>
<td>16855.81340</td>
<td>17779.84361</td>
<td>18706.51938</td>
<td>18067.91819</td>
<td>18664.31410</td>
<td>18948.43736</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1984</td>
<td>710.58877</td>
<td>7789.98388</td>
<td>10860.24211</td>
<td>13313.07297</td>
<td>19002.90466</td>
<td>20322.41615</td>
<td>20411.06145</td>
<td>20646.50502</td>
<td>21328.01636</td>
<td>21652.68865</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1985</td>
<td>4326.54913</td>
<td>10492.39932</td>
<td>14470.86280</td>
<td>18557.11406</td>
<td>24284.87042</td>
<td>27351.22836</td>
<td>28055.85376</td>
<td>28379.48074</td>
<td>29316.24646</td>
<td>29762.52204</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1986</td>
<td>3615.42117</td>
<td>6168.16560</td>
<td>11975.48356</td>
<td>15302.51239</td>
<td>19497.21402</td>
<td>20678.43364</td>
<td>21211.15375</td>
<td>21455.82646</td>
<td>22164.05234</td>
<td>22501.45144</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1987</td>
<td>218.81653</td>
<td>3074.67348</td>
<td>5676.70666</td>
<td>7746.30107</td>
<td>10351.36885</td>
<td>10978.49639</td>
<td>11261.32564</td>
<td>11391.22612</td>
<td>11767.23406</td>
<td>11946.36440</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1988</td>
<td>3864.77654</td>
<td>7927.30803</td>
<td>13182.72628</td>
<td>17413.95519</td>
<td>23270.23849</td>
<td>24680.04309</td>
<td>25315.85312</td>
<td>25607.87393</td>
<td>26453.15290</td>
<td>26855.84416</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1989</td>
<td>705.34074</td>
<td>2695.15253</td>
<td>4093.68628</td>
<td>5407.62721</td>
<td>7226.20298</td>
<td>7663.99541</td>
<td>7861.43612</td>
<td>7952.11854</td>
<td>8214.60650</td>
<td>8339.65588</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1990</td>
<td>2081.99854</td>
<td>7378.73207</td>
<td>11207.60842</td>
<td>14804.88834</td>
<td>19783.74693</td>
<td>20982.32586</td>
<td>21522.87488</td>
<td>21771.14332</td>
<td>22489.77736</td>
<td>22832.13491</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>So far we’ve accounted for parameter variance, but not process variance. In order to obtain the full prediction error, we need to incorporate process variance into our estimates. This is accomplished by simulating incremental projected losses from a gamma distribution. For each cell in the lower right of the completed triangle, we randomly sample from a gamma distribution with mean equal to the projected incremental loss in that cell, and variance equal to the value in that cell times <img src="https://latex.codecogs.com/png.latex?%5Cphi">. For example, consider the following squared incremental triangle:</p>
<pre><code>      1  2  3  4  5  6  7  8  9  10
1991  84 27  6  6  3  0  2 -1 -0  2
1992 109 33  7  2  4  4  1 -1  1  2
1993  86 28  8  4  3  2 -0  1  0  2
1994 113 32  1  4  3  2 -1 -0  0  2
1995  86 26  6  3  2  2  0 -0  0  2
1996 107 39  7  4  4  2  1 -0  0  2
1997  72 26  2  3  2  2  0 -0  0  1
1998  77 21  3  3  2  2  0 -0  0  1
1999  74 28  4  3  2  2  0 -0  0  1
2000  54 17  3  2  2  1  0 -0  0  1</code></pre>
<p><br></p>
<p>Values to the right of the main diagonal represent projected future losses. For the loss at origin = 2000 and development period = 2, the projected incremental loss is 17. We would therefore sample from a gamma distribution parameterized as follows:</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gamma</span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Computed above. </span></span>
<span id="cb35-4">phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.798</span> </span>
<span id="cb35-5"></span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Value at intersection of origin=2000 and development period = 2.</span></span>
<span id="cb35-7">mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span></span>
<span id="cb35-8"></span>
<span id="cb35-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine shape and scale from mean and variance.</span></span>
<span id="cb35-10">shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> mu)</span>
<span id="cb35-11">scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> mu) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> mu</span>
<span id="cb35-12"></span>
<span id="cb35-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate sample from gamma distribution.</span></span>
<span id="cb35-14">rng.gamma(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>shape, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scale, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb35-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># array([19.29149])</span></span></code></pre></div>
<p><br></p>
<p>We take advantage of the fact that for the gamma distribution, the shape parameter <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%20E%5BX%5D%5E%7B2%7D%20/%20%5Cmathrm%7BVar%7D%5BX%5D"> and scale <img src="https://latex.codecogs.com/png.latex?%5Ctheta%20=%20%5Cmathrm%7BVar%7D%5BX%5D%20/%20E%5BX%5D">. In essence, we are simulating future incremental losses from a series a gamma distributions, each with parameterization based on the chain ladder-derived future incremental losses. To handle cases in which a projected incremental loss might be negative, we take the absolute value of the projected loss when determining <img src="https://latex.codecogs.com/png.latex?%5Calpha_%7Bij%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctheta_%7Bij%7D"> for origin period <img src="https://latex.codecogs.com/png.latex?i">, development period <img src="https://latex.codecogs.com/png.latex?j">, where <img src="https://latex.codecogs.com/png.latex?2%20%5Cleq%20i%20%5Cleq%20n"> and <img src="https://latex.codecogs.com/png.latex?j%20%5Cgeq%20n%20-%20i%20+%202">.</p>
<div id="cell-33" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Incorporation of process variance. </span></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb36-4"></span>
<span id="cb36-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pd.set_option('display.float_format', '{:.2f}'.format)</span></span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gamma</span>
<span id="cb36-8"></span>
<span id="cb36-9"></span>
<span id="cb36-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get sampled squared incremental triangle.</span></span>
<span id="cb36-11">tri_ii_sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_incr(ctri_ii_sqrd)</span>
<span id="cb36-12"></span>
<span id="cb36-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbr_devps):</span>
<span id="cb36-14"></span>
<span id="cb36-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> r_idx, nbr_devps):</span>
<span id="cb36-16">        </span>
<span id="cb36-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get mean and variance from incremental loss value.</span></span>
<span id="cb36-18">        m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(tri_ii_sqrd.iat[r_idx, c_idx].item())</span>
<span id="cb36-19">        v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phi</span>
<span id="cb36-20"></span>
<span id="cb36-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine shape and scale parameters. </span></span>
<span id="cb36-22">        shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> v</span>
<span id="cb36-23">        scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> m</span>
<span id="cb36-24"></span>
<span id="cb36-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update value at [r_idx, c_idx] with sample from gamma distribution.</span></span>
<span id="cb36-26">        tri_ii_sqrd.iat[r_idx, c_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.gamma(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>shape, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scale, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).item()</span>
<span id="cb36-27"></span>
<span id="cb36-28"></span>
<span id="cb36-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sampled incremental triangle w/ process variance:"</span>)</span>
<span id="cb36-30"></span>
<span id="cb36-31">tri_ii_sqrd</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sampled incremental triangle w/ process variance:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1981</td>
<td>-203.74517</td>
<td>3358.01441</td>
<td>4399.50467</td>
<td>4396.77782</td>
<td>3516.35018</td>
<td>971.48866</td>
<td>-847.52570</td>
<td>1393.77594</td>
<td>495.73396</td>
<td>266.10038</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1982</td>
<td>1450.87736</td>
<td>4285.89089</td>
<td>1941.77093</td>
<td>2513.78729</td>
<td>5504.08697</td>
<td>-749.64897</td>
<td>1622.34716</td>
<td>-168.42480</td>
<td>606.26754</td>
<td>0.00564</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1983</td>
<td>1270.89430</td>
<td>8251.91283</td>
<td>896.87689</td>
<td>3183.43918</td>
<td>3252.69020</td>
<td>924.03021</td>
<td>926.67577</td>
<td>-638.60120</td>
<td>234.75693</td>
<td>1.54909</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1984</td>
<td>710.58877</td>
<td>7079.39510</td>
<td>3070.25824</td>
<td>2452.83086</td>
<td>5689.83169</td>
<td>1319.51149</td>
<td>88.64530</td>
<td>0.81938</td>
<td>138.50517</td>
<td>140.97113</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1985</td>
<td>4326.54913</td>
<td>6165.85019</td>
<td>3978.46348</td>
<td>4086.25126</td>
<td>5727.75635</td>
<td>3066.35794</td>
<td>375.74168</td>
<td>20.52462</td>
<td>624.28700</td>
<td>115.89744</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1986</td>
<td>3615.42117</td>
<td>2552.74443</td>
<td>5807.31796</td>
<td>3327.02883</td>
<td>4194.70163</td>
<td>218.81315</td>
<td>10.16396</td>
<td>14.27299</td>
<td>306.61617</td>
<td>371.23650</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1987</td>
<td>218.81653</td>
<td>2855.85695</td>
<td>2602.03318</td>
<td>2069.59441</td>
<td>5116.03482</td>
<td>160.27811</td>
<td>418.30086</td>
<td>0.00003</td>
<td>14.95452</td>
<td>1.75255</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1988</td>
<td>3864.77654</td>
<td>4062.53149</td>
<td>5255.41826</td>
<td>1226.24633</td>
<td>3936.24691</td>
<td>2824.74743</td>
<td>827.32061</td>
<td>4.35813</td>
<td>84.72082</td>
<td>387.91986</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1989</td>
<td>705.34074</td>
<td>1989.81179</td>
<td>1215.04136</td>
<td>619.78260</td>
<td>3797.39110</td>
<td>796.30572</td>
<td>8.32738</td>
<td>2.07908</td>
<td>0.25043</td>
<td>83.89140</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1990</td>
<td>2081.99854</td>
<td>3260.84269</td>
<td>1892.69935</td>
<td>2777.31515</td>
<td>1124.31564</td>
<td>720.69074</td>
<td>10.07638</td>
<td>7.82743</td>
<td>299.71757</td>
<td>0.78279</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>From this point, we proceed exactly as if performing a standard chain ladder analysis: Cumulate incremental losses, then compute the total needed reserve as the ultimate projected value minus the latest cumulative loss amount by origin period:</p>
<div id="cell-35" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"></span>
<span id="cb38-2">ctri_ii_sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_cum(tri_ii_sqrd)</span>
<span id="cb38-3"></span>
<span id="cb38-4">latest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_latest(ctri_ii_sqrd)</span>
<span id="cb38-5"></span>
<span id="cb38-6">ibnr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctri_ii_sqrd.iloc[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> latest</span>
<span id="cb38-7"></span>
<span id="cb38-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IBNR for sampled triangle:"</span>)</span>
<span id="cb38-9"></span>
<span id="cb38-10">ibnr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>IBNR for sampled triangle:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>1981        0.00000
1982        0.00564
1983      236.30602
1984      280.29567
1985     1136.45073
1986      921.10277
1987     5711.32089
1988     9291.56009
1989     6523.06907
1990    10094.26775
dtype: float64</code></pre>
</div>
</div>
<p>The preceding steps are repeated for the desired number of bootstrap samples, resulting in the predictive distribution of total needed reserve by origin period and in aggregate.</p>
<p><br></p>
<section id="bringing-it-all-together" class="level3">
<h3 class="anchored" data-anchor-id="bringing-it-all-together">Bringing it All Together</h3>
<p>The steps outlined above are combined in the next cell to run 1000 bootstrap samples, generating the predictive distribution of reserves. We also present code to visualize the predictive distribution by origin period and in aggregate.</p>
<div id="cell-37" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"></span>
<span id="cb41-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb41-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb41-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gamma</span>
<span id="cb41-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb41-6"></span>
<span id="cb41-7"></span>
<span id="cb41-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set random seed for reproducibility.</span></span>
<span id="cb41-9">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb41-10"></span>
<span id="cb41-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of bootstrap samples.</span></span>
<span id="cb41-12">nbr_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb41-13"></span>
<span id="cb41-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load tabular incremental losses. Convert to incremental triangle. </span></span>
<span id="cb41-15">dfraa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/976c80786a6e97cce7483e306562f85b/raw/06a5c8b1f823fbe2b6da15f90a672517fa5b4571/RAA.csv"</span>)</span>
<span id="cb41-16">dfraa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfraa.sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEV"</span>])</span>
<span id="cb41-17">tri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfraa.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ORIGIN"</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEV"</span>).rename_axis(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb41-18">tri0.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.columns.droplevel(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb41-19">nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb41-20">mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>np.isnan(tri0)</span>
<span id="cb41-21"></span>
<span id="cb41-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create cumulative triangle from original losses.</span></span>
<span id="cb41-23">ctri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_cum(tri0)</span>
<span id="cb41-24"></span>
<span id="cb41-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All-year volume-weighted age-to-age factors.</span></span>
<span id="cb41-26">a2a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_a2a_factors(ctri0)</span>
<span id="cb41-27"></span>
<span id="cb41-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cumulative fitted triangle via backwards recursion.</span></span>
<span id="cb41-29">ctri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tri0.columns, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tri0.index, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb41-30"></span>
<span id="cb41-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, origin <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(ctri0.index):</span>
<span id="cb41-32"></span>
<span id="cb41-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine latest development period.</span></span>
<span id="cb41-34">    latest_devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> idx</span>
<span id="cb41-35"></span>
<span id="cb41-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set latest diagonal of tri to same value as in tri0.</span></span>
<span id="cb41-37">    ctri.at[origin, latest_devp] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctri0.at[origin, latest_devp]</span>
<span id="cb41-38"></span>
<span id="cb41-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use backward recursion to un-develop triangle using a2a. </span></span>
<span id="cb41-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> devp <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(latest_devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb41-41">        ctri.at[origin, devp] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctri.at[origin, devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a2a.iloc[devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb41-42"></span>
<span id="cb41-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Incremental fitted triangle.</span></span>
<span id="cb41-44">tri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_incr(ctri)</span>
<span id="cb41-45"></span>
<span id="cb41-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unscaled Pearson residuals.</span></span>
<span id="cb41-47">r_us <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> tri) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> tri.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.sqrt)</span>
<span id="cb41-48"></span>
<span id="cb41-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Degrees of freedom.</span></span>
<span id="cb41-50">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.count().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb41-51">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.index.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tri0.columns.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb41-52">DF <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p</span>
<span id="cb41-53"></span>
<span id="cb41-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale parameter.</span></span>
<span id="cb41-55">phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((r_us<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> DF).item()</span>
<span id="cb41-56"></span>
<span id="cb41-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjusted Pearson residuals.</span></span>
<span id="cb41-58">r_adj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> DF) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r_us </span>
<span id="cb41-59"></span>
<span id="cb41-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sampling distribution from adjusted Pearson residuals. Remove</span></span>
<span id="cb41-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nans and 0s. </span></span>
<span id="cb41-62">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_adj.iloc[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>).values.flatten()</span>
<span id="cb41-63">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r[np.logical_and(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>np.isnan(r), r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)]</span>
<span id="cb41-64"></span>
<span id="cb41-65"></span>
<span id="cb41-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample tri0.shape[0] * tri0.shape[1] values at each iteration, but only</span></span>
<span id="cb41-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># keep values in upper left portion of triangle. Use mask to determine </span></span>
<span id="cb41-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># which values to retain.</span></span>
<span id="cb41-69">sqrd_ctris <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb41-70"></span>
<span id="cb41-71"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_samples):</span>
<span id="cb41-72"></span>
<span id="cb41-73">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample with replacement from adjusted residuals. </span></span>
<span id="cb41-74">    s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.choice(r, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mask.shape, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb41-75"></span>
<span id="cb41-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace 0s with nans.</span></span>
<span id="cb41-77">    s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s_r).replace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, np.nan)</span>
<span id="cb41-78"></span>
<span id="cb41-79">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sampled incremental triangle.</span></span>
<span id="cb41-80">    tri_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tri.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(np.sqrt)</span>
<span id="cb41-81"></span>
<span id="cb41-82">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sampled cumulative triangle.</span></span>
<span id="cb41-83">    ctri_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_cum(tri_ii)</span>
<span id="cb41-84"></span>
<span id="cb41-85">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Age-to-age factors for sampled cumulative triangle.</span></span>
<span id="cb41-86">    a2a_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_a2a_factors(ctri_ii)</span>
<span id="cb41-87"></span>
<span id="cb41-88">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sampled squared cumulative triangle.</span></span>
<span id="cb41-89">    ctri_ii_sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_tri(ctri_ii, a2a_ii)</span>
<span id="cb41-90"></span>
<span id="cb41-91">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sampled squared incremental triangle.</span></span>
<span id="cb41-92">    tri_ii_sqrd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_incr(ctri_ii_sqrd)</span>
<span id="cb41-93"></span>
<span id="cb41-94">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Incorporate process variance.</span></span>
<span id="cb41-95">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbr_devps):</span>
<span id="cb41-96"></span>
<span id="cb41-97">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nbr_devps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> r_idx, nbr_devps):</span>
<span id="cb41-98">            </span>
<span id="cb41-99">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get mean and variance from incremental loss value.</span></span>
<span id="cb41-100">            m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(tri_ii_sqrd.iat[r_idx, c_idx].item())</span>
<span id="cb41-101">            v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> phi</span>
<span id="cb41-102"></span>
<span id="cb41-103">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine shape and scale parameters. </span></span>
<span id="cb41-104">            shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> v</span>
<span id="cb41-105">            scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> m</span>
<span id="cb41-106"></span>
<span id="cb41-107">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update value at [r_idx, c_idx] with sample from gamma distribution.</span></span>
<span id="cb41-108">            tri_ii_sqrd.iat[r_idx, c_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.gamma(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>shape, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>scale, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).item()</span>
<span id="cb41-109"></span>
<span id="cb41-110">    ctri_ii_sqrd2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_cum(tri_ii_sqrd)</span>
<span id="cb41-111"></span>
<span id="cb41-112">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep Sampled squared triangle.</span></span>
<span id="cb41-113">    sqrd_ctris.append(ctri_ii_sqrd2)</span>
<span id="cb41-114"></span></code></pre></div>
</div>
<p><br></p>
<p>Obtaining predictive distribution of reserves and ultimates from <code>sqrd_ctris</code>.</p>
<div id="cell-39" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"></span>
<span id="cb42-2">ultimates, reserves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb42-3"></span>
<span id="cb42-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, ctri <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(sqrd_ctris):</span>
<span id="cb42-5"></span>
<span id="cb42-6">    ult <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb42-7">        ctri.iloc[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb42-8">        .to_frame()</span>
<span id="cb42-9">        .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb42-10">        .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb42-11">    )</span>
<span id="cb42-12"></span>
<span id="cb42-13">    ult[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ii</span>
<span id="cb42-14">    ultimates.append(ult)</span>
<span id="cb42-15"></span>
<span id="cb42-16">    latest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_latest(ctri)</span>
<span id="cb42-17">    ibnr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb42-18">        (ctri.iloc[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> latest).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb42-19">        .to_frame()</span>
<span id="cb42-20">        .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb42-21">        .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb42-22">    )</span>
<span id="cb42-23">    ibnr[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ii</span>
<span id="cb42-24">    reserves.append(ibnr)</span>
<span id="cb42-25"></span>
<span id="cb42-26"></span>
<span id="cb42-27">dfults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(ultimates).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb42-28">dfibnr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(reserves).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<p><br></p>
<p>Using <code>dfults</code> and <code>dfibnr</code>, we create a summary of mean ultimate, mean IBNR, standard error of IBNR as well as 75th and 95th percentiles of the predictive distribution of reserves:</p>
<div id="cell-41" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"></span>
<span id="cb43-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span></span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Latest cumulative loss amount by origin.</span></span>
<span id="cb43-5">latest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb43-6">    get_latest(ctri0)</span>
<span id="cb43-7">    .to_frame()</span>
<span id="cb43-8">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb43-9">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-10">)</span>
<span id="cb43-11"></span>
<span id="cb43-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mean ultimate by origin.</span></span>
<span id="cb43-13">ult_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb43-14">    dfults.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult"</span>].mean()</span>
<span id="cb43-15">    .to_frame()</span>
<span id="cb43-16">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb43-17">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult_mean"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-18">)</span>
<span id="cb43-19"></span>
<span id="cb43-20">ibnr_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  (</span>
<span id="cb43-21">    dfibnr.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].mean()</span>
<span id="cb43-22">    .to_frame()</span>
<span id="cb43-23">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb43-24">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_mean"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-25">)</span>
<span id="cb43-26"></span>
<span id="cb43-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard error of reserve distribution by origin. </span></span>
<span id="cb43-28">ibnr_se <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb43-29">    dfibnr.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].std(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-30">    .to_frame()</span>
<span id="cb43-31">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb43-32">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_se"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-33">)</span>
<span id="cb43-34"></span>
<span id="cb43-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 75th percentile of reserve distribution by origin. </span></span>
<span id="cb43-36">ibnr_75 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb43-37">    dfibnr.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>)</span>
<span id="cb43-38">    .to_frame()</span>
<span id="cb43-39">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb43-40">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_75th"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-41">)</span>
<span id="cb43-42"></span>
<span id="cb43-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 95th percentile of reserve distribution by origin. </span></span>
<span id="cb43-44">ibnr_95 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb43-45">    dfibnr.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>)</span>
<span id="cb43-46">    .to_frame()</span>
<span id="cb43-47">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb43-48">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_95th"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb43-49">)</span>
<span id="cb43-50"></span>
<span id="cb43-51"></span>
<span id="cb43-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine into a single DataFrame.</span></span>
<span id="cb43-53">bcl_summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(</span>
<span id="cb43-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df1, df2: df1.merge(df2, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>),</span>
<span id="cb43-55">    (latest, ult_mean, ibnr_mean, ibnr_se, ibnr_75, ibnr_95)</span>
<span id="cb43-56">)</span>
<span id="cb43-57"></span>
<span id="cb43-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set ult_mean for earliest origin period to latest.</span></span>
<span id="cb43-59">bcl_summary.at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult_mean"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bcl_summary.at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest"</span>]</span>
<span id="cb43-60"></span>
<span id="cb43-61"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boostrap chain ladder summary by origin:"</span>)</span>
<span id="cb43-62"></span>
<span id="cb43-63"></span>
<span id="cb43-64">bcl_summary.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Boostrap chain ladder summary by origin:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">origin</th>
<th data-quarto-table-cell-role="th">latest</th>
<th data-quarto-table-cell-role="th">ult_mean</th>
<th data-quarto-table-cell-role="th">ibnr_mean</th>
<th data-quarto-table-cell-role="th">ibnr_se</th>
<th data-quarto-table-cell-role="th">ibnr_75th</th>
<th data-quarto-table-cell-role="th">ibnr_95th</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1981</td>
<td>18834.0</td>
<td>18834.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1982</td>
<td>16704.0</td>
<td>16656.0</td>
<td>317.0</td>
<td>625.0</td>
<td>344.0</td>
<td>1511.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1983</td>
<td>23466.0</td>
<td>24708.0</td>
<td>1032.0</td>
<td>1182.0</td>
<td>1489.0</td>
<td>3412.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1984</td>
<td>27067.0</td>
<td>29353.0</td>
<td>2297.0</td>
<td>1881.0</td>
<td>3089.0</td>
<td>6149.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>1985</td>
<td>26180.0</td>
<td>29833.0</td>
<td>3414.0</td>
<td>2300.0</td>
<td>4627.0</td>
<td>7669.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>1986</td>
<td>15852.0</td>
<td>20111.0</td>
<td>4056.0</td>
<td>2354.0</td>
<td>5471.0</td>
<td>8261.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>1987</td>
<td>12314.0</td>
<td>18474.0</td>
<td>5997.0</td>
<td>3381.0</td>
<td>7956.0</td>
<td>11957.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>1988</td>
<td>13112.0</td>
<td>24511.0</td>
<td>11401.0</td>
<td>4810.0</td>
<td>14397.0</td>
<td>20429.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>1989</td>
<td>5395.0</td>
<td>16590.0</td>
<td>11195.0</td>
<td>6314.0</td>
<td>14628.0</td>
<td>22886.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>1990</td>
<td>2063.0</td>
<td>19705.0</td>
<td>17697.0</td>
<td>13470.0</td>
<td>25418.0</td>
<td>43102.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>While results by origin can be useful, typically actuaries are more interested in the aggregate view. To get aggregate results, we first group by simulation number, then proceed as in the prior cell:</p>
<div id="cell-43" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"></span>
<span id="cb45-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aggregate bootstrap chain ladder results.</span></span>
<span id="cb45-3"></span>
<span id="cb45-4">agg_ults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfults.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb45-5">agg_ibnr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfibnr.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb45-6"></span>
<span id="cb45-7">dsumm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb45-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest"</span>: [latest[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()],</span>
<span id="cb45-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ult_mean"</span>: [agg_ults.mean().item()],</span>
<span id="cb45-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_mean"</span>: [agg_ibnr.mean().item()],</span>
<span id="cb45-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_se"</span>: [agg_ibnr.std(ddof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).item()],</span>
<span id="cb45-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_75th"</span>: [agg_ibnr.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>).item()],</span>
<span id="cb45-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr_95th"</span>: [agg_ibnr.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>).item()]</span>
<span id="cb45-14">}</span>
<span id="cb45-15"></span>
<span id="cb45-16">bcl_summary_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame().from_dict(dsumm, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>)</span>
<span id="cb45-17">bcl_summary_total.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total"</span>]</span>
<span id="cb45-18"></span>
<span id="cb45-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boostrap chain ladder summary in total:"</span>)</span>
<span id="cb45-20"></span>
<span id="cb45-21">bcl_summary_total.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Boostrap chain ladder summary in total:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">latest</th>
<th data-quarto-table-cell-role="th">ult_mean</th>
<th data-quarto-table-cell-role="th">ibnr_mean</th>
<th data-quarto-table-cell-role="th">ibnr_se</th>
<th data-quarto-table-cell-role="th">ibnr_75th</th>
<th data-quarto-table-cell-role="th">ibnr_95th</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">total</td>
<td>160987.0</td>
<td>218945.0</td>
<td>57408.0</td>
<td>19025.0</td>
<td>69557.0</td>
<td>91763.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
</section>
<section id="visualizing-bootstrap-chain-ladder-results" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-bootstrap-chain-ladder-results">Visualizing Bootstrap Chain Ladder Results</h2>
<p>We can visualize actuals and predictions together by origin out to ultimate with 90% prediction intervals for each forecast period. Starting with <code>sqrd_tris</code>, we transform the data to make it easier for plotting:</p>
<div id="cell-45" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"></span>
<span id="cb47-2"></span>
<span id="cb47-3">dflist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb47-4"></span>
<span id="cb47-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tri <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sqrd_ctris:</span>
<span id="cb47-6"></span>
<span id="cb47-7">    dftri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb47-8">        tri</span>
<span id="cb47-9">        .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb47-10">        .rename_axis(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-11">        .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-12">        .melt(id_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, var_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcl_value"</span>)</span>
<span id="cb47-13">    )</span>
<span id="cb47-14"></span>
<span id="cb47-15">    dflist.append(dftri)</span>
<span id="cb47-16"></span>
<span id="cb47-17"></span>
<span id="cb47-18">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb47-19">    pd.concat(dflist)</span>
<span id="cb47-20">    .sort_values([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>])</span>
<span id="cb47-21">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb47-22">)</span>
<span id="cb47-23"></span>
<span id="cb47-24"></span>
<span id="cb47-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute mean, 5th and 95th percentile of prediction interval for each forecast period.</span></span>
<span id="cb47-26">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb47-27">    df</span>
<span id="cb47-28">    .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>], as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcl_value"</span>]</span>
<span id="cb47-29">    .agg({</span>
<span id="cb47-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcl_mean"</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: v.mean(), </span>
<span id="cb47-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcl_95th"</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: v.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>),</span>
<span id="cb47-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bcl_5th"</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: v.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>)</span>
<span id="cb47-33">    })</span>
<span id="cb47-34">)</span>
<span id="cb47-35"></span>
<span id="cb47-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Attach actual values from original cumulative triangle.</span></span>
<span id="cb47-37">dfctri0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb47-38">    ctri0</span>
<span id="cb47-39">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb47-40">    .rename_axis(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-41">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-42">    .melt(id_vars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, var_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>, value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actual_value"</span>)</span>
<span id="cb47-43">)</span>
<span id="cb47-44"></span>
<span id="cb47-45">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.merge(dfctri0, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"origin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dev"</span>], how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>)</span>
<span id="cb47-46"></span>
<span id="cb47-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If actual_value is nan, then dev is a prediction for that origin. Otherwise</span></span>
<span id="cb47-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it is an actual value. </span></span>
<span id="cb47-49">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actual_devp_ind"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actual_value"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> v: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> np.isnan(v) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb47-50">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> r: r.bcl_mean <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> r.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> r.actual_value, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-51"></span>
<span id="cb47-52">df.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">origin</th>
<th data-quarto-table-cell-role="th">dev</th>
<th data-quarto-table-cell-role="th">bcl_mean</th>
<th data-quarto-table-cell-role="th">bcl_95th</th>
<th data-quarto-table-cell-role="th">bcl_5th</th>
<th data-quarto-table-cell-role="th">actual_value</th>
<th data-quarto-table-cell-role="th">actual_devp_ind</th>
<th data-quarto-table-cell-role="th">value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">90</td>
<td>1990</td>
<td>1</td>
<td>2007.64245</td>
<td>4475.13715</td>
<td>-225.44698</td>
<td>2063.0</td>
<td>1</td>
<td>2063.00000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">91</td>
<td>1990</td>
<td>2</td>
<td>6411.97786</td>
<td>16077.09339</td>
<td>55.49594</td>
<td>NaN</td>
<td>0</td>
<td>6411.97786</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">92</td>
<td>1990</td>
<td>3</td>
<td>10426.91522</td>
<td>25457.57282</td>
<td>480.91586</td>
<td>NaN</td>
<td>0</td>
<td>10426.91522</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">93</td>
<td>1990</td>
<td>4</td>
<td>13338.07408</td>
<td>32439.26914</td>
<td>760.56725</td>
<td>NaN</td>
<td>0</td>
<td>13338.07408</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">94</td>
<td>1990</td>
<td>5</td>
<td>15634.70194</td>
<td>37986.93978</td>
<td>916.68155</td>
<td>NaN</td>
<td>0</td>
<td>15634.70194</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">95</td>
<td>1990</td>
<td>6</td>
<td>17448.74348</td>
<td>41542.91512</td>
<td>1175.72687</td>
<td>NaN</td>
<td>0</td>
<td>17448.74348</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">96</td>
<td>1990</td>
<td>7</td>
<td>18163.22153</td>
<td>43856.27381</td>
<td>1217.23798</td>
<td>NaN</td>
<td>0</td>
<td>18163.22153</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">97</td>
<td>1990</td>
<td>8</td>
<td>18840.41438</td>
<td>45536.31744</td>
<td>1285.16070</td>
<td>NaN</td>
<td>0</td>
<td>18840.41438</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">98</td>
<td>1990</td>
<td>9</td>
<td>19316.41732</td>
<td>46515.62726</td>
<td>1348.81827</td>
<td>NaN</td>
<td>0</td>
<td>19316.41732</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">99</td>
<td>1990</td>
<td>10</td>
<td>19705.03950</td>
<td>47359.46502</td>
<td>1398.32997</td>
<td>NaN</td>
<td>0</td>
<td>19705.03950</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Actuals with forecasts by origin year with 90% prediction intervals:</p>
<div id="cell-47" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"></span>
<span id="cb48-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb48-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.ticker <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MaxNLocator</span>
<span id="cb48-4"></span>
<span id="cb48-5"></span>
<span id="cb48-6">fill_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFC04C"</span></span>
<span id="cb48-7"></span>
<span id="cb48-8"></span>
<span id="cb48-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume 9 origin periods (no distribution of fully-developed oldest origin period)</span></span>
<span id="cb48-10">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb48-11">origin_periods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.index[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].tolist()</span>
<span id="cb48-12"></span>
<span id="cb48-13">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb48-14"></span>
<span id="cb48-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (ii, jj), origin <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(indices, origin_periods):</span>
<span id="cb48-16"></span>
<span id="cb48-17">    dforigin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df.origin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>origin]</span>
<span id="cb48-18"></span>
<span id="cb48-19">    ax[ii, jj].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>origin<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb48-20"></span>
<span id="cb48-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get last actual development period for origin.</span></span>
<span id="cb48-22">    last_actual_devp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].dev.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb48-23"></span>
<span id="cb48-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Actual values.</span></span>
<span id="cb48-25">    act_dev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].dev.tolist()</span>
<span id="cb48-26">    act_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].value.tolist()</span>
<span id="cb48-27"></span>
<span id="cb48-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted values.</span></span>
<span id="cb48-29">    pred_dev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [last_actual_devp] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].dev.tolist()</span>
<span id="cb48-30">    pred_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [act_val[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].value.tolist()</span>
<span id="cb48-31"></span>
<span id="cb48-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5th and 95th percentiles.</span></span>
<span id="cb48-33">    pred_5th <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [act_val[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].bcl_5th.tolist()</span>
<span id="cb48-34">    pred_95th <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [act_val[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dforigin[dforigin.actual_devp_ind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].bcl_95th.tolist()</span>
<span id="cb48-35"></span>
<span id="cb48-36">    ax[ii, jj].plot(</span>
<span id="cb48-37">        pred_dev, pred_val, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#1d2951"</span>, markerfacecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, </span>
<span id="cb48-38">        markeredgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#1d2951"</span>, markeredgewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"predicted"</span></span>
<span id="cb48-39">    )</span>
<span id="cb48-40"></span>
<span id="cb48-41">    ax[ii, jj].plot(</span>
<span id="cb48-42">        act_dev, act_val, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#1d2951"</span>, markerfacecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#1d2951"</span>, </span>
<span id="cb48-43">         markeredgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#1d2951"</span>, markeredgewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actual"</span></span>
<span id="cb48-44">    )</span>
<span id="cb48-45"></span>
<span id="cb48-46">    ax[ii, jj].plot(</span>
<span id="cb48-47">        pred_dev, pred_95th, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># color="#FFFFB2",</span></span>
<span id="cb48-48">        linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"95th percentile"</span></span>
<span id="cb48-49">    )</span>
<span id="cb48-50"></span>
<span id="cb48-51">    ax[ii, jj].plot(</span>
<span id="cb48-52">        pred_dev, pred_5th, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-."</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># color="#FFFFB2",</span></span>
<span id="cb48-53">        linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5th percentile"</span></span>
<span id="cb48-54">    )</span>
<span id="cb48-55"></span>
<span id="cb48-56">    ax[ii, jj].fill_between(pred_dev, pred_5th, pred_95th, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fill_color, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>)</span>
<span id="cb48-57">    ax[ii, jj].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb48-58">    ax[ii, jj].get_yaxis().set_major_formatter(mpl.ticker.FuncFormatter(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x, p: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)))</span>
<span id="cb48-59">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb48-60">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb48-61">    ax[ii, jj].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb48-62">    ax[ii, jj].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb48-63">    ax[ii, jj].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb48-64">    ax[ii, jj].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb48-65">    ax[ii, jj].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper left"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x-small"</span>)</span>
<span id="cb48-66"></span>
<span id="cb48-67">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bootstrap chain ladder forecasts with 90% prediction interval"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb48-68"></span>
<span id="cb48-69">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/boostrap-chainladder-pandas/bootstrap-chainladder-pandas_files/figure-html/cell-25-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>As expected, the prediction intervals grow wider for origin periods with fewer development periods of actual data to account for the greater uncertainty in ultimate projections.</p>
<p>Second, an exhibit with a separate histogram per facet can be used to visualize the distribution of IBNR generated by the bootstrap chain ladder:</p>
<div id="cell-49" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"></span>
<span id="cb49-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb49-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb49-4"></span>
<span id="cb49-5"></span>
<span id="cb49-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Color for each histogram.</span></span>
<span id="cb49-7">hist_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5473ff"</span></span>
<span id="cb49-8"></span>
<span id="cb49-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume 9 origin periods (no distribution of fully-developed oldest origin period)</span></span>
<span id="cb49-10">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb49-11">origin_periods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tri0.index[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].tolist()</span>
<span id="cb49-12"></span>
<span id="cb49-13">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb49-14"></span>
<span id="cb49-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (ii, jj), origin <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(indices, origin_periods):</span>
<span id="cb49-16">    ax[ii, jj].set_title(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(origin), fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>)</span>
<span id="cb49-17">    ax[ii, jj].hist(</span>
<span id="cb49-18">        dfibnr[dfibnr.origin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>origin].ibnr, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb49-19">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hist_color, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb49-20">        )</span>
<span id="cb49-21">    </span>
<span id="cb49-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax[ii, jj].yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter("{x:,.0f}"))</span></span>
<span id="cb49-23">    ax[ii, jj].set_yticklabels([])</span>
<span id="cb49-24">    ax[ii, jj].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb49-25">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb49-26">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb49-27">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb49-28">    ax[ii, jj].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb49-29">    ax[ii, jj].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb49-30">    ax[ii, jj].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb49-31">    ax[ii, jj].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb49-32">    ax[ii, jj].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb49-33"></span>
<span id="cb49-34">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boostrap chain ladder: IBNR by origin"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb49-35">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/boostrap-chainladder-pandas/bootstrap-chainladder-pandas_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Finally, we can create a similar exhibit for the aggregate distribution of IBNR, with vertical lines added at the 50th, 75th, 95th and 99th percentile of total needed reserve:</p>
<div id="cell-51" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"></span>
<span id="cb50-2">hist_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5473ff"</span></span>
<span id="cb50-3"></span>
<span id="cb50-4">dfibnr_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfibnr.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb50-5">ibnr_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfibnr_total[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ibnr"</span>].values</span>
<span id="cb50-6">ibnr_50 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(ibnr_total, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>).item()</span>
<span id="cb50-7">ibnr_75 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(ibnr_total, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>).item()</span>
<span id="cb50-8">ibnr_95 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(ibnr_total, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>).item()</span>
<span id="cb50-9">ibnr_99 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.quantile(ibnr_total, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.99</span>).item()</span>
<span id="cb50-10"></span>
<span id="cb50-11">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.25</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb50-12"></span>
<span id="cb50-13">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bootstrap chain ladder: total IBNR"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>)</span>
<span id="cb50-14"></span>
<span id="cb50-15">ax.hist(</span>
<span id="cb50-16">    ibnr_total, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hist_color, </span>
<span id="cb50-17">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb50-18">    )</span>
<span id="cb50-19"></span>
<span id="cb50-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 50th percentile.</span></span>
<span id="cb50-21">ax.axvline(ibnr_50, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb50-22">ax.annotate(</span>
<span id="cb50-23">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$p_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">50</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.0f}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(ibnr_50), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ibnr_50, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2e-5</span>),</span>
<span id="cb50-24">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb50-25">    textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset pixels"</span></span>
<span id="cb50-26">)</span>
<span id="cb50-27"></span>
<span id="cb50-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 75th percentile.</span></span>
<span id="cb50-29">ax.axvline(ibnr_75, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb50-30">ax.annotate(</span>
<span id="cb50-31">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$p_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">75</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.0f}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(ibnr_75), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ibnr_75, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2e-5</span>),</span>
<span id="cb50-32">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb50-33">    textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset pixels"</span></span>
<span id="cb50-34">)</span>
<span id="cb50-35"></span>
<span id="cb50-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 95th percentile.</span></span>
<span id="cb50-37">ax.axvline(ibnr_95, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb50-38">ax.annotate(</span>
<span id="cb50-39">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$p_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">95</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.0f}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(ibnr_95), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ibnr_95, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2e-5</span>),</span>
<span id="cb50-40">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb50-41">    textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset pixels"</span></span>
<span id="cb50-42">)</span>
<span id="cb50-43"></span>
<span id="cb50-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 99th percentile.</span></span>
<span id="cb50-45">ax.axvline(ibnr_99, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb50-46">ax.annotate(</span>
<span id="cb50-47">    <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$p_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">99</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,.0f}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(ibnr_99), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ibnr_99, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2e-5</span>),</span>
<span id="cb50-48">    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, xytext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), </span>
<span id="cb50-49">    textcoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"offset pixels"</span></span>
<span id="cb50-50">)</span>
<span id="cb50-51"></span>
<span id="cb50-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax[ii, jj].yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter("{x:,.0f}"))</span></span>
<span id="cb50-53">ax.set_yticklabels([])</span>
<span id="cb50-54">ax.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb50-55">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb50-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax.tick_params(axis="x", which="minor", direction='in', labelsize=8)</span></span>
<span id="cb50-57">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb50-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax.tick_params(axis="y", which="minor", direction='in', labelsize=8)</span></span>
<span id="cb50-59">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb50-60">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb50-61">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb50-62">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb50-63">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/boostrap-chainladder-pandas/bootstrap-chainladder-pandas_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Existing third-party Python libraries such as <a href="https://trikit.github.io/trikit-docs/quickstart.html">trikit</a> expose a number of models that can be used to estimate outstanding claim liabilities, but it can be helpful to see in detail how these estimates are obtained. Other loss reserving techniques will be explored in future posts.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Actuarial</category>
  <guid>https://www.jtrive.com/posts/boostrap-chainladder-pandas/bootstrap-chainladder-pandas.html</guid>
  <pubDate>Tue, 05 Nov 2024 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Quantifying Spatial Autocorrelation with Moran’s I</title>
  <link>https://www.jtrive.com/posts/spatial-autocorrelation/spatial-autocorrelation.html</link>
  <description><![CDATA[ 





<p>Spatial autocorrelation is a statistical concept that measures how similar values of a variable are based on their proximity to each other on a map. Positive spatial autocorrelation means that geographically nearby values of a variable tend to be similar on a map: high values tend to be located near high values, and low values near low values. By analyzing the spatial distribution of potential hazards, insurers can identify patterns and trends that might not be apparent when looking at data in isolation. This allows for more accurate risk assessment and pricing, ensuring that premiums are set appropriately based on the actual risk in different geospatial cohorts. Additionally, understanding geospatial correlations can help insurers develop targeted strategies for risk mitigation and improve their overall portfolio management. This approach ultimately leads to better financial stability for the insurer and fairer pricing for policyholders.</p>
<p>It is well known that tornadoes frequently occur in “Tornado Alley”, a loosely defined location of states including Texas, Louisiana, Oklahoma, Kansas, South Dakota, Iowa and Nebraska. In what follows, we analyze tornado events from 2008-Present and estimate the global spatial autocorrelation for these events using Moran’s I, and determie if the results align with our prior assumptions of positive spatial autocorrelation.</p>
<p>The National Oceanic and Atmospheric Administration (NOAA) documents the occurrence of storms and other significant weather phenomena having sufficient intensity to cause loss of life, injuries, significant property damage, and/or disruption to commerce. The database for events going back to 1950 is available for download <a href="https://www.ncei.noaa.gov/pub/data/swdi/stormevents/csvfiles/">here</a>, and serves as the starting point for our analysis. U.S. state shapefiles are available <a href="https://www2.census.gov/geo/tiger/TIGER2024/STATE/">here</a>.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geopandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gpd</span>
<span id="cb1-6"></span>
<span id="cb1-7">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-8">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-9">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-10">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Storm data. </span></span>
<span id="cb1-13">noaa_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"noaa-storm-data-1950-2024.csv.gz"</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># US state shapefiles. </span></span>
<span id="cb1-16">state_shp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tl_2024_us_state.zip"</span></span></code></pre></div>
</div>
<p><br></p>
<p>We begin by reading in the the NOAA storm event data and filter down to tornado events from 2008-present. We also remove lower severity tornado events based on the <a href="https://en.wikipedia.org/wiki/Enhanced_Fujita_scale">Enhanced Fujita Scale</a>:</p>
<p><strong>Enhanced Fujita scale</strong>:</p>
<ul>
<li><strong>EFU</strong>: Unknown</li>
<li><strong>EF0</strong>: 65-85 mph (Light)</li>
<li><strong>EF1</strong>: 86-110 mph (Moderate)</li>
<li><strong>EF2</strong>: 111-135 mph (Cosiderable)</li>
<li><strong>EF3</strong>: 136-165 mph (Severe)</li>
<li><strong>EF4</strong>: 166-200 mph (Devestating)</li>
<li><strong>EF5</strong>: &gt;200 mph (Incredible)</li>
</ul>
<p>Events with TOR_F_SCALE = “EFU”, “EF0”, “EF1” are excluded.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Obtained here: https://www.ncei.noaa.gov/pub/data/swdi/stormevents/csvfiles/</span></span>
<span id="cb2-3">dfstorms_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(noaa_path, low_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5">keep_events <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EF2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EF3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EF4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EF5"</span></span>
<span id="cb2-7">]</span>
<span id="cb2-8"></span>
<span id="cb2-9">dfstorms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfstorms_all[</span>
<span id="cb2-10">    (dfstorms_all.YEAR<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2008</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> </span>
<span id="cb2-11">    (dfstorms_all.EVENT_TYPE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tornado"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span></span>
<span id="cb2-12">    (dfstorms_all.TOR_F_SCALE.isin(keep_events))</span>
<span id="cb2-13">]</span>
<span id="cb2-14"></span>
<span id="cb2-15">dfstorms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-16">    dfstorms</span>
<span id="cb2-17">    .dropna(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BEGIN_LAT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BEGIN_LON"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TOR_F_SCALE"</span>])</span>
<span id="cb2-18">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-19">)</span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter storms to lower 48 states.</span></span>
<span id="cb2-22">storms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.GeoDataFrame(</span>
<span id="cb2-23">    dfstorms,</span>
<span id="cb2-24">    geometry<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gpd.points_from_xy(dfstorms.BEGIN_LON, dfstorms.BEGIN_LAT),</span>
<span id="cb2-25">    crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EPSG:4326"</span></span>
<span id="cb2-26">)</span>
<span id="cb2-27"></span>
<span id="cb2-28">storms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> storms[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EVENT_ID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TOR_F_SCALE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geometry"</span>]]</span>
<span id="cb2-29">storms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> storms.cx[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.6</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of storms: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>storms<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-32"></span>
<span id="cb2-33">storms.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of storms: (2917, 3)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">EVENT_ID</th>
<th data-quarto-table-cell-role="th">TOR_F_SCALE</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>105611</td>
<td>EF2</td>
<td>POINT (-96.30000 43.14210)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>80215</td>
<td>EF2</td>
<td>POINT (-86.01250 37.66250)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>80216</td>
<td>EF2</td>
<td>POINT (-85.77590 37.69650)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>80218</td>
<td>EF2</td>
<td>POINT (-85.06490 37.68890)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>79065</td>
<td>EF2</td>
<td>POINT (-85.38120 37.81130)</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Reviewing the distribution EF events:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">storms.TOR_F_SCALE.value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>TOR_F_SCALE
EF2    2197
EF3     579
EF4     128
EF5      13
Name: count, dtype: int64</code></pre>
</div>
</div>
<p><br></p>
<p>Load the state shapefile and overlay retained tornado events:</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This suppresses `Cannot find header.dxf (GDAL_DATA is not defined)` warning.</span></span>
<span id="cb6-6">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GDAL_DATA'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>os<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sep<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(sys.executable.split(os.sep)[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Library'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'share'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gdal'</span>)</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter to lower 48 states. </span></span>
<span id="cb6-9">states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(state_shp).to_crs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EPSG:4326"</span>)[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NAME"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALAND"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geometry"</span>]]</span>
<span id="cb6-10">states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> states.cx[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.6</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-11"></span>
<span id="cb6-12">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-13">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U.S. Tornadoes ex. EF0, EF1: 2008-Present"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb6-14">states.boundary.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>)</span>
<span id="cb6-15">storms.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>)</span>
<span id="cb6-16">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb6-17">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/spatial-autocorrelation/spatial-autocorrelation_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>There are more tornadoes in the mid-south and southeast than expected. Nonetheless, there exists a clear spatial pattern to the events: Tornadoes do not appear randomly distributed over the lower 48 states. We can use Global Moran’s I to gauge the degree of spatial autocorrelation inherent in the data.</p>
<p>In order to assign each tornado to a state, a spatial join is performed where each event is assigned to the state polygon that encloses it:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2">dfn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb7-3">    states</span>
<span id="cb7-4">    .sjoin(storms)</span>
<span id="cb7-5">    .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NAME"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALAND"</span>], as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).size()</span>
<span id="cb7-6">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"size"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-7">)</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge dfn with states to get back geometry associated with each state.</span></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gdf will be a GeoDataFrame.</span></span>
<span id="cb7-11">gdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb7-12">    states</span>
<span id="cb7-13">    .merge(dfn, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NAME"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALAND"</span>], how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>)</span>
<span id="cb7-14">    .fillna(value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>})[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NAME"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALAND"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geometry"</span>]]</span>
<span id="cb7-15">    .sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NAME"</span>)</span>
<span id="cb7-16">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-17">)</span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Total number of events: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-20"></span>
<span id="cb7-21">gdf.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Total number of events: 2917.0</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">NAME</th>
<th data-quarto-table-cell-role="th">ALAND</th>
<th data-quarto-table-cell-role="th">n</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Alabama</td>
<td>131185561946</td>
<td>253.0</td>
<td>POLYGON ((-85.12733 31.76256, -85.12753 31.762...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Arizona</td>
<td>294366118294</td>
<td>7.0</td>
<td>POLYGON ((-110.75069 37.00301, -110.74193 37.0...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Arkansas</td>
<td>134658517854</td>
<td>133.0</td>
<td>POLYGON ((-90.95577 34.11871, -90.95451 34.117...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>California</td>
<td>403673433805</td>
<td>3.0</td>
<td>MULTIPOLYGON (((-119.99987 41.18397, -119.9998...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Colorado</td>
<td>268418973518</td>
<td>31.0</td>
<td>POLYGON ((-105.15504 36.99526, -105.15543 36.9...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Connecticut</td>
<td>12541999507</td>
<td>0.0</td>
<td>POLYGON ((-72.52790 41.17777, -72.55156 41.173...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Delaware</td>
<td>5046692239</td>
<td>4.0</td>
<td>POLYGON ((-75.50949 39.68652, -75.50942 39.686...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>District of Columbia</td>
<td>158316181</td>
<td>0.0</td>
<td>POLYGON ((-77.11975 38.93435, -77.11886 38.935...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>Florida</td>
<td>138965379385</td>
<td>40.0</td>
<td>MULTIPOLYGON (((-83.10874 24.62949, -83.10711 ...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>Georgia</td>
<td>149485762701</td>
<td>153.0</td>
<td>POLYGON ((-81.09538 31.52098, -81.09710 31.519...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>Idaho</td>
<td>214050504522</td>
<td>0.0</td>
<td>POLYGON ((-116.35844 49.00047, -116.34805 49.0...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>Illinois</td>
<td>143778206717</td>
<td>140.0</td>
<td>POLYGON ((-87.89243 38.28285, -87.89334 38.282...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>Indiana</td>
<td>92786694938</td>
<td>96.0</td>
<td>POLYGON ((-86.32960 38.18180, -86.33037 38.182...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>Iowa</td>
<td>144660344616</td>
<td>123.0</td>
<td>POLYGON ((-95.86095 43.50004, -95.85979 43.500...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>Kansas</td>
<td>211753821560</td>
<td>129.0</td>
<td>POLYGON ((-94.61764 37.76124, -94.61766 37.760...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>Kentucky</td>
<td>102266755818</td>
<td>118.0</td>
<td>MULTIPOLYGON (((-89.57120 36.55214, -89.57114 ...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>Louisiana</td>
<td>111920866908</td>
<td>122.0</td>
<td>POLYGON ((-92.72474 33.01439, -92.72365 33.014...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>Maine</td>
<td>79888396620</td>
<td>0.0</td>
<td>POLYGON ((-67.80569 45.68005, -67.80363 45.677...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>Maryland</td>
<td>25151223822</td>
<td>5.0</td>
<td>POLYGON ((-75.75600 39.24607, -75.75579 39.243...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>Massachusetts</td>
<td>20204400635</td>
<td>3.0</td>
<td>POLYGON ((-71.25515 42.73655, -71.25510 42.736...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Visualizing the number of tornadoes by state:</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2">cmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"turbo"</span></span>
<span id="cb9-3"></span>
<span id="cb9-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-5">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U.S. Tornadoes by State ex. EF0, EF1: 2000-Present"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb9-6">gdf.plot(</span>
<span id="cb9-7">    ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>, </span>
<span id="cb9-8">    cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cmap, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.750</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb9-9">    legend_kwds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nbr. Tornadoes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orientation"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vertical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shrink"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>}</span>
<span id="cb9-10">    )</span>
<span id="cb9-11">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb9-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/spatial-autocorrelation/spatial-autocorrelation_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Texas appears to have a large number of events, but this may be due to the fact that Texas has the largest land area of any state in the lower 48. If tornadoes were randomly distributed, we wouldn’t expect to see clusters of similar values on the map. However, our attention is drawn to south central and south eastern states, where hues are brighter compared with coastal regions.</p>
<p>Let’s take a look at number of events divided by ALAND:</p>
<div id="cell-14" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2">cmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"turbo"</span></span>
<span id="cb10-3"></span>
<span id="cb10-4">gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_div_ALAND"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ALAND"</span>]</span>
<span id="cb10-5"></span>
<span id="cb10-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-7">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U.S. tornadoes by state / land area ex. F0, EF0, F1, EF1: 2000-Present"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb10-8">gdf.plot(</span>
<span id="cb10-9">    ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_div_ALAND"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>, </span>
<span id="cb10-10">    cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cmap, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.750</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb10-11">    legend_kwds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nbr. Tornadoes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orientation"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vertical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shrink"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>}</span>
<span id="cb10-12">    )</span>
<span id="cb10-13">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb10-14">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/spatial-autocorrelation/spatial-autocorrelation_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p><br></p>
<p>Mississippi and Alabama are consistent with the raw counts choropleth, but Texas doesn’t stand out as much when normalized by total land area. Nonetheless, raw tornado counts are used for the subsequent analysis.</p>
<p><br></p>
<section id="spatial-weights" class="level3">
<h3 class="anchored" data-anchor-id="spatial-weights">Spatial Weights</h3>
<p>In order to quantify spatial autocorrelation, it is first necessary to define the idea of closeness or proximity between geospatial units. The spatial weights matrix <img src="https://latex.codecogs.com/png.latex?W"> encodes the spatial relationships between different locations in a dataset in much the same way as an adjacency matrix used in Graph Theory and Network Science. For a dataset with <img src="https://latex.codecogs.com/png.latex?N"> geospatial units, <img src="https://latex.codecogs.com/png.latex?W"> will have dimension <img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%20N">, with 0’s along the main diagonal. Each element <img src="https://latex.codecogs.com/png.latex?w_%7Bij%7D"> represents the spatial relationship between locations <img src="https://latex.codecogs.com/png.latex?i"> and <img src="https://latex.codecogs.com/png.latex?j">. The relationship can be based on distance, contiguity or some other criteria. More information of spatial weights matrices is available <a href="https://geographicdata.science/book/notebooks/04_spatial_weights.html">here</a>.</p>
<p>We use the Queen contiguity matrix, which is a row-standardized, symmetric matrix that indicates whether two areas are neighbors based on whether they share a vertex or edge. The value at cell <img src="https://latex.codecogs.com/png.latex?w_%7Bi,j%7D"> is 1 if <img src="https://latex.codecogs.com/png.latex?i"> and <img src="https://latex.codecogs.com/png.latex?j"> are neighbors and 0 otherwise. Using PySAL, the weights matrix with Queen contiguity can be created as follows:</p>
<div id="cell-17" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pysal.lib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> weights</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Queen contiguity.</span></span>
<span id="cb11-5">wq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights.contiguity.Queen.from_dataframe(gdf, use_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to dense matrix for viewing:</span></span>
<span id="cb11-8">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>wq.full()).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10">W</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
<th data-quarto-table-cell-role="th">3</th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">5</th>
<th data-quarto-table-cell-role="th">6</th>
<th data-quarto-table-cell-role="th">7</th>
<th data-quarto-table-cell-role="th">8</th>
<th data-quarto-table-cell-role="th">9</th>
<th data-quarto-table-cell-role="th">10</th>
<th data-quarto-table-cell-role="th">11</th>
<th data-quarto-table-cell-role="th">12</th>
<th data-quarto-table-cell-role="th">13</th>
<th data-quarto-table-cell-role="th">14</th>
<th data-quarto-table-cell-role="th">15</th>
<th data-quarto-table-cell-role="th">16</th>
<th data-quarto-table-cell-role="th">17</th>
<th data-quarto-table-cell-role="th">18</th>
<th data-quarto-table-cell-role="th">19</th>
<th data-quarto-table-cell-role="th">20</th>
<th data-quarto-table-cell-role="th">21</th>
<th data-quarto-table-cell-role="th">22</th>
<th data-quarto-table-cell-role="th">23</th>
<th data-quarto-table-cell-role="th">24</th>
<th data-quarto-table-cell-role="th">25</th>
<th data-quarto-table-cell-role="th">26</th>
<th data-quarto-table-cell-role="th">27</th>
<th data-quarto-table-cell-role="th">28</th>
<th data-quarto-table-cell-role="th">29</th>
<th data-quarto-table-cell-role="th">30</th>
<th data-quarto-table-cell-role="th">31</th>
<th data-quarto-table-cell-role="th">32</th>
<th data-quarto-table-cell-role="th">33</th>
<th data-quarto-table-cell-role="th">34</th>
<th data-quarto-table-cell-role="th">35</th>
<th data-quarto-table-cell-role="th">36</th>
<th data-quarto-table-cell-role="th">37</th>
<th data-quarto-table-cell-role="th">38</th>
<th data-quarto-table-cell-role="th">39</th>
<th data-quarto-table-cell-role="th">40</th>
<th data-quarto-table-cell-role="th">41</th>
<th data-quarto-table-cell-role="th">42</th>
<th data-quarto-table-cell-role="th">43</th>
<th data-quarto-table-cell-role="th">44</th>
<th data-quarto-table-cell-role="th">45</th>
<th data-quarto-table-cell-role="th">46</th>
<th data-quarto-table-cell-role="th">47</th>
<th data-quarto-table-cell-role="th">48</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">21</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">22</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">23</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">24</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">25</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">27</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">28</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">29</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">30</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">31</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">32</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">33</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">34</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">35</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">36</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">37</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">38</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">39</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">40</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">41</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">42</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">43</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">44</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">45</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">46</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">47</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">48</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>The number of neighbors for each state is available in <code>wq</code>’s <code>cardinalities</code> attribute:</p>
<div id="cell-19" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2">wq.cardinalities</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>{0: 4,
 1: 5,
 2: 6,
 3: 3,
 4: 7,
 5: 3,
 6: 3,
 7: 2,
 8: 2,
 9: 5,
 10: 6,
 11: 6,
 12: 4,
 13: 6,
 14: 4,
 15: 7,
 16: 3,
 17: 1,
 18: 5,
 19: 5,
 20: 5,
 21: 5,
 22: 4,
 23: 8,
 24: 4,
 25: 6,
 26: 5,
 27: 3,
 28: 3,
 29: 5,
 30: 6,
 31: 4,
 32: 3,
 33: 5,
 34: 6,
 35: 4,
 36: 6,
 37: 3,
 38: 2,
 39: 6,
 40: 8,
 41: 4,
 42: 6,
 43: 3,
 44: 6,
 45: 2,
 46: 5,
 47: 4,
 48: 6}</code></pre>
</div>
</div>
<p><br></p>
<p><code>gdf</code> is sorted by NAME, so index 0 represents Alabama, index 1 = Arizona, etc. Iowa is at index 13. The columns with value 1 for row index 13 represent Iowa’s neighbors in terms of Queen contiguity:</p>
<div id="cell-21" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2">iowa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>]</span>
<span id="cb14-3"></span>
<span id="cb14-4">iowa_neighbor_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iowa[iowa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].index</span>
<span id="cb14-5"></span>
<span id="cb14-6">iowa_neighbor_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.loc[iowa_neighbor_indices, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NAME"</span>]</span>
<span id="cb14-7"></span>
<span id="cb14-8">iowa_neighbor_names</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>11        Illinois
21       Minnesota
23        Missouri
25        Nebraska
39    South Dakota
47       Wisconsin
Name: NAME, dtype: object</code></pre>
</div>
</div>
<p><br></p>
<p>Spatial lag calculates the average number of tornadoes for a given state’s neighbors, and assigns the result to the state:</p>
<div id="cell-23" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row standardized weights.</span></span>
<span id="cb16-3">wq.transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span></span>
<span id="cb16-4"></span>
<span id="cb16-5">lag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights.lag_spatial(wq, gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>])</span>
<span id="cb16-6"></span>
<span id="cb16-7">gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lag"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lag</span>
<span id="cb16-8"></span></code></pre></div>
</div>
<p><br></p>
<p>For Iowa, the spatial lag is 79.83. If we compute the average number of tornadoes from Illinois, Minnesota, Missouri, Nebraska, South Dakota and Wisconsin, we should get 79.83:</p>
<div id="cell-25" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2">actual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.loc[iowa_neighbor_indices, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>].mean()</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Iowa spatial lag - actual / expected: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>actual<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> / 79.83"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Iowa spatial lag - actual / expected: 79.83 / 79.83</code></pre>
</div>
</div>
<p><br></p>
<p>Visualizing the spatial lag can provide further insight into the underlying process. It tends to smooth spatial data, making it easier to identify patterns and trends:</p>
<div id="cell-27" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"></span>
<span id="cb19-2">cmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"turbo"</span></span>
<span id="cb19-3"></span>
<span id="cb19-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb19-5">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spatial lag"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb19-6">gdf.plot(</span>
<span id="cb19-7">    ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lag"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>, </span>
<span id="cb19-8">    cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cmap, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.750</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb19-9">    legend_kwds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nbr. Tornadoes"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orientation"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vertical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shrink"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>}</span>
<span id="cb19-10">    )</span>
<span id="cb19-11">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb19-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/spatial-autocorrelation/spatial-autocorrelation_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="global-morans-i" class="level2">
<h2 class="anchored" data-anchor-id="global-morans-i">Global Moran’s I</h2>
<p>Now that we’ve defined the spatial weights matrix, it is straightforward to quantify spatial autocorrelation. Global Moran’s I is a measure of the overall clustering of spatial data, defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AI%20=%20%5Cfrac%7BN%7D%7BW%7D%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7BN%7D%20%5Csum_%7Bj=1%7D%5E%7BN%7D%20w_%7Bij%7D(x_%7Bi%7D%20-%20%5Cbar%7Bx%7D)(x_%7Bj%7D%20-%20%5Cbar%7Bx%7D)%7D%7B%5Csum_%7Bi=1%7D%5E%7BN%7D%20(x_%7Bi%7D%20-%20%5Cbar%7Bx%7D)%5E%7B2%7D%7D,%0A"></p>
<p>where</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?N">: The number of spatial units, 49 in our case (lower 48 + District of Columbia)</li>
<li><img src="https://latex.codecogs.com/png.latex?W">: The sum of values in the spatial weights matrix</li>
<li><img src="https://latex.codecogs.com/png.latex?x">: The variable of interest (tornadoes)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbar%7Bx%7D">: The global mean of <img src="https://latex.codecogs.com/png.latex?x"> over all spatial units</li>
<li><img src="https://latex.codecogs.com/png.latex?w_%7Bij%7D">: Elements of the spatial weights matrix which encodes spatial interaction</li>
</ul>
<p><br></p>
<p>We’ll again rely on Queen contiguity. We first compute Global Moran’s I using the formula above, then compare the result with the value returned by PySAL.</p>
<div id="cell-29" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2">wq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights.contiguity.Queen.from_dataframe(gdf, use_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-3">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>wq.full()).values</span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Computing Moran's I manually. </span></span>
<span id="cb20-6">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb20-7"></span>
<span id="cb20-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Average number tornadoes over all states.</span></span>
<span id="cb20-9">xbar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>].mean()</span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Denominator of Moran's I.</span></span>
<span id="cb20-12">denom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xbar)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-13"></span>
<span id="cb20-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update numerator at each iteration.</span></span>
<span id="cb20-15">numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb20-16"></span>
<span id="cb20-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(N):</span>
<span id="cb20-18">    x_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.at[i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>]</span>
<span id="cb20-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(N):</span>
<span id="cb20-20">        x_j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.at[j, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>]</span>
<span id="cb20-21">        w_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W[i, j]</span>
<span id="cb20-22">        numer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>w_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xbar) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x_j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xbar)</span>
<span id="cb20-23">        </span>
<span id="cb20-24"></span>
<span id="cb20-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute Global Moran's I.</span></span>
<span id="cb20-26">I1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> W.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> denom</span>
<span id="cb20-27"></span>
<span id="cb20-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Manual calculation of Global Moran's I: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>I1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Manual calculation of Global Moran's I: 0.60.</code></pre>
</div>
</div>
<p><br></p>
<p>Using PySAL:</p>
<div id="cell-31" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"></span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> esda.moran <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Moran</span>
<span id="cb22-3"></span>
<span id="cb22-4">I2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Moran(gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>].values,  wq)</span>
<span id="cb22-5"></span>
<span id="cb22-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"PySAL calculation of Global Moran's I: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>I2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>I<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>PySAL calculation of Global Moran's I: 0.61.</code></pre>
</div>
</div>
<p>As a rule of thumb:</p>
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?I"> is above <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B-1%7D%7BN%20-%201%7D">, there exists positive spatial correlation (values are clustered)</li>
<li>If <img src="https://latex.codecogs.com/png.latex?I"> is below <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B-1%7D%7BN%20-%201%7D">, there exists negative spatial correlation (neighboring values are dissimilar)</li>
<li>If <img src="https://latex.codecogs.com/png.latex?I%20%5Capprox%20%5Cfrac%7B-1%7D%7BN-1%7D">, there exists no spatial correlation</li>
</ul>
<p><br></p>
<p>The significance of a correlation in Moran’s I is determined by the z-score and p-value, assuming an expected value of <img src="https://latex.codecogs.com/png.latex?-1%20/%20(N%20-%201)">. The null hypothesis states that tornadoes are spatially uncorrelated. PySAL returns the p-value of Global Moran’s I under the normality assumption:</p>
<div id="cell-33" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"></span>
<span id="cb24-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"PySAL Global Moran's I p-value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>I2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>p_norm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>PySAL Global Moran's I p-value: 3.106619400835348e-11</code></pre>
</div>
</div>
<p>Which suggests it is very unlikely that the observed degree of clustering of tornadoes arose by chance.</p>
<p>There are many other techniques that can be used to assess spatial autocorrelation. These will be explored in a future post.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Geospatial</category>
  <guid>https://www.jtrive.com/posts/spatial-autocorrelation/spatial-autocorrelation.html</guid>
  <pubDate>Sun, 20 Oct 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Determining Distance to Coastline for Policy Locations Using GeoPandas</title>
  <link>https://www.jtrive.com/posts/distance-to-coastline/distance-to-coastline.html</link>
  <description><![CDATA[ 





<p>Knowing the distance to coastline for an exposure is crucial for insurance rating applications because it helps insurers assess the risk of hazards like hurricanes, storm surges, and flooding, which are much more prevalent in coastal areas. This information allows insurers to make informed decisions about pricing, underwriting and reinsurance. Properties closer to the coast are generally at higher risk, leading to higher premiums for these properties. Insurance rating plans may use distance to coastline directly as an explanatory variable, with factors inversely proportional to distance to coastline.</p>
<p>This article walks through how GeoPandas can be used to calculate distance to coastline for a collection of simulated latitude-longitude pairs in the Florida region, and how these exposure locations can be assigned to different risk levels based on the distance calculation.</p>
<p><br></p>
<section id="coastal-shapefiles" class="level3">
<h3 class="anchored" data-anchor-id="coastal-shapefiles">Coastal Shapefiles</h3>
<p>The United States Census Bureau provides shapefiles for state, county and ZCTA boundaries as well as roads, rails an coastlines (see full list <a href="https://www2.census.gov/geo/tiger/TIGER2024/2024_TL_Shapefiles_File_Name_Definitions.pdf">here</a>). Shapefiles are a widely-used geospatial vector data format that store the geometric location and attribute information of geographic features, which can be represented as points, lines, or polygons.</p>
<p>We being by downloading the COASTLINE zip archive available on the Census Bureau’s <a href="https://www2.census.gov/geo/tiger/TIGER2024/COASTLINE/">FTP site</a>. The COASTLINE shapefile is loaded into GeoPandas (the STATE shapefile is also loaded for later use). We limit our analysis to the continental United States and filter out the Great Lakes. Inspecting the first few records:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geopandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gpd</span>
<span id="cb1-5"></span>
<span id="cb1-6">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-7">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-8">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-9">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"></span>
<span id="cb1-12">coastline_shp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tl_2024_us_coastline.zip"</span></span>
<span id="cb1-13">us_shp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tl_2024_us_state.zip"</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bounding box of lower 48 states. Remove Great Lakes.</span></span>
<span id="cb1-17">xmin, ymin, xmax, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.6</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-18">coast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(coastline_shp)</span>
<span id="cb1-19">coast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coast.cx[xmin:xmax, ymin:ymax]</span>
<span id="cb1-20">coast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coast[coast.NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Great Lakes"</span>].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># State boundaries.</span></span>
<span id="cb1-23">states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(us_shp)[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NAME"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geometry"</span>]]</span>
<span id="cb1-24">states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> states.cx[xmin:xmax, ymin:ymax].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"coast.shape : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>coast<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"states.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>states<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-28"></span>
<span id="cb1-29">coast.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>coast.shape : (2916, 3)
states.shape: (49, 2)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">NAME</th>
<th data-quarto-table-cell-role="th">MTFCC</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-80.88368 32.03912, -80.88365 32.0...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-70.66800 41.51199, -70.65663 41.5...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-76.58108 38.09572, -76.58184 38.0...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-73.75518 40.58565, -73.75517 40.5...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-76.15615 38.63324, -76.15070 38.6...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-76.53289 39.20776, -76.53298 39.2...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-73.93653 40.56644, -73.93594 40.5...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-81.10208 29.42706, -81.10215 29.4...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-71.89236 41.32922, -71.89293 41.3...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>Atlantic</td>
<td>L4150</td>
<td>LINESTRING (-75.31239 38.94595, -75.31239 38.9...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>The coastline shapefile is comprised of ~3,000 LINESTRING objects. Let’s get a count of geometries by NAME:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">coast[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NAME"</span>].value_counts().sort_index()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>NAME
Atlantic     941
Gulf         647
Pacific     1328
Name: count, dtype: int64</code></pre>
</div>
</div>
<p><br></p>
<p><br></p>
<p>We can visualize the coastline by calling the <code>coast</code> GeoDataFrame’s <code>plot</code> method:</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-3"></span>
<span id="cb5-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-5">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lower 48 Coastline"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb5-6">coast.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span>
<span id="cb5-7">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb5-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/distance-to-coastline/distance-to-coastline_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>To overlay the coastline along with state boundaries, download the STATE shapefile from the Census Bureau’s FTP site and plot them together:</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-3">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lower 48 States with Coastline"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb6-4">coast.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.50</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>)</span>
<span id="cb6-5">states.boundary.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span>)</span>
<span id="cb6-6">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb6-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/distance-to-coastline/distance-to-coastline_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Let’s next generate synthetic latitude-longitude pairs from within the Florida bounding envelope. The envelope bounds can be obtained from Florida’s geometry as follows:</p>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get bounding box for each state.</span></span>
<span id="cb7-4">states[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bbox"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> states.geometry.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> gg: gg.envelope.bounds)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put coordinates in separate columns.</span></span>
<span id="cb7-7">states[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat1"</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(states.bbox.tolist(), index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>states.index)</span>
<span id="cb7-8"></span>
<span id="cb7-9">states.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">NAME</th>
<th data-quarto-table-cell-role="th">geometry</th>
<th data-quarto-table-cell-role="th">bbox</th>
<th data-quarto-table-cell-role="th">lon0</th>
<th data-quarto-table-cell-role="th">lat0</th>
<th data-quarto-table-cell-role="th">lon1</th>
<th data-quarto-table-cell-role="th">lat1</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>West Virginia</td>
<td>POLYGON ((-77.75438 39.33346, -77.75422 39.333...</td>
<td>(-82.644591, 37.20154, -77.719519, 40.638801)</td>
<td>-82.644591</td>
<td>37.201540</td>
<td>-77.719519</td>
<td>40.638801</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Florida</td>
<td>MULTIPOLYGON (((-83.10874 24.62949, -83.10711 ...</td>
<td>(-87.634896, 24.396308, -79.974306, 31.000968)</td>
<td>-87.634896</td>
<td>24.396308</td>
<td>-79.974306</td>
<td>31.000968</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Illinois</td>
<td>POLYGON ((-87.89243 38.28285, -87.89334 38.282...</td>
<td>(-91.513079, 36.970298, -87.019935, 42.508481)</td>
<td>-91.513079</td>
<td>36.970298</td>
<td>-87.019935</td>
<td>42.508481</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Minnesota</td>
<td>POLYGON ((-95.31991 48.99892, -95.31778 48.998...</td>
<td>(-97.239093, 43.499361, -89.483385, 49.384479)</td>
<td>-97.239093</td>
<td>43.499361</td>
<td>-89.483385</td>
<td>49.384479</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Maryland</td>
<td>POLYGON ((-75.75600 39.24607, -75.75579 39.243...</td>
<td>(-79.487651, 37.886605, -74.986282, 39.723037)</td>
<td>-79.487651</td>
<td>37.886605</td>
<td>-74.986282</td>
<td>39.723037</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Let’s draw the bounding region using folium:</p>
<div id="cell-13" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium </span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Florida bounding box. </span></span>
<span id="cb8-5">lon0, lat0, lon1, lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> states[states.NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Florida"</span>].bbox.item()</span>
<span id="cb8-6"></span>
<span id="cb8-7">mlat, mlon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, (lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lon1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-8"></span>
<span id="cb8-9">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(</span>
<span id="cb8-10">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mlat, mlon], </span>
<span id="cb8-11">    zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, </span>
<span id="cb8-12">    zoom_control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb8-13">    no_touch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb8-14">    tiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OpenStreetMap"</span></span>
<span id="cb8-15">    )</span>
<span id="cb8-16"></span>
<span id="cb8-17">folium.Rectangle(</span>
<span id="cb8-18">    [(lat0, lon0), (lat1, lon1)], </span>
<span id="cb8-19">    fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span></span>
<span id="cb8-20">    ).add_to(m)</span>
<span id="cb8-21"></span>
<span id="cb8-22">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = true;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_b085548776e6f6d8e2de11ed5f5411e3 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_b085548776e6f6d8e2de11ed5f5411e3&quot; ></div>
        
</body>
<script>
    
    
            var map_b085548776e6f6d8e2de11ed5f5411e3 = L.map(
                &quot;map_b085548776e6f6d8e2de11ed5f5411e3&quot;,
                {
                    center: [27.698638000000003, -83.80460099999999],
                    crs: L.CRS.EPSG3857,
                    zoom: 6,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_b29acd02bc54b8b41546f18283e121e3 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_b29acd02bc54b8b41546f18283e121e3.addTo(map_b085548776e6f6d8e2de11ed5f5411e3);
        
    
            var rectangle_f2e7711307b0494239b6457cdced4d14 = L.rectangle(
                [[24.396308, -87.634896], [31.000968, -79.974306]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.05, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_b085548776e6f6d8e2de11ed5f5411e3);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>Sampling from the bounding region highlighted above will result in many points in the Gulf. Let’s narrow the sampling space:</p>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2">lon0, lat0, lon1, lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">80.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">81.75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4">mlat, mlon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, (lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lon1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb9-5"></span>
<span id="cb9-6">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(</span>
<span id="cb9-7">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mlat, mlon], </span>
<span id="cb9-8">    zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, </span>
<span id="cb9-9">    zoom_control<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb9-10">    no_touch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb9-11">    tiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OpenStreetMap"</span></span>
<span id="cb9-12">    )</span>
<span id="cb9-13"></span>
<span id="cb9-14">folium.Rectangle(</span>
<span id="cb9-15">    [(lat0, lon0), (lat1, lon1)], </span>
<span id="cb9-16">    fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span></span>
<span id="cb9-17">    ).add_to(m)</span>
<span id="cb9-18"></span>
<span id="cb9-19">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = true;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_41f22baf1f1ce21646580c8d02ec7364 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_41f22baf1f1ce21646580c8d02ec7364&quot; ></div>
        
</body>
<script>
    
    
            var map_41f22baf1f1ce21646580c8d02ec7364 = L.map(
                &quot;map_41f22baf1f1ce21646580c8d02ec7364&quot;,
                {
                    center: [27.0, -81.125],
                    crs: L.CRS.EPSG3857,
                    zoom: 7,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_06409f2d352ee489d7800ff4b79d16bf = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_06409f2d352ee489d7800ff4b79d16bf.addTo(map_41f22baf1f1ce21646580c8d02ec7364);
        
    
            var rectangle_5f9d2b26e48876434c42b65607e54397 = L.rectangle(
                [[26.0, -80.5], [28.0, -81.75]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#3388ff&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;blue&quot;, &quot;fillOpacity&quot;: 0.05, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_41f22baf1f1ce21646580c8d02ec7364);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample within bounds defined by lat0, lon0, lat1, lon1. </span></span>
<span id="cb10-3"></span>
<span id="cb10-4">nbr_locations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb10-5"></span>
<span id="cb10-6">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb10-7"></span>
<span id="cb10-8">rlats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lat0, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lat1, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nbr_locations)</span>
<span id="cb10-9">rlons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lon1, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lon0, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nbr_locations)</span>
<span id="cb10-10">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(rlats, rlons))</span></code></pre></div>
</div>
<p><br></p>
<p>Visualizing the synthetic locations:</p>
<div id="cell-18" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mlat, mlon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> lat, lon <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> points:</span>
<span id="cb11-5"></span>
<span id="cb11-6">    folium.CircleMarker(</span>
<span id="cb11-7">        location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], </span>
<span id="cb11-8">        radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb11-9">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb11-10">        fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb11-11">        fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-12">        fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-13">        ).add_to(m)</span>
<span id="cb11-14"></span>
<span id="cb11-15">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_348f00edc8bd0d742423a0d4215598b1 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_348f00edc8bd0d742423a0d4215598b1&quot; ></div>
        
</body>
<script>
    
    
            var map_348f00edc8bd0d742423a0d4215598b1 = L.map(
                &quot;map_348f00edc8bd0d742423a0d4215598b1&quot;,
                {
                    center: [27.0, -81.125],
                    crs: L.CRS.EPSG3857,
                    zoom: 8,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_b1296c489438f70917d3cbc788e716f4 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_b1296c489438f70917d3cbc788e716f4.addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_0260d5053589dbacf609e47c9c818529 = L.circleMarker(
                [26.15842498103677, -81.6978452754149],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_608f932af225bc26c5bf162741515b31 = L.circleMarker(
                [27.308367243835498, -80.74351022614646],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_4d2dc31b9d14167f30e3646ea655f981 = L.circleMarker(
                [26.050159830178664, -81.22629395965097],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_c66b99a826e6267b14bc8417496cafdd = L.circleMarker(
                [26.896432196124945, -80.6823476427752],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_d071cade3a70d18434f755e0ba40736b = L.circleMarker(
                [27.40773608152318, -81.55620947759367],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_d337768dd6086723dc42232b83288082 = L.circleMarker(
                [26.55187691648845, -80.90280316359555],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_0f4d0f6d4c3acac774b8aab63ef0f80e = L.circleMarker(
                [26.301071098731754, -81.52100045189212],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_881e6cafc8c4f6b6e0f1f032543c2fd3 = L.circleMarker(
                [27.435718092142665, -81.49914451288832],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_769cd3939738e5787928e0de6d1da388 = L.circleMarker(
                [27.784378345442054, -80.59076499724968],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_3a8eb7ef5392d2589547116cb02432fa = L.circleMarker(
                [27.635398626773437, -81.3898362844697],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_cff09513b6eb3391a9cd378834517646 = L.circleMarker(
                [27.37937557184798, -81.4286044623964],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_0d432798bf9841502364cf20079e3973 = L.circleMarker(
                [26.862971977202136, -80.54717925180627],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_14a083fb249caa095dba49b5cc6b61d3 = L.circleMarker(
                [27.98142795111799, -81.09169770076494],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_cb40c1e78b02fac8bf7b43d8a72ffacc = L.circleMarker(
                [26.365577838913776, -80.8990291114624],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_6f5a1c6cdfc715e3ab21ca62e3018624 = L.circleMarker(
                [26.131355757954836, -81.16027753441861],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_2c216915cba8f2ee19dcba38ad6631d4 = L.circleMarker(
                [26.382999780154904, -81.70903306152387],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_e5cf40f0822d79ec40f736e44a12593d = L.circleMarker(
                [27.972984413059, -80.50657443311286],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_7d00f2c23dcf6465efd328a05b4395ba = L.circleMarker(
                [26.086354128867725, -81.48977717606184],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_b5c9ca48f3b40e6887971267f98897c9 = L.circleMarker(
                [26.943671120744057, -80.51934697293223],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_19fbb5b077f4c17ecfa4acaa3e1773cc = L.circleMarker(
                [26.24664396062321, -81.43299865566368],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_68b836acb93d31ef85c8901a0408afc8 = L.circleMarker(
                [27.243754691593953, -81.40006512830422],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_8b85744d81a2b98c74093d7edd0db848 = L.circleMarker(
                [26.78781864252158, -80.66418638533959],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_93b35ab23f371b2801505b17250d4aa9 = L.circleMarker(
                [26.605717123010912, -81.13339074943397],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_f2fe59cd77cc1af1630d81dd8bae1746 = L.circleMarker(
                [27.82472127183081, -81.03218135189428],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_caa0a377e63c2f919c05dc5f7ac810f5 = L.circleMarker(
                [26.307063400374936, -81.27626966439352],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_fd3b4d1129b3e65dfdb77b021bb1dae4 = L.circleMarker(
                [27.991454895701796, -81.17887100872782],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_ac4fa0394c3457cf5545522e86a6b8ae = L.circleMarker(
                [26.544773024554832, -81.60667452193859],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_d5b3cb9a0633a2f54e6bad3c4d975b1b = L.circleMarker(
                [26.886457616788025, -80.91721728171257],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_d251a1ac31512d167e3cece18bda1aca = L.circleMarker(
                [27.714852856581068, -81.64493695441304],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_bcd903be1aba3aab6f9a8b287bfc6f43 = L.circleMarker(
                [27.2850774684598, -81.43364197265868],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_d0fec00eafb18b21413bd8a00be9c077 = L.circleMarker(
                [27.473269702793658, -80.50510790437552],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_e41954dfe2b1a83bf83f08a439b25685 = L.circleMarker(
                [26.9126301314854, -81.02473504499652],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_3c9e23c39f8b2dda81dd8003b06409f7 = L.circleMarker(
                [26.19773048060356, -81.31384553050141],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_fffaa85f3ecdb7058f2fcd502f39ff3a = L.circleMarker(
                [26.713303385914497, -80.69627570716136],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_814b1be232a7be39c34fa16db7c9d8d0 = L.circleMarker(
                [27.413800924899405, -81.22869767203825],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_b027bf45a9e8b482835174bdf7465e31 = L.circleMarker(
                [26.319682526771178, -80.52723729475458],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_9093299bbaad743ea0dd8cf75f986e56 = L.circleMarker(
                [26.076820898509965, -81.02010416275705],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_5080ec996f668540395c0aa93d9b9786 = L.circleMarker(
                [26.366453559477833, -81.66293509555179],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_443407e1de3b587b3822418dfe78b323 = L.circleMarker(
                [27.565561426877956, -80.86111841233041],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_fe8a9f61abbf8f1b05c8f9c379410b80 = L.circleMarker(
                [26.694221446702628, -81.53376936951858],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_28c69a091e392341aa91053a02f291ab = L.circleMarker(
                [26.81413637848975, -81.32644612584131],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_a89971244312113648480dc93e81a3de = L.circleMarker(
                [26.61547413746954, -81.33572363043359],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_467ac3e9c90a06d8b94249f2e92a7f3b = L.circleMarker(
                [26.343132637377927, -81.35686888035839],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_80435f2a1954b66de76609b887f739c2 = L.circleMarker(
                [26.311171111000064, -80.8179971956485],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_2c3d61f4f60f9eb3a51f338682cdb61c = L.circleMarker(
                [27.226452898410354, -80.50847148940952],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_2e148d2724cbaa5b74b28badb3674287 = L.circleMarker(
                [26.189330375816013, -81.6619851577331],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_71bc8b63551c04b51baf794313dfaa0a = L.circleMarker(
                [26.248784399318982, -80.7821785668828],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_1a504d726cb00560bfdd49e4c94ec5df = L.circleMarker(
                [27.189284967955047, -81.01943246870752],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_14e5cb854d6a9e62b6ade8055d1e79ce = L.circleMarker(
                [27.16418198699115, -81.62240296924504],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
    
            var circle_marker_cd943d4aa878a7e98c46ba3de17c4118 = L.circleMarker(
                [27.016995167468394, -81.61079237146735],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_348f00edc8bd0d742423a0d4215598b1);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>Next the <code>points</code> list needs to be represented as a GeoDataFrame, using the generated points as the geometry. We set <code>"crs=EPSG:4326"</code> representing longitude-latitude pairs. A policy_id is included as an identifier for each point.</p>
<div id="cell-20" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2">dfpoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb12-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"policy_id"</span>: [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(ii).zfill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(points))],</span>
<span id="cb12-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lat"</span>: rlats, </span>
<span id="cb12-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lon"</span>: rlons, </span>
<span id="cb12-6">})</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create GeoDataFrame.</span></span>
<span id="cb12-9">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.GeoDataFrame(</span>
<span id="cb12-10">    dfpoints,</span>
<span id="cb12-11">    geometry<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gpd.points_from_xy(dfpoints.lon, dfpoints.lat),</span>
<span id="cb12-12">    crs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EPSG:4326"</span></span>
<span id="cb12-13">)</span>
<span id="cb12-14"></span>
<span id="cb12-15">points.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">policy_id</th>
<th data-quarto-table-cell-role="th">lat</th>
<th data-quarto-table-cell-role="th">lon</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0000000</td>
<td>26.158425</td>
<td>-81.697845</td>
<td>POINT (-81.69785 26.15842)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0000001</td>
<td>27.308367</td>
<td>-80.743510</td>
<td>POINT (-80.74351 27.30837)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0000002</td>
<td>26.050160</td>
<td>-81.226294</td>
<td>POINT (-81.22629 26.05016)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0000003</td>
<td>26.896432</td>
<td>-80.682348</td>
<td>POINT (-80.68235 26.89643)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0000004</td>
<td>27.407736</td>
<td>-81.556209</td>
<td>POINT (-81.55621 27.40774)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>0000005</td>
<td>26.551877</td>
<td>-80.902803</td>
<td>POINT (-80.90280 26.55188)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>0000006</td>
<td>26.301071</td>
<td>-81.521000</td>
<td>POINT (-81.52100 26.30107)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>0000007</td>
<td>27.435718</td>
<td>-81.499145</td>
<td>POINT (-81.49914 27.43572)</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>0000008</td>
<td>27.784378</td>
<td>-80.590765</td>
<td>POINT (-80.59076 27.78438)</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>0000009</td>
<td>27.635399</td>
<td>-81.389836</td>
<td>POINT (-81.38984 27.63540)</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>With both the coastline shapefile and point data represented as GeoDataFrames, we execute the <code>sjoin_nearest</code> spatial join to get the distance from each point to the nearest coastline. First we need to set the crs to a projected coordinate system so the distances are returned in units of meters instead of degrees. Projected coordinate systems use linear units like meters or feet, which makes it easier to perform precise spatial measurements. Here we opt for the Conus Albers equal area conic projection (EPSG:5069).</p>
<p>In the call to <code>sjoin_nearest</code>, we specify “meters” for the <code>distance_col</code> argument. This column will hold the distance to the coastline for each point in <code>points</code> in units of meters. A miles column is added after the join.</p>
<div id="cell-22" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert from GPS to  Conus Albers. </span></span>
<span id="cb13-3">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> points.to_crs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EPSG:5069"</span>)</span>
<span id="cb13-4">coast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coast.to_crs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EPSG:5069"</span>)</span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform spatial join. Covert meters to miles. </span></span>
<span id="cb13-7">gdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.sjoin_nearest(points, coast, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, distance_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meters"</span>)</span>
<span id="cb13-8">gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"miles"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meters"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.000621371</span></span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get min, max and average distance to coast line.</span></span>
<span id="cb13-11">min_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.miles.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()</span>
<span id="cb13-12">max_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.miles.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb13-13">avg_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.miles.mean()</span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"min. distance to coastline: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>min_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"max. distance to coastline: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"avg. distance to coastline: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>avg_dist<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>min. distance to coastline: 0.20197535859716287
max. distance to coastline: 65.35183791451661
avg. distance to coastline: 35.26215239057489</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="rate-group-based-on-distance-to-coastline" class="level3">
<h3 class="anchored" data-anchor-id="rate-group-based-on-distance-to-coastline">Rate Group Based on Distance to Coastline</h3>
<p>Let’s imagine a hypothetical rating plan that uses the following distances from the coastline to determine rates:</p>
<ul>
<li>0 - 5 miles: very high risk</li>
<li>5 - 25 miles: high risk</li>
<li>25 - 50 miles: medium risk</li>
<li>greater than 50 miles: low risk</li>
</ul>
<p><br></p>
<p>A rolling join via <code>merge_asof</code> can be used to select the last row in the right DataFrame (group thresholds) whose <code>on</code> key is less than or equal to <code>gdf</code>’s key, which will be “miles” in both DataFrames.</p>
<div id="cell-24" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create dfgroups DataFrame. </span></span>
<span id="cb15-3">dfgroups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb15-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"risk"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"very high"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low"</span>],</span>
<span id="cb15-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"miles"</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.</span>]</span>
<span id="cb15-6">})</span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign risk group to each policy location.</span></span>
<span id="cb15-9">gdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"miles"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb15-10">gdf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge_asof(gdf, dfgroups, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"miles"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"backward"</span>)</span>
<span id="cb15-11"></span>
<span id="cb15-12">gdf.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">policy_id</th>
<th data-quarto-table-cell-role="th">lat</th>
<th data-quarto-table-cell-role="th">lon</th>
<th data-quarto-table-cell-role="th">geometry</th>
<th data-quarto-table-cell-role="th">index_right</th>
<th data-quarto-table-cell-role="th">NAME</th>
<th data-quarto-table-cell-role="th">MTFCC</th>
<th data-quarto-table-cell-role="th">meters</th>
<th data-quarto-table-cell-role="th">miles</th>
<th data-quarto-table-cell-role="th">risk</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0000016</td>
<td>27.972984</td>
<td>-80.506574</td>
<td>POINT (1523126.311 669355.565)</td>
<td>176</td>
<td>Atlantic</td>
<td>L4150</td>
<td>325.047932</td>
<td>0.201975</td>
<td>very high</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0000000</td>
<td>26.158425</td>
<td>-81.697845</td>
<td>POINT (1436901.833 453402.683)</td>
<td>2813</td>
<td>Gulf</td>
<td>L4150</td>
<td>11201.767881</td>
<td>6.960454</td>
<td>high</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0000015</td>
<td>26.383000</td>
<td>-81.709033</td>
<td>POINT (1432089.414 477631.030)</td>
<td>2817</td>
<td>Gulf</td>
<td>L4150</td>
<td>14922.894431</td>
<td>9.272654</td>
<td>high</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0000045</td>
<td>26.189330</td>
<td>-81.661985</td>
<td>POINT (1439966.962 457301.849)</td>
<td>2813</td>
<td>Gulf</td>
<td>L4150</td>
<td>15292.789125</td>
<td>9.502496</td>
<td>high</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0000008</td>
<td>27.784378</td>
<td>-80.590765</td>
<td>POINT (1518283.776 647462.840)</td>
<td>211</td>
<td>Atlantic</td>
<td>L4150</td>
<td>16412.307856</td>
<td>10.198132</td>
<td>high</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>0000037</td>
<td>26.366454</td>
<td>-81.662935</td>
<td>POINT (1436947.116 476528.844)</td>
<td>2813</td>
<td>Gulf</td>
<td>L4150</td>
<td>18665.871130</td>
<td>11.598431</td>
<td>high</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>0000030</td>
<td>27.473270</td>
<td>-80.505108</td>
<td>POINT (1532219.823 614970.878)</td>
<td>10</td>
<td>Atlantic</td>
<td>L4150</td>
<td>20055.344308</td>
<td>12.461809</td>
<td>high</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>0000017</td>
<td>26.086354</td>
<td>-81.489777</td>
<td>POINT (1458848.059 448748.018)</td>
<td>2813</td>
<td>Gulf</td>
<td>L4150</td>
<td>24280.862758</td>
<td>15.087424</td>
<td>high</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>0000044</td>
<td>27.226453</td>
<td>-80.508471</td>
<td>POINT (1536305.431 588071.282)</td>
<td>10</td>
<td>Atlantic</td>
<td>L4150</td>
<td>29966.032034</td>
<td>18.620023</td>
<td>high</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>0000006</td>
<td>26.301071</td>
<td>-81.521000</td>
<td>POINT (1452153.395 471583.300)</td>
<td>2813</td>
<td>Gulf</td>
<td>L4150</td>
<td>30913.531896</td>
<td>19.208772</td>
<td>high</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Counting the number of policies per risk group:</p>
<div id="cell-26" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">gdf.risk.value_counts().sort_index()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>risk
high         12
low          10
medium       27
very high     1
Name: count, dtype: int64</code></pre>
</div>
</div>
<p><br></p>
<p>Finally, we can assign each risk a different color and visualize the resulting risk groups with folium:</p>
<div id="cell-28" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Colors for each group.</span></span>
<span id="cb18-3">dcolors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb18-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"very high"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f40002"</span>,</span>
<span id="cb18-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff721f"</span>,</span>
<span id="cb18-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fafc15"</span>,</span>
<span id="cb18-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"low"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#268a6d"</span></span>
<span id="cb18-8">}</span>
<span id="cb18-9"></span>
<span id="cb18-10">gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gdf[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"risk"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(dcolors)</span>
<span id="cb18-11"></span>
<span id="cb18-12">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mlat, mlon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb18-13"></span>
<span id="cb18-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> gdf.itertuples():</span>
<span id="cb18-15">    lat, lon, color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tt.lat, tt.lon, tt.color</span>
<span id="cb18-16">    folium.CircleMarker(</span>
<span id="cb18-17">        location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon],</span>
<span id="cb18-18">        radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, </span>
<span id="cb18-19">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color, </span>
<span id="cb18-20">        fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color, </span>
<span id="cb18-21">        fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb18-22">        fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-23">        ).add_to(m)</span>
<span id="cb18-24"></span>
<span id="cb18-25">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_f1774b86214832d08db672d3b1789192 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_f1774b86214832d08db672d3b1789192&quot; ></div>
        
</body>
<script>
    
    
            var map_f1774b86214832d08db672d3b1789192 = L.map(
                &quot;map_f1774b86214832d08db672d3b1789192&quot;,
                {
                    center: [27.0, -81.125],
                    crs: L.CRS.EPSG3857,
                    zoom: 8,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_96681e1d2e28ab2185a27a69537d4b61 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_96681e1d2e28ab2185a27a69537d4b61.addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_bb15e42b8ff9c5585d6d3ec9c2ad6740 = L.circleMarker(
                [27.972984413059, -80.50657443311286],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#f40002&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#f40002&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_0f8d4ce570a063ade653d5d66a452073 = L.circleMarker(
                [26.15842498103677, -81.6978452754149],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_bfeda87b591d95a4767a54f2c4124a31 = L.circleMarker(
                [26.382999780154904, -81.70903306152387],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_2f9b6991d131aa1dc99f09177760963d = L.circleMarker(
                [26.189330375816013, -81.6619851577331],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_dbd140e47ea6973b3327877786176a8d = L.circleMarker(
                [27.784378345442054, -80.59076499724968],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_f760b649f4894829887f7badc64cad92 = L.circleMarker(
                [26.366453559477833, -81.66293509555179],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_7e2a75fefd686100bc3c396aade6932f = L.circleMarker(
                [27.473269702793658, -80.50510790437552],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_dd1d265aed035c68ce7859e957966ad3 = L.circleMarker(
                [26.086354128867725, -81.48977717606184],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_0a718674836588e8ce0955b37d78211d = L.circleMarker(
                [27.226452898410354, -80.50847148940952],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_6e4a86ee36584662543ae9e48d8952d3 = L.circleMarker(
                [26.301071098731754, -81.52100045189212],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_8a0b2b1aed1142bdfe8fb3fe84bcee47 = L.circleMarker(
                [26.544773024554832, -81.60667452193859],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_9515c21cbdba6923fb7b5e055e52fd7b = L.circleMarker(
                [26.050159830178664, -81.22629395965097],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_ffab92331857aab1c3aeba685aaa1fdb = L.circleMarker(
                [26.24664396062321, -81.43299865566368],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#ff721f&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#ff721f&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_aa42f42ec72abd4873855d5ad72b12f6 = L.circleMarker(
                [26.943671120744057, -80.51934697293223],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_a3491691a7e54433d7b1a8a1c504ae70 = L.circleMarker(
                [26.19773048060356, -81.31384553050141],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_e36f8e77d987490256a1a400f8fbcef1 = L.circleMarker(
                [26.131355757954836, -81.16027753441861],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_d5c52c80418b3a117c3ce4bac4b89b7b = L.circleMarker(
                [26.319682526771178, -80.52723729475458],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_1e8db8e6899f377fbffb094bdfaca3d1 = L.circleMarker(
                [26.694221446702628, -81.53376936951858],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_47d926dda0301208e945d027fe62378b = L.circleMarker(
                [26.343132637377927, -81.35686888035839],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_9f817c0ff9aec3f3c6051326c9b13459 = L.circleMarker(
                [26.862971977202136, -80.54717925180627],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_4bec9897573a2cc528e9ab05ed1b2fa8 = L.circleMarker(
                [27.308367243835498, -80.74351022614646],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_b0d5bb2c91641126400188f31f78ef77 = L.circleMarker(
                [26.076820898509965, -81.02010416275705],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_f1345014cc9714328006916b195e794f = L.circleMarker(
                [27.565561426877956, -80.86111841233041],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_27d5ec133b8544d3bf70ea3503396fba = L.circleMarker(
                [27.98142795111799, -81.09169770076494],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_743ae6a56572c7901cff050d024407ee = L.circleMarker(
                [27.82472127183081, -81.03218135189428],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_2317fc1efb349cce5a29a569628134c9 = L.circleMarker(
                [26.307063400374936, -81.27626966439352],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_6b4df10b41843b09fe920354884d2b03 = L.circleMarker(
                [26.896432196124945, -80.6823476427752],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_063e2cd2ba57a05429741c90ee204e0b = L.circleMarker(
                [26.61547413746954, -81.33572363043359],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_2e9d706c6578967ae412e054042978d6 = L.circleMarker(
                [27.991454895701796, -81.17887100872782],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_3f78952fc129e5cc86cfccf0676e10a0 = L.circleMarker(
                [26.78781864252158, -80.66418638533959],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_1bd4a24f4bbb23ec294c0aabe90477b9 = L.circleMarker(
                [26.713303385914497, -80.69627570716136],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_8066874a2d0f58971bbc1ea7837d3cb3 = L.circleMarker(
                [27.016995167468394, -81.61079237146735],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_da159919ce1b47e99d572986d0db1944 = L.circleMarker(
                [26.248784399318982, -80.7821785668828],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_63529d89abba8ef94c6bce836bfb921e = L.circleMarker(
                [26.81413637848975, -81.32644612584131],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_6126d7917d1615a4f467655d9ce00b77 = L.circleMarker(
                [26.311171111000064, -80.8179971956485],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_fb3adb6a86288cc6ff73ebf0a73f6210 = L.circleMarker(
                [27.714852856581068, -81.64493695441304],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_a32f5263787739d61cc98254a39da1ae = L.circleMarker(
                [27.16418198699115, -81.62240296924504],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_bab2d2ab56804b6c8b5dc92f06150f8f = L.circleMarker(
                [26.605717123010912, -81.13339074943397],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_c18094b6b293055b05db02f467d61b23 = L.circleMarker(
                [27.189284967955047, -81.01943246870752],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_237341a485fed0bdbd5c61046acb5c28 = L.circleMarker(
                [26.365577838913776, -80.8990291114624],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#fafc15&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#fafc15&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_21cb4eac7e931ad29391917a03bb76c1 = L.circleMarker(
                [26.886457616788025, -80.91721728171257],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_1ce2b0a1544253002ea479bb8d339828 = L.circleMarker(
                [26.55187691648845, -80.90280316359555],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_458f8fd585dcf8d3bf7407e8ab534f91 = L.circleMarker(
                [27.413800924899405, -81.22869767203825],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_e4e6c8f5e622f96e03ff381db1e55b5b = L.circleMarker(
                [26.9126301314854, -81.02473504499652],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_d445978a602991b097f0c30ef5482177 = L.circleMarker(
                [27.635398626773437, -81.3898362844697],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_63524a78bdf3c3f11a3958c52c8f7405 = L.circleMarker(
                [27.40773608152318, -81.55620947759367],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_86efcbf661e1eb7bd77815364963c990 = L.circleMarker(
                [27.435718092142665, -81.49914451288832],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_ad8ad98797e6b3bc5c81bd0cffec6d10 = L.circleMarker(
                [27.2850774684598, -81.43364197265868],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_39de105a9f3ffe8a7c6cd823de8ec11b = L.circleMarker(
                [27.243754691593953, -81.40006512830422],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
    
            var circle_marker_9cda64d4cbf6f124ac28d5ed7d8a992b = L.circleMarker(
                [27.37937557184798, -81.4286044623964],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;#268a6d&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;#268a6d&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 6, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_f1774b86214832d08db672d3b1789192);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Geospatial</category>
  <guid>https://www.jtrive.com/posts/distance-to-coastline/distance-to-coastline.html</guid>
  <pubDate>Mon, 14 Oct 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>A Data-Driven Approach to Ranking Teams in Uneven Paired Competition</title>
  <link>https://www.jtrive.com/posts/direct-method-eigenrankings/direct-method-eigenrankings.html</link>
  <description><![CDATA[ 





<p>I recently came across <a href="http://stat.wharton.upenn.edu/~steele/Courses/956/Ranking/RankingFootballSIAM93.pdf"><em>The Perron-Frobenius and the Ranking of Football Teams</em></a>, an interesting paper in which the author describes four different methods to rank teams in uneven paired competition. He goes on to show how each of these methods depends in some way on the Perron-Frobenius theorem. The Perron-Frobenius theorem provides key insights into the structure of non-negative matrices, especially in terms of their largest eigenvalue and associated eigenvector. For irreducible non-negative matrices, the theorem guarantees the existence of a dominant eigenvalue that is real, simple, and larger than all others in magnitude, with a corresponding non-negative eigenvector.</p>
<p>An uneven paired competition is one in which the outcome of competition between pairs of teams is known, but the pairings are not evenly matched, meaning the competition is not a round robin in which each team is paired with every other team an equal number of times. A good example is regular season football in-conference play for any of the major NCAA Division I conferences: For the 2023 season, the Big 12 had 14 teams, but each team had only 9 conference games.</p>
<p>Here we focus on the first ranking method, which the author refers to as the “direct method”. The direct method formulates the ranking approach as a linear eigenvalue problem which makes direct use of the Perron-Frobenius theorem. For each team under consideration, the goal is to assign a score to each team based on its interactions with other teams, with the goal that the assigned score reflect both the interactions as well as the strength of opponents. We will then compare our data-driven ranking approach with the final regular season standings and assess how they line up. A similar exercise will be performed focusing on the 2021 MLB regular season. <br></p>
<section id="creating-the-adjacency-matrix" class="level3">
<h3 class="anchored" data-anchor-id="creating-the-adjacency-matrix">Creating the Adjacency Matrix</h3>
<p>It is first necessary to construct the adjacency matrix in order to encode interactions between teams. Big 12 2023 regular season football results were obtained <a href="https://big12sports.com/standings.aspx?standings=193&amp;path=football">here</a>. Within the matrix, the value in cell <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D"> is set to 1 if team <img src="https://latex.codecogs.com/png.latex?i"> defeated team <img src="https://latex.codecogs.com/png.latex?j">, and 0 otherwise. For games that resulted in tie, <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D%20=%20%5Cfrac%7B1%7D%7B2%7D">, but there were no such cases in 2023 Big 12 regular season conference play.</p>
<p>The regular season rankings and adjacency matrix can be downloaded from GitHub (links available in the next cell):</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext watermark</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> eig</span>
<span id="cb1-8"></span>
<span id="cb1-9">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-10">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-11">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-12">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14"></span>
<span id="cb1-15">big12_matrix_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/b9b4ff8620f90045a0377f27ec4eb50f/raw/e6923583530edadbe9da1a1f4821e415d8a7e6f2/2023-big-12-adjacency.csv"</span></span>
<span id="cb1-16">big12_rankings_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/jtrive84/0207b8fd18a05e096a89498290b08d4a/raw/462d2b1bef52d96ae20e077f55501bfa23951ae4/2023-big-12-rankings.csv"</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ------------------------------------------------------------------------------</span></span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>watermark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>conda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>hostname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>machine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>iversions</span>
<span id="cb1-21"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Python implementation: CPython
Python version       : 3.11.10
IPython version      : 8.28.0

conda environment: py311

Compiler    : MSC v.1941 64 bit (AMD64)
OS          : Windows
Release     : 10
Machine     : AMD64
Processor   : Intel64 Family 6 Model 170 Stepping 4, GenuineIntel
CPU cores   : 22
Architecture: 64bit

Hostname: JTRIZPC11

numpy     : 2.1.0
matplotlib: 3.9.2
pandas    : 2.2.2
networkx  : 3.3
</code></pre>
</div>
</div>
<p><br></p>
<p>Big 12 regular season rankings for 2023:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">ranks_big12 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(big12_rankings_url)</span>
<span id="cb3-3"></span>
<span id="cb3-4">ranks_big12.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">team</th>
<th data-quarto-table-cell-role="th">conf_wins</th>
<th data-quarto-table-cell-role="th">conf_losses</th>
<th data-quarto-table-cell-role="th">overall_wins</th>
<th data-quarto-table-cell-role="th">overall_losses</th>
<th data-quarto-table-cell-role="th">conf_win_pct</th>
<th data-quarto-table-cell-role="th">overall_win_pct</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Texas</td>
<td>8</td>
<td>1</td>
<td>12</td>
<td>2</td>
<td>0.889</td>
<td>0.857</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Oklahoma State</td>
<td>7</td>
<td>2</td>
<td>10</td>
<td>4</td>
<td>0.778</td>
<td>0.714</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Oklahoma</td>
<td>7</td>
<td>2</td>
<td>10</td>
<td>3</td>
<td>0.778</td>
<td>0.769</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Iowa State</td>
<td>6</td>
<td>3</td>
<td>7</td>
<td>6</td>
<td>0.667</td>
<td>0.538</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Kansas State</td>
<td>6</td>
<td>3</td>
<td>9</td>
<td>4</td>
<td>0.667</td>
<td>0.692</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>West Virginia</td>
<td>6</td>
<td>3</td>
<td>9</td>
<td>4</td>
<td>0.667</td>
<td>0.692</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Texas Tech</td>
<td>5</td>
<td>4</td>
<td>7</td>
<td>6</td>
<td>0.556</td>
<td>0.538</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>Kansas</td>
<td>5</td>
<td>4</td>
<td>9</td>
<td>4</td>
<td>0.556</td>
<td>0.692</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>UCF</td>
<td>3</td>
<td>6</td>
<td>6</td>
<td>7</td>
<td>0.333</td>
<td>0.462</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>TCU</td>
<td>3</td>
<td>6</td>
<td>5</td>
<td>7</td>
<td>0.333</td>
<td>0.417</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>Houston</td>
<td>2</td>
<td>7</td>
<td>4</td>
<td>8</td>
<td>0.222</td>
<td>0.333</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>BYU</td>
<td>2</td>
<td>7</td>
<td>5</td>
<td>7</td>
<td>0.222</td>
<td>0.417</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>Baylor</td>
<td>2</td>
<td>7</td>
<td>3</td>
<td>9</td>
<td>0.222</td>
<td>0.250</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>Cincinnati</td>
<td>1</td>
<td>8</td>
<td>3</td>
<td>9</td>
<td>0.111</td>
<td>0.250</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>The adjacency matrix considers only conference play (non-conference games excluded):</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">adj_big12 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(big12_matrix_url)</span>
<span id="cb4-3"></span>
<span id="cb4-4">adj_big12.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Unnamed: 0</th>
<th data-quarto-table-cell-role="th">Baylor</th>
<th data-quarto-table-cell-role="th">BYU</th>
<th data-quarto-table-cell-role="th">Cincinnati</th>
<th data-quarto-table-cell-role="th">Houston</th>
<th data-quarto-table-cell-role="th">Iowa State</th>
<th data-quarto-table-cell-role="th">Kansas</th>
<th data-quarto-table-cell-role="th">Kansas State</th>
<th data-quarto-table-cell-role="th">Oklahoma</th>
<th data-quarto-table-cell-role="th">Oklahoma State</th>
<th data-quarto-table-cell-role="th">TCU</th>
<th data-quarto-table-cell-role="th">Texas</th>
<th data-quarto-table-cell-role="th">Texas Tech</th>
<th data-quarto-table-cell-role="th">UCF</th>
<th data-quarto-table-cell-role="th">West Virginia</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Baylor</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>BYU</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Cincinnati</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Houston</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Iowa State</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Kansas</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Kansas State</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>Oklahoma</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>Oklahoma State</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>TCU</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>Texas</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>Texas Tech</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>UCF</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>West Virginia</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>For each row in <code>adj_big12</code>, 1 indicates that team at row <img src="https://latex.codecogs.com/png.latex?i"> defeated the team in column <img src="https://latex.codecogs.com/png.latex?j">. For example, Oklahoma defeated BYU 31-24 in 2023, so the value at the intersection of row Oklahoma and column BYU is 1. The value at the intersection of row BYU and column Oklahoma is 0, since BYU did not defeat Oklahoma in 2023, and they only faced each other in one contest.</p>
<p>The sum of each row in the adjacency matrix represents the number of regular season wins in conference play for a given team. Texas was 8-1 in 2023 regular season conference play, therefore the sum of the Texas row is 8. The columnar sum represents the number of losses for a given team (for Texas, this is 1).</p>
<p>We can use NetworkX to visualize the relationships encoded in the adjacency matrix (each node label corresponds to the alphabetical enumeration of teams: 0=Baylor, 1=BYU, … 13=West Virginia). Edges indicate whether team <img src="https://latex.codecogs.com/png.latex?i"> and team <img src="https://latex.codecogs.com/png.latex?j"> faced each other in a regular season contest:</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create adjacency matrix as Numpy array. </span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># team_names = dfadj["Unnamed: 0"].values</span></span>
<span id="cb5-7">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> adj_big12.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unnamed: 0"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).values</span>
<span id="cb5-8">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.from_numpy_array(A)</span>
<span id="cb5-9"></span>
<span id="cb5-10">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-11">ax.set_title(</span>
<span id="cb5-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023 Big-12 Regular Season Football Matchups"</span>, </span>
<span id="cb5-13">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb5-14">)</span>
<span id="cb5-15">nx.draw_networkx(</span>
<span id="cb5-16">    G, node_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#E02C70"</span>, node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">350</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, with_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb5-17">    edge_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey"</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nx.spring_layout(G, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb5-18">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/direct-method-eigenrankings/direct-method-eigenrankings_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>The adjacency matrix, <img src="https://latex.codecogs.com/png.latex?A">:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">A</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
       [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0],
       [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0],
       [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0],
       [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1],
       [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1],
       [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0],
       [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
       [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0]])</code></pre>
</div>
</div>
<p><br></p>
<p>If we create an initial ranking vector <img src="https://latex.codecogs.com/png.latex?r_%7B0%7D"> with all values set to 1, the the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> component of <img src="https://latex.codecogs.com/png.latex?Ar_%7B0%7D"> is the winning percentage for team <img src="https://latex.codecogs.com/png.latex?i"> (after dividing by the number of games played):</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2">r0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb8-3">win_pcts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> r0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb8-4"></span>
<span id="cb8-5">pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(adj_big12.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:], win_pcts.tolist())</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pairs:</span>
<span id="cb8-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('Baylor', 0.2222222222222222)
('BYU', 0.2222222222222222)
('Cincinnati', 0.1111111111111111)
('Houston', 0.2222222222222222)
('Iowa State', 0.6666666666666666)
('Kansas', 0.5555555555555556)
('Kansas State', 0.6666666666666666)
('Oklahoma', 0.7777777777777778)
('Oklahoma State', 0.7777777777777778)
('TCU', 0.3333333333333333)
('Texas', 0.8888888888888888)
('Texas Tech', 0.5555555555555556)
('UCF', 0.3333333333333333)
('West Virginia', 0.6666666666666666)</code></pre>
</div>
</div>
<p><br></p>
<p>This aligns with values in the <em>conf_win_pct</em> column from <code>ranks_big12</code>.</p>
<p>The <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> component of <img src="https://latex.codecogs.com/png.latex?A%5E%7B2%7Dr_%7B0%7D"> represents the average winning percentage of the teams that team <img src="https://latex.codecogs.com/png.latex?i"> defeated. As the author highlights, <img src="https://latex.codecogs.com/png.latex?A%5E%7B2%7Dr_%7B0%7D"> can be considered a proxy for strength of schedule. In the limit as <img src="https://latex.codecogs.com/png.latex?n"> goes to infinity, <img src="https://latex.codecogs.com/png.latex?A%5E%7Bn%7Dr_%7B0%7D/%7CA%5E%7Bn%7Dr_%7B0%7D%7C"> converges to the unique positive eigenvector of <img src="https://latex.codecogs.com/png.latex?A">, and the magnitude of the entries of this eigenvector gives a ranking of teams.</p>
<p>If <img src="https://latex.codecogs.com/png.latex?A"> has nonnegative entries (which will always be the case given out definition of <img src="https://latex.codecogs.com/png.latex?A">), then it has an eigenvector <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Br%7D"> with non-negative entries associated with a positive eigenvalue <img src="https://latex.codecogs.com/png.latex?%5Clambda">. If <img src="https://latex.codecogs.com/png.latex?A"> is irreducible, then <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Br%7D"> has strictly positive entries and the corresponding eigenvalue is the one of largest absolute value. Note however that if <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Br%7D"> is an eigenvector of <img src="https://latex.codecogs.com/png.latex?A">, so is <img src="https://latex.codecogs.com/png.latex?-%5Cvec%7Br%7D">. In practice, we simply take the absolute value of the eigenvector associated with the largest eigenvalue. Note that for <img src="https://latex.codecogs.com/png.latex?A"> to be irreducible, there can be no winless teams.</p>
<p>The steps for deriving our rankings are outlined below:</p>
<ol type="1">
<li><p>Construct the adjacency matrix <img src="https://latex.codecogs.com/png.latex?A">, in which entry <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D"> represents the number of times team <img src="https://latex.codecogs.com/png.latex?i"> defeated team <img src="https://latex.codecogs.com/png.latex?j">.</p></li>
<li><p>Perform the eigendecomposition of <img src="https://latex.codecogs.com/png.latex?A">, factoring the matrix into its eigenvalues and eigenvectors.</p></li>
<li><p>Identify the index of the largest eigenvalue.</p></li>
<li><p>Extract the eigenvector at the index identified in step 3. If using Numpy and the maximum eigenvalue is found at index <img src="https://latex.codecogs.com/png.latex?j">, the corresponding eigenvector <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Br%7D"> will be located in column <img src="https://latex.codecogs.com/png.latex?j">.</p></li>
<li><p>Take the absolute value of <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Br%7D">. The value at index <img src="https://latex.codecogs.com/png.latex?i"> in <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Br%7D"> represents the score for the team at the same index (for the Big 12 example, index 0 = Baylor, index 1 = BYU, …).</p></li>
<li><p>Sort the eigenvector scores in decreasing order; higher performing teams will have a larger value, poorer performing teams will have a smaller value.</p></li>
</ol>
<p><br></p>
<p>Keep in mind that using a binary encoding scheme in a football setting, where each team may only compete once per season, overlooks information that could enhance the encoding. As it stands, a victory by 80 points for team A over team B is treated the same as a victory in triple overtime. In sports where teams face each other multiple times in a season, <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D"> serves as a better indicator of the relative strength between the two teams. We’ll explore regular season Major League Baseball results later.</p>
<p>The next cell demonstrates how to implement the ranking procedure using Numpy.</p>
<div id="cell-14" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> eig</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjacency matrix as Numpy array.</span></span>
<span id="cb10-5">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> adj_big12.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unnamed: 0"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).values.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform eigendecomposition of A. </span></span>
<span id="cb10-8">e_vals, e_vecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eig(A)</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify index of largest eigenvalue. </span></span>
<span id="cb10-11">e_val1_indx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(e_vals)</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract real part of eigenvector at index e_val1_indx. </span></span>
<span id="cb10-14">e_vec1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(e_vecs[:, e_val1_indx])</span>
<span id="cb10-15"></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get indices associated with each team.</span></span>
<span id="cb10-17">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argsort(e_vec1)[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-18"></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Associate ranks with teams. </span></span>
<span id="cb10-20">teams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> adj_big12.columns[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb10-21">ranked_teams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> teams[indices]</span>
<span id="cb10-22"></span>
<span id="cb10-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> team <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ranked_teams:</span>
<span id="cb10-24">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(team)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Texas
Oklahoma State
Oklahoma
Kansas
Iowa State
Kansas State
Texas Tech
West Virginia
UCF
Houston
BYU
TCU
Baylor
Cincinnati</code></pre>
</div>
</div>
<p><br></p>
<p>We can compare actual vs.&nbsp;predicted rankings to see how well the direct method performed:</p>
<div id="cell-16" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> jj, team <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(ranked_teams):</span>
<span id="cb12-3">    actual_rank <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ranks_big12[ranks_big12.team<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>team].index.item()</span>
<span id="cb12-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>team<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: actual/predicted : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>actual_rank<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>jj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-5"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Texas: actual/predicted : 0/0
Oklahoma State: actual/predicted : 1/1
Oklahoma: actual/predicted : 2/2
Kansas: actual/predicted : 7/3
Iowa State: actual/predicted : 3/4
Kansas State: actual/predicted : 4/5
Texas Tech: actual/predicted : 6/6
West Virginia: actual/predicted : 5/7
UCF: actual/predicted : 8/8
Houston: actual/predicted : 10/9
BYU: actual/predicted : 11/10
TCU: actual/predicted : 9/11
Baylor: actual/predicted : 12/12
Cincinnati: actual/predicted : 13/13</code></pre>
</div>
</div>
<p>There are a few discrepancies, but the ranks are largely consistent. An interesting discrepancy is Kansas, having an actual rank of 7 vs.&nbsp;a predicted rank of 3. It’s difficult to say why Kansas is given such a high rank, but it may have to do with strength of schedule.</p>
<p>For the bottom five teams, the direct method does a good job. Three of the five teams have the same in-conference winning percentage, therefore slight out-of-orderings aren’t of concern.</p>
<p>Next let’s look at a more substantial example: All games for the 2021 MLB regular season.</p>
<p><br></p>
</section>
<section id="mlb-example" class="level3">
<h3 class="anchored" data-anchor-id="mlb-example">MLB Example</h3>
<p>A Major League Baseball dataset with game results from 2016-2021 is available on <a href="https://www.kaggle.com/datasets/josephvm/mlb-game-data">Kaggle</a>. The <em>games.csv</em> dataset has information about each contest that can be used to build an adjacency matrix. We load the dataset and inspect the first few records:</p>
<div id="cell-19" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb14-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb14-4"></span>
<span id="cb14-5">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb14-6">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb14-7">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb14-8">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/Users/jtriv/datasets/MLB/games.csv"</span>)</span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"df.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-13"></span>
<span id="cb14-14">df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>df.shape: (13439, 43)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Game</th>
<th data-quarto-table-cell-role="th">away</th>
<th data-quarto-table-cell-role="th">away-record</th>
<th data-quarto-table-cell-role="th">awayaway-record</th>
<th data-quarto-table-cell-role="th">home</th>
<th data-quarto-table-cell-role="th">home-record</th>
<th data-quarto-table-cell-role="th">homehome-record</th>
<th data-quarto-table-cell-role="th">away-score</th>
<th data-quarto-table-cell-role="th">home-score</th>
<th data-quarto-table-cell-role="th">postseason info</th>
<th data-quarto-table-cell-role="th">Walks Issued - Away</th>
<th data-quarto-table-cell-role="th">Walks Issued - Home</th>
<th data-quarto-table-cell-role="th">Stolen Bases - Away</th>
<th data-quarto-table-cell-role="th">Stolen Bases - Home</th>
<th data-quarto-table-cell-role="th">Strikeouts Thrown - Away</th>
<th data-quarto-table-cell-role="th">Strikeouts Thrown - Home</th>
<th data-quarto-table-cell-role="th">Total Bases - Away</th>
<th data-quarto-table-cell-role="th">Total Bases - Home</th>
<th data-quarto-table-cell-role="th">Stadium</th>
<th data-quarto-table-cell-role="th">Date</th>
<th data-quarto-table-cell-role="th">Location</th>
<th data-quarto-table-cell-role="th">Odds</th>
<th data-quarto-table-cell-role="th">O/U</th>
<th data-quarto-table-cell-role="th">Attendance</th>
<th data-quarto-table-cell-role="th">Capacity</th>
<th data-quarto-table-cell-role="th">Duration</th>
<th data-quarto-table-cell-role="th">Umpires</th>
<th data-quarto-table-cell-role="th">WIN - Pitcher - Stats</th>
<th data-quarto-table-cell-role="th">WIN - Pitcher - Id</th>
<th data-quarto-table-cell-role="th">WIN - Pitcher - Name</th>
<th data-quarto-table-cell-role="th">WIN - Pitcher - AbbrName</th>
<th data-quarto-table-cell-role="th">WIN - Pitcher - Record</th>
<th data-quarto-table-cell-role="th">LOSS - Pitcher - Stats</th>
<th data-quarto-table-cell-role="th">LOSS - Pitcher - Id</th>
<th data-quarto-table-cell-role="th">LOSS - Pitcher - Name</th>
<th data-quarto-table-cell-role="th">LOSS - Pitcher - AbbrName</th>
<th data-quarto-table-cell-role="th">LOSS - Pitcher - Record</th>
<th data-quarto-table-cell-role="th">SAVE - Pitcher - Stats</th>
<th data-quarto-table-cell-role="th">SAVE - Pitcher - Id</th>
<th data-quarto-table-cell-role="th">SAVE - Pitcher - Name</th>
<th data-quarto-table-cell-role="th">SAVE - Pitcher - AbbrName</th>
<th data-quarto-table-cell-role="th">SAVE - Pitcher - Record</th>
<th data-quarto-table-cell-role="th">Extra Innings</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>360403123</td>
<td>STL</td>
<td>0-1</td>
<td>0-1 Away</td>
<td>PIT</td>
<td>Jan-00</td>
<td>1-0 Home</td>
<td>1.0</td>
<td>4.0</td>
<td>NaN</td>
<td>5.0</td>
<td>5.0</td>
<td>0.0</td>
<td>0.0</td>
<td>5.0</td>
<td>14.0</td>
<td>5.0</td>
<td>13.0</td>
<td>\n\n\n\n\n\t\t\t\t\t\t\tPNC Park\n\t\t\t\t\t\t...</td>
<td>2016-04-03T17:00Z</td>
<td>Pittsburgh, Pennsylvania\n\t\t\t\t\t\t\t\n\t\t...</td>
<td>NaN</td>
<td>NaN</td>
<td>39,500</td>
<td>38,362</td>
<td>3:02</td>
<td>Home Plate Umpire - Jerry Layne, First Base Um...</td>
<td>6.0 IP, 0 ER, 10 K, 5 BB</td>
<td>6211.0</td>
<td>Francisco Liriano</td>
<td>F. Liriano</td>
<td>(1-0)</td>
<td>6.0 IP, 3 ER, 3 K, 3 BB</td>
<td>5403.0</td>
<td>Adam Wainwright</td>
<td>A. Wainwright</td>
<td>(0-1)</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>360403130</td>
<td>TOR</td>
<td>Jan-00</td>
<td>1-0 Away</td>
<td>TB</td>
<td>0-1</td>
<td>0-1 Home</td>
<td>5.0</td>
<td>3.0</td>
<td>NaN</td>
<td>1.0</td>
<td>3.0</td>
<td>0.0</td>
<td>0.0</td>
<td>7.0</td>
<td>16.0</td>
<td>11.0</td>
<td>11.0</td>
<td>\n\n\n\n\n\t\t\t\t\t\t\tTropicana Field\n\t\t\...</td>
<td>2016-04-03T20:00Z</td>
<td>St. Petersburg, Florida\n\t\t\t\t\t\t\t\n\t\t\...</td>
<td>NaN</td>
<td>NaN</td>
<td>31,042</td>
<td>31,042</td>
<td>2:51</td>
<td>Home Plate Umpire - Mike Everitt, First Base U...</td>
<td>8.0 IP, 3 ER, 5 K, 1 BB</td>
<td>32815.0</td>
<td>Marcus Stroman</td>
<td>M. Stroman</td>
<td>(1-0)</td>
<td>5.0 IP, 2 ER, 12 K, 3 BB</td>
<td>31003.0</td>
<td>Chris Archer</td>
<td>C. Archer</td>
<td>(0-1)</td>
<td>1.0 IP, 0 ER, 2 K, 0 BB</td>
<td>32693.0</td>
<td>Roberto Osuna</td>
<td>R. Osuna</td>
<td>-1.0</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>360403107</td>
<td>NYM</td>
<td>0-1</td>
<td>0-1 Away</td>
<td>KC</td>
<td>Jan-00</td>
<td>1-0 Home</td>
<td>3.0</td>
<td>4.0</td>
<td>NaN</td>
<td>2.0</td>
<td>6.0</td>
<td>0.0</td>
<td>1.0</td>
<td>3.0</td>
<td>9.0</td>
<td>8.0</td>
<td>9.0</td>
<td>\n\n\n\n\n\t\t\t\t\t\t\tKauffman Stadium\n\t\t...</td>
<td>2016-04-04T00:30Z</td>
<td>Kansas City, Missouri\n\t\t\t\t\t\t\t\n\t\t\t\...</td>
<td>NaN</td>
<td>NaN</td>
<td>40,030</td>
<td>37,903</td>
<td>3:13</td>
<td>Home Plate Umpire - Gerry Davis, First Base Um...</td>
<td>6.0 IP, 0 ER, 5 K, 3 BB</td>
<td>6401.0</td>
<td>Edinson Volquez</td>
<td>E. Volquez</td>
<td>(1-0)</td>
<td>5.2 IP, 3 ER, 2 K, 2 BB</td>
<td>31214.0</td>
<td>Matt Harvey</td>
<td>M. Harvey</td>
<td>(0-1)</td>
<td>1.0 IP, 0 ER, 2 K, 1 BB</td>
<td>28957.0</td>
<td>Wade Davis</td>
<td>W. Davis</td>
<td>-1.0</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>It is first necessary to filter down to 2021 regular season games. If “postseason info” column is null, we assume the game is a regular season matchup. The “Date” column is used to extract the year.</p>
<p>In order to create the adjacency matrix only “away”, “home”, “away-score” and “home-score” need be retained. All other columns are removed:</p>
<div id="cell-21" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yyyy"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span>]).dt.year</span>
<span id="cb16-3"></span>
<span id="cb16-4">df21 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb16-5">    df[(pd.isnull(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postseason info"</span>])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yyyy"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>)]</span>
<span id="cb16-6">    .dropna(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"away"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"away-score"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home-score"</span>])</span>
<span id="cb16-7">    .rename({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"away-score"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"away_score"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home-score"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home_score"</span>}, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-8">    [[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"away"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"away_score"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home_score"</span>]]</span>
<span id="cb16-9">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-10">)</span>
<span id="cb16-11"></span>
<span id="cb16-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"df21.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df21<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-13"></span>
<span id="cb16-14">df21.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>df21.shape: (2310, 4)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">away</th>
<th data-quarto-table-cell-role="th">home</th>
<th data-quarto-table-cell-role="th">away_score</th>
<th data-quarto-table-cell-role="th">home_score</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>TOR</td>
<td>NYY</td>
<td>3.0</td>
<td>2.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>CLE</td>
<td>DET</td>
<td>2.0</td>
<td>3.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>MIN</td>
<td>MIL</td>
<td>5.0</td>
<td>6.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>PIT</td>
<td>CHC</td>
<td>5.0</td>
<td>3.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>ATL</td>
<td>PHI</td>
<td>2.0</td>
<td>3.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>ARI</td>
<td>SD</td>
<td>7.0</td>
<td>8.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>LAD</td>
<td>COL</td>
<td>5.0</td>
<td>8.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>STL</td>
<td>CIN</td>
<td>11.0</td>
<td>6.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>TB</td>
<td>MIA</td>
<td>1.0</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>TEX</td>
<td>KC</td>
<td>10.0</td>
<td>14.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>CHW</td>
<td>LAA</td>
<td>3.0</td>
<td>4.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>HOU</td>
<td>OAK</td>
<td>8.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>SF</td>
<td>SEA</td>
<td>7.0</td>
<td>8.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>BAL</td>
<td>BOS</td>
<td>3.0</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>TB</td>
<td>MIA</td>
<td>6.0</td>
<td>4.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>All 30 MLB teams are represented in the “home” and away” columns. An empty DataFrame is created with columns and rows indexed using the 30 teams ordered alphabetically.</p>
<div id="cell-23" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create empty DataFrame with rows and columns indexed by the 30 MLB teams.</span></span>
<span id="cb18-3">mlb_teams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(df21[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home"</span>].unique().tolist())</span>
<span id="cb18-4">dfadj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mlb_teams, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mlb_teams)</span>
<span id="cb18-5">dfadj.loc[:,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-6"></span>
<span id="cb18-7">dfadj</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">ARI</th>
<th data-quarto-table-cell-role="th">ATL</th>
<th data-quarto-table-cell-role="th">BAL</th>
<th data-quarto-table-cell-role="th">BOS</th>
<th data-quarto-table-cell-role="th">CHC</th>
<th data-quarto-table-cell-role="th">CHW</th>
<th data-quarto-table-cell-role="th">CIN</th>
<th data-quarto-table-cell-role="th">CLE</th>
<th data-quarto-table-cell-role="th">COL</th>
<th data-quarto-table-cell-role="th">DET</th>
<th data-quarto-table-cell-role="th">HOU</th>
<th data-quarto-table-cell-role="th">KC</th>
<th data-quarto-table-cell-role="th">LAA</th>
<th data-quarto-table-cell-role="th">LAD</th>
<th data-quarto-table-cell-role="th">MIA</th>
<th data-quarto-table-cell-role="th">MIL</th>
<th data-quarto-table-cell-role="th">MIN</th>
<th data-quarto-table-cell-role="th">NYM</th>
<th data-quarto-table-cell-role="th">NYY</th>
<th data-quarto-table-cell-role="th">OAK</th>
<th data-quarto-table-cell-role="th">PHI</th>
<th data-quarto-table-cell-role="th">PIT</th>
<th data-quarto-table-cell-role="th">SD</th>
<th data-quarto-table-cell-role="th">SEA</th>
<th data-quarto-table-cell-role="th">SF</th>
<th data-quarto-table-cell-role="th">STL</th>
<th data-quarto-table-cell-role="th">TB</th>
<th data-quarto-table-cell-role="th">TEX</th>
<th data-quarto-table-cell-role="th">TOR</th>
<th data-quarto-table-cell-role="th">WSH</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ARI</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ATL</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">BAL</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">BOS</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CHC</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">CHW</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CIN</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">CLE</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">COL</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DET</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">HOU</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">KC</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">LAA</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">LAD</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">MIA</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MIL</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">MIN</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">NYM</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">NYY</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">OAK</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">PHI</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">PIT</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SD</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">SEA</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SF</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">STL</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">TB</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TEX</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">TOR</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">WSH</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>We iterate over <code>df21</code>, updating values in <code>dfadj</code> according to the following rules:</p>
<ul>
<li>If team in row <img src="https://latex.codecogs.com/png.latex?i"> defeated team in column <img src="https://latex.codecogs.com/png.latex?j">, <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D"> is incremented by 1.</li>
<li>If team in row <img src="https://latex.codecogs.com/png.latex?i"> lost to team in column <img src="https://latex.codecogs.com/png.latex?j">, <img src="https://latex.codecogs.com/png.latex?a_%7Bji%7D"> is incremented by 1.</li>
<li>If the contest resulted in a tie, <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D"> and <img src="https://latex.codecogs.com/png.latex?a_%7Bji%7D"> are incremented by <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D">, but there are no ties in <code>df21</code>.</li>
</ul>
<p>A dictionary <code>dresults</code> tracking wins and losses for each team is also created, in order to use regular season winning percentage as a proxy to compare against our direct method rankings.</p>
<div id="cell-25" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"></span>
<span id="cb19-2">dresults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {kk: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wins"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"losses"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> kk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dfadj.columns}</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> rr <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df21.itertuples(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb19-5"></span>
<span id="cb19-6">    ii, jj, ii_score, jj_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rr.away, rr.home, rr.away_score, rr.home_score</span>
<span id="cb19-7"></span>
<span id="cb19-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> jj_score:</span>
<span id="cb19-9">        dfadj.at[ii, jj]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span></span>
<span id="cb19-10">        dfadj.at[jj, ii]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span></span>
<span id="cb19-11"></span>
<span id="cb19-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> ii_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> jj_score:</span>
<span id="cb19-13">        dfadj.at[ii, jj]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-14">        dresults[ii][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wins"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-15">        dresults[jj][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"losses"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-16"></span>
<span id="cb19-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb19-18">        dfadj.at[jj, ii]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-19">        dresults[jj][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wins"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-20">        dresults[ii][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"losses"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-21"></span>
<span id="cb19-22">dfadj</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">ARI</th>
<th data-quarto-table-cell-role="th">ATL</th>
<th data-quarto-table-cell-role="th">BAL</th>
<th data-quarto-table-cell-role="th">BOS</th>
<th data-quarto-table-cell-role="th">CHC</th>
<th data-quarto-table-cell-role="th">CHW</th>
<th data-quarto-table-cell-role="th">CIN</th>
<th data-quarto-table-cell-role="th">CLE</th>
<th data-quarto-table-cell-role="th">COL</th>
<th data-quarto-table-cell-role="th">DET</th>
<th data-quarto-table-cell-role="th">HOU</th>
<th data-quarto-table-cell-role="th">KC</th>
<th data-quarto-table-cell-role="th">LAA</th>
<th data-quarto-table-cell-role="th">LAD</th>
<th data-quarto-table-cell-role="th">MIA</th>
<th data-quarto-table-cell-role="th">MIL</th>
<th data-quarto-table-cell-role="th">MIN</th>
<th data-quarto-table-cell-role="th">NYM</th>
<th data-quarto-table-cell-role="th">NYY</th>
<th data-quarto-table-cell-role="th">OAK</th>
<th data-quarto-table-cell-role="th">PHI</th>
<th data-quarto-table-cell-role="th">PIT</th>
<th data-quarto-table-cell-role="th">SD</th>
<th data-quarto-table-cell-role="th">SEA</th>
<th data-quarto-table-cell-role="th">SF</th>
<th data-quarto-table-cell-role="th">STL</th>
<th data-quarto-table-cell-role="th">TB</th>
<th data-quarto-table-cell-role="th">TEX</th>
<th data-quarto-table-cell-role="th">TOR</th>
<th data-quarto-table-cell-role="th">WSH</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ARI</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>9</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>4</td>
<td>8</td>
<td>2</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ATL</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>1</td>
<td>5</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>11</td>
<td>3</td>
<td>0</td>
<td>9</td>
<td>1</td>
<td>0</td>
<td>10</td>
<td>4</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>5</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">BAL</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>1</td>
<td>8</td>
<td>3</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>4</td>
<td>5</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">BOS</td>
<td>0</td>
<td>3</td>
<td>13</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>2</td>
<td>5</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>4</td>
<td>10</td>
<td>3</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>8</td>
<td>2</td>
<td>8</td>
<td>3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CHC</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>8</td>
<td>1</td>
<td>2</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>1</td>
<td>4</td>
<td>2</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>14</td>
<td>5</td>
<td>0</td>
<td>1</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">CHW</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>2</td>
<td>5</td>
<td>0</td>
<td>3</td>
<td>9</td>
<td>0</td>
<td>9</td>
<td>2</td>
<td>8</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>12</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>3</td>
<td>5</td>
<td>4</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">CIN</td>
<td>1</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>11</td>
<td>1</td>
<td>0</td>
<td>3</td>
<td>5</td>
<td>1</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>5</td>
<td>9</td>
<td>2</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>12</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">CLE</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>2</td>
<td>3</td>
<td>7</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>12</td>
<td>1</td>
<td>13</td>
<td>5</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>7</td>
<td>0</td>
<td>3</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>1</td>
<td>4</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">COL</td>
<td>10</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>6</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>5</td>
<td>4</td>
<td>10</td>
<td>2</td>
<td>3</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DET</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>3</td>
<td>1</td>
<td>7</td>
<td>2</td>
<td>5</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>8</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>6</td>
<td>0</td>
<td>3</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>3</td>
<td>4</td>
<td>6</td>
<td>3</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">HOU</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>5</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>6</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>3</td>
<td>13</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>11</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>11</td>
<td>1</td>
<td>0</td>
<td>4</td>
<td>14</td>
<td>4</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">KC</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>2</td>
<td>3</td>
<td>9</td>
<td>1</td>
<td>3</td>
<td>0</td>
<td>11</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>10</td>
<td>0</td>
<td>2</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">LAA</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>3</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>6</td>
<td>6</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>4</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>8</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>11</td>
<td>3</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">LAD</td>
<td>16</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>13</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>4</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>2</td>
<td>4</td>
<td>6</td>
<td>12</td>
<td>3</td>
<td>9</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>7</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">MIA</td>
<td>5</td>
<td>8</td>
<td>2</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td>9</td>
<td>2</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>8</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">MIL</td>
<td>6</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>13</td>
<td>2</td>
<td>10</td>
<td>3</td>
<td>5</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>13</td>
<td>5</td>
<td>0</td>
<td>4</td>
<td>8</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">MIN</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>2</td>
<td>2</td>
<td>5</td>
<td>2</td>
<td>10</td>
<td>0</td>
<td>10</td>
<td>4</td>
<td>9</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>3</td>
<td>4</td>
<td>3</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">NYM</td>
<td>5</td>
<td>7</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>9</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>6</td>
<td>2</td>
<td>4</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>8</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">NYY</td>
<td>0</td>
<td>3</td>
<td>11</td>
<td>7</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>4</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>5</td>
<td>1</td>
<td>0</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>0</td>
<td>8</td>
<td>6</td>
<td>7</td>
<td>2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">OAK</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>2</td>
<td>6</td>
<td>8</td>
<td>5</td>
<td>15</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>4</td>
<td>10</td>
<td>2</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">PHI</td>
<td>3</td>
<td>9</td>
<td>2</td>
<td>3</td>
<td>5</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>9</td>
<td>5</td>
<td>0</td>
<td>9</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">PIT</td>
<td>2</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>1</td>
<td>6</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>5</td>
<td>4</td>
<td>2</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>7</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SD</td>
<td>11</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>7</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>7</td>
<td>4</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>2</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>8</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">SEA</td>
<td>4</td>
<td>0</td>
<td>1</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>4</td>
<td>2</td>
<td>1</td>
<td>8</td>
<td>3</td>
<td>11</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>15</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>6</td>
<td>13</td>
<td>4</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SF</td>
<td>17</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>14</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>10</td>
<td>4</td>
<td>3</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>4</td>
<td>4</td>
<td>3</td>
<td>11</td>
<td>1</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">STL</td>
<td>6</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>8</td>
<td>1</td>
<td>8</td>
<td>2</td>
<td>4</td>
<td>1</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>3</td>
<td>6</td>
<td>11</td>
<td>2</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>12</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">TB</td>
<td>0</td>
<td>2</td>
<td>18</td>
<td>11</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>2</td>
<td>4</td>
<td>6</td>
<td>0</td>
<td>5</td>
<td>0</td>
<td>3</td>
<td>3</td>
<td>11</td>
<td>3</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>11</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TEX</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>4</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>2</td>
<td>2</td>
<td>1</td>
<td>5</td>
<td>4</td>
<td>8</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>1</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>6</td>
<td>1</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>2</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">TOR</td>
<td>0</td>
<td>6</td>
<td>12</td>
<td>7</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>3</td>
<td>2</td>
<td>3</td>
<td>2</td>
<td>0</td>
<td>4</td>
<td>0</td>
<td>4</td>
<td>1</td>
<td>10</td>
<td>5</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>8</td>
<td>3</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">WSH</td>
<td>4</td>
<td>5</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>11</td>
<td>1</td>
<td>0</td>
<td>6</td>
<td>1</td>
<td>0</td>
<td>5</td>
<td>4</td>
<td>3</td>
<td>0</td>
<td>1</td>
<td>4</td>
<td>3</td>
<td>0</td>
<td>3</td>
<td>0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>Convert <code>dresults</code> into a DataFrame and add win_pct column:</p>
<div id="cell-27" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2">dfresults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb20-3">    pd.DataFrame().from_dict(dresults, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>)</span>
<span id="cb20-4">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"team"</span>)</span>
<span id="cb20-5">)</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute winning percentage. </span></span>
<span id="cb20-8">dfresults[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"win_pct"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfresults[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wins"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (dfresults[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wins"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dfresults[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"losses"</span>])</span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort values by win_pct. </span></span>
<span id="cb20-11">dfresults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb20-12">    dfresults.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"win_pct"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb20-13">    .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-14">)</span>
<span id="cb20-15"></span>
<span id="cb20-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add win_pct rank column.</span></span>
<span id="cb20-17">dfresults[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rank0"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfresults.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb20-18"></span>
<span id="cb20-19">dfresults.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">team</th>
<th data-quarto-table-cell-role="th">wins</th>
<th data-quarto-table-cell-role="th">losses</th>
<th data-quarto-table-cell-role="th">win_pct</th>
<th data-quarto-table-cell-role="th">rank0</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>SF</td>
<td>105</td>
<td>53</td>
<td>0.664557</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>LAD</td>
<td>106</td>
<td>54</td>
<td>0.662500</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>TB</td>
<td>98</td>
<td>62</td>
<td>0.612500</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>HOU</td>
<td>94</td>
<td>66</td>
<td>0.587500</td>
<td>4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>MIL</td>
<td>89</td>
<td>65</td>
<td>0.577922</td>
<td>5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>BOS</td>
<td>86</td>
<td>64</td>
<td>0.573333</td>
<td>6</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>NYY</td>
<td>86</td>
<td>67</td>
<td>0.562092</td>
<td>7</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>ATL</td>
<td>84</td>
<td>66</td>
<td>0.560000</td>
<td>8</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>TOR</td>
<td>82</td>
<td>65</td>
<td>0.557823</td>
<td>9</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>CHW</td>
<td>82</td>
<td>66</td>
<td>0.554054</td>
<td>10</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>SEA</td>
<td>88</td>
<td>71</td>
<td>0.553459</td>
<td>11</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>STL</td>
<td>85</td>
<td>69</td>
<td>0.551948</td>
<td>12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>OAK</td>
<td>84</td>
<td>76</td>
<td>0.525000</td>
<td>13</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>PHI</td>
<td>80</td>
<td>74</td>
<td>0.519481</td>
<td>14</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>CLE</td>
<td>74</td>
<td>73</td>
<td>0.503401</td>
<td>15</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>CIN</td>
<td>80</td>
<td>79</td>
<td>0.503145</td>
<td>16</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>SD</td>
<td>77</td>
<td>82</td>
<td>0.484277</td>
<td>17</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>LAA</td>
<td>75</td>
<td>82</td>
<td>0.477707</td>
<td>18</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>DET</td>
<td>71</td>
<td>79</td>
<td>0.473333</td>
<td>19</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>COL</td>
<td>70</td>
<td>79</td>
<td>0.469799</td>
<td>20</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>MIN</td>
<td>69</td>
<td>79</td>
<td>0.466216</td>
<td>21</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">21</td>
<td>KC</td>
<td>70</td>
<td>85</td>
<td>0.451613</td>
<td>22</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">22</td>
<td>NYM</td>
<td>61</td>
<td>76</td>
<td>0.445255</td>
<td>23</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">23</td>
<td>CHC</td>
<td>68</td>
<td>86</td>
<td>0.441558</td>
<td>24</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">24</td>
<td>MIA</td>
<td>66</td>
<td>93</td>
<td>0.415094</td>
<td>25</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">25</td>
<td>WSH</td>
<td>62</td>
<td>89</td>
<td>0.410596</td>
<td>26</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26</td>
<td>TEX</td>
<td>60</td>
<td>100</td>
<td>0.375000</td>
<td>27</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">27</td>
<td>PIT</td>
<td>56</td>
<td>97</td>
<td>0.366013</td>
<td>28</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">28</td>
<td>BAL</td>
<td>51</td>
<td>103</td>
<td>0.331169</td>
<td>29</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">29</td>
<td>ARI</td>
<td>51</td>
<td>110</td>
<td>0.316770</td>
<td>30</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>rank0 will be used to compare our results against. Let’s visualize the regular season matchup network:</p>
<div id="cell-29" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"></span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb21-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create adjacency matrix as Numpy array. </span></span>
<span id="cb21-6">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfadj.values.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb21-7">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.from_numpy_array(A)</span>
<span id="cb21-8"></span>
<span id="cb21-9">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb21-10"></span>
<span id="cb21-11">ax.set_title(</span>
<span id="cb21-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021 MLB Regular Season Matchups"</span>, </span>
<span id="cb21-13">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb21-14">)</span>
<span id="cb21-15">nx.draw_networkx(</span>
<span id="cb21-16">    G, node_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#32cd32"</span>, node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, with_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb21-17">    edge_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>, pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nx.spring_layout(G, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb21-18">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/direct-method-eigenrankings/direct-method-eigenrankings_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Next we perform the same steps carried out for the Big 12 analysis:</p>
<div id="cell-31" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"></span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numpy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> eig</span>
<span id="cb22-3"></span>
<span id="cb22-4"></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjacency matrix as Numpy array.</span></span>
<span id="cb22-6">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfadj.values.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb22-7"></span>
<span id="cb22-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform eigendecomposition of A. </span></span>
<span id="cb22-9">e_vals, e_vecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eig(A)</span>
<span id="cb22-10"></span>
<span id="cb22-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify index of largest eigenvalue. </span></span>
<span id="cb22-12">e_val1_indx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(e_vals)</span>
<span id="cb22-13"></span>
<span id="cb22-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract real part of eigenvector at index e_val1_indx. </span></span>
<span id="cb22-15">e_vec1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(e_vecs[:, e_val1_indx])</span>
<span id="cb22-16"></span>
<span id="cb22-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get indices associated with each team.</span></span>
<span id="cb22-18">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argsort(e_vec1)[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb22-19"></span>
<span id="cb22-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Associate ranks with teams. </span></span>
<span id="cb22-21">teams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfadj.columns</span>
<span id="cb22-22">ranked_teams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> teams[indices]</span>
<span id="cb22-23"></span>
<span id="cb22-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> team <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ranked_teams:</span>
<span id="cb22-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(team)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>HOU
TB
LAD
SF
SEA
NYY
OAK
BOS
TOR
CHW
MIL
LAA
STL
SD
DET
CLE
ATL
KC
CIN
MIN
PHI
COL
TEX
CHC
MIA
WSH
BAL
NYM
PIT
ARI</code></pre>
</div>
</div>
<p><br></p>
<p>Again comparing actual vs.&nbsp;predicted ranks, using regular season winning percentage as a proxy for actual rank:</p>
<div id="cell-33" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"></span>
<span id="cb24-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> jj, team <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(ranked_teams, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb24-3">    actual_rank <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfresults[dfresults.team<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>team][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rank0"</span>].item()</span>
<span id="cb24-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>team<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: actual/predicted : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>actual_rank<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>jj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>HOU: actual/predicted : 4/1
TB: actual/predicted : 3/2
LAD: actual/predicted : 2/3
SF: actual/predicted : 1/4
SEA: actual/predicted : 11/5
NYY: actual/predicted : 7/6
OAK: actual/predicted : 13/7
BOS: actual/predicted : 6/8
TOR: actual/predicted : 9/9
CHW: actual/predicted : 10/10
MIL: actual/predicted : 5/11
LAA: actual/predicted : 18/12
STL: actual/predicted : 12/13
SD: actual/predicted : 17/14
DET: actual/predicted : 19/15
CLE: actual/predicted : 15/16
ATL: actual/predicted : 8/17
KC: actual/predicted : 22/18
CIN: actual/predicted : 16/19
MIN: actual/predicted : 21/20
PHI: actual/predicted : 14/21
COL: actual/predicted : 20/22
TEX: actual/predicted : 27/23
CHC: actual/predicted : 24/24
MIA: actual/predicted : 25/25
WSH: actual/predicted : 26/26
BAL: actual/predicted : 29/27
NYM: actual/predicted : 23/28
PIT: actual/predicted : 28/29
ARI: actual/predicted : 30/30</code></pre>
</div>
</div>
<p><br></p>
<p>The Houston Astros are considered the best team based on the direct method, which is encouraging as they ultimately reached the 2021 World Series. One of the biggest discrepancies is with the Atlanta Braves, who were 8th in terms of regular season winning percentage but 17th in terms of the direct method. They went on to win the 2021 World Series. Nonetheless, the modeled ranking are reasonable, and it is clear that the direct might be able to provide further insight into how teams rank looking beyond winning percentage.</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/direct-method-eigenrankings/direct-method-eigenrankings.html</guid>
  <pubDate>Fri, 04 Oct 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Techniques for Convolutional Neural Network Interpretability</title>
  <link>https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability.html</link>
  <description><![CDATA[ 





<p>Saliency maps for Convolutional Neural Networks are a technique used to visualize and understand the behavior of CNN models, particularly in tasks such as image classification, object detection and segmentation. They highlight which parts of an input (like an image) are most important for a model’s decision. They help with understanding how a model is making its predictions by showing the areas that contributed most to its output. The term “saliency” refers to the prominence of certain features, and in the context of deep learning saliency maps can reveal which pixels in an image most influenced the model’s classification task.</p>
<p>In this post, we walkthrough the process of generating saliency maps for holdout images using the CIFAR-10 dataset. To begin, we’ll train a simple Convolutional Neural Network model using PyTorch. After the model is trained, we will use it to generate saliency maps for a random selection of holdout images from the dataset. These saliency maps will help us visualize which parts of the images were most influential in the model’s predictions.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-3">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>, category<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">UserWarning</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage.transform <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rescale, resize</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb1-14"></span>
<span id="cb1-15">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-16">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-17">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-18">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-19"></span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of images to process in each batch. </span></span>
<span id="cb1-22">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify CIFAR-10 classes.</span></span>
<span id="cb1-26">classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plane"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"car"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bird"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dog"</span>, </span>
<span id="cb1-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frog"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"horse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ship"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"truck"</span></span>
<span id="cb1-29">    ]</span>
<span id="cb1-30"></span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ImageNet transforms to normalize images. </span></span>
<span id="cb1-33">transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb1-34">    [transforms.ToTensor(),</span>
<span id="cb1-35">     transforms.Normalize((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))]</span>
<span id="cb1-36">     )</span>
<span id="cb1-37"></span>
<span id="cb1-38"></span>
<span id="cb1-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download CIFAR-10 training and validation data.</span></span>
<span id="cb1-40">train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.datasets.CIFAR10(</span>
<span id="cb1-41">    root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data"</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform</span>
<span id="cb1-42">    )</span>
<span id="cb1-43">valid_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.datasets.CIFAR10(</span>
<span id="cb1-44">    root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data"</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform</span>
<span id="cb1-45">    )</span>
<span id="cb1-46"></span>
<span id="cb1-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create training and validation DataLoader instances. This is what gets </span></span>
<span id="cb1-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterated over during training. </span></span>
<span id="cb1-49">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-50">valid_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_ds, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-51"></span>
<span id="cb1-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Number of training batches of size </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_loader)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Files already downloaded and verified
Files already downloaded and verified

Number of training batches of size 32: 1563</code></pre>
</div>
</div>
<p><br></p>
<p>Define network, training and validation loops.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb3-4"></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BasicCNN(nn.Module):</span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb3-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MaxPool2d(kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>)</span>
<span id="cb3-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">84</span>)</span>
<span id="cb3-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">84</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.drp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Dropout(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout)</span>
<span id="cb3-16">        </span>
<span id="cb3-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X):</span>
<span id="cb3-18">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv1(X)))</span>
<span id="cb3-19">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool(F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.conv2(output)))</span>
<span id="cb3-20">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.flatten(output, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-21">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.drp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1(output)))</span>
<span id="cb3-22">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.drp(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2(output)))</span>
<span id="cb3-23">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc3(output)</span>
<span id="cb3-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> output</span>
<span id="cb3-25"></span>
<span id="cb3-26"></span>
<span id="cb3-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> epoch_trainer(epoch, data_loader, model, loss_fn, optimizer, device, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb3-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Execute a single training epoch. Return last batch training loss</span></span>
<span id="cb3-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and accuracy. </span></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-32">    loss, checkpoint_loss, correct, samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-33"></span>
<span id="cb3-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put model in train mode.</span></span>
<span id="cb3-35">    model.train()</span>
<span id="cb3-36"></span>
<span id="cb3-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over batches in data_loader. </span></span>
<span id="cb3-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, (X, yactual) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(data_loader):</span>
<span id="cb3-39"></span>
<span id="cb3-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Send datasets to device. </span></span>
<span id="cb3-41">        X, yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.to(device), yactual.to(device)</span>
<span id="cb3-42"></span>
<span id="cb3-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero out parameter gradients.</span></span>
<span id="cb3-44">        optimizer.zero_grad()</span>
<span id="cb3-45"></span>
<span id="cb3-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get model predictions (forward pass). </span></span>
<span id="cb3-47">        ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(X)</span>
<span id="cb3-48"></span>
<span id="cb3-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss. </span></span>
<span id="cb3-50">        loss_ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(ypred, yactual)</span>
<span id="cb3-51"></span>
<span id="cb3-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backpropagation and optimizer step. </span></span>
<span id="cb3-53">        loss_ii.backward()</span>
<span id="cb3-54">        optimizer.step()</span>
<span id="cb3-55"></span>
<span id="cb3-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update running_loss.</span></span>
<span id="cb3-57">        loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>loss_ii.item()</span>
<span id="cb3-58">        correct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>(ypred.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>yactual).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb3-59">        samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>yactual.size(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-60"></span>
<span id="cb3-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print running_loss for every 100 mini-batches.</span></span>
<span id="cb3-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-63">            checkpoint_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> samples</span>
<span id="cb3-64">            checkpoint_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span></span>
<span id="cb3-65"></span>
<span id="cb3-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> verbose:</span>
<span id="cb3-67">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">+ [train][epoch=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, batch=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] loss = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, acc = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb3-68">            </span>
<span id="cb3-69">            loss, correct, samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-70"></span>
<span id="cb3-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> checkpoint_loss, checkpoint_acc</span>
<span id="cb3-72">        </span>
<span id="cb3-73"></span>
<span id="cb3-74"></span>
<span id="cb3-75"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> epoch_validator(data_loader, model, loss_fn, optimizer, device):</span>
<span id="cb3-76">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Execute a single validation epoch. Return average validation loss</span></span>
<span id="cb3-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and accuracy.</span></span>
<span id="cb3-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-80">    valid_loss, correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-81"></span>
<span id="cb3-82">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put model in validation mode.</span></span>
<span id="cb3-83">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb3-84"></span>
<span id="cb3-85">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb3-86"></span>
<span id="cb3-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii, (X, yactual) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(data_loader, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-88"></span>
<span id="cb3-89">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Send dataset and target to device. </span></span>
<span id="cb3-90">            X, yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.to(device), yactual.to(device)</span>
<span id="cb3-91"></span>
<span id="cb3-92">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get model predictions. </span></span>
<span id="cb3-93">            ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(X)</span>
<span id="cb3-94"></span>
<span id="cb3-95">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute loss and update valid_loss.</span></span>
<span id="cb3-96">            valid_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>loss_fn(ypred, yactual).item()</span>
<span id="cb3-97"></span>
<span id="cb3-98">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count number of correct class predictions.</span></span>
<span id="cb3-99">            correct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>(ypred.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>yactual).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb3-100"></span>
<span id="cb3-101">    loss, acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ii, correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader.dataset)</span>
<span id="cb3-102"></span>
<span id="cb3-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> loss, acc</span></code></pre></div>
</div>
<p><br></p>
<p>Configure training parameters.</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.optim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> optim</span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Configuration ----------------------------------------------------------------</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of epochs.</span></span>
<span id="cb4-8">n_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate.</span></span>
<span id="cb4-11">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Momentum.</span></span>
<span id="cb4-14">momentum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.90</span></span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dropout.</span></span>
<span id="cb4-17">dropout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ------------------------------------------------------------------------------</span></span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if gpu is available. If not, use cpu. </span></span>
<span id="cb4-22">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda:0"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span>)</span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize instance of BasicCNN. Put on device for completeness.</span></span>
<span id="cb4-25">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BasicCNN(dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout).to(device)</span>
<span id="cb4-26"></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify loss function.</span></span>
<span id="cb4-28">loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.CrossEntropyLoss()</span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify optimizer. </span></span>
<span id="cb4-31">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optim.SGD(mdl.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>momentum)</span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-34"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>device: cpu</code></pre>
</div>
</div>
<p><br></p>
<p>Train model for 25 epochs.</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb6-5"></span>
<span id="cb6-6">    tloss, tacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epoch_trainer(</span>
<span id="cb6-7">        epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch, data_loader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_loader, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mdl, loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_fn, </span>
<span id="cb6-8">        optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb6-9">        )</span>
<span id="cb6-10">    </span>
<span id="cb6-11">    vloss, vacc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epoch_validator(</span>
<span id="cb6-12">        data_loader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_loader, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mdl, loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_fn, </span>
<span id="cb6-13">        optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device</span>
<span id="cb6-14">        )</span>
<span id="cb6-15">    </span>
<span id="cb6-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[epoch=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]: tloss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tloss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, tacc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tacc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, vloss=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vloss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, vacc=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vacc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb6-17"></span>
<span id="cb6-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append metrics to results.</span></span>
<span id="cb6-19">    results.append((tloss, tacc, vloss, vacc))</span>
<span id="cb6-20"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[epoch=1]: tloss=2.11117, tacc=0.23975, vloss=2.01603, vacc=0.27400.
[epoch=2]: tloss=1.71003, tacc=0.36488, vloss=1.68098, vacc=0.37990.
[epoch=3]: tloss=1.54233, tacc=0.44200, vloss=1.53085, vacc=0.44330.
[epoch=4]: tloss=1.43812, tacc=0.48037, vloss=1.42335, vacc=0.47970.
[epoch=5]: tloss=1.37371, tacc=0.50675, vloss=1.34363, vacc=0.51350.
[epoch=6]: tloss=1.31023, tacc=0.53050, vloss=1.30940, vacc=0.53170.
[epoch=7]: tloss=1.25473, tacc=0.55137, vloss=1.26415, vacc=0.54980.
[epoch=8]: tloss=1.19880, tacc=0.58000, vloss=1.20769, vacc=0.57130.
[epoch=9]: tloss=1.14536, tacc=0.60250, vloss=1.23778, vacc=0.56390.
[epoch=10]: tloss=1.10834, tacc=0.60925, vloss=1.15941, vacc=0.58830.
[epoch=11]: tloss=1.10043, tacc=0.61250, vloss=1.12090, vacc=0.60210.
[epoch=12]: tloss=1.06026, tacc=0.62600, vloss=1.11189, vacc=0.60440.
[epoch=13]: tloss=1.04040, tacc=0.63150, vloss=1.10926, vacc=0.60780.
[epoch=14]: tloss=0.98636, tacc=0.65163, vloss=1.08105, vacc=0.62470.
[epoch=15]: tloss=0.99510, tacc=0.65763, vloss=1.11601, vacc=0.60920.
[epoch=16]: tloss=0.93263, tacc=0.67000, vloss=1.04570, vacc=0.63480.
[epoch=17]: tloss=0.92362, tacc=0.67175, vloss=1.03489, vacc=0.63770.
[epoch=18]: tloss=0.89687, tacc=0.68788, vloss=1.03604, vacc=0.64380.
[epoch=19]: tloss=0.88411, tacc=0.69112, vloss=1.07083, vacc=0.62580.
[epoch=20]: tloss=0.84812, tacc=0.69963, vloss=1.03803, vacc=0.64410.
[epoch=21]: tloss=0.82565, tacc=0.70750, vloss=1.01656, vacc=0.64570.
[epoch=22]: tloss=0.81153, tacc=0.71813, vloss=1.02534, vacc=0.65150.
[epoch=23]: tloss=0.80340, tacc=0.72525, vloss=1.04477, vacc=0.64590.
[epoch=24]: tloss=0.80007, tacc=0.72150, vloss=1.01501, vacc=0.65290.
[epoch=25]: tloss=0.78900, tacc=0.72288, vloss=1.03552, vacc=0.64820.</code></pre>
</div>
</div>
<p><br></p>
<p>The gradient of the model’s output class score (or a specific neuron’s activation) with respect to the input image pixels is computed. The gradients are computed using backpropagation through the model. This involves propagating the gradients backward from the output layer to the input layer while computing the partial derivatives of the output with respect to the input. The magnitude of the gradients indicates how sensitive the model’s output is to changes in each pixel of the input image. Pixels with higher magnitude gradients are considered more salient and are highlighted in the saliency map. Once the gradients are computed, they are typically normalized and then visualized as a saliency map, where brighter regions correspond to more salient parts of the image and darker regions correspond to less salient parts.</p>
<p>Below is a function which computes the saliency map for a give image in CIFAR-10, and returns the map with the original image. This can also be accomplished using libraries such has captum, but for this demonstration we’re keeping it simple:</p>
<div id="cell-10" class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_saliency(tensor, model):</span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return saliency map and original image.</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put original image pixels on [0, 1].</span></span>
<span id="cb8-8">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor.squeeze().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).detach().numpy()</span>
<span id="cb8-9"></span>
<span id="cb8-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># img = cv2.resize(img, (224, 224))</span></span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># img = resize(img, (32, 32))</span></span>
<span id="cb8-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># img /= np.max(np.abs(img), axis=0)</span></span>
<span id="cb8-13"></span>
<span id="cb8-14">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb8-15">    tensor.requires_grad_()</span>
<span id="cb8-16">    scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(tensor)</span>
<span id="cb8-17"></span>
<span id="cb8-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the index corresponding to the maximum score and the maximum score itself.</span></span>
<span id="cb8-19">    score_max_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores.argmax()</span>
<span id="cb8-20">    score_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scores[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, score_max_index]  </span>
<span id="cb8-21"></span>
<span id="cb8-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backward method on score_max performs the backward pass in the computation </span></span>
<span id="cb8-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># graph and calculates the gradient of score_max with respect to nodes in the </span></span>
<span id="cb8-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># graph.</span></span>
<span id="cb8-25">    score_max.backward()</span>
<span id="cb8-26"></span>
<span id="cb8-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Saliency would be the gradient with respect to the input image. But note that </span></span>
<span id="cb8-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the input image has 3 channels, R, G and B. To derive a single class saliency </span></span>
<span id="cb8-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># value for each pixel (i, j),  we take the maximum magnitude across all color </span></span>
<span id="cb8-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># channels.</span></span>
<span id="cb8-31">    saliency, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(tensor.grad.data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-32"></span>
<span id="cb8-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return original image along with saliency map. </span></span>
<span id="cb8-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> img, saliency</span>
<span id="cb8-35"></span>
<span id="cb8-36"></span>
<span id="cb8-37"></span>
<span id="cb8-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_saliency(img, saliency, actual_label, predicted_label):</span>
<span id="cb8-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Display original image along with saliency map.</span></span>
<span id="cb8-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-42">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-43">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].imshow(img)</span>
<span id="cb8-44">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb8-45">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"original"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb8-46">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].imshow(saliency[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.hot)</span>
<span id="cb8-47">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb8-48">    ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"saliency map"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb8-49">    plt.suptitle(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"actual=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>actual_label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, predicted=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>predicted_label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-50">    plt.show()</span>
<span id="cb8-51">    </span></code></pre></div>
</div>
<p><br></p>
<p>For each image in the batch, display the original image and saliency map side-by-side, along with actual and predicted classes.</p>
<div id="cell-12" class="cell" data-execution_count="75">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get images and labels for first batch of validation set.</span></span>
<span id="cb9-3">images, labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(valid_loader))</span>
<span id="cb9-4">yactual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels.detach().numpy()</span>
<span id="cb9-5">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl(images).argmax(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).detach().numpy()</span>
<span id="cb9-6"></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For each image in current batch, show original along with saliency map</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with actual and predicted class labels.</span></span>
<span id="cb9-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(yactual)):</span>
<span id="cb9-11">    tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> images[[ii]]</span>
<span id="cb9-12">    img, saliency <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_saliency(tensor, mdl)</span>
<span id="cb9-13">    actual_label, predicted_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classes[yactual[ii]], classes[ypred[ii]]</span>
<span id="cb9-14">    plot_saliency(img, saliency, actual_label, predicted_label)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-6.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-8.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-10.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-12.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-14.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-16.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-18.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-20.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-22.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-24.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-26.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-28.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-30.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-32.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-34.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-36.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-38.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-40.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-42.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-44.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-46.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-48.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-50.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-52.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-54.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-56.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-58.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-60.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-62.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability_files/figure-html/cell-7-output-64.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>We can observe which regions are highlighted in the saliency map for each image, and start to get an idea of which image characteristics result in a particular prediction. This is an informative diagnostic and a valuable technique to use when attempting to explain CNN model output.</p>



 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/cnn-interpretability/cnn-interpretability.html</guid>
  <pubDate>Thu, 03 Oct 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to Markov Chain Monte Carlo - The Metropolis-Hastings Algorithm</title>
  <link>https://www.jtrive.com/posts/introduction-to-metropolis-hastings/introduction-to-metropolis-hastings.html</link>
  <description><![CDATA[ 





<p>Markov Chain Monte Carlo (MCMC) is a class of algorithms used to sample from probability distributions when direct sampling is difficult or inefficient. It leverages Markov chains to explore the target distribution and Monte Carlo methods to perform repeated random sampling. MCMC algorithms are widely used in the insurance industry, particularly in areas involving risk assessment, pricing, reserving, and capital modeling. Markov Chain Monte Carlo is an alternative to rejection sampling, which can be inefficient when dealing with high-dimensional probability distributions. MCMC is considered a Bayesian approach to statistical inference since it incorporates both prior knowledge and observed data into the estimation of the posterior distribution.</p>
<p>The <em>Metropolis-Hastings</em> algorithm is a method used to generate a sequence of samples from a probability distribution for which direct sampling might be difficult. It is a particiular variant of MCMC, which approximates a desired distribution by creating a chain of values that resemble samples drawn from that distribution. The algorithm generates a sequence of samples by proposing new candidates and deciding whether to accept or reject them based on a ratio of probabilities from the target distribution.</p>
<p>Before getting into the details of Metropolis-Hastings, a few key definitions:</p>
<p><strong>Likelihood</strong>: <br> The apriori assumption specifying the distribution from which the data are assumed to originate. For example, if we assume losses follow an exponential distribution within unknown parameter <img src="https://latex.codecogs.com/png.latex?%5Ctheta">, this is equivalent to specifying an exponential likelihood. Symbolically, the likelihood is represented as <img src="https://latex.codecogs.com/png.latex?f(x%7C%5Ctheta)">.</p>
<p><strong>Prior</strong>:<br> Sticking with the exponential likelihood example, once we’ve proposed the likelihood, we need to specify a distribution for each parameter of the likelihood. In the case of the exponential there is only a single parameter, <img src="https://latex.codecogs.com/png.latex?%5Ctheta">. Typically when selecting prior distributions, it should have the same domain as the parameter itself. When parameterizing the exponential distribution, we know that <img src="https://latex.codecogs.com/png.latex?0%20%3C%20%5Ctheta%20%3C%20%5Cinfty">, so the prior distribution should be valid on <img src="https://latex.codecogs.com/png.latex?(0,%20%5Cinfty)">. Valid distributions for <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> are gamma, lognormal, pareto, weibull, etc. Invalid distributions would be any discrete distribution or the normal distribution. Symbolically, the prior is represented as <img src="https://latex.codecogs.com/png.latex?f(%5Ctheta)">.</p>
<p><strong>Posterior</strong>: <br> This is the expression which encapsulates the power, simplicity and flexibility of the Bayesian approach and is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathrm%7BPosterior%7D%20%5Cpropto%20%5Cmathrm%7BLikelihood%7D%20%5Ctimes%20%5Cmathrm%7BPrior%7D%0A"></p>
<p>The posterior is represented as <img src="https://latex.codecogs.com/png.latex?f(%5Ctheta%7Cx)">, so the above expression becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Ctheta%7Cx)%20%5Cpropto%20f(x%7C%5Ctheta)%20f(%5Ctheta).%0A"></p>
<p>We can update the proportionality to direct equality by the inclusion of a normalizing constant, which ensures the expression on the RHS integrates to 1:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Ctheta%7Cx)%20=%20%5Cfrac%7Bf(x%7C%5Ctheta)%20%20f(%5Ctheta)%7D%7Bf(x)%7D.%0A"></p>
<section id="metropolis-hastings-outline" class="level3">
<h3 class="anchored" data-anchor-id="metropolis-hastings-outline">Metropolis-Hastings Outline</h3>
<p>Suppose we have a collection of <img src="https://latex.codecogs.com/png.latex?%5C%7B%5Ctheta%5E%7B(1)%7D,%20%5Cdots%20%5Ctheta%5E%7B(s)%7D%5C%7D">, to which we would like to add a new value <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s+1)%7D">. We generate a sample from our transition kernel <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D"> which is nearby <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s)%7D">.</p>
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?f(%5Ctheta%5E%7B*%7D%7Cy)%20%3E%20f(%5Ctheta%5E%7B(s)%7D%7Cy)">, then we should include <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D"> with probability 1.<br>
</li>
<li>If <img src="https://latex.codecogs.com/png.latex?f(%5Ctheta%5E%7B*%7D%7Cy)%20%3C%20f(%5Ctheta%5E%7B(s)%7D%7Cy)">, we will include <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D"> with probability determined by the acceptance ratio.</li>
</ul>
<p>For <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D">, the posterior is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Ctheta%5E%7B*%7D%7Cy)%20%20=%20%5Cfrac%7Bf(y%7C%5Ctheta%5E%7B*%7D)%20f(%5Ctheta%5E%7B*%7D)%7D%7Bf(y)%7D,%0A"></p>
<p>and for <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s)%7D">, the posterior is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(%5Ctheta%5E%7B(s)%7D%7Cy)%20%20=%20%5Cfrac%7Bf(y%7C%5Ctheta%5E%7B(s)%7D)%20f(%5Ctheta%5E%7B(s)%7D)%7D%7Bf(y)%7D.%0A"></p>
<p><br></p>
<p>Next, compute the acceptance ratio, <img src="https://latex.codecogs.com/png.latex?%5Calpha">, as <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bf(%5Ctheta%5E%7B*%7D%7Cy)%7D%7Bf(%5Ctheta%5E%7B(s)%7D%7Cy)%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha%20=%20%5Cfrac%7Bf(%5Ctheta%5E%7B*%7D%7Cy)%7D%7Bf(%5Ctheta%5E%7B(s)%7D%7Cy)%7D%20=%20%5Cfrac%7Bf(y%7C%5Ctheta%5E%7B*%7D)%20f(%5Ctheta%5E%7B*%7D)%7D%7Bf(y)%7D%20%5Ctimes%20%5Cfrac%7Bf(y)%7D%7Bf(y%7C%5Ctheta%5E%7B(s)%7D)%20f(%5Ctheta%5E%7B(s)%7D)%7D%20=%20%5Cfrac%7Bf(y%7C%5Ctheta%5E%7B*%7D)%20f(%5Ctheta%5E%7B*%7D)%7D%7Bf(y%7C%5Ctheta%5E%7B(s)%7D)%20f(%5Ctheta%5E%7B(s)%7D)%7D.%0A"> <br></p>
<ul>
<li><p>If <img src="https://latex.codecogs.com/png.latex?%5Calpha"> &gt;= 1: We add <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D"> to our collection of samples, since it has a higher likelihood than <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s)%7D">. Set <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s%20+%201)%7D%20=%20%5Ctheta%5E%7B*%7D">.</p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?%5Calpha"> &lt; 1: Set <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s%20+%201)%7D%20=%20%5Ctheta%5E%7B*%7D"> with probability <img src="https://latex.codecogs.com/png.latex?%5Calpha">.</p></li>
</ul>
<p>Notice that the acceptance ratio is calculated without needing to compute the normalizing constant <img src="https://latex.codecogs.com/png.latex?f(y)">, which can be difficult to do, especially in high-dimensional settings. This is the power of Metropolis-Hastings and MCMC in general: It provides a way to approximate the posterior distribution by generating samples from it without direct calculation of the normalizing constant.</p>
<p><br></p>
<p>Metropolis-Hastings accept-reject logic can be summarized in three steps:</p>
<ol type="1">
<li>Generate sample from proposal distribution / transition kernel <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D%20%5Csim%20J(%5Ctheta%7C%5Ctheta%5E%7B(s)%7D)">.</li>
<li>Compute acceptance ratio <img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%20%5Cfrac%7Bf(y%7C%5Ctheta%5E%7B*%7D)%20f(%5Ctheta%5E%7B*%7D)%7D%7Bf(y%7C%5Ctheta%5E%7B(s)%7D)%20f(%5Ctheta%5E%7B(s)%7D)%7D">.</li>
<li>Sample <img src="https://latex.codecogs.com/png.latex?u%20%5Csim%20%5Cmathrm%7Buniform%7D(0,%201)">.
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cgeq%20u">, set <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s%20+%201)%7D%20=%20%5Ctheta%5E%7B*%7D">.</li>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%3C%20u">, set <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s%20+%201)%7D%20=%20%5Ctheta%5E%7B(s)%7D">.</li>
</ul></li>
</ol>
<p><br></p>
</section>
<section id="conjugate-priors" class="level3">
<h3 class="anchored" data-anchor-id="conjugate-priors">Conjugate Priors</h3>
<p><a href="(https://en.wikipedia.org/wiki/Conjugate_prior#cite_note-beta_rate-7)">Conjugate priors</a> are a class of prior distributions in Bayesian statistics that result in a posterior distribution that has the same functional form as the prior when combined with a particular likelihood function. This makes the posterior distribution easier to compute and analyze, as it remains within the same family of distributions as the prior. For example, if we select an exponential likelihood with a gamma prior, the posterior distribution is also gamma, with a specified parameterization.</p>
<p>Further, many of these conjugate priors have analytical expressions for the posterior predictive distribution, which represents the modeled target output of our analysis. We can use conjugate prior relationships as a means to validate the output of our MCMC sampler.</p>
<p><br></p>
<p><br></p>
</section>
<section id="example-conjugate-normal-normal-model-with-known-variance" class="level3">
<h3 class="anchored" data-anchor-id="example-conjugate-normal-normal-model-with-known-variance">Example: Conjugate Normal-Normal Model with Known Variance</h3>
<p>Let’s start with a simple example where we assume a model with normal likelihood and prior (adapted from Chapter 10 of <em>A First Course in Bayesian Statistical Methods</em> by Peter Hoff). Assume:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5C%7By_%7B1%7D,%20%5Cdots,%20y_%7Bn%7D%5C%7D%20%5Csim%20%5Cmathcal%7BN%7D(%5Cmu,%20%5Csigma%5E%7B2%7D)">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmu%20%5Csim%20%5Cmathcal%7BN%7D(%5Cmu_%7B0%7D,%20%5Csigma%5E%7B2%7D_%7B0%7D)"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D%20=%201"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmu_%7B0%7D%20=%205"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Csigma%5E%7B2%7D_%7B0%7D%20=%2010"></li>
<li><img src="https://latex.codecogs.com/png.latex?y%20=%20(9.37,%2010.18,%209.16,%2011.60,%2010.33)"></li>
</ul>
<p><br> Because this model is conjugate, we have analytical expressions for the posterior parameters:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmu_%7B0%7D%5E%7B'%7D%20=%20%5Cfrac%7B1%7D%7B%5Cfrac%7B1%7D%7B%5Csigma%5E%7B2%7D_%7B0%7D%7D%20+%20%5Cfrac%7Bn%7D%7B%5Csigma%5E%7B2%7D%7D%7D%20%5CBigg(%5Cfrac%7B%5Cmu_%7B0%7D%7D%7B%5Csigma%5E%7B2%7D_%7B0%7D%7D%20+%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D%20y_%7Bi%7D%7D%7B%5Csigma%5E%7B2%7D%7D%20%5CBigg);%20%5Chspace%7B.50em%7D%20%7B%5Csigma%5E%7B2%7D_%7B0%7D%7D%5E%7B'%7D%20=%20%5CBigg(%20%5Cfrac%7B1%7D%7B%5Csigma%5E%7B2%7D_%7B0%7D%7D%20+%20%5Cfrac%7Bn%7D%7B%5Csigma%5E%7B2%7D%7D%20%5CBigg)%5E%7B-1%7D%0A"></p>
<p><br></p>
<p>We can compute these quantities for later reference:</p>
<div id="cell-2" class="cell" data-tags="[]" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute posterior mean and variance using closed-form expressions. </span></span>
<span id="cb1-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.37</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.18</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.16</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.60</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.33</span>]</span>
<span id="cb1-4">s2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-5">mu_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-6">s2_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-7">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y)</span>
<span id="cb1-8"></span>
<span id="cb1-9">mu_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> s2_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> s2)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (mu_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>  s2_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> s2)</span>
<span id="cb1-10">s2_posterior  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> s2_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> s2)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mu_prior     : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mu_prior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"s2_prior     : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>s2_prior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mu_posterior : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mu_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"s2_posterior : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>s2_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mu_prior     : 5.000
s2_prior     : 10.000
mu_posterior : 10.027
s2_posterior : 0.196</code></pre>
</div>
</div>
<p>The posterior distribution parameter estimates have been updated in the direction of the data. Next imagine a scenario in which closed form expressions for posterior parameters did not exist, and it was necessary to use Metropolis-Hastings to approximate the posterior. The acceptance ratio comparing <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B*%7D"> to <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7B(s)%7D"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Calpha%20=%20%5Cfrac%7Bf(%5Ctheta%5E%7B*%7D%7Cy)%7D%7Bf(%5Ctheta%5E%7B(s)%7D%7Cy)%7D%20=%20%5CBigg(%5Cfrac%7B%5Cprod_%7Bi=1%7D%5E%7Bn%7D%20%5Cmathrm%7Bdnorm%7D(y_%7Bi%7D,%20%5Ctheta%5E%7B*%7D,%20%5Csigma)%7D%7B%5Cprod_%7Bi=1%7D%5E%7Bn%7D%20%5Cmathrm%7Bdnorm%7D(y_%7Bi%7D,%20%5Ctheta%5E%7B(s)%7D,%20%5Csigma)%7D%5CBigg)%20%5Ctimes%20%5CBigg(%5Cfrac%7B%5Cmathrm%7Bdnorm%7D(%5Ctheta%5E%7B*%7D,%20%5Cmu_%7B0%7D,%20%5Csigma_%7B0%7D)%7D%7B%5Cmathrm%7Bdnorm%7D(%5Ctheta%5E%7B(s)%7D,%20%5Cmu_%7B0%7D,%20%5Csigma_%7B0%7D)%7D%5CBigg).%0A"></p>
<p><br></p>
<p>An implementation of Metropolis-Hastings to recover the posterior mean is provided below.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Implementation of Metropolis-Hastings algorithm for normal likelihood </span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">and normal prior with known variance.</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Goal is to recover the posterior distribution of the unknown parameter mu. </span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> norm</span>
<span id="cb3-8"></span>
<span id="cb3-9">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb3-10"></span>
<span id="cb3-11"></span>
<span id="cb3-12">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.37</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.18</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.16</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.60</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.33</span>]</span>
<span id="cb3-13"></span>
<span id="cb3-14">nbr_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of samples to generate.</span></span>
<span id="cb3-15">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard deviation of likelihood.</span></span>
<span id="cb3-16">s0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prior standard deviation.</span></span>
<span id="cb3-17">mu0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prior mean.</span></span>
<span id="cb3-18">s_prop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard deviation of proposal distribution / transition kernel.</span></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Array to hold posterior samples, initialized with prior mean.</span></span>
<span id="cb3-21">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(nbr_samples)</span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize prior density.</span></span>
<span id="cb3-24">prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu0, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s0)</span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Track the number of accepted samples. </span></span>
<span id="cb3-27">accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbr_samples):</span>
<span id="cb3-30"></span>
<span id="cb3-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get most recently accepted sample.</span></span>
<span id="cb3-32">    theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> samples[ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-33"></span>
<span id="cb3-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate sample from proposal distribution.</span></span>
<span id="cb3-35">    theta_star <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s_prop)</span>
<span id="cb3-36"></span>
<span id="cb3-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute numerator and denominator of acceptance ratio.</span></span>
<span id="cb3-38">    numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta_star, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s).pdf(y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prior.pdf(theta_star)</span>
<span id="cb3-39">    denom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s).pdf(y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prior.pdf(theta)</span>
<span id="cb3-40">    ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> denom</span>
<span id="cb3-41"></span>
<span id="cb3-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random uniform sample.</span></span>
<span id="cb3-43">    u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-44">    </span>
<span id="cb3-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check whether theta_star should be added to samples by comparing ar with u.</span></span>
<span id="cb3-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> u:</span>
<span id="cb3-47">        theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta_star</span>
<span id="cb3-48">        accepted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-49"></span>
<span id="cb3-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update samples array.</span></span>
<span id="cb3-51">    samples[ii] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta</span>
<span id="cb3-52"></span>
<span id="cb3-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-54">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: theta_star: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>theta_star<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, ar: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ar<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, curr_rate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-55"></span>
<span id="cb3-56">acc_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> nbr_samples</span>
<span id="cb3-57"></span>
<span id="cb3-58"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Acceptance rate     : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc_rate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb3-59"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior mean (mh) : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb3-60"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior mean (cp) : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mu_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1000: theta_star: 9.35597, ar: 1.08038, curr_rate: 0.24600
2000: theta_star: 13.01504, ar: 0.00000, curr_rate: 0.25900
3000: theta_star: 9.28924, ar: 0.27716, curr_rate: 0.25567
4000: theta_star: 8.22652, ar: 0.00034, curr_rate: 0.26200
5000: theta_star: 6.09725, ar: 0.00000, curr_rate: 0.26440
6000: theta_star: 10.27182, ar: 2.13374, curr_rate: 0.26483
7000: theta_star: 10.73066, ar: 0.30604, curr_rate: 0.26414
8000: theta_star: 12.76409, ar: 0.00000, curr_rate: 0.26637
9000: theta_star: 8.88424, ar: 0.03592, curr_rate: 0.26522

Acceptance rate     : 0.267.
Posterior mean (mh) : 10.03768.
Posterior mean (cp) : 10.02745.</code></pre>
</div>
</div>
<p>Generally the acceptance rate should fall between 20%-40%, so our result seems reasonable, if not a little on the low side.</p>
<p>In the Metropolis-Hastings update step, we compute the product of many potentially small numbers to determine the acceptance ratio, which can be numerically unstable. We can instead compute the log of the RHS of the acceptance ratio, which will result in more stability especially as the number of data points increases. The posterior estimates will be no different, but we reduce the chance of numerical underflow by replacing the product with a sum. The update step using the log basis is given below:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Implementation of Metropolis-Hastings algorithm for Normal likelihood </span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">and Normal prior with known variance.</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Goal is to recover the posterior distribution of the unknown parameter mu. </span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> norm</span>
<span id="cb5-8"></span>
<span id="cb5-9">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb5-10"></span>
<span id="cb5-11"></span>
<span id="cb5-12">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.37</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.18</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.16</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.60</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.33</span>]</span>
<span id="cb5-13"></span>
<span id="cb5-14">nbr_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of samples to generate.</span></span>
<span id="cb5-15">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard deviation of likelihood.</span></span>
<span id="cb5-16">s0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prior standard deviation.</span></span>
<span id="cb5-17">mu0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prior mean.</span></span>
<span id="cb5-18">s_prop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard deviation of proposal distribution / transition kernel.</span></span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Array to hold posterior samples, initialized with prior mean.</span></span>
<span id="cb5-21">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(nbr_samples)</span>
<span id="cb5-22"></span>
<span id="cb5-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize prior density.</span></span>
<span id="cb5-24">prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mu0, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s0)</span>
<span id="cb5-25"></span>
<span id="cb5-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Track the number of accepted samples. </span></span>
<span id="cb5-27">accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-28"></span>
<span id="cb5-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbr_samples):</span>
<span id="cb5-30"></span>
<span id="cb5-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get most recently accepted sample.</span></span>
<span id="cb5-32">    theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> samples[ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-33"></span>
<span id="cb5-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate sample from proposal distribution.</span></span>
<span id="cb5-35">    theta_star <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s_prop)</span>
<span id="cb5-36"></span>
<span id="cb5-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute numerator and denominator of acceptance ratio using log basis. </span></span>
<span id="cb5-38">    ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta_star, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s).logpdf(y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> prior.logpdf(theta_star)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-\</span></span>
<span id="cb5-39">         (np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(norm(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s).logpdf(y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> prior.logpdf(theta))</span>
<span id="cb5-40"></span>
<span id="cb5-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random uniform sample.</span></span>
<span id="cb5-42">    u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-43">    </span>
<span id="cb5-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check whether theta_star should be added to samples by comparing a with u.</span></span>
<span id="cb5-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> np.log(u):</span>
<span id="cb5-46">        theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta_star</span>
<span id="cb5-47">        accepted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-48"></span>
<span id="cb5-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update samples array.</span></span>
<span id="cb5-50">    samples[ii] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta</span>
<span id="cb5-51"></span>
<span id="cb5-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-53">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: theta_star: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>theta_star<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, ar: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ar<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, curr_rate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-54"></span>
<span id="cb5-55"></span>
<span id="cb5-56">acc_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> nbr_samples</span>
<span id="cb5-57"></span>
<span id="cb5-58"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Acceptance rate   : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc_rate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb5-59"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior mean (mh) : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb5-60"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior mean (cp) : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mu_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1000: theta_star: 9.35597, ar: 0.07731, curr_rate: 0.24600
2000: theta_star: 13.01504, ar: -20.59962, curr_rate: 0.25900
3000: theta_star: 9.28924, ar: -1.28315, curr_rate: 0.25567
4000: theta_star: 8.22652, ar: -7.99570, curr_rate: 0.26200
5000: theta_star: 6.09725, ar: -39.02023, curr_rate: 0.26440
6000: theta_star: 10.27182, ar: 0.75788, curr_rate: 0.26483
7000: theta_star: 10.73066, ar: -1.18404, curr_rate: 0.26414
8000: theta_star: 12.76409, ar: -18.37748, curr_rate: 0.26637
9000: theta_star: 8.88424, ar: -3.32637, curr_rate: 0.26522

Acceptance rate   : 0.267.
Posterior mean (mh) : 10.03768.
Posterior mean (cp) : 10.02745.</code></pre>
</div>
</div>
<p>As expected, this aligns with the original non-log basis results.</p>
<p>We can visualize the distribution of posterior samples as well as the traceplot. Traceplots are graphical tools used to diagnose the convergence and mixing of MCMC simulations. They help assess whether the algorithm has properly explored the target distribution and whether the samples are representative of the posterior distribution.</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-4"></span>
<span id="cb7-5"></span>
<span id="cb7-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb7-7"></span>
<span id="cb7-8">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior samples (normal likelihood)"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb7-9">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(</span>
<span id="cb7-10">    samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff7595"</span>, </span>
<span id="cb7-11">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb7-12">    )</span>
<span id="cb7-13">    </span>
<span id="cb7-14">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axvline(mu_posterior, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\mu^{'}$"</span>)</span>
<span id="cb7-15">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_yticklabels([])</span>
<span id="cb7-16">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb7-17">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb7-18">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb7-19">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb7-20">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb7-21">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb7-22">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb7-23">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-24">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb7-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb7-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span>
<span id="cb7-28"></span>
<span id="cb7-29">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Traceplot"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb7-30">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(samples, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span>
<span id="cb7-31">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb7-32">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sample"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb7-33">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \mu$"</span>)</span>
<span id="cb7-34">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb7-35">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb7-36">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-37">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb7-38"></span>
<span id="cb7-39">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/introduction-to-metropolis-hastings/introduction-to-metropolis-hastings_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Notice in the traceplot that even though we started far from the estimated posterior mean, it made little difference, as the algorithm was able to quickly zero in on the region of higher likelihood. You want to see that the samples have stabilized around a certain value after an initial “burn-in” period. If the trace shows significant fluctuations without settling, it may indicate that the chain has not yet converged. This is not the case with our samples.</p>
<p><br></p>
</section>
<section id="severity-modeling" class="level2">
<h2 class="anchored" data-anchor-id="severity-modeling">Severity Modeling</h2>
<p>MCMC approaches can be leveraged to estimate severity or size-of-loss curves for a given line of business based on past claim history. Severity estimates are used in multiple actuarial contexts, especially reserving and capital modeling. Imagine we have loss data we believe originates from an exponential distribution with unknown rate parameter:</p>
<blockquote class="blockquote">
<p>266, 934, 138</p>
</blockquote>
<p>We again assume a conjugate relationship between prior and posterior distributions:</p>
<ul>
<li><p><strong>Likelihood</strong>: Losses are exponentially distributed with unknown rate <img src="https://latex.codecogs.com/png.latex?%5Clambda">.</p></li>
<li><p><strong>Prior</strong>: Gamma with <img src="https://latex.codecogs.com/png.latex?%5Calpha_%7B0%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B0%7D">.</p></li>
<li><p><strong>Posterior</strong>: Gamma with <img src="https://latex.codecogs.com/png.latex?%5Calpha%5E%7B'%7D%20=%20%5Calpha_%7B0%7D%20+%20n"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E%7B'%7D%20=%20%5Cbeta_%7B0%7D%20+%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20x_%7Bi%7D">.</p></li>
<li><p><strong>Posterior predictive</strong>: Lomax (shifted Pareto with support beginning at zero) with <img src="https://latex.codecogs.com/png.latex?%5Calpha%5E%7B'%7D,%20%5Cbeta%5E%7B'%7D">. The expected value of the posterior predictive distribution is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cbeta%5E%7B'%7D%7D%7B%5Calpha%5E%7B'%7D%20-%201%7D">.</p></li>
</ul>
<p>We judgmentally set <img src="https://latex.codecogs.com/png.latex?%5Calpha_%7B0%7D%20=%202"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta_%7B0%7D%20=%201,000">. Prior and posterior predictive means are computed in the next cell.</p>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">266</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">934</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">138</span>]</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Judgmentally select a0 and b0.</span></span>
<span id="cb8-5">a0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-6">b0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb8-7">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y)</span>
<span id="cb8-8">a_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n</span>
<span id="cb8-9">b_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(y)</span>
<span id="cb8-10">prior_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b0</span>
<span id="cb8-11">post_pred_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (a_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"a0              : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"b0              : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"a_posterior     : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb8-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"b_posterior     : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb8-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Empirical mean  : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean(y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Prior mean      : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prior_mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb8-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Post. pred. mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>post_pred_mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>a0              : 2
b0              : 1000
a_posterior     : 5.
b_posterior     : 2338.
Empirical mean  : 446.0
Prior mean      : 2000
Post. pred. mean: 584.50</code></pre>
</div>
</div>
<p><br></p>
<p>Using Metropolis-Hastings, the mean of generated samples should match the posterior predictive mean obtained from the analytical expression (584.50 above). Adapting the sampling code from the previous model, an exponential distribution is used to generate proposals, since the exponential scale parameter must be strictly greater than 0. We have the following:</p>
<div id="cell-13" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Implementation of Metropolis-Hastings algorithm for exponential likelihood</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">with gamma prior.</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Goal is to recover the posterior distribution of the unknown parameter lambda. </span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> expon, norm, gamma, lomax</span>
<span id="cb10-8"></span>
<span id="cb10-9">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11">nbr_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb10-12">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">266</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">934</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">138</span>]</span>
<span id="cb10-13">a0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-14">b0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb10-15"></span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Array to hold posterior samples, initialized with prior mean.</span></span>
<span id="cb10-18">samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(nbr_samples)</span>
<span id="cb10-19">samples[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(y)</span>
<span id="cb10-20"></span>
<span id="cb10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize prior density.</span></span>
<span id="cb10-22">prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gamma(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a0, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>b0)</span>
<span id="cb10-23"></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Track the number of accepted samples. </span></span>
<span id="cb10-25">accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-26"></span>
<span id="cb10-27"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ii <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbr_samples):</span>
<span id="cb10-28"></span>
<span id="cb10-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get most recently accepted sample.</span></span>
<span id="cb10-30">    theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> samples[ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-31"></span>
<span id="cb10-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate sample from proposal distribution.</span></span>
<span id="cb10-33">    theta_star <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.exponential(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta)</span>
<span id="cb10-34"></span>
<span id="cb10-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute numerator and denominator of acceptance ratio.</span></span>
<span id="cb10-36">    numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(expon(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta_star).pdf(y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prior.pdf(theta_star)</span>
<span id="cb10-37">    denom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.prod(expon(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>theta).pdf(y)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prior.pdf(theta)</span>
<span id="cb10-38">    ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> denom</span>
<span id="cb10-39"></span>
<span id="cb10-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random uniform sample.</span></span>
<span id="cb10-41">    u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-42">    </span>
<span id="cb10-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check whether theta_star should be added to samples by comparing ar with u.</span></span>
<span id="cb10-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> u:</span>
<span id="cb10-45">        theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta_star</span>
<span id="cb10-46">        accepted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-47"></span>
<span id="cb10-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update samples array.</span></span>
<span id="cb10-49">    samples[ii] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta</span>
<span id="cb10-50"></span>
<span id="cb10-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ii <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-52">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: theta_star: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>theta_star<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, ar: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ar<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, curr_rate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ii<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-53"></span>
<span id="cb10-54">acc_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> nbr_samples</span>
<span id="cb10-55"></span>
<span id="cb10-56"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Acceptance rate    : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc_rate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb10-57"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior sample mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1000: theta_star: 82.99100, ar: 0.00008, curr_rate: 0.45900
2000: theta_star: 544.00186, ar: 1.07857, curr_rate: 0.46450
3000: theta_star: 246.98682, ar: 0.33871, curr_rate: 0.47433
4000: theta_star: 73.75990, ar: 0.00002, curr_rate: 0.47900
5000: theta_star: 451.83333, ar: 0.97910, curr_rate: 0.47880
6000: theta_star: 607.07687, ar: 1.45090, curr_rate: 0.47833
7000: theta_star: 1509.11070, ar: 0.74937, curr_rate: 0.48186
8000: theta_star: 677.30894, ar: 1.04365, curr_rate: 0.48187
9000: theta_star: 740.90659, ar: 1.58914, curr_rate: 0.48156

Acceptance rate    : 0.481.
Posterior sample mean: 586.353.</code></pre>
</div>
</div>
<p><br></p>
<p>Visualizing the histogram of posterior samples along with the traceplot:</p>
<div id="cell-15" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb12-3"></span>
<span id="cb12-4">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(</span>
<span id="cb12-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior samples (exponential likelihood)"</span>, </span>
<span id="cb12-6">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb12-7">)</span>
<span id="cb12-8">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(</span>
<span id="cb12-9">    samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff7595"</span>, </span>
<span id="cb12-10">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb12-11">)</span>
<span id="cb12-12">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].axvline(</span>
<span id="cb12-13">    samples.mean(), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, </span>
<span id="cb12-14">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posterior mean"</span></span>
<span id="cb12-15">)</span>
<span id="cb12-16"></span>
<span id="cb12-17">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-18">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb12-19">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>)</span>
<span id="cb12-20">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb12-21">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-22">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-23">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-24">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-25">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb12-26">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb12-27">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb12-28">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb12-29">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb12-30"></span>
<span id="cb12-31">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Traceplot"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb12-32">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(samples, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span>
<span id="cb12-33">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb12-34">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sample"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb12-35">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\hat \beta$"</span>)</span>
<span id="cb12-36">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-37">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-38">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb12-39">ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb12-40"></span>
<span id="cb12-41">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/introduction-to-metropolis-hastings/introduction-to-metropolis-hastings_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>The distribution of posterior samples resembles a gamma distribution, which we expect.</p>
<p>Next, to generate posterior predictive samples, we randomly sample from an exponential distribution parameterized using each scale parameter. This is accomplished in the next cell:</p>
<div id="cell-17" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Generate posterior predictive samples, one random draw per posterior scale sample.</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-4"></span>
<span id="cb13-5">post_pred_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rng.exponential(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>samples)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior predictive mean (cp): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>post_pred_mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Posterior predictive mean (mh): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>post_pred_samples<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.5f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Posterior predictive mean (cp): 584.50000
Posterior predictive mean (mh): 585.71307</code></pre>
</div>
</div>
<p><br></p>
<p>We can overlay the posterior predictive distribution with the histogram of posterior predictive samples and assess how well they match:</p>
<div id="cell-19" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb15-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb15-4"></span>
<span id="cb15-5">pp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lomax(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a_posterior, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>b_posterior)</span>
<span id="cb15-6">xx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pp.ppf(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.995</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb15-7">yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pp.pdf(xx)</span>
<span id="cb15-8"></span>
<span id="cb15-9"></span>
<span id="cb15-10">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb15-11"></span>
<span id="cb15-12">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior predictive samples with analytical density"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb15-13"></span>
<span id="cb15-14">ax.hist(</span>
<span id="cb15-15">    post_pred_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff7595"</span>, </span>
<span id="cb15-16">    edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FFFFFF"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Posterior predictive samples"</span></span>
<span id="cb15-17">)</span>
<span id="cb15-18">ax.plot(</span>
<span id="cb15-19">    xx, yy, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000000"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, </span>
<span id="cb15-20">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$\mathrm</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{Lomax}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">($"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b_posterior<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"$)$"</span></span>
<span id="cb15-21">)</span>
<span id="cb15-22">ax.axvline(</span>
<span id="cb15-23">    post_pred_mean, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-."</span>, </span>
<span id="cb15-24">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posterior preditive mean"</span></span>
<span id="cb15-25">)</span>
<span id="cb15-26"></span>
<span id="cb15-27">ax.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>)</span>
<span id="cb15-28">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb15-29">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb15-30">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb15-31">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb15-32">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb15-33">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'in'</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb15-34">ax.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{x:,.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb15-35">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb15-36">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb15-37">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)   </span>
<span id="cb15-38">ax.set_axisbelow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) </span>
<span id="cb15-39">ax.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb15-40">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/introduction-to-metropolis-hastings/introduction-to-metropolis-hastings_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>The plot shows the two distributions align well. Finally, we can compare quantiles of our posterior predictive samples with the analytical density to see how well they agree in the extreme left and right tails:</p>
<div id="cell-21" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb16-3"></span>
<span id="cb16-4">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.025</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.90</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.99</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.995</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.999</span>]</span>
<span id="cb16-5"></span>
<span id="cb16-6">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb16-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>: q,</span>
<span id="cb16-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cp"</span>: pp.ppf(q), </span>
<span id="cb16-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mh"</span>: np.quantile(post_pred_samples, q)</span>
<span id="cb16-10">})</span>
<span id="cb16-11"></span>
<span id="cb16-12">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cp"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mh"</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cp"</span>] </span>
<span id="cb16-13"></span>
<span id="cb16-14">df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">q</th>
<th data-quarto-table-cell-role="th">cp</th>
<th data-quarto-table-cell-role="th">mh</th>
<th data-quarto-table-cell-role="th">error</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.010</td>
<td>4.704263</td>
<td>4.841719</td>
<td>-2.921931</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.025</td>
<td>11.868630</td>
<td>12.136623</td>
<td>-2.257991</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0.050</td>
<td>24.108192</td>
<td>23.368946</td>
<td>3.066368</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0.100</td>
<td>49.789318</td>
<td>47.340357</td>
<td>4.918647</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0.250</td>
<td>138.465340</td>
<td>135.870227</td>
<td>1.874197</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>0.500</td>
<td>347.656754</td>
<td>347.845394</td>
<td>-0.054260</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>0.750</td>
<td>747.009495</td>
<td>736.928440</td>
<td>1.349522</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>0.900</td>
<td>1367.480284</td>
<td>1387.431296</td>
<td>-1.458962</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>0.950</td>
<td>1918.479107</td>
<td>1958.620885</td>
<td>-2.092375</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>0.990</td>
<td>3534.790477</td>
<td>3488.275714</td>
<td>1.315913</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>0.995</td>
<td>4408.064760</td>
<td>4380.679896</td>
<td>0.621245</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>0.999</td>
<td>6969.745648</td>
<td>6872.765923</td>
<td>1.391439</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>In the table above:</p>
<ul>
<li><code>q</code> represents the target quantile.</li>
<li><code>cp</code> represents analytical quantiles from the conjugate prior posterior predictive distribution.</li>
<li><code>mh</code> represents quantiles from the Metropolis-Hastings generated posterior predictive samples.</li>
<li><code>error</code> represents the percent deviation from analytical quantiles.</li>
</ul>
<p>Even at q=0.999, <code>cp</code> and <code>mh</code> differ by less than 1.50%.</p>
<p>Unfortunately, most distributional relationships used in practice are not conjugate. But by leveraging conjugate relationships we were able to demonstrate that when the same likelihood, prior and loss data are used, Metropolis-Hastings will yield distributional estimates of the posterior predictive distribution very to close to the analytical distribution.</p>
<p>While implementing your own MCMC sampler is a great way to gain a better understanding of the inner workings of Markov Chain Monte Carlo, in practice it is almost always preferrable to an optimized MCMC library such as PyStan or PyMC3. These will be explored in a future post.</p>


</section>

 ]]></description>
  <category>Statistical Modeling</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/introduction-to-metropolis-hastings/introduction-to-metropolis-hastings.html</guid>
  <pubDate>Sat, 21 Sep 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to Folium</title>
  <link>https://www.jtrive.com/posts/getting-started-with-folium/getting-started-with-folium.html</link>
  <description><![CDATA[ 





<p>Learning geospatial data science is crucial in today’s data-driven world for several reasons. Geospatial data science enables individuals to understand and analyze complex spatial phenomena, including natural disasters, urbanization, climate change, and environmental degradation. By gaining familiarity with geospatial analysis techniques, individuals can gain insights into spatial patterns, relationships and processes, which is essential for making informed decisions.</p>
<p>As the availability and complexity of geospatial data continue to grow with advancements in technology and data collection methods, the demand for skilled geospatial data scientists is expected to rise. Therefore, investing in learning geospatial data science equips individuals with valuable skills that are not only relevant today but also increasingly essential for future career success.</p>
<section id="folium" class="level2">
<h2 class="anchored" data-anchor-id="folium">Folium</h2>
<p>Folium is a Python library used for visualizing geospatial data interactively on web maps. Leveraging the capabilities of Leaflet.js, Folium allows users to create maps directly within Python code, making it an accessible and powerful tool for geospatial visualization and analysis.</p>
<p>With Folium, users can create various types of interactive maps, including point maps, choropleth maps, heatmaps, and vector overlays, by simply specifying geographic coordinates and map styling options. The library provides intuitive APIs for customizing map features such as markers, popups, tooltips, legends, and map layers, enabling users to create visually appealing and informative maps with ease.</p>
<p>Folium integrates with other popular Python libraries such as Pandas and Matplotlib, allowing users to visualize geospatial data stored in DataFrame objects or plot data directly onto Folium maps. It also supports various tile providers and basemaps, enabling users to choose from a wide range of map styles and sources.</p>
<section id="creating-interactive-maps-in-folium" class="level3">
<h3 class="anchored" data-anchor-id="creating-interactive-maps-in-folium">Creating Interactive Maps in Folium</h3>
<p>Creating maps with folium is straightforward. We simply pass the latitude and longitude of the point of interest (POI) and specify a zoom level. We can then drop a marker on the point of interest, and interact with the map however we’d like.</p>
<p>We can get the latitude and longitude for a given POI by performing a google search. Latitude ranges from -90 to 90 degrees, longitude from -180 to 180 degrees. The latitude and longitude for the DMACC Ankeny campus is <strong>(41.5996, -93.6276)</strong>, which is <strong>(latitude, longitude)</strong>. Note that for US coordinates, the longitude will always be negative. An illustration is provided below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/getting-started-with-folium/lon-lat.png" class="img-fluid figure-img"></p>
<figcaption>img01</figcaption>
</figure>
</div>
<p><br></p>
<p>To illustrate, let’s render a map over the park I used to play at as a child (Durkin Park on the southwest side of Chicago). Note that zoom level provides more detail as the number gets larger. A zoom level of 4 would show the entire US; a zoom level of 17 would render roughly a city block:</p>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> folium</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Latitude and longitude for Durkin Park, 84th &amp; Kolin Ave, Chicago IL. </span></span>
<span id="cb1-5">lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.739</span></span>
<span id="cb1-6">lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.729</span></span>
<span id="cb1-7">zoom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zoom)</span>
<span id="cb1-10">folium.Marker(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon]).add_to(m)</span>
<span id="cb1-11"></span>
<span id="cb1-12">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_cd856410cd725d4ba42a6a4f368b2615 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_cd856410cd725d4ba42a6a4f368b2615&quot; ></div>
        
</body>
<script>
    
    
            var map_cd856410cd725d4ba42a6a4f368b2615 = L.map(
                &quot;map_cd856410cd725d4ba42a6a4f368b2615&quot;,
                {
                    center: [41.739, -87.729],
                    crs: L.CRS.EPSG3857,
                    zoom: 18,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_f997475a2304f79bf56dc959368cd0e1 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_f997475a2304f79bf56dc959368cd0e1.addTo(map_cd856410cd725d4ba42a6a4f368b2615);
        
    
            var marker_b522f7453c8990c6b667046af3544d9b = L.marker(
                [41.739, -87.729],
                {}
            ).addTo(map_cd856410cd725d4ba42a6a4f368b2615);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>A few things to note about the code used to render the map:</p>
<ul>
<li>We start by importing the folium library.</li>
<li>The lat/lon for Durkin Park was obtained by a simple google search.</li>
<li>I used a level 18 zoom but this is not necessary since the map is dynamic and can be resized.</li>
<li>To add the marker to the map, we call <code>.add_to(m)</code>.</li>
<li>We included <code>m</code> by itself in the last line of the cell in order for the map to render. Without doing this, the map would not display.</li>
</ul>
<p>We can change the color of the marker by passing an additional argument into <code>folium.Marker</code>. I’ll place a second marker in another park I used to visit when I was younger, Scottsdale Park. I’ll make this second marker red.</p>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Durkin Park coordinates.</span></span>
<span id="cb2-3">lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.739</span></span>
<span id="cb2-4">lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.729</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scottsdale Park coordinates. </span></span>
<span id="cb2-7">lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.7416</span></span>
<span id="cb2-8">lon1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.7356</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center map at midway point between parks.</span></span>
<span id="cb2-11">mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-12">mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lon1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify zoom level. </span></span>
<span id="cb2-15">zoom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize map.</span></span>
<span id="cb2-18">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zoom)</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Durkin Park marker.</span></span>
<span id="cb2-21">folium.Marker(</span>
<span id="cb2-22">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat0, lon0],</span>
<span id="cb2-23">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Durkin Park"</span>,</span>
<span id="cb2-24">    ).add_to(m)</span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Scottsdale Park marker.</span></span>
<span id="cb2-27">folium.Marker(</span>
<span id="cb2-28">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat1, lon1],</span>
<span id="cb2-29">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scottsdale Park"</span>,</span>
<span id="cb2-30">    icon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>folium.Icon(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb2-31">    ).add_to(m)</span>
<span id="cb2-32"></span>
<span id="cb2-33">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_0390f039fde0da559498446d2a3da9d7 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_0390f039fde0da559498446d2a3da9d7&quot; ></div>
        
</body>
<script>
    
    
            var map_0390f039fde0da559498446d2a3da9d7 = L.map(
                &quot;map_0390f039fde0da559498446d2a3da9d7&quot;,
                {
                    center: [41.7403, -87.73230000000001],
                    crs: L.CRS.EPSG3857,
                    zoom: 16,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_f1d08f23817f4ed4a0dd4bfe14113e0e = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_f1d08f23817f4ed4a0dd4bfe14113e0e.addTo(map_0390f039fde0da559498446d2a3da9d7);
        
    
            var marker_c032973fe2b2a8effe89ec7a2717ccbd = L.marker(
                [41.739, -87.729],
                {}
            ).addTo(map_0390f039fde0da559498446d2a3da9d7);
        
    
        var popup_c107a5eb06ec6e09c1eccb01c37e0e74 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_de4e4adcf06e31c7827c71082f2d2289 = $(`<div id=&quot;html_de4e4adcf06e31c7827c71082f2d2289&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Durkin Park</div>`)[0];
                popup_c107a5eb06ec6e09c1eccb01c37e0e74.setContent(html_de4e4adcf06e31c7827c71082f2d2289);
            
        

        marker_c032973fe2b2a8effe89ec7a2717ccbd.bindPopup(popup_c107a5eb06ec6e09c1eccb01c37e0e74)
        ;

        
    
    
            var marker_1b28327c0e9079b53748f4c286dc2087 = L.marker(
                [41.7416, -87.7356],
                {}
            ).addTo(map_0390f039fde0da559498446d2a3da9d7);
        
    
            var icon_8ea62c90f8270c29eed1843f1a4992ee = L.AwesomeMarkers.icon(
                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;red&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}
            );
            marker_1b28327c0e9079b53748f4c286dc2087.setIcon(icon_8ea62c90f8270c29eed1843f1a4992ee);
        
    
        var popup_0581c82e8ed1a0713081e31c89c96bd6 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_248ad0ab52deb5c75f5fdae23d1361df = $(`<div id=&quot;html_248ad0ab52deb5c75f5fdae23d1361df&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Scottsdale Park</div>`)[0];
                popup_0581c82e8ed1a0713081e31c89c96bd6.setContent(html_248ad0ab52deb5c75f5fdae23d1361df);
            
        

        marker_1b28327c0e9079b53748f4c286dc2087.bindPopup(popup_0581c82e8ed1a0713081e31c89c96bd6)
        ;

        
    
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>Notice that the <code>popup</code> argument was supplied to <code>folium.Marker</code>. Now when we click on the markers, whatever text we supply to <code>popup</code> will be shown on the map.</p>
<p>We can connect the markers in the map by using <code>folium.PolyLine</code>. We pass it a list of lat/lon pairs, and it draws a line connecting the points. Let’s connect the two parks with a green line:</p>
<div id="cell-7" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Durkin Park coordinates.</span></span>
<span id="cb3-3">lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.739</span></span>
<span id="cb3-4">lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.729</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scottsdale Park coordinates. </span></span>
<span id="cb3-7">lat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">41.7416</span></span>
<span id="cb3-8">lon1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">87.7356</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center map at midway point between parks.</span></span>
<span id="cb3-11">mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lat0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-12">mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (lon0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lon1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specify zoom level. </span></span>
<span id="cb3-15">zoom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize map.</span></span>
<span id="cb3-18">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zoom)</span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Durkin Park marker.</span></span>
<span id="cb3-21">folium.Marker(</span>
<span id="cb3-22">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat0, lon0],</span>
<span id="cb3-23">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Durkin Park"</span>,</span>
<span id="cb3-24">    ).add_to(m)</span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Scottsdale Park marker.</span></span>
<span id="cb3-27">folium.Marker(</span>
<span id="cb3-28">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat1, lon1],</span>
<span id="cb3-29">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scottsdale Park"</span>,</span>
<span id="cb3-30">    icon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>folium.Icon(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb3-31">    ).add_to(m)</span>
<span id="cb3-32"></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect parks with green line. </span></span>
<span id="cb3-34">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(lat0, lon0), (lat1, lon1)]</span>
<span id="cb3-35">folium.PolyLine(points, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>).add_to(m)</span>
<span id="cb3-36"></span>
<span id="cb3-37">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_cafa663ffe5b0c2e73d28792b24f021e {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_cafa663ffe5b0c2e73d28792b24f021e&quot; ></div>
        
</body>
<script>
    
    
            var map_cafa663ffe5b0c2e73d28792b24f021e = L.map(
                &quot;map_cafa663ffe5b0c2e73d28792b24f021e&quot;,
                {
                    center: [41.7403, -87.73230000000001],
                    crs: L.CRS.EPSG3857,
                    zoom: 16,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_42b3d08d23fcc2959f842ccfa373dde5 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_42b3d08d23fcc2959f842ccfa373dde5.addTo(map_cafa663ffe5b0c2e73d28792b24f021e);
        
    
            var marker_77bd6738d2cb38080b88f816c6ba6b20 = L.marker(
                [41.739, -87.729],
                {}
            ).addTo(map_cafa663ffe5b0c2e73d28792b24f021e);
        
    
        var popup_19047bc0fd4d2f004e80a4454ad75688 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_f55c8512714a73977a02cac9e4163e0f = $(`<div id=&quot;html_f55c8512714a73977a02cac9e4163e0f&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Durkin Park</div>`)[0];
                popup_19047bc0fd4d2f004e80a4454ad75688.setContent(html_f55c8512714a73977a02cac9e4163e0f);
            
        

        marker_77bd6738d2cb38080b88f816c6ba6b20.bindPopup(popup_19047bc0fd4d2f004e80a4454ad75688)
        ;

        
    
    
            var marker_8b2c7c5f2ad62ddca9c5bdb1464ce8a5 = L.marker(
                [41.7416, -87.7356],
                {}
            ).addTo(map_cafa663ffe5b0c2e73d28792b24f021e);
        
    
            var icon_c5ba6488664b60741bf228ff07f59cab = L.AwesomeMarkers.icon(
                {&quot;extraClasses&quot;: &quot;fa-rotate-0&quot;, &quot;icon&quot;: &quot;info-sign&quot;, &quot;iconColor&quot;: &quot;white&quot;, &quot;markerColor&quot;: &quot;red&quot;, &quot;prefix&quot;: &quot;glyphicon&quot;}
            );
            marker_8b2c7c5f2ad62ddca9c5bdb1464ce8a5.setIcon(icon_c5ba6488664b60741bf228ff07f59cab);
        
    
        var popup_f321726ea51c2cb82179e934f2157f3a = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_7566338c12b173ed99dbf1c622a634c6 = $(`<div id=&quot;html_7566338c12b173ed99dbf1c622a634c6&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Scottsdale Park</div>`)[0];
                popup_f321726ea51c2cb82179e934f2157f3a.setContent(html_7566338c12b173ed99dbf1c622a634c6);
            
        

        marker_8b2c7c5f2ad62ddca9c5bdb1464ce8a5.bindPopup(popup_f321726ea51c2cb82179e934f2157f3a)
        ;

        
    
    
            var poly_line_8371564e57dc1a34e5b243b09f75579a = L.polyline(
                [[41.739, -87.729], [41.7416, -87.7356]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;green&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: false, &quot;fillColor&quot;: &quot;green&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_cafa663ffe5b0c2e73d28792b24f021e);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>One final point: We can replace the standard markers with circle markers by using <code>folium.CircleMarker</code>. <code>radius</code> controls the size of the markers and <code>color/fill_color</code> set the color of the marker:</p>
<div id="cell-9" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zoom)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Durkin Park circle marker.</span></span>
<span id="cb4-5">folium.CircleMarker(</span>
<span id="cb4-6">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat0, lon0], </span>
<span id="cb4-7">    radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, </span>
<span id="cb4-8">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Durkin Park"</span>,</span>
<span id="cb4-9">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb4-10">    fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb4-11">    fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-12">    fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-13">    ).add_to(m)</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Scottsdale Park marker.</span></span>
<span id="cb4-16">folium.CircleMarker(</span>
<span id="cb4-17">    location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat1, lon1], </span>
<span id="cb4-18">    radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, </span>
<span id="cb4-19">    popup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scottsdale Park"</span>,</span>
<span id="cb4-20">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb4-21">    fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb4-22">    fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-23">    fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-24">    ).add_to(m)</span>
<span id="cb4-25"></span>
<span id="cb4-26"></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect parks with green line. </span></span>
<span id="cb4-28">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(lat0, lon0), (lat1, lon1)]</span>
<span id="cb4-29">folium.PolyLine(points, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>).add_to(m)</span>
<span id="cb4-30"></span>
<span id="cb4-31">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_2559a1f643f43870be214ea5397396a8 {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_2559a1f643f43870be214ea5397396a8&quot; ></div>
        
</body>
<script>
    
    
            var map_2559a1f643f43870be214ea5397396a8 = L.map(
                &quot;map_2559a1f643f43870be214ea5397396a8&quot;,
                {
                    center: [41.7403, -87.73230000000001],
                    crs: L.CRS.EPSG3857,
                    zoom: 16,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_781212999bf028a93893216298447816 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_781212999bf028a93893216298447816.addTo(map_2559a1f643f43870be214ea5397396a8);
        
    
            var circle_marker_2e0b623e6946d0403ff93ea9bfa48fb4 = L.circleMarker(
                [41.739, -87.729],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 7, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_2559a1f643f43870be214ea5397396a8);
        
    
        var popup_0d4b11ff32b0b7a358aa081ee1fb3f05 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_a0507c36dfe912d29cb4607016727fb8 = $(`<div id=&quot;html_a0507c36dfe912d29cb4607016727fb8&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Durkin Park</div>`)[0];
                popup_0d4b11ff32b0b7a358aa081ee1fb3f05.setContent(html_a0507c36dfe912d29cb4607016727fb8);
            
        

        circle_marker_2e0b623e6946d0403ff93ea9bfa48fb4.bindPopup(popup_0d4b11ff32b0b7a358aa081ee1fb3f05)
        ;

        
    
    
            var circle_marker_c497bc67ad50d4b27b57dc7787f46bcc = L.circleMarker(
                [41.7416, -87.7356],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 7, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_2559a1f643f43870be214ea5397396a8);
        
    
        var popup_d54f4e6ff9baa4d0e25872e09b7ae160 = L.popup({&quot;maxWidth&quot;: &quot;100%&quot;});

        
            
                var html_f834993b2b3b49f946a6fc5bf12a6972 = $(`<div id=&quot;html_f834993b2b3b49f946a6fc5bf12a6972&quot; style=&quot;width: 100.0%; height: 100.0%;&quot;>Scottsdale Park</div>`)[0];
                popup_d54f4e6ff9baa4d0e25872e09b7ae160.setContent(html_f834993b2b3b49f946a6fc5bf12a6972);
            
        

        circle_marker_c497bc67ad50d4b27b57dc7787f46bcc.bindPopup(popup_d54f4e6ff9baa4d0e25872e09b7ae160)
        ;

        
    
    
            var poly_line_0a7121955f355f8730616c216224bea5 = L.polyline(
                [[41.739, -87.729], [41.7416, -87.7356]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;green&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: false, &quot;fillColor&quot;: &quot;green&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_2559a1f643f43870be214ea5397396a8);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>
<p><br></p>
<p>The International Space Station (ISS) is a collaborative effort among multiple nations, serving as a hub for scientific research and international cooperation in space exploration. The ISS orbits the Earth at an astonishing speed of approximately 17,500 miles per hour, completing an orbit around the planet approximately every 90 minutes.</p>
<p>The <code>coords</code> list in the next cell represents the position as latitude-longitude pairs of the ISS sampled every minute for 20 minutes. We can render each of the 20 points as red circle markers connected by a red dashed line. Note that it is not necessary to call <code>folium.CircleMarker</code> 20 times: Use a for loop to iterate over the <code>coords</code> list.</p>
<div id="cell-11" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2">coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-3">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.4183</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">35.337</span>),</span>
<span id="cb5-4">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">49.3934</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.7562</span>),</span>
<span id="cb5-5">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">48.0881</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.4462</span>),</span>
<span id="cb5-6">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">46.5282</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">19.4374</span>),</span>
<span id="cb5-7">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44.7411</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.743</span>),</span>
<span id="cb5-8">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.7364</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.3267</span>),</span>
<span id="cb5-9">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.5727</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.2481</span>),</span>
<span id="cb5-10">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">38.2576</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.4505</span>),</span>
<span id="cb5-11">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">35.8123</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0896</span>),</span>
<span id="cb5-12">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">33.2554</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.3975</span>),</span>
<span id="cb5-13">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30.6031</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.4986</span>),</span>
<span id="cb5-14">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">27.8697</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.4178</span>),</span>
<span id="cb5-15">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.0674</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.1786</span>),</span>
<span id="cb5-16">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">22.197</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.8122</span>), </span>
<span id="cb5-17">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">19.2887</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.3195</span>),</span>
<span id="cb5-18">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">16.3407</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.7295</span>),</span>
<span id="cb5-19">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.3611</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">23.059</span>), </span>
<span id="cb5-20">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.3562</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.325</span>),</span>
<span id="cb5-21">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.3323</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">27.5427</span>), </span>
<span id="cb5-22">    (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.2953</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.7267</span>)</span>
<span id="cb5-23">    ]</span>
<span id="cb5-24"></span>
<span id="cb5-25"></span>
<span id="cb5-26">lats, lons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>coords)</span>
<span id="cb5-27">mid_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(lats) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lats)</span>
<span id="cb5-28">mid_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(lons) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lons)</span>
<span id="cb5-29"></span>
<span id="cb5-30">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folium.Map(location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[mid_lat, mid_lon], zoom_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb5-31"></span>
<span id="cb5-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> lat, lon <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> coords:</span>
<span id="cb5-33"></span>
<span id="cb5-34">    folium.CircleMarker(</span>
<span id="cb5-35">        location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lat, lon], </span>
<span id="cb5-36">        radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb5-37">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb5-38">        fill_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, </span>
<span id="cb5-39">        fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-40">        fill_opacity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-41">        ).add_to(m)</span>
<span id="cb5-42"></span>
<span id="cb5-43"></span>
<span id="cb5-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect coords with red dashed line.</span></span>
<span id="cb5-45">folium.PolyLine(coords, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, dash_array<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span>).add_to(m)</span>
<span id="cb5-46"></span>
<span id="cb5-47">m</span>
<span id="cb5-48"></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div style="width:100%;"><div style="position:relative;width:100%;height:0;padding-bottom:60%;"><span style="color:#565656">Make this Notebook Trusted to load map: File -&gt; Trust Notebook</span><iframe srcdoc="<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;></script>
    <script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;></script>
    <script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;></script>
    <script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;></script>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/>
    <link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/>
    
            <meta name=&quot;viewport&quot; content=&quot;width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; />
            <style>
                #map_5019534892c9825414fcf011c574038c {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class=&quot;folium-map&quot; id=&quot;map_5019534892c9825414fcf011c574038c&quot; ></div>
        
</body>
<script>
    
    
            var map_5019534892c9825414fcf011c574038c = L.map(
                &quot;map_5019534892c9825414fcf011c574038c&quot;,
                {
                    center: [30.325749999999992, 2.7175800000000025],
                    crs: L.CRS.EPSG3857,
                    zoom: 4,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_789127f332392bed4916c8c1b64cd430 = L.tileLayer(
                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,
                {&quot;attribution&quot;: &quot;\u0026copy; \u003ca href=\&quot;https://www.openstreetmap.org/copyright\&quot;\u003eOpenStreetMap\u003c/a\u003e contributors&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 19, &quot;maxZoom&quot;: 19, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}
            );
        
    
            tile_layer_789127f332392bed4916c8c1b64cd430.addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_dbd330c6e72dfeb9a8210d6ba98436a7 = L.circleMarker(
                [50.4183, -35.337],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_4cfefdcc9938b64218c3edad81d20bde = L.circleMarker(
                [49.3934, -29.7562],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_114ba3dd0f517b0009c35cab78c0c041 = L.circleMarker(
                [48.0881, -24.4462],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_1e74c6af3cb6b1d41f86cc71203e1209 = L.circleMarker(
                [46.5282, -19.4374],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_f161fc442366f125b395c8ee07f1413d = L.circleMarker(
                [44.7411, -14.743],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_2eca911684441980c5d4d83a41c1ec1d = L.circleMarker(
                [42.7364, -10.3267],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_7801676c154ce1baf2d308fa81e0520a = L.circleMarker(
                [40.5727, -6.2481],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_28ee765082c108a82ad0dbd9afbc0953 = L.circleMarker(
                [38.2576, -2.4505],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_5e4aa6ee3e0ae4f8edf83f62de22bcfa = L.circleMarker(
                [35.8123, 1.0896],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_c46c3726974cdb0e444a26e9747aa52f = L.circleMarker(
                [33.2554, 4.3975],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_e04702d6208c6754387cadfdb0f9c67e = L.circleMarker(
                [30.6031, 7.4986],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_bb16e9c9dc16027be099d3e3c6a2f5a8 = L.circleMarker(
                [27.8697, 10.4178],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_49c7e7325c142d2a55ed048a60f92498 = L.circleMarker(
                [25.0674, 13.1786],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_aac339f316801d5d0de40bebb1884446 = L.circleMarker(
                [22.197, 15.8122],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_3e3a5a2bf76661f27c49d5598bfb355a = L.circleMarker(
                [19.2887, 18.3195],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_7500983d1c39caf9f77426d7f8cc88ac = L.circleMarker(
                [16.3407, 20.7295],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_64d2f7ed370962fbf08de028c24ef35a = L.circleMarker(
                [13.3611, 23.059],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_ad436a27b49b6ed91634cff60a4e2f9b = L.circleMarker(
                [10.3562, 25.325],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_19b7e716bcd8c04d6de6542c9e4e6527 = L.circleMarker(
                [7.3323, 27.5427],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var circle_marker_836e3d69472ab2b9f29976f242b29b6e = L.circleMarker(
                [4.2953, 29.7267],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 1, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;opacity&quot;: 1.0, &quot;radius&quot;: 5, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
    
            var poly_line_83bd5d8b950b32a1480d449f50f42764 = L.polyline(
                [[50.4183, -35.337], [49.3934, -29.7562], [48.0881, -24.4462], [46.5282, -19.4374], [44.7411, -14.743], [42.7364, -10.3267], [40.5727, -6.2481], [38.2576, -2.4505], [35.8123, 1.0896], [33.2554, 4.3975], [30.6031, 7.4986], [27.8697, 10.4178], [25.0674, 13.1786], [22.197, 15.8122], [19.2887, 18.3195], [16.3407, 20.7295], [13.3611, 23.059], [10.3562, 25.325], [7.3323, 27.5427], [4.2953, 29.7267]],
                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;red&quot;, &quot;dashArray&quot;: &quot;5&quot;, &quot;dashOffset&quot;: null, &quot;fill&quot;: false, &quot;fillColor&quot;: &quot;red&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}
            ).addTo(map_5019534892c9825414fcf011c574038c);
        
</script>
</html>" style="position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen=""></iframe></div></div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Python</category>
  <category>Geospatial</category>
  <guid>https://www.jtrive.com/posts/getting-started-with-folium/getting-started-with-folium.html</guid>
  <pubDate>Sun, 01 Sep 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Geospatial Vector Data</title>
  <link>https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data.html</link>
  <description><![CDATA[ 





<p>Geospatial vector data is a way of representing geographic features in a digital format using points, lines, and polygons. Unlike raster data, which represents geographic data as a grid of cells or pixels, vector data represents features more precisely with distinct shapes and boundaries. Each vector feature can have associated attributes, such as names, types, or other descriptive information.</p>
<section id="types-of-geospatial-vector-data" class="level3">
<h3 class="anchored" data-anchor-id="types-of-geospatial-vector-data">Types of Geospatial Vector Data</h3>
<ul>
<li><p><strong>Points</strong>: Represent discrete locations such as cities, landmarks, or individual trees. Each point has a specific location defined by coordinates (e.g., latitude and longitude).</p></li>
<li><p><strong>Lines</strong> (or polylines): Represent linear features such as roads, rivers, or boundaries. Lines are composed of a series of connected points.</p></li>
<li><p><strong>Polygons</strong> (or multipolygons): Represent areas or shapes such as lakes, parks, or country borders. Polygons are defined by a series of points that create a closed shape.</p></li>
</ul>
<p>Shapefiles are one of the most common formats for vector data. They store points, lines, and polygons along with attribute information. The US Census Bureau makes a number of shapefiles available <a href="https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html">here</a>. In this notebook, we’ll walkthrough how to load shapefiles into GeoPandas, plotting the boundaries and create a choropleth map based on a second dataset (choropleth maps are those where the color of each shape is based on the value of an associated variable).</p>
<p>To start, download US state shapefile <em>cb_2018_us_state_500k.zip</em> from the <a href="https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html">United States Census Bureau boundary files page</a>. Under the <em>State</em> subheader, you will see three files:</p>
<ul>
<li><em>cb_2018_us_state_500k.zip</em></li>
<li><em>cb_2018_us_state_5m.zip</em></li>
<li><em>cb_2018_us_state_20m.zip</em></li>
</ul>
<p>The 500k files are the most detailed, but also the largest. The 20m files are the smallest, but at the cost of some dramatic simplification. The 5m files fall somewhere between the other two. We will work with the 500k files.</p>
<p>Once downloaded, the shapefile can be loaded into a GeoPandas DataFrame as follows:</p>
<div id="cell-2" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geopandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gpd</span>
<span id="cb1-5"></span>
<span id="cb1-6">shp_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cb_2018_us_state_500k.zip"</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">dfshp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(shp_path)</span>
<span id="cb1-9"></span>
<span id="cb1-10">dfshp.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">STATEFP</th>
<th data-quarto-table-cell-role="th">STATENS</th>
<th data-quarto-table-cell-role="th">AFFGEOID</th>
<th data-quarto-table-cell-role="th">GEOID</th>
<th data-quarto-table-cell-role="th">STUSPS</th>
<th data-quarto-table-cell-role="th">NAME</th>
<th data-quarto-table-cell-role="th">LSAD</th>
<th data-quarto-table-cell-role="th">ALAND</th>
<th data-quarto-table-cell-role="th">AWATER</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>28</td>
<td>01779790</td>
<td>0400000US28</td>
<td>28</td>
<td>MS</td>
<td>Mississippi</td>
<td>00</td>
<td>121533519481</td>
<td>3926919758</td>
<td>MULTIPOLYGON (((-88.50297 30.21523, -88.49176 ...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>37</td>
<td>01027616</td>
<td>0400000US37</td>
<td>37</td>
<td>NC</td>
<td>North Carolina</td>
<td>00</td>
<td>125923656064</td>
<td>13466071395</td>
<td>MULTIPOLYGON (((-75.72681 35.93584, -75.71827 ...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>40</td>
<td>01102857</td>
<td>0400000US40</td>
<td>40</td>
<td>OK</td>
<td>Oklahoma</td>
<td>00</td>
<td>177662925723</td>
<td>3374587997</td>
<td>POLYGON ((-103.00257 36.52659, -103.00219 36.6...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>51</td>
<td>01779803</td>
<td>0400000US51</td>
<td>51</td>
<td>VA</td>
<td>Virginia</td>
<td>00</td>
<td>102257717110</td>
<td>8528531774</td>
<td>MULTIPOLYGON (((-75.74241 37.80835, -75.74151 ...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>54</td>
<td>01779805</td>
<td>0400000US54</td>
<td>54</td>
<td>WV</td>
<td>West Virginia</td>
<td>00</td>
<td>62266474513</td>
<td>489028543</td>
<td>POLYGON ((-82.64320 38.16909, -82.64300 38.169...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><br></p>
<p>The geometry column is a special column in a GeoDataFrame that stores the geometric shapes associated with each row (in this case, the shapes in latitude-longitude pairs that define the boundary of each state). This column contains the vector data that defines the spatial features in the dataset. Some states have boundaries defined by a MULTIPOLYGON, such as Hawaii, whose boundary consists of multiple closed POLYGONS. If it isn’t already present, the geometry column needs to be defined.</p>
<p>We can plot the data present in the present in the shapefile by calling the GeoDataFrame’s <code>plot</code> method:</p>
<div id="cell-4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">dfshp.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>Let’s zoom in and focus on a map of the lower 48 states only:</p>
<div id="cell-6" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2">exclude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"American Samoa"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alaska"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hawaii"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Guam"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"United States Virgin Islands"</span>,</span>
<span id="cb3-3">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Commonwealth of the Northern Mariana Islands"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Puerto Rico"</span>]</span>
<span id="cb3-4"></span>
<span id="cb3-5">dfshp48 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfshp[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>dfshp.NAME.isin(exclude)].reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">dfshp48.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>We can get a better view of the boundaries of each state by calling <code>boundary.plot</code>:</p>
<div id="cell-8" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2">dfshp48.boundary.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>By default, the plots rendered via GeoPandas are smaller than we might like. We can increase the size of the rendered map, suppress ticklabels, change the boundary color and add a title as follows:</p>
<div id="cell-10" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-3"></span>
<span id="cb5-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U.S. Boundaries - Lower 48 States"</span>)</span>
<span id="cb5-7">dfshp48.boundary.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb5-10"></span>
<span id="cb5-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>To overlay the state name at the center of each state, use:</p>
<div id="cell-12" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-3">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U.S. Boundaries - Lower 48 States"</span>)</span>
<span id="cb6-4">dfshp48.boundary.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>)</span>
<span id="cb6-5">dfshp48.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: ax.annotate(x.NAME, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x.geometry.centroid.coords[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-6">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb6-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>In the shapefile, ALAND and AWATER represent the land and water area of each state in square meters. To create a choropleth map based on the natural log of AWATER, include the <code>column</code> argument to the <code>plot</code> method:</p>
<div id="cell-14" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute natural log of AWATER to get better separation by state.</span></span>
<span id="cb7-3">dfshp48[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_AWATER"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(dfshp48[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AWATER"</span>])</span>
<span id="cb7-4">dfshp48.plot(column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_AWATER"</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plasma"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>We can reformat the map as before, while also adding a legend to give context the difference in colors by state. Options for colormaps are available <a href="https://matplotlib.org/stable/users/explain/colors/colormaps.html">here</a>:</p>
<div id="cell-16" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-3">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ln(AWATER) - Lower 48 States"</span>)</span>
<span id="cb8-4">dfshp48.plot(</span>
<span id="cb8-5">    ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_AWATER"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>, </span>
<span id="cb8-6">    cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gist_rainbow"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.750</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb8-7">    legend_kwds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ln(AWATER)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orientation"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vertical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shrink"</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.35</span>}</span>
<span id="cb8-8">    )</span>
<span id="cb8-9">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb8-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="congressional-district-shapefiles" class="level3">
<h3 class="anchored" data-anchor-id="congressional-district-shapefiles">Congressional District Shapefiles</h3>
<p>For variety, let’s download the Congressional District shapefile and plot the boundaries. It is available at the same link as above, and is identified as <em>cb_2018_us_cd116_500k.zip</em>. Reading the file into GeoPandas and displaying the first 5 rows yields:</p>
<div id="cell-18" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"></span>
<span id="cb9-2">dfc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cb_2018_us_cd116_500k.zip"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dfc.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dfc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-5"></span>
<span id="cb9-6">dfc.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dfc.shape: (441, 9)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="62">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">STATEFP</th>
<th data-quarto-table-cell-role="th">CD116FP</th>
<th data-quarto-table-cell-role="th">AFFGEOID</th>
<th data-quarto-table-cell-role="th">GEOID</th>
<th data-quarto-table-cell-role="th">LSAD</th>
<th data-quarto-table-cell-role="th">CDSESSN</th>
<th data-quarto-table-cell-role="th">ALAND</th>
<th data-quarto-table-cell-role="th">AWATER</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>17</td>
<td>10</td>
<td>5001600US1710</td>
<td>1710</td>
<td>C2</td>
<td>116</td>
<td>777404163</td>
<td>31605644</td>
<td>POLYGON ((-88.19882 42.41557, -88.19860 42.415...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>47</td>
<td>06</td>
<td>5001600US4706</td>
<td>4706</td>
<td>C2</td>
<td>116</td>
<td>16770155959</td>
<td>324676580</td>
<td>POLYGON ((-87.15023 36.56770, -87.14962 36.568...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>48</td>
<td>06</td>
<td>5001600US4806</td>
<td>4806</td>
<td>C2</td>
<td>116</td>
<td>5564805243</td>
<td>255530191</td>
<td>POLYGON ((-97.38860 32.61731, -97.38856 32.618...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>48</td>
<td>07</td>
<td>5001600US4807</td>
<td>4807</td>
<td>C2</td>
<td>116</td>
<td>419784487</td>
<td>3069802</td>
<td>POLYGON ((-95.77383 29.87515, -95.76962 29.875...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>48</td>
<td>26</td>
<td>5001600US4826</td>
<td>4826</td>
<td>C2</td>
<td>116</td>
<td>2349987793</td>
<td>191353567</td>
<td>POLYGON ((-97.39826 32.99996, -97.39792 33.013...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We again display the boundaries:</p>
<div id="cell-20" class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"></span>
<span id="cb11-2">dfc.boundary.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We’d like to focus on the lower 48 states again, but this time the shapefile doesn’t have a NAME column. How should we proceed?</p>
<p>One approach is to define a bounding box that encloses the lower 48 states, then filter the shapefile to retain only those congressional districts whose geometry intersects the bounding box. GeoPandas provides coordinate based indexing with the <code>cx</code> indexer, which slices using a bounding box. Geometries in the GeoSeries or GeoDataFrame that intersect the bounding box will be returned.</p>
<p>For the lower 48 states bounding box, we’ll use <strong>(-125, 24.6), (-65, 50)</strong>, southwest to northeast. We also include a circle marker at the center of each congressional district:</p>
<div id="cell-22" class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2">xmin, ymin, xmax, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">125</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.6</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb12-3">dfc48 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dfc.cx[xmin:xmax, ymin:ymax]</span>
<span id="cb12-4"></span>
<span id="cb12-5"></span>
<span id="cb12-6"></span>
<span id="cb12-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-8">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"US Congressional Districts, 116th Congress - Lower 48 States"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb12-9">dfc48.boundary.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.50</span>)</span>
<span id="cb12-10">dfc48.geometry.centroid.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb12-11">ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb12-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\jtriv\AppData\Local\Temp\ipykernel_8996\3296541533.py:9: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.

  dfc48.geometry.centroid.plot(ax=ax, markersize=6, color="red")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-12-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="geojson" class="level3">
<h3 class="anchored" data-anchor-id="geojson">GeoJSON</h3>
<p>Working with GeoJSON is much the same as working with shapefiles, one difference being that with GeoJSON, vector data is contained within a single file as opposed to an archive of multiple file types. See <a href="https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json">here</a> for an example.</p>
<p>But once read into GeoPandas, we work with it the same way. We can load US state boundary files as GeoJSON from GitHub via:</p>
<div id="cell-24" class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"></span>
<span id="cb14-2">dfstate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json"</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4">dfstate.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="81">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">density</th>
<th data-quarto-table-cell-role="th">geometry</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>01</td>
<td>Alabama</td>
<td>94.650</td>
<td>POLYGON ((-87.35930 35.00118, -85.60667 34.984...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>02</td>
<td>Alaska</td>
<td>1.264</td>
<td>MULTIPOLYGON (((-131.60202 55.11798, -131.5691...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>04</td>
<td>Arizona</td>
<td>57.050</td>
<td>POLYGON ((-109.04250 37.00026, -109.04798 31.3...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>05</td>
<td>Arkansas</td>
<td>56.430</td>
<td>POLYGON ((-94.47384 36.50186, -90.15254 36.496...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>06</td>
<td>California</td>
<td>241.700</td>
<td>POLYGON ((-123.23326 42.00619, -122.37885 42.0...</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="82">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2">dfstate.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <category>Geospatial</category>
  <guid>https://www.jtrive.com/posts/working-with-geospatial-vector-data/working-with-geospatial-vector-data.html</guid>
  <pubDate>Sat, 17 Aug 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Composite Estimators in scikit-learn</title>
  <link>https://www.jtrive.com/posts/composite-estimators/composite-estimators.html</link>
  <description><![CDATA[ 





<p>To build a composite estimator in scikit-learn, transformers are usually combined with other transformers and/or predictors (such as classifiers or regressors). The most common tool used for composing estimators is a Pipeline. The <code>Pipeline</code> is often used in combination with <code>ColumnTransformer</code> or <code>FeatureUnion</code> which concatenate the output of transformers into a composite feature space.</p>
<p>In this notebook, I demonstrate how to create a composite estimator based on a synthetic dataset.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Create synthetic dataset for composite estimator demo.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-7"></span>
<span id="cb1-8">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb1-9">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-10">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-11">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13">rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.default_rng(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb1-14"></span>
<span id="cb1-15">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb1-16"></span>
<span id="cb1-17">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb1-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>: rng.gamma(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n),</span>
<span id="cb1-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>: rng.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n),</span>
<span id="cb1-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>: rng.choice([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>], p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n),</span>
<span id="cb1-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>: rng.choice([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>], p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.475</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.475</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n),</span>
<span id="cb1-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>: rng.poisson(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n),</span>
<span id="cb1-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>: rng.choice([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>], p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb1-24">})</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set a selected samples to NaN in A, B and C. </span></span>
<span id="cb1-27">df.loc[rng.choice(n, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.NaN</span>
<span id="cb1-28">df.loc[rng.choice(n, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.NaN</span>
<span id="cb1-29">df.loc[rng.choice(n, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.NaN</span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create train-validation split. </span></span>
<span id="cb1-32">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb1-33">dftrain, dfvalid, ytrain, yvalid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)</span>
<span id="cb1-34"></span>
<span id="cb1-35"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dftrain.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dftrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-36"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dfvalid.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dfvalid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-37"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"prop. ytrain : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ytrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dftrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"prop. yvalid : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>yvalid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dfvalid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dftrain.shape: (950, 6)
dfvalid.shape: (50, 6)
prop. ytrain : 0.2389
prop. yvalid : 0.2400</code></pre>
</div>
</div>
<p><br></p>
<p>For this dataset, we’ll use <code>ColumnTransformer</code> to create separate pre-processing pipelines for continuous and categorical features. For continuous features, we impute missing values and standardize each to be on the same scale. For categorical features, we impute missing values and one-hot encode, creating k-1 features for a variable with k distinct levels. As the last step a <code>LogisticRegression</code> classifier is included with elastic net penatly. The code to accomplish this is given below:</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.compose <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ColumnTransformer</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.experimental <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> enable_iterative_imputer</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.impute <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IterativeImputer</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb3-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OneHotEncoder, OrdinalEncoder, StandardScaler</span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LogisticRegression</span>
<span id="cb3-7"></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data pre-processing for LogisticRegression model.</span></span>
<span id="cb3-10">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression(</span>
<span id="cb3-11">    penalty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elasticnet"</span>, solver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"saga"</span>, max_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="cb3-12">    )</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify continuous and catergorical features. </span></span>
<span id="cb3-15">continuous <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>]</span>
<span id="cb3-16">categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>]</span>
<span id="cb3-17"></span>
<span id="cb3-18">continuous_transformer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb3-19">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imputer"</span>, IterativeImputer()),</span>
<span id="cb3-20">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scaler"</span> , StandardScaler())</span>
<span id="cb3-21">    ])</span>
<span id="cb3-22">categorical_transformer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb3-23">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"onehot"</span>, OneHotEncoder(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>, sparse_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, handle_unknown<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>))</span>
<span id="cb3-24">    ])</span>
<span id="cb3-25"></span>
<span id="cb3-26">preprocessor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnTransformer(transformers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb3-27">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span> , continuous_transformer, continuous),  </span>
<span id="cb3-28">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"categorical"</span>, categorical_transformer, categorical)</span>
<span id="cb3-29">    ], remainder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span></span>
<span id="cb3-30">    )</span>
<span id="cb3-31"></span>
<span id="cb3-32">pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb3-33">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"preprocessor"</span>, preprocessor),</span>
<span id="cb3-34">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier"</span>, lr)</span>
<span id="cb3-35">    ]).set_output(transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span>)</span>
<span id="cb3-36"></span>
<span id="cb3-37">pipeline</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('continuous',
                                                  Pipeline(steps=[('imputer',
                                                                   IterativeImputer()),
                                                                  ('scaler',
                                                                   StandardScaler())]),
                                                  ['A', 'B', 'E']),
                                                 ('categorical',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(drop='first',
                                                                                 sparse_output=False))]),
                                                  ['C', 'D'])])),
                ('classifier',
                 LogisticRegression(max_iter=5000, penalty='elasticnet',
                                    solver='saga'))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox"><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('continuous',
                                                  Pipeline(steps=[('imputer',
                                                                   IterativeImputer()),
                                                                  ('scaler',
                                                                   StandardScaler())]),
                                                  ['A', 'B', 'E']),
                                                 ('categorical',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(drop='first',
                                                                                 sparse_output=False))]),
                                                  ['C', 'D'])])),
                ('classifier',
                 LogisticRegression(max_iter=5000, penalty='elasticnet',
                                    solver='saga'))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox"><label for="sk-estimator-id-2" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('continuous',
                                 Pipeline(steps=[('imputer',
                                                  IterativeImputer()),
                                                 ('scaler', StandardScaler())]),
                                 ['A', 'B', 'E']),
                                ('categorical',
                                 Pipeline(steps=[('onehot',
                                                  OneHotEncoder(drop='first',
                                                                sparse_output=False))]),
                                 ['C', 'D'])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox"><label for="sk-estimator-id-3" class="sk-toggleable__label sk-toggleable__label-arrow">continuous</label><div class="sk-toggleable__content"><pre>['A', 'B', 'E']</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-4" type="checkbox"><label for="sk-estimator-id-4" class="sk-toggleable__label sk-toggleable__label-arrow">IterativeImputer</label><div class="sk-toggleable__content"><pre>IterativeImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox"><label for="sk-estimator-id-5" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-6" type="checkbox"><label for="sk-estimator-id-6" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>['C', 'D']</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-7" type="checkbox"><label for="sk-estimator-id-7" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(drop='first', sparse_output=False)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-8" type="checkbox"><label for="sk-estimator-id-8" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(max_iter=5000, penalty='elasticnet', solver='saga')</pre></div></div></div></div></div></div></div>
</div>
</div>
<p><br></p>
<p>In the next cell, <code>RandomizedSearchCV</code> is run agasinst two hyperparameters: <code>l1_ratio</code> and <code>C</code>. Notice that we only call <code>mdl.fit</code> on the pipeline, as the data transform will be applied to each of the k-datasets separately based on the samples in each fold.</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomizedSearchCV</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hyperparameters to search over. </span></span>
<span id="cb4-6">param_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__l1_ratio"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb4-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier__C"</span>: uniform(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-9">    }</span>
<span id="cb4-10"></span>
<span id="cb4-11">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomizedSearchCV(</span>
<span id="cb4-12">    pipeline, param_grid, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span>, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb4-13">    n_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span></span>
<span id="cb4-14">    )</span>
<span id="cb4-15"></span>
<span id="cb4-16">mdl.fit(dftrain.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), ytrain)</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">best parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fitting 5 folds for each of 3 candidates, totalling 15 fits
[CV] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915; total time=   0.0s
[CV] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915; total time=   0.0s
[CV] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915; total time=   0.0s
[CV] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915; total time=   0.0s
[CV] END classifier__C=8.115660497752215, classifier__l1_ratio=0.7084090612742915; total time=   0.0s
[CV] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359; total time=   0.0s
[CV] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359; total time=   0.0s
[CV] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359; total time=   0.0s
[CV] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359; total time=   0.0s
[CV] END classifier__C=1.115284252761577, classifier__l1_ratio=0.5667878644753359; total time=   0.0s
[CV] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002; total time=   0.0s
[CV] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002; total time=   0.0s
[CV] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002; total time=   0.0s
[CV] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002; total time=   0.0s
[CV] END classifier__C=7.927782545875722, classifier__l1_ratio=0.8376069301429002; total time=   0.0s

best parameters: {'classifier__C': 8.115660497752215, 'classifier__l1_ratio': 0.7084090612742915}</code></pre>
</div>
</div>
<p><br></p>
<p>When an estimator is included within a scikit-learn pipeline and a grid search performed using <code>RandomizedGridSearchCV</code>, the estimator is automatically set to the best parameters found during the search. The <code>best_estimator_</code> attribute of the <code>RandomizedGridSearchCV</code> object will reflect the best parameters for the estimator within the pipeline in terms of the scoring measure:</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">mdl.best_estimator_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('continuous',
                                                  Pipeline(steps=[('imputer',
                                                                   IterativeImputer()),
                                                                  ('scaler',
                                                                   StandardScaler())]),
                                                  ['A', 'B', 'E']),
                                                 ('categorical',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(drop='first',
                                                                                 sparse_output=False))]),
                                                  ['C', 'D'])])),
                ('classifier',
                 LogisticRegression(C=8.115660497752215,
                                    l1_ratio=0.7084090612742915, max_iter=5000,
                                    penalty='elasticnet', solver='saga'))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-9" type="checkbox"><label for="sk-estimator-id-9" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('continuous',
                                                  Pipeline(steps=[('imputer',
                                                                   IterativeImputer()),
                                                                  ('scaler',
                                                                   StandardScaler())]),
                                                  ['A', 'B', 'E']),
                                                 ('categorical',
                                                  Pipeline(steps=[('onehot',
                                                                   OneHotEncoder(drop='first',
                                                                                 sparse_output=False))]),
                                                  ['C', 'D'])])),
                ('classifier',
                 LogisticRegression(C=8.115660497752215,
                                    l1_ratio=0.7084090612742915, max_iter=5000,
                                    penalty='elasticnet', solver='saga'))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-10" type="checkbox"><label for="sk-estimator-id-10" class="sk-toggleable__label sk-toggleable__label-arrow">preprocessor: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(transformers=[('continuous',
                                 Pipeline(steps=[('imputer',
                                                  IterativeImputer()),
                                                 ('scaler', StandardScaler())]),
                                 ['A', 'B', 'E']),
                                ('categorical',
                                 Pipeline(steps=[('onehot',
                                                  OneHotEncoder(drop='first',
                                                                sparse_output=False))]),
                                 ['C', 'D'])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-11" type="checkbox"><label for="sk-estimator-id-11" class="sk-toggleable__label sk-toggleable__label-arrow">continuous</label><div class="sk-toggleable__content"><pre>['A', 'B', 'E']</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-12" type="checkbox"><label for="sk-estimator-id-12" class="sk-toggleable__label sk-toggleable__label-arrow">IterativeImputer</label><div class="sk-toggleable__content"><pre>IterativeImputer()</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-13" type="checkbox"><label for="sk-estimator-id-13" class="sk-toggleable__label sk-toggleable__label-arrow">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-14" type="checkbox"><label for="sk-estimator-id-14" class="sk-toggleable__label sk-toggleable__label-arrow">categorical</label><div class="sk-toggleable__content"><pre>['C', 'D']</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-15" type="checkbox"><label for="sk-estimator-id-15" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(drop='first', sparse_output=False)</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-16" type="checkbox"><label for="sk-estimator-id-16" class="sk-toggleable__label sk-toggleable__label-arrow">LogisticRegression</label><div class="sk-toggleable__content"><pre>LogisticRegression(C=8.115660497752215, l1_ratio=0.7084090612742915,
                   max_iter=5000, penalty='elasticnet', solver='saga')</pre></div></div></div></div></div></div></div>
</div>
</div>
<p><br></p>
<p>Once the optimal model has been determined, we can pass our validation/test data into the pipeline to generate predicted probabilities for unseen data:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assessing model performance on unseen data.</span></span>
<span id="cb7-3">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict_proba(dfvalid)[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-4"></span>
<span id="cb7-5">ypred</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([0.23803061, 0.23987571, 0.22497394, 0.2360284 , 0.21692351,
       0.24979123, 0.22930123, 0.23805811, 0.18848299, 0.2269307 ,
       0.18739627, 0.21963412, 0.24601412, 0.24592807, 0.26313459,
       0.19509853, 0.22403892, 0.2644474 , 0.25217899, 0.25114582,
       0.25275472, 0.25602435, 0.23526247, 0.22682578, 0.21364797,
       0.31097165, 0.25706994, 0.26917858, 0.21912074, 0.14953379,
       0.2521859 , 0.19803027, 0.23446292, 0.20239688, 0.22329016,
       0.23452063, 0.19225738, 0.1971433 , 0.32557197, 0.2366244 ,
       0.21352434, 0.27294373, 0.25589429, 0.23278834, 0.24858346,
       0.2058699 , 0.17559173, 0.24556249, 0.22534097, 0.22728177])</code></pre>
</div>
</div>
<p>In some cases, we may want to pickle our model to share with a third-party for some downstream task. This is straightforward:</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-model.pkl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fpkl:</span>
<span id="cb9-4">    pickle.dump(mdl, fpkl, protocol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pickle.HIGHEST_PROTOCOL)</span></code></pre></div>
</div>



 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/composite-estimators/composite-estimators.html</guid>
  <pubDate>Thu, 01 Aug 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Querying SQL Server from Pandas</title>
  <link>https://www.jtrive.com/posts/sqlserver-from-python/sqlserver-from-python.html</link>
  <description><![CDATA[ 





<p>If you research how to connect to a database from Python, many examples use the pyodbc library, which, aptly named, creates a connection to any ODBC-compatible database. However, connections with pyodbc itself are uni-directional: Data can be retrieved, but it cannot be uploaded into the database. To allow for simple, bi-directional database transactions, we use pyodbc along with <a href="https://www.sqlalchemy.org/">sqlalchemy</a>, a Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL. With pyodbc and sqlalchemy together, it becomes possible to retrieve and upload data from Pandas DataFrames with relative ease. Let’s assume we’re interested in connecting to a SQL Server database on some server. A connection using sqlalchemy is created as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Creating a database connection with sqlalchemy. </span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlalchemy</span>
<span id="cb1-6"></span>
<span id="cb1-7">DRIVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQL Server"</span></span>
<span id="cb1-8">SERVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SERVER"</span></span>
<span id="cb1-9">DATABASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATABASE"</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create connection uri.</span></span>
<span id="cb1-12">conn_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mssql+pyodbc://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>SERVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATABASE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?driver=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DRIVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize connection.</span></span>
<span id="cb1-15">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  sqlalchemy.create_engine(conn_uri)</span></code></pre></div>
<p>A few points to highlight:</p>
<ul>
<li><p><code>conn_uri</code> is a string that contains information needed to connect to our database. The prefix <code>mssql+pyodbc://</code> indicates that we’re targeting a SQL Server database via the pyodbc connector. Also, if we weren’t using Windows authentication, or were working with a different RDBMS, it would be necessary to change <code>conn_uri</code>. For example, an Oracle connection uri would be specified as <code>oracle://[USERNAME]:[PASSWORD]@[DATABASE]</code>.</p></li>
<li><p>Also in <code>conn_uri</code>, within the format substitution, whitespace in <code>DRIVER</code> is replaced with <code>+</code>. This is consistent with how whitespace is encoded for web addresses.</p></li>
</ul>
<p>Next, to query the French Motor Third-Party Liability Claims sample dataset in the table <em>SAMPLE_FREMTPL</em>, use the <code>read_sql</code> function. I’ve included the connection initialization logic for convenience:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Reading database data into Pandas DataFrame.</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlalchemy</span>
<span id="cb2-6"></span>
<span id="cb2-7">DRIVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQL Server"</span></span>
<span id="cb2-8">SERVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SERVER"</span></span>
<span id="cb2-9">DATABASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATABASE"</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create connection uri.</span></span>
<span id="cb2-12">conn_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mssql+pyodbc://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>SERVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATABASE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?driver=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DRIVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize connection.</span></span>
<span id="cb2-15">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  sqlalchemy.create_engine(conn_uri)</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create query. </span></span>
<span id="cb2-18">SQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM SAMPLE_TABLE"</span></span>
<span id="cb2-19"></span>
<span id="cb2-20">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(SQL, con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>conn)</span></code></pre></div>
<p>Instead of passing a query to <code>pd.read_sql</code>, the tablename could have been provided. <code>pd.read_sql</code> is convenience wrapper around <code>read_sql_table</code> and <code>read_sql_query</code> which will delegate to the specific function depending on the input (dispatches <code>read_sql_table</code> if input is a tablename, <code>read_sql_query</code> if input is a query). Refer to the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html#pandas.read_sql">documentation</a> for more information.</p>
<p>Let’s assume SAMPLE_TABLE represents the French Motor Third-Party Liability Claims dataset available <a href="https://www.kaggle.com/datasets/floser/french-motor-claims-datasets-fremtpl2freq">here</a>. Inspecting the first 10 records of the dataset yields:</p>
<pre><code>  IDPOL CLAIMNB  EXPOSURE AREA  VEHPOWER VEHAGE  DRIVAGE  BONUSMALUS VEHBRAND     VEHGAS  DENSITY REGION
0  1290       1   0.66000  'B'         7      0       28          60    'B12'  'Regular'       52  'R72'
1  1292       1   0.12000  'B'         7      0       28          60    'B12'  'Regular'       52  'R72'
2  1295       1   0.08000  'E'         5      0       36          50    'B12'  'Regular'     3274  'R11'
3  1296       1   0.50000  'E'         5      0       36          50    'B12'  'Regular'     3274  'R11'
4  1297       1   0.20000  'E'         5      0       36          50    'B12'  'Regular'     3274  'R11'
5  1299       1   0.74000  'D'         6      0       76          50    'B12'  'Regular'      543  'R91'
6  1301       1   0.05000  'D'         6      0       76          50    'B12'  'Regular'      543  'R91'
7  1303       1   0.03000  'B'        11      0       39          50    'B12'   'Diesel'       55  'R52'
8  1304       1   0.76000  'B'        11      0       39          50    'B12'   'Diesel'       55  'R52'
9  1306       1   0.49000  'E'        10      0       38          50    'B12'  'Regular'     2715  'R93'</code></pre>
<section id="iterative-data-retrieval" class="level3">
<h3 class="anchored" data-anchor-id="iterative-data-retrieval">Iterative Data Retrieval</h3>
<p>When working with large datasets, it may be inefficient to retrieve the entire dataset in a single pass. Pandas provides functionality to retrieve data in <code>chunksize</code>-record blocks, which can result in significant speedups. In the following example, the same French Motor Third-Party Liability Claims sample dataset is retrieved in 20,000-record blocks. The only change in the call to <code>read_sql</code> is the inclusion of <code>chunksize</code>, which specifies the maximum number of records to retrieve for a given iteration. We assume <code>conn</code> has already been initialized:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Using `read_sql`'s *chunksize* parameter for iterative retrieval.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-4">CHUNKSIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span></span>
<span id="cb4-5">SQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM SAMPLE_TABLE"</span></span>
<span id="cb4-6">dfiter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(SQL, con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>conn, chunksize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CHUNKSIZE)</span>
<span id="cb4-7">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([dd <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> dd <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dfiter])</span></code></pre></div>
<ul>
<li><code>CHUNKSIZE</code> specifies the maximum number of records to retrieve at each iteration.</li>
<li><code>dfiter</code> is a reference to the data targeted in our query. <code>dfiter</code> is not a DataFrame, rather it is a generator, a Python object which makes it easy to create iterators. Generators yield values lazily, so they are particularly memory efficient.</li>
<li><code>df = pd.concat([dd for dd in dfiter])</code> can be decomposed into two parts: First, <code>[dd for dd in dfiter]</code> is a <em>list comprehension</em>, a very powerful tool that works similar to a flattened for loop. If we bound <code>[dd for dd in dfiter]</code> to a variable directly, the result would be a list of 34 DataFrames, each having no more than 20,000 records. Second, <code>pd.concat</code> takes the list of DataFrames, and performs a row-wise concatenation of each DataFrame, resulting in a single DataFrame with 678,013 records. <code>pd.concat</code> is akin to the SQL <code>UNION</code> operator. The final result, <code>df</code>, is a DataFrame having 678,013 rows and 12 columns.</li>
</ul>
</section>
<section id="exporting-results-to-file" class="level3">
<h3 class="anchored" data-anchor-id="exporting-results-to-file">Exporting Results to File</h3>
<p>Instead of reading the data into memory, it may be necessary to retrieve the dataset, then write the results to file for later analysis. This can be accomplished in an iterative fashion so that no more than <code>CHUNKSIZE</code> records are in-memory at any point in time. Results will be saved to .csv in a file named <code>"FREMTPL.csv"</code> in 100,000 record blocks:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Writing queried results to file. </span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb5-5"></span>
<span id="cb5-6">CHUNKSIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span></span>
<span id="cb5-7">CSV_PATH  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FREMTPL.csv"</span></span>
<span id="cb5-8">SQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM SAMPLE_TABLE"</span></span>
<span id="cb5-9"></span>
<span id="cb5-10">dfiter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(SQL, conn, chunksize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CHUNKSIZE)</span>
<span id="cb5-11"></span>
<span id="cb5-12">t_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb5-13">trkr, nbrrecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(CSV_PATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fcsv:</span>
<span id="cb5-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dfiter:</span>
<span id="cb5-17">        fcsv.write(df.to_csv(header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nbrrecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>))</span>
<span id="cb5-18">        nbrrecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieved records </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>((trkr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CHUNKSIZE) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbrrecs))</span>
<span id="cb5-20">        trkr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-21"></span>
<span id="cb5-22">t_tot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t_i</span>
<span id="cb5-23">retrieval_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nbrrecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> t_tot</span>
<span id="cb5-24"></span>
<span id="cb5-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb5-26">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Retrieved </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>nbrrecs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> records in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t_tot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>retrieval_rate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> recs/sec.)."</span></span>
<span id="cb5-27">    )</span></code></pre></div>
<p>Executing the code above produces the following output:</p>
<pre><code>Retrieved records 1-100000
Retrieved records 100001-200000
Retrieved records 200001-300000
Retrieved records 300001-400000
Retrieved records 400001-500000
Retrieved records 500001-600000
Retrieved records 600001-678013
Retrieved 678013 records in 20 seconds (33370 recs/sec.).</code></pre>
</section>
<section id="exporting-data" class="level3">
<h3 class="anchored" data-anchor-id="exporting-data">Exporting Data</h3>
<p>In order to export a DataFrame into a database, we leverage the DataFrame’s <code>to_sql</code> method. We provide the name of the table we wish to upload data into, along with a connection object, and what action to take if the table already exists. <code>if_exists</code> can be one of:</p>
<ul>
<li><p>“fail”: Raise a <code>ValueError</code>.</p></li>
<li><p>“replace”: Drop the table before inserting new values.</p></li>
<li><p>“append”: Insert new values to the existing table.</p></li>
</ul>
<p>As a simple transformation, we determine aggregate EXPOSURE by AREA, append a timestamp, then export the result as “SAMPLE_AREA_SUMM”. If the table exists, we want the query to fail:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Summary of aggregate EXPOSURE by AREA based on the French Motor Third-Party </span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Liability Claims sample dataset.</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute aggregate EXPOSURE by AREA.</span></span>
<span id="cb7-8">dfsumm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AREA"</span>, as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EXPOSURE"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append timestamp.</span></span>
<span id="cb7-11">timestamp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %H:%M:%S.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-12">dfsumm[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TIMESTAMP"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timestamp</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export results.</span></span>
<span id="cb7-15">dfsumm.to_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SAMPLE_AREA_SUMM"</span>, con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>conn, if_exists<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fail"</span>)</span></code></pre></div>
<p>If the table already exists, an error like the following will be generated:</p>
<pre><code>ValueError: Table 'SAMPLE_AREA_SUMM' already exists.</code></pre>
<p>Otherwise, no output will be generated.</p>
</section>
<section id="writing-queried-data-to-compressed-format" class="level3">
<h3 class="anchored" data-anchor-id="writing-queried-data-to-compressed-format">Writing Queried Data to Compressed Format</h3>
<p>Next we demonstrate how data can be queried iteratively and written directly to a compressed file format. This is especially useful when working with very large datasets, or when the data exceeds available system resources. Another reason to save datasets in compressed format is that Pandas can read compressed files just as easily as csvs. Once read into memory, the dataset will expand to the full uncompressed size, but by writing data to compressed format we reduce our overall storage footprint. Here’s the code to do it:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlalchemy</span>
<span id="cb9-5"></span>
<span id="cb9-6">DRIVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQL Server"</span></span>
<span id="cb9-7">SERVER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SERVER"</span></span>
<span id="cb9-8">DATABASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATABASE"</span></span>
<span id="cb9-9">CHUNKSIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span></span>
<span id="cb9-10">DATA_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"COMPRESSED-SAMPLE-TABLE.csv.gz"</span></span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create connection uri.</span></span>
<span id="cb9-13">conn_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mssql+pyodbc://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>SERVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATABASE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?driver=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DRIVER<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>)</span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize connection.</span></span>
<span id="cb9-16">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  sqlalchemy.create_engine(conn_uri)</span>
<span id="cb9-17">SQL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM SAMPLE_TABLE"</span></span>
<span id="cb9-18">dfiter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(SQL, con<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>conn, chunksize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CHUNKSIZE)</span>
<span id="cb9-19"></span>
<span id="cb9-20">t_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb9-21">trkr, nbrrecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(DATA_PATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> fgz:</span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dfiter:</span>
<span id="cb9-24">        fgz.write(df.to_csv(header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nbrrecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>).encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>))</span>
<span id="cb9-25">        nbrrecs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span>df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieved records </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>((trkr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CHUNKSIZE) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, nbrrecs))</span>
<span id="cb9-27">        trkr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-28"></span>
<span id="cb9-29">t_tot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t_i</span>
<span id="cb9-30">retrieval_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nbrrecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> t_tot</span>
<span id="cb9-31"></span>
<span id="cb9-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb9-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieved </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> records in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.0f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> recs/sec.)."</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(</span>
<span id="cb9-34">        nbrrecs, t_tot, retrieval_rate</span>
<span id="cb9-35">        )</span>
<span id="cb9-36">    ) </span></code></pre></div>
<p>The only expression requiring explanation is within <code>df.to_csv</code>, where <code>header=nbrrecs==0</code> is specified. This ensures that headers are written for the first batch of records only, and ignored for subsequent batches (100,000 record chunks are read in at each iteration).</p>
<p>To read the compressed file back into Pandas, use the <code>pd.read_csv</code> function specifying the compression type (in this example we used “gzip” - other options are “zip”, “bz2” or “xz”):</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">In [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]: df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(DATA_PATH, compression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gzip"</span>)</span>
<span id="cb10-2">In [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]: df.shape</span>
<span id="cb10-3">Out[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]: (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">678013</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>


</section>

 ]]></description>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/sqlserver-from-python/sqlserver-from-python.html</guid>
  <pubDate>Sat, 01 Jun 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Hyperparameter Search and Classifier Threshold Selection</title>
  <link>https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding.html</link>
  <description><![CDATA[ 





<p>The following notebook demonstrates how to use <code>GridSearchCV</code> to identify optimal hyperparameters for a given model and metric, and alternatives for selecting a classifier threshold in scikit-learn.</p>
<p>First we load the breast cancer dataset. We will forgo any pre-processing, but create separate train and validation sets:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_breast_cancer</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-8"></span>
<span id="cb1-9">np.set_printoptions(suppress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-10">pd.options.mode.chained_assignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-11">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-12">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_breast_cancer()</span>
<span id="cb1-15">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>]</span>
<span id="cb1-16">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create train, validation and test splits. </span></span>
<span id="cb1-20">Xtrain, Xvalid, ytrain, yvalid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.20</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Xtrain.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Xtrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Xvalid.shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Xvalid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Xtrain.shape: (455, 30)
Xvalid.shape: (114, 30)</code></pre>
</div>
</div>
<section id="hyperparameter-search" class="level2">
<h2 class="anchored" data-anchor-id="hyperparameter-search">Hyperparameter Search</h2>
<p>A random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting (see documentation <a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#sklearn-ensemble-randomforestclassifier">here</a>).</p>
<p>The <code>RandomForestClassifier</code> takes a number of hyperparameters. It can be difficult to determine which values to set these to manually, so instead we can perform a cross-validated grid search over a number of candidate values to determine which hyperparmeter combination is best for our data and specified metric. <code>GridSearchCV</code>is part of scikit-learn, and is a method used to find the best possible configuration of hyperparameters for optimal performance. It works as follows:</p>
<ol type="1">
<li><p><strong>Define a parameter grid</strong>: The grid is a dictionary that maps parameter names to the values that should be tested. These parameters are specific to the model you are working to optimize.</p></li>
<li><p><strong>Specify a model</strong>: Choose a model that you want to optimize using <code>GridSearchCV</code>. This model is not trained yet; it’s just passed in with it’s default parameters.</p></li>
<li><p><strong>Cross-validation setup</strong>: <code>GridSearchCV</code> uses cross-validation to evaluate each combination of parameter values provided in the grid. You need to specify the number of folds (splits) for the cross-validation process (this is the <code>cv</code> parameter). Common choices are 5 or 10 folds, depending on the size of your dataset and how thorough you want the search to be.</p></li>
<li><p><strong>Search Execution</strong>: With the parameter grid, model, and cross-validation setup, <code>GridSearchCV</code> systematically works through multiple combinations of parameter sets, cross-validating as it goes to determine which configuration gives the best performance based on a score function. The performance is often measured using metrics like accuracy, precision or recall for classification problems or mean squared error for regression problems.</p></li>
<li><p><strong>Results:</strong> Finally, <code>GridSearchCV</code> provides the best parameters, allowing you to understand which parameters work best for your model. Additionally, it can provide other results like the score for each parameter combination, allowing for deeper analysis of how different parameter values impact model performance.</p></li>
</ol>
<p><br></p>
<p>The documentation for <code>GridSearchCV</code> is available <a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html#sklearn.model_selection.GridSearchCV">here</a>.</p>
<p><br></p>
<p>In the next cell, we assess the following <code>RandomForestClassifier</code> hyperparameters:</p>
<ul>
<li><code>n_estimators</code>: [100, 150, 250]</li>
<li><code>min_samples_leaf</code>: [2, 3, 4]</li>
<li><code>ccp_alpha</code>: [0, .1, .2, .3]</li>
</ul>
<p>For the metric, recall is used since the cost of a false negative is high (not detecting breast cancer). This means the hyperparameter combination with the maximum average recall over the k-folds will be selected as the best parameter set.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Example using GridSearchCV to identify optimal hyperparameters w.r.t. recall.</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Note that within GridSearchCV, cv represents the number of folds for </span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">k-Fold cross validation.</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb3-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GridSearchCV</span>
<span id="cb3-8"></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create parameter grid as dictionary.</span></span>
<span id="cb3-11">param_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_estimators"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>],</span>
<span id="cb3-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min_samples_leaf"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb3-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ccp_alpha"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.3</span>]</span>
<span id="cb3-15">    }</span>
<span id="cb3-16"></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pass model and param_grid into GridSearchCV.</span></span>
<span id="cb3-19">mdl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GridSearchCV(</span>
<span id="cb3-20">    RandomForestClassifier(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">516</span>), </span>
<span id="cb3-21">    param_grid, </span>
<span id="cb3-22">    scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"recall"</span>, </span>
<span id="cb3-23">    cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb3-24">    )</span>
<span id="cb3-25">    </span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit model on training set. This can take a while depending on the number of </span></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hyperparameter combinations in param_grid.</span></span>
<span id="cb3-28">mdl.fit(Xtrain, ytrain)</span>
<span id="cb3-29"></span>
<span id="cb3-30"></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print optimal parameters.</span></span>
<span id="cb3-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"best parameters: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mdl<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_params_<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-33"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>best parameters: {'ccp_alpha': 0, 'min_samples_leaf': 4, 'n_estimators': 100}</code></pre>
</div>
</div>
<p><br></p>
<p>For random forests, boosting models and other tree-based ensemble methods, we can obtain a summary of the relative importance of each of the input features. This is available in the <code>mdl.best_estimator_.feature_importances_</code> attribute. We can plot feature importances in decreasing order as follows:</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"></span>
<span id="cb5-2">imp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.best_estimator_.feature_importances_</span>
<span id="cb5-3"></span>
<span id="cb5-4">rf_imp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(imp, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature_names"</span>]).sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-7">rf_imp.plot.bar(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb5-8">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomForestClassifier feature importances"</span>)</span>
<span id="cb5-9">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean decrease in impurity"</span>)</span>
<span id="cb5-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>In terms of mean decrease in impurity, the top 7 features are assigned the highest importance, with the remaining features deemed not as relevant. For more information on how feature importance is calculated, see <a href="https://scikit-learn.org/stable/auto_examples/ensemble/plot_forest_importances.html">here</a>.</p>
<p><br></p>
<p>The resulting <code>mdl</code> object can be used to make predictions on the validation set (<code>mdl</code> exposes the <code>RandomForestClassifier</code> with optimal hyperparameters set). We use <code>mdl.predict_proba</code> to get probabilities on [0, 1], with values closer to 1 representing positive predicted instances of breast cancer on the validation set:</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict_proba(Xvalid)[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb6-3"></span>
<span id="cb6-4">ypred</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([0.005     , 0.82743637, 0.97088095, 0.        , 0.        , 1.        , 0.98020202, 0.67380556, 0.        , 0.99333333, 0.9975    , 0.30048576, 0.9528113 , 0.99666667, 0.04102381, 0.99444444, 1.        , 0.828226  , 0.        , 0.        , 0.97916667, 1.        , 0.99607143, 0.90425163, 0.        , 0.02844156, 0.99333333, 0.98183333, 0.9975    , 0.08869769, 0.97369841, 0.        , 1.        , 0.71100866, 0.96022727, 0.        , 0.71200885, 0.06103175, 0.005     , 0.99490476, 0.1644127 , 0.        , 0.23646934, 1.        , 0.57680164, 0.64901715, 0.9975    , 0.61790818, 0.95509668, 0.99383333, 0.04570455, 0.97575758, 1.        , 0.47115815, 0.92422619, 0.77371415, 0.        , 1.        , 0.26198657, 0.        , 0.28206638, 0.95216162, 0.98761905, 0.99464286, 0.98704762, 0.85579351, 0.10036905, 0.00222222, 0.98011905, 0.99857143, 0.92285967, 0.95180556, 0.97546947, 0.84433189, 0.005     , 0.99833333, 0.83616339, 1.        , 0.9955    , 1.        , 0.99833333, 1.        ,
       0.86399315, 0.9807381 , 0.        , 0.99833333, 0.9975    , 0.        , 0.98733333, 0.96822727, 0.23980827, 0.7914127 , 0.        , 0.98133333, 1.        , 1.        , 0.89251019, 0.9498226 , 0.18943254, 0.83494391, 0.9975    , 1.        , 0.77079113, 0.99722222, 0.30208297, 1.        , 0.92111977, 0.99428571, 0.91936508, 0.47118074, 0.98467172, 0.006     , 0.05750305, 0.96954978])</code></pre>
</div>
</div>
<p>Note that scikit-learn <code>predict_proba</code> outputs an nx2 dimensional array, where the first column represents the probability of class 0 and the second column the probability of class 1 (has breast cancer). Each row will sum to 1. We will work with the probabilities of the class we’re interested in analyzing, so we extract only the values from the positive class (the second column), that’s why we call <code>mdl.predict_proba(Xvalid)[:,1]</code>.</p>
<p><br></p>
<section id="threshold-selection" class="level3">
<h3 class="anchored" data-anchor-id="threshold-selection">Threshold Selection</h3>
<p>In order to master machine learning, it is necessary to learn a variety of minor concepts that underpin these systems. One such concept is setting the optimal classification threshold.</p>
<p>By default, for probabilistic classifiers scikit-learn uses a threshold of .50 to distinguish between positive and negative class instances. The predicted classes are obtained by calling <code>mdl.predict</code>. Here’s a side by side comparison of the model predicted probabilities and predicted classes:</p>
<div id="cell-12" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted probabilities.</span></span>
<span id="cb8-3">ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict_proba(Xvalid)[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted classes.</span></span>
<span id="cb8-7">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mdl.predict(Xvalid).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine probabilities and predicted class labels.</span></span>
<span id="cb8-11">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate([ypred, yhat], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-12"></span>
<span id="cb8-13">preds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([[0.005     , 0.        ],
       [0.82743637, 1.        ],
       [0.97088095, 1.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [1.        , 1.        ],
       [0.98020202, 1.        ],
       [0.67380556, 1.        ],
       [0.        , 0.        ],
       [0.99333333, 1.        ],
       [0.9975    , 1.        ],
       [0.30048576, 0.        ],
       [0.9528113 , 1.        ],
       [0.99666667, 1.        ],
       [0.04102381, 0.        ],
       [0.99444444, 1.        ],
       [1.        , 1.        ],
       [0.828226  , 1.        ],
       [0.        , 0.        ],
       [0.        , 0.        ],
       [0.97916667, 1.        ],
       [1.        , 1.        ],
       [0.99607143, 1.        ],
       [0.90425163, 1.        ],
       [0.        , 0.        ],
       [0.02844156, 0.        ],
       [0.99333333, 1.        ],
       [0.98183333, 1.        ],
       [0.9975    , 1.        ],
       [0.08869769, 0.        ],
       [0.97369841, 1.        ],
       [0.        , 0.        ],
       [1.        , 1.        ],
       [0.71100866, 1.        ],
       [0.96022727, 1.        ],
       [0.        , 0.        ],
       [0.71200885, 1.        ],
       [0.06103175, 0.        ],
       [0.005     , 0.        ],
       [0.99490476, 1.        ],
       [0.1644127 , 0.        ],
       [0.        , 0.        ],
       [0.23646934, 0.        ],
       [1.        , 1.        ],
       [0.57680164, 1.        ],
       [0.64901715, 1.        ],
       [0.9975    , 1.        ],
       [0.61790818, 1.        ],
       [0.95509668, 1.        ],
       [0.99383333, 1.        ],
       [0.04570455, 0.        ],
       [0.97575758, 1.        ],
       [1.        , 1.        ],
       [0.47115815, 0.        ],
       [0.92422619, 1.        ],
       [0.77371415, 1.        ],
       [0.        , 0.        ],
       [1.        , 1.        ],
       [0.26198657, 0.        ],
       [0.        , 0.        ],
       [0.28206638, 0.        ],
       [0.95216162, 1.        ],
       [0.98761905, 1.        ],
       [0.99464286, 1.        ],
       [0.98704762, 1.        ],
       [0.85579351, 1.        ],
       [0.10036905, 0.        ],
       [0.00222222, 0.        ],
       [0.98011905, 1.        ],
       [0.99857143, 1.        ],
       [0.92285967, 1.        ],
       [0.95180556, 1.        ],
       [0.97546947, 1.        ],
       [0.84433189, 1.        ],
       [0.005     , 0.        ],
       [0.99833333, 1.        ],
       [0.83616339, 1.        ],
       [1.        , 1.        ],
       [0.9955    , 1.        ],
       [1.        , 1.        ],
       [0.99833333, 1.        ],
       [1.        , 1.        ],
       [0.86399315, 1.        ],
       [0.9807381 , 1.        ],
       [0.        , 0.        ],
       [0.99833333, 1.        ],
       [0.9975    , 1.        ],
       [0.        , 0.        ],
       [0.98733333, 1.        ],
       [0.96822727, 1.        ],
       [0.23980827, 0.        ],
       [0.7914127 , 1.        ],
       [0.        , 0.        ],
       [0.98133333, 1.        ],
       [1.        , 1.        ],
       [1.        , 1.        ],
       [0.89251019, 1.        ],
       [0.9498226 , 1.        ],
       [0.18943254, 0.        ],
       [0.83494391, 1.        ],
       [0.9975    , 1.        ],
       [1.        , 1.        ],
       [0.77079113, 1.        ],
       [0.99722222, 1.        ],
       [0.30208297, 0.        ],
       [1.        , 1.        ],
       [0.92111977, 1.        ],
       [0.99428571, 1.        ],
       [0.91936508, 1.        ],
       [0.47118074, 0.        ],
       [0.98467172, 1.        ],
       [0.006     , 0.        ],
       [0.05750305, 0.        ],
       [0.96954978, 1.        ]])</code></pre>
</div>
</div>
<p>Notice that when the probability is less that 0.50, the predicted class is 0. When the predicted probability is greater than 0.50, the predicted class is 1. For certain applications, the 0.50 threshold might make sense, for example when your target is balanced or close to balanced (when the number of 0s and 1s in the training set is approximately equal). But for unbalanced datasets, using the default threshold can give misleading results. In what follows, we walkthrough a few approaches that can be used to assess the optimal discrimination threshold for a classifier.</p>
</section>
<section id="use-0.50" class="level3">
<h3 class="anchored" data-anchor-id="use-0.50">1. Use 0.50</h3>
<p>The first approach is the most straightforward: Just use the default scikit-learn threshold of .50. This makes sense when your classes are balanced, but will give misleading results when classes are imbalanced.</p>
<p><br></p>
</section>
<section id="use-1---the-proportion-of-positive-instances-in-the-training-data" class="level3">
<h3 class="anchored" data-anchor-id="use-1---the-proportion-of-positive-instances-in-the-training-data">2. Use 1 - the proportion of positive instances in the training data</h3>
<p>If we look at the number of positives (1s) vs.&nbsp;total samples in our training set, we have:</p>
<div id="cell-16" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Proportion of positives in training set: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ytrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ytrain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Proportion of positives in training set: 0.62</code></pre>
</div>
</div>
<p>We see that 62% of the samples belong to class 1. This is usually not the case. In many classification scenarios, we’re dealing with 10%, 5% or even less than 1% of samples belonging to the positive class.</p>
<p>To illustrate the approach, since 62% percent of the observations belong to the positive class, we would use a threshold of <strong>1 - .62 = .38</strong>. The predicted class labels are then created using the following code:</p>
<div id="cell-18" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating predicted classes based on adjusted classifier threshold. </span></span>
<span id="cb12-3">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.38</span></span>
<span id="cb12-4"></span>
<span id="cb12-5">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thresh, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Now any sample with a predicted probability less than or equal to .38 will be assigned to class 0, and samples with predicted probability greater than .38 are assigned to the positive class.</p>
<p>If we’re dealing with a highly imbalanced dataset with only 1% positive instances, we would use <strong>1 - .01 = .99</strong> as the threshold using this method.</p>
<p><br></p>
</section>
<section id="use-best-f1-score" class="level3">
<h3 class="anchored" data-anchor-id="use-best-f1-score">3. Use best f1-score</h3>
<p>The f1-score is the geometric average of precision and recall. We can compute precision and recall for a number of different thresholds then select the threshold that maximizes the f1-score. This is a suitable approach if your classification task weighs precision and recall equally. Although this isn’t the case for our breast cancer classifier (we want to maximize recall since the cost of a false negative is high), the approach is demonstrated in the next cell:</p>
<div id="cell-20" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"></span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> precision_recall_curve</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get precision and recall for various thresholds.</span></span>
<span id="cb13-5">p, r, thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(yvalid, ypred)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute f1-score for each threshold.</span></span>
<span id="cb13-8">f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> r) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify threshold that maximizes f1-score.</span></span>
<span id="cb13-11">best_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thresh[np.argmax(f1)]</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Threshold using optimal f1-score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>best_thresh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Threshold using optimal f1-score: 0.471.</code></pre>
</div>
</div>
<p>Using this method, we would set the discrimination threshold to <strong>.471</strong>, and would obtain the predicted class labels the same way as before:</p>
<div id="cell-22" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"></span>
<span id="cb15-2">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.471</span></span>
<span id="cb15-3"></span>
<span id="cb15-4">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thresh, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p><br></p>
</section>
<section id="inspection-of-roc-curve" class="level3">
<h3 class="anchored" data-anchor-id="inspection-of-roc-curve">4. Inspection of ROC curve</h3>
<p>The Receiver Operating Characteristic (ROC) curve plots the true positive rate (TPR) against the false positive rate (FPR) at various classification thresholds. Typically we’re interested in using a threshold that maximizes TPR while minimizing FPR, which is the point (0, 1). The curve starts with a threshold of 1 at the far left and decreases towards 0 as the x-axis increases.</p>
<p>We can plot the ROC curve in scikit-learn using the code below. Note that <code>ypred</code> are predicted probabilities and <code>yvalid</code> are class labels (1s or 0s).</p>
<div id="cell-24" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"></span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RocCurveDisplay</span>
<span id="cb16-3"></span>
<span id="cb16-4">roc_disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RocCurveDisplay.from_predictions(</span>
<span id="cb16-5">    yvalid, ypred, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomForestClassifier"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#191964"</span></span>
<span id="cb16-6">    )</span>
<span id="cb16-7">roc_disp.ax_.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ROC curve"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb16-8">roc_disp.ax_.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Using approach 4, the optimal threshold would be somewhere between .70-.80, which is much higher than what is indicated using the other methods so far. Ultimately it is up to you to determine which threshold makes the most sense, but intuitively, a threshold of .70-.80 seems too high when the prevalence of the positive class in the training data is 62%.</p>
<p><br></p>
</section>
<section id="inspection-of-the-precision-recall-curve" class="level3">
<h3 class="anchored" data-anchor-id="inspection-of-the-precision-recall-curve">5. Inspection of the precision-recall curve</h3>
<p>The precision-recall curve is a graphical representation used in binary classification to evaluate the performance of a classification model at different probability thresholds. This curve shows the trade-off between precision and recall for a number of different thresholds. The curve plots recall on the x-axis and precision on the y-axis.</p>
<p>The curve starts from the rightmost part of the graph. As the threshold for classifying positive instances decreases, recall increases, and precision can either increase or decrease, but typically it decreases because the model starts to classify more instances as positive, including both true positives and false positives.</p>
<p>The top-right corner of the graph (high precision, high recall) represents the ideal point, where the classifier perfectly identifies all positive cases with no false positives. Generally, we’d like to select a threshold that corresponds to a point closest to top-right corner of the graph.</p>
<p>We can plot the precision-recall curve in scikit-learn using the code below. Note that <code>ypred</code> are predicted probabilities and <code>yvalid</code> are class labels (1s or 0s).</p>
<div id="cell-27" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PrecisionRecallDisplay</span>
<span id="cb17-3"></span>
<span id="cb17-4">pr_disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PrecisionRecallDisplay.from_predictions(</span>
<span id="cb17-5">    yvalid, ypred, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomForestClassifier"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#CD0066"</span></span>
<span id="cb17-6">    )</span>
<span id="cb17-7">pr_disp.ax_.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Precision-Recall curve"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb17-8">pr_disp.ax_.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb17-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Based on the plot, would want to select the threshold that corresponds to a recall of about .95, since this is close to the point (1, 1). This can be determined using the following code:</p>
<div id="cell-29" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"></span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> precision_recall_curve</span>
<span id="cb18-3"></span>
<span id="cb18-4">p, r, thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(yvalid, ypred)</span>
<span id="cb18-5"></span>
<span id="cb18-6">best_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thresh[np.where(r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.95</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Selected threshold using precision-recall curve: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>best_thresh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Selected threshold using precision-recall curve: 0.674.</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="inspection-of-precision-and-recall-as-a-function-of-threshold" class="level3">
<h3 class="anchored" data-anchor-id="inspection-of-precision-and-recall-as-a-function-of-threshold">6. Inspection of precision and recall as a function of threshold</h3>
<p>It is also possible to plot precision and recall as two separate series against threshold on the x-axis. The goal is to identify a point where precision and recall intersect. Using this approach may be suitable in some scenarios.</p>
<div id="cell-31" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"></span>
<span id="cb20-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> precision_recall_curve</span>
<span id="cb20-3"></span>
<span id="cb20-4">p, r, thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(yvalid, ypred)</span>
<span id="cb20-5">p, r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], r[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb20-6"></span>
<span id="cb20-7">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), tight_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-8">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"precision &amp; recall vs. threshold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb20-9">ax.plot(thresh, p, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"precision"</span>)</span>
<span id="cb20-10">ax.plot(thresh, r, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.25</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"recall"</span>)</span>
<span id="cb20-11">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"threshold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb20-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax.set_xticks(np.arange(tmax+1))</span></span>
<span id="cb20-13">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb20-14">ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span>, labelsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb20-15">ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb20-16">ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb20-17">ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-18">ax.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"upper right"</span>, fancybox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, framealpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb20-19"></span>
<span id="cb20-20">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The precision and recall series intersect right after .60, therefore method #5 would set the threshold to roughly .60.</p>
<p><br></p>
</section>
<section id="assessing-a-classifier" class="level3">
<h3 class="anchored" data-anchor-id="assessing-a-classifier">Assessing a Classifier</h3>
<p>Once a threshold has been selected, the predictive power of the classifier can be assessed. To do this, we will look at the confusion matrix as well as the <code>sklearn.metrics.classification_report</code>. Note that both diagnostics require actual and predicted labels. Once we’ve settled on a threshold, model assessment is performed comparing actual vs.&nbsp;predicted labels. In what follows, the 0.471 threshold obtained from method #3 will be used as the classification threshold.</p>
<p>Technically, once we’ve decided on a threshold, we should then assess the performance of the model on a separate test set. However, for the purposes of demonstration, we are going to re-use the validation set.</p>
<p>We start by creating the confusion matrix:</p>
<div id="cell-33" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"></span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ConfusionMatrixDisplay</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine predicted classes using the .471 threshold.</span></span>
<span id="cb21-5">thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.471</span></span>
<span id="cb21-6">yhat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(ypred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> thresh, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-7"></span>
<span id="cb21-8">cm_disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfusionMatrixDisplay.from_predictions(yvalid, yhat, colorbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb21-9">cm_disp.ax_.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"mm confusion matrix (thresh=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>thresh<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.3}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb21-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The output indicates:</p>
<ul>
<li>There are 76 True Positives (TP).</li>
<li>There are 34 True Negatives (TN).</li>
<li>There are 4 False Positives (FP).</li>
<li>There are 0 False Negatives (FN).</li>
</ul>
<p><br></p>
<p>Next we inspect the classification report. This also takes actual and predicted labels, and returns a summary of common classifier metrics:</p>
<div id="cell-35" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"></span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(classification_report(yvalid, yhat))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              precision    recall  f1-score   support

           0       1.00      0.89      0.94        38
           1       0.95      1.00      0.97        76

    accuracy                           0.96       114
   macro avg       0.97      0.95      0.96       114
weighted avg       0.97      0.96      0.96       114
</code></pre>
</div>
</div>
<p>Overall this is very good performance.</p>


</section>
</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Python</category>
  <guid>https://www.jtrive.com/posts/classifier-thresholding/classifier-thresholding.html</guid>
  <pubDate>Sun, 28 Apr 2024 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
